{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UploadFile($data: UploadFileInput!) {\\n        files {\\n            uploadFile(data: $data) {\\n                data {\\n                    data\\n                    file {\\n                        type\\n                        name\\n                        size\\n                        key\\n                    }\\n                }\\n                error {\\n                    message\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport get from \"lodash.get\";\nvar UPLOAD_FILE = gql(_templateObject());\nexport default (function () {\n  return {\n    type: \"file-uploader\",\n    name: \"file-uploader\",\n    upload: function () {\n      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, _ref) {\n        var apolloClient, presignedPostPayload;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                apolloClient = _ref.apolloClient;\n                _context.next = 3;\n                return apolloClient.mutate({\n                  mutation: UPLOAD_FILE,\n                  variables: {\n                    data: {\n                      size: file.size,\n                      name: file.name,\n                      type: file.type\n                    }\n                  }\n                });\n\n              case 3:\n                presignedPostPayload = _context.sent;\n                presignedPostPayload = get(presignedPostPayload, \"data.files.uploadFile\");\n\n                if (!presignedPostPayload.error) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.log(presignedPostPayload.error.message); // eslint-disable-line\n\n                return _context.abrupt(\"return\");\n\n              case 8:\n                _context.next = 10;\n                return new Promise(function (resolve, reject) {\n                  var formData = new window.FormData();\n                  Object.keys(presignedPostPayload.data.data.fields).forEach(function (key) {\n                    formData.append(key, presignedPostPayload.data.data.fields[key]);\n                  });\n                  formData.append(\"file\", file);\n                  var xhr = new window.XMLHttpRequest(); // eslint-disable-line\n\n                  xhr.open(\"POST\", presignedPostPayload.data.data.url, true);\n                  xhr.send(formData);\n\n                  xhr.onload = function () {\n                    if (this.status === 204) {\n                      resolve(presignedPostPayload.data.file);\n                      return;\n                    }\n\n                    reject(this.responseText);\n                  };\n                });\n\n              case 10:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function upload(_x, _x2) {\n        return _upload.apply(this, arguments);\n      }\n\n      return upload;\n    }()\n  };\n});","map":null,"metadata":{},"sourceType":"module"}