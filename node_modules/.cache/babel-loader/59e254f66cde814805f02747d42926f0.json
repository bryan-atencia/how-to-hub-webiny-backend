{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Chips, Chip } from \"@webiny/ui/Chips\";\nimport { css } from \"emotion\";\nimport keycode from \"keycode\";\nimport { ReactComponent as BaselineCloseIcon } from \"@svgr/webpack!./icons/baseline-close-24px.svg\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nvar tagsStyle = /*#__PURE__*/css({\n  position: \"relative\",\n  \".mdc-elevation--z1\": {\n    position: \"absolute\",\n    width: \"calc(100% - 2px)\",\n    left: 1,\n    top: 56,\n    zIndex: 10,\n    maxHeight: 200,\n    overflowY: \"scroll\",\n    backgroundColor: \"var(--mdc-theme-surface)\"\n  },\n  ul: {\n    listStyle: \"none\",\n    width: \"100%\",\n    padding: 0,\n    li: {\n      padding: 10\n    }\n  }\n}, \"label:tagsStyle;\");\nexport var Tags = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tags, _React$Component);\n\n  var _super = _createSuper(Tags);\n\n  function Tags() {\n    var _this;\n\n    _classCallCheck(this, Tags);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      inputValue: \"\"\n    });\n\n    return _this;\n  }\n\n  _createClass(Tags, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          validation = _this$props.validation,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onChange = _this$props.onChange,\n          description = _this$props.description,\n          otherInputProps = _objectWithoutProperties(_this$props, [\"validation\", \"value\", \"disabled\", \"onChange\", \"description\"]);\n\n      var inputProps = _objectSpread(_objectSpread({}, otherInputProps), {}, {\n        value: this.state.inputValue,\n        onChange: function onChange(inputValue) {\n          _this2.setState({\n            inputValue: inputValue\n          });\n        },\n        onKeyDown: function onKeyDown(e) {\n          if (!onChange) {\n            return;\n          }\n\n          var newValue = Array.isArray(value) ? _toConsumableArray(value) : [];\n          var inputValue = _this2.state.inputValue || \"\";\n\n          switch (keycode(e)) {\n            case \"enter\":\n              if (inputValue) {\n                newValue.push(inputValue);\n                onChange(newValue);\n\n                _this2.setState({\n                  inputValue: \"\"\n                });\n              }\n\n              break;\n\n            case \"backspace\":\n              if (newValue.length && !inputValue) {\n                newValue.splice(-1, 1);\n                onChange(newValue);\n                break;\n              }\n\n          }\n        }\n      });\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: tagsStyle\n      }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Input, inputProps), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {\n        error: true\n      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description), Array.isArray(value) && value.length ? /*#__PURE__*/React.createElement(Chips, {\n        disabled: disabled\n      }, value.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(Chip, {\n          label: item,\n          trailingIcon: /*#__PURE__*/React.createElement(BaselineCloseIcon, null),\n          key: \"\".concat(item, \"-\").concat(index),\n          onRemove: function onRemove() {\n            // On removal, let's update the value and call \"onChange\" callback.\n            if (onChange) {\n              var newValue = _toConsumableArray(value);\n\n              newValue.splice(index, 1);\n              onChange(newValue);\n            }\n          }\n        });\n      })) : null));\n    }\n  }]);\n\n  return Tags;\n}(React.Component);\n\n_defineProperty(Tags, \"defaultProps\", {\n  validation: {\n    isValid: null\n  }\n});\n\nexport default Tags;","map":null,"metadata":{},"sourceType":"module"}