{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _get from \"lodash/get\";\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport invariant from \"invariant\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport createRootReducer from \"./createRootReducer\";\nimport createMiddleware, { wrapMiddleware } from \"./createMiddleware\";\nexport { connect } from \"./connect\";\nexport var Redux = /*#__PURE__*/function () {\n  function Redux() {\n    _classCallCheck(this, Redux);\n\n    _defineProperty(this, \"actionMeta\", void 0);\n\n    _defineProperty(this, \"store\", void 0);\n\n    _defineProperty(this, \"middleware\", void 0);\n\n    _defineProperty(this, \"reducers\", void 0);\n\n    _defineProperty(this, \"higherOrderReducers\", void 0);\n\n    this.reducers = [];\n    this.higherOrderReducers = [];\n    this.middleware = [];\n    this.actionMeta = {};\n  }\n\n  _createClass(Redux, [{\n    key: \"createAction\",\n    value: function createAction(type) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return function () {\n        var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return {\n          type: type,\n          payload: payload,\n          meta: _objectSpread(_objectSpread({}, _this.actionMeta), {}, {\n            log: options.hasOwnProperty(\"log\") ? options.log : true\n          }, meta)\n        };\n      };\n    }\n  }, {\n    key: \"addReducer\",\n    value: function addReducer(actions, statePath, reducer) {\n      invariant(reducer, \"Must pass a valid reducer function!\");\n      this.reducers.push({\n        actions: actions,\n        statePath: statePath,\n        reducer: reducer\n      });\n    }\n  }, {\n    key: \"addHigherOrderReducer\",\n    value: function addHigherOrderReducer(actions, statePath, factory) {\n      this.higherOrderReducers.push({\n        actions: actions,\n        statePath: statePath,\n        reducer: factory()\n      });\n    }\n  }, {\n    key: \"addMiddleware\",\n    value: function addMiddleware(actions, middleware) {\n      this.middleware.push({\n        actions: actions,\n        middleware: middleware\n      });\n    }\n  }, {\n    key: \"initStore\",\n    value: function initStore() {\n      var INIT_STATE = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var actionMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.actionMeta = actionMeta; // dev tool\n      // @ts-ignore\n\n      var reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n      var composeEnhancers = reduxDevTools && reduxDevTools({\n        predicate: function predicate(state, action) {\n          return _get(action, \"meta.log\", true);\n        }\n      }) || compose;\n      var middlewareFromPlugins = getPlugins(\"pb-editor-redux-middleware\").map(function (pl) {\n        return wrapMiddleware(pl.middleware, Array.isArray(pl.actions) ? pl.actions : null);\n      }).reverse();\n      this.store = createStore(createRootReducer(INIT_STATE, this), composeEnhancers(applyMiddleware.apply(void 0, _toConsumableArray(middlewareFromPlugins).concat(_toConsumableArray(createMiddleware(this))))));\n      return this.store;\n    }\n  }]);\n\n  return Redux;\n}();\nvar redux = new Redux();\nexport { redux };\nexport var createAction = function createAction(type, options) {\n  return redux.createAction(type, options);\n};\nexport var addReducer = function addReducer(actions, statePath, reducer) {\n  redux.addReducer(actions, statePath, reducer);\n};\nexport var addHigherOrderReducer = function addHigherOrderReducer(actions, statePath, factory) {\n  redux.addHigherOrderReducer(actions, statePath, factory);\n};\nexport var addMiddleware = function addMiddleware(actions, middleware) {\n  redux.addMiddleware(actions, middleware);\n};\nexport var dispatch = function dispatch(action) {\n  return redux.store.dispatch(action);\n};","map":null,"metadata":{},"sourceType":"module"}