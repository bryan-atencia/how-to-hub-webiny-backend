{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { set } from \"dot-prop-immutable\";\nimport { dispatch } from \"@webiny/app-page-builder/editor/redux\";\nimport { createElement, createColumn, cloneElement, addElementToParent } from \"@webiny/app-page-builder/editor/utils\";\nimport { updateElement, deleteElement, elementCreated } from \"@webiny/app-page-builder/editor/actions\";\nimport \"./actions\";\nimport Row from \"./Row\";\nimport { ReactComponent as RowIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/row-icon.svg\";\nexport default (function () {\n  var PreviewBox = /*#__PURE__*/styled(\"div\", {\n    target: \"et1srml0\",\n    label: \"PreviewBox\"\n  })({\n    textAlign: \"center\",\n    height: 50,\n    svg: {\n      height: 50,\n      width: 50\n    }\n  });\n  return {\n    name: \"pb-editor-page-element-row\",\n    type: \"pb-editor-page-element\",\n    elementType: \"row\",\n    toolbar: {\n      title: \"Row\",\n      group: \"pb-editor-element-group-layout\",\n      // Render element preview\n      preview: function preview() {\n        return /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(RowIcon, null));\n      }\n    },\n    settings: [\"pb-editor-page-element-settings-background\", \"pb-editor-page-element-settings-animation\", \"\", \"pb-editor-page-element-settings-border\", \"pb-editor-page-element-settings-shadow\", \"\", \"pb-editor-page-element-settings-padding\", \"pb-editor-page-element-settings-margin\", \"pb-editor-page-element-settings-width\", \"\", \"pb-editor-page-element-settings-clone\", \"pb-editor-page-element-settings-delete\", \"\"],\n    // Target drop zones that will accept this type\n    target: [\"block\", \"column\"],\n    // This function is called when `createElement` is called for this plugin\n    create: function create() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var row = _objectSpread({\n        type: \"row\",\n        elements: [],\n        data: {\n          settings: {\n            margin: {\n              desktop: {\n                all: 0\n              },\n              mobile: {\n                all: 0\n              }\n            },\n            padding: {\n              desktop: {\n                all: 0\n              },\n              mobile: {\n                all: 0\n              }\n            }\n          }\n        }\n      }, options); // A row MUST contain at least 1 column\n\n\n      if (!row.elements.length) {\n        row.elements.push(createColumn({\n          data: {\n            width: 100\n          }\n        }));\n      }\n\n      return row;\n    },\n    // Render element in editor\n    render: function render(props) {\n      return /*#__PURE__*/React.createElement(Row, props);\n    },\n    // This callback is executed when another element is dropped on the drop zones with type \"row\"\n    onReceived: function onReceived(_ref) {\n      var source = _ref.source,\n          target = _ref.target,\n          _ref$position = _ref.position,\n          position = _ref$position === void 0 ? null : _ref$position;\n      var dispatchNew = false;\n      var element;\n\n      if (source.path) {\n        element = cloneElement(source);\n      } else {\n        dispatchNew = true;\n        element = createElement(source.type, {}, target);\n      }\n\n      var column;\n\n      if (element.type !== \"column\") {\n        column = createColumn({\n          elements: [element]\n        });\n      } // Add new child element\n\n\n      var row = addElementToParent(column || element, target, position); // Recalculate column widths\n\n      row = distributeColumnWidths(row); // Dispatch update action\n\n      dispatch(updateElement({\n        element: row\n      }));\n\n      if (source.path) {\n        dispatch(deleteElement({\n          element: source\n        }));\n      }\n\n      if (dispatchNew) {\n        dispatch(elementCreated({\n          element: element,\n          source: source\n        }));\n      }\n    },\n    onChildDeleted: function onChildDeleted(_ref2) {\n      var element = _ref2.element;\n      dispatch(updateElement({\n        element: distributeColumnWidths(element)\n      }));\n    }\n  };\n});\n\nvar distributeColumnWidths = function distributeColumnWidths(row) {\n  var width = Math.round(100 / row.elements.length * 100) / 100;\n  var columns = row.elements.map(function (el) {\n    return set(el, \"data.width\", width);\n  });\n  return set(row, \"elements\", columns);\n};","map":null,"metadata":{},"sourceType":"module"}