{"ast":null,"code":"import _get from \"lodash/get\";\nimport React, { useCallback } from \"react\";\nimport { set } from \"dot-prop-immutable\";\nimport { css } from \"emotion\";\nimport { useHandlers } from \"@webiny/app/hooks/useHandlers\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/components/ColorPicker\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport Select from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Select\";\nimport SingleImageUpload from \"@webiny/app-admin/components/SingleImageUpload\";\nimport BackgroundPositionSelector from \"./BackgroundPositionSelector\";\nvar imageSelect = /*#__PURE__*/css({\n  width: \"100%\"\n}, \"label:imageSelect;\");\nvar root = \"data.settings.background\";\n\nvar Settings = function Settings(props) {\n  var _useHandlers = useHandlers(props, {\n    setImage: function setImage(_ref) {\n      var element = _ref.element,\n          updateElement = _ref.updateElement;\n      return function (image) {\n        if (!image) {\n          updateElement({\n            element: set(element, \"\".concat(root, \".image.file\"), null),\n            history: true\n          });\n        } else {\n          updateElement({\n            element: set(element, \"\".concat(root, \".image.file\"), image),\n            history: true\n          });\n        }\n      };\n    },\n    setScaling: function setScaling(_ref2) {\n      var element = _ref2.element,\n          updateElement = _ref2.updateElement;\n      return function (value) {\n        updateElement({\n          element: set(element, \"\".concat(root, \".image.scaling\"), value),\n          history: true\n        });\n      };\n    },\n    setPosition: function setPosition(_ref3) {\n      var element = _ref3.element,\n          updateElement = _ref3.updateElement;\n      return function (position) {\n        updateElement({\n          element: set(element, \"\".concat(root, \".image.position\"), position),\n          history: true\n        });\n      };\n    },\n    setColor: function setColor(_ref4) {\n      var element = _ref4.element,\n          updateElement = _ref4.updateElement;\n      return function (value, history) {\n        updateElement({\n          element: set(element, \"\".concat(root, \".color\"), value),\n          history: history\n        });\n      };\n    }\n  }),\n      setImage = _useHandlers.setImage,\n      setScaling = _useHandlers.setScaling,\n      setPosition = _useHandlers.setPosition,\n      setColor = _useHandlers.setColor;\n\n  var onColorChange = useCallback(function (value) {\n    return setColor(value, false);\n  }, [setColor]);\n  var onColorChangeComplete = useCallback(function (value) {\n    return setColor(value);\n  }, [setColor]);\n  var element = props.element,\n      options = props.options;\n\n  var bg = _get(element, \"data.settings.background\");\n\n  var imageSrc = _get(bg, \"image.file.src\");\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {\n    label: \"Color\"\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(ColorPicker, {\n    value: _get(bg, \"color\", \"#fff\"),\n    onChange: onColorChange,\n    onChangeComplete: onColorChangeComplete\n  })))), options.image !== false && /*#__PURE__*/React.createElement(Tab, {\n    label: \"Image\"\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(SingleImageUpload, {\n    className: imageSelect,\n    onChange: setImage,\n    value: {\n      src: imageSrc\n    }\n  }))), /*#__PURE__*/React.createElement(Select, {\n    disabled: !imageSrc,\n    label: \"Scaling\",\n    value: _get(bg, \"image.scaling\"),\n    updateValue: setScaling\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"cover\"\n  }, \"Cover\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"contain\"\n  }, \"Contain\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"originalSize\"\n  }, \"Original size\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"tile\"\n  }, \"Tile\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"tileHorizontally\"\n  }, \"Tile Horizontally\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"tileVertically\"\n  }, \"Tile Vertically\")), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(BackgroundPositionSelector, {\n    disabled: !imageSrc,\n    value: _get(bg, \"image.position\"),\n    onChange: setPosition\n  }))))));\n};\n\nexport default connect(function (state) {\n  return {\n    element: getActiveElement(state)\n  };\n}, {\n  updateElement: updateElement\n})(Settings);","map":null,"metadata":{},"sourceType":"module"}