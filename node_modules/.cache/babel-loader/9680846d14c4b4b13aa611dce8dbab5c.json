{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _get from \"lodash/get\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n        mailchimp {\\n            getSettings {\\n                data {\\n                    enabled\\n                    apiKey\\n                }\\n            }\\n            listLists {\\n                data {\\n                    id\\n                    name\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useApolloClient } from \"react-apollo\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { css } from \"emotion\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Form } from \"@webiny/form\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport MailchimpElement from \"./MailchimpElement\";\nimport settingsGql from \"./graphql\";\nimport { validation } from \"@webiny/validation\";\nvar formPreview = /*#__PURE__*/css({\n  padding: 25,\n  border: \"1px solid var(--mdc-theme-background)\",\n  overflow: \"scroll\"\n}, \"label:formPreview;\");\nvar saveApiKeyButtonWrapper = /*#__PURE__*/css({\n  textAlign: \"right\",\n  marginTop: 10\n}, \"label:saveApiKeyButtonWrapper;\");\nvar enableMailchimpLink = /*#__PURE__*/css({\n  cursor: \"pointer\"\n}, \"label:enableMailchimpLink;\");\nvar MAILCHIMP_SETTINGS = gql(_templateObject());\n\nvar MailchimpElementAdvancedSettings = function MailchimpElementAdvancedSettings(_ref) {\n  var Bind = _ref.Bind;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var client = useApolloClient();\n  var submitApiKeyForm = useHandler({}, function () {\n    return /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var _ref2$data, data, settingsLists, response, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref2$data = _ref2.data, data = _ref2$data === void 0 ? {} : _ref2$data, settingsLists = _ref2.settingsLists;\n                setLoading(true);\n                _context.next = 4;\n                return client.mutate({\n                  mutation: settingsGql.mutation,\n                  variables: {\n                    data: _objectSpread(_objectSpread({}, data), {}, {\n                      enabled: true\n                    })\n                  }\n                });\n\n              case 4:\n                response = _context.sent;\n                setLoading(false);\n                error = _get(response, \"data.mailchimp.updateSettings.error\");\n\n                if (error) {\n                  showSnackbar(error.message);\n                } else {\n                  showSnackbar(\"Settings updated successfully.\");\n                  settingsLists.refetch();\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  });\n  return /*#__PURE__*/React.createElement(Query, {\n    query: MAILCHIMP_SETTINGS\n  }, function (settingsLists) {\n    var _ref4 = _get(settingsLists.data, \"mailchimp.getSettings.data\") || {},\n        apiKey = _ref4.apiKey,\n        enabled = _ref4.enabled;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, (loading || settingsLists.loading) && /*#__PURE__*/React.createElement(CircularProgress, null), apiKey && enabled ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"settings.list\",\n      validators: validation.create(\"required\")\n    }, function (_ref5) {\n      var id = _ref5.value,\n          onChange = _ref5.onChange,\n          rest = _objectWithoutProperties(_ref5, [\"value\", \"onChange\"]);\n\n      var options = (_get(settingsLists.data, \"mailchimp.listLists.data\") || []).map(function (_ref6) {\n        var id = _ref6.id,\n            name = _ref6.name;\n        return {\n          id: id,\n          name: name\n        };\n      });\n      var value = options.find(function (item) {\n        return item.id === id;\n      });\n      return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({\n        disabled: !apiKey,\n        options: options,\n        value: value,\n        onChange: onChange,\n        label: \"Mailchimp list\"\n      }, rest));\n    })), /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"settings.component\",\n      validators: validation.create(\"required\")\n    }, function (_ref7) {\n      var onChange = _ref7.onChange,\n          name = _ref7.value,\n          rest = _objectWithoutProperties(_ref7, [\"onChange\", \"value\"]);\n\n      var options = getPlugins(\"pb-page-element-mailchimp-component\").map(function (_ref8) {\n        var componentName = _ref8.componentName,\n            title = _ref8.title;\n        return {\n          name: componentName,\n          title: title\n        };\n      });\n      var value = options.find(function (item) {\n        return item.name === name;\n      });\n      return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({\n        disabled: !apiKey,\n        value: value,\n        options: options,\n        onChange: onChange,\n        textProp: \"title\",\n        valueProp: \"name\",\n        label: \"Mailchimp component\",\n        description: \"Select a component that renders the signup form.\"\n      }, rest));\n    })), /*#__PURE__*/React.createElement(Cell, {\n      span: 12,\n      className: formPreview\n    }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(Typography, {\n      use: \"overline\"\n    }, \"Form preview\")), /*#__PURE__*/React.createElement(Bind, {\n      name: \"settings\"\n    }, function (_ref9) {\n      var value = _ref9.value;\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(MailchimpElement, {\n        element: {\n          settings: value\n        }\n      }));\n    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, !apiKey ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, \"Before continuing, please enter a\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      href: \"https://mailchimp.com/help/about-api-keys/\"\n    }, \"Mailchimp API key\"), \".\"), /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: function onSubmit(data) {\n        return submitApiKeyForm({\n          data: data,\n          settingsLists: settingsLists\n        });\n      }\n    }, function (_ref10) {\n      var Bind = _ref10.Bind,\n          submit = _ref10.submit;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {\n        span: 12\n      }, /*#__PURE__*/React.createElement(Bind, {\n        validators: validation.create(\"required\"),\n        name: \"apiKey\"\n      }, /*#__PURE__*/React.createElement(Input, {\n        label: \"API key\"\n      }))), /*#__PURE__*/React.createElement(Cell, {\n        span: 12,\n        className: saveApiKeyButtonWrapper\n      }, /*#__PURE__*/React.createElement(ButtonPrimary, {\n        onClick: submit\n      }, \"Save API key\")));\n    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, \"Before continuing, please\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n      className: enableMailchimpLink,\n      onClick: function onClick() {\n        return submitApiKeyForm({\n          settingsLists: settingsLists\n        });\n      }\n    }, \"enable\"), \" \", \"the Mailchimp integration.\")))));\n  });\n};\n\nexport default MailchimpElementAdvancedSettings;","map":null,"metadata":{},"sourceType":"module"}