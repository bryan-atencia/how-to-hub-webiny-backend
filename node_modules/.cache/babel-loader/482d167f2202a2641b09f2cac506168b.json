{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Input from \"./fields/Input\";\nimport Select from \"./fields/Select\";\nimport Radio from \"./fields/Radio\";\nimport Checkbox from \"./fields/Checkbox\";\nimport Textarea from \"./fields/Textarea\";\nimport { Form } from \"@webiny/form\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport HelperMessage from \"./components/HelperMessage\";\nimport { validation } from \"@webiny/validation\";\n/**\n * This is the default form layout component, in which we render all the form fields. We also render terms of service\n * and reCAPTCHA (if enabled in form settings), and at the bottom, the submit button. Note that we also utilized\n * the \"webiny-form\" package, which makes working with forms and form fields a walk in the park. Also, as labels for\n * various parts of the form can be translated to different languages via the Form Editor (eg. submit button's label,\n * terms of service message...), we use the I18NValue component, which is a part of the \"webiny-app-i18n\" package.\n *\n * Feel free to use this component as your starting point for your own form layouts. Add or remove things as you like!\n */\n\nvar DefaultFormLayout = function DefaultFormLayout(_ref) {\n  var getFields = _ref.getFields,\n      getDefaultValues = _ref.getDefaultValues,\n      submit = _ref.submit,\n      formData = _ref.formData,\n      ReCaptcha = _ref.ReCaptcha,\n      TermsOfService = _ref.TermsOfService; // Is the form in loading (submitting) state?\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1]; // Is the form successfully submitted?\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formSuccess = _useState4[0],\n      setFormSuccess = _useState4[1]; // All form fields - an array of rows where each row is an array that contain fields.\n\n\n  var fields = getFields();\n  /**\n   * Once the data is successfully submitted, we show a success message.\n   */\n\n  var submitForm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return submit(data);\n\n            case 3:\n              result = _context.sent;\n              setLoading(false);\n\n              if (result.error === null) {\n                setFormSuccess(true);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitForm(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Renders a field cell with a field element inside.\n   */\n\n\n  var renderFieldCell = function renderFieldCell(field, Bind) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: field._id,\n      className: \"webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column\"\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: field.fieldId,\n      validators: field.validators\n    }, function (bind) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, renderFieldElement({\n        field: field,\n        bind: bind\n      }));\n    }));\n  };\n  /**\n   * Renders hidden fields.\n   */\n\n\n  var renderHiddenField = function renderHiddenField(field, Bind) {\n    return /*#__PURE__*/React.createElement(Bind, {\n      name: field.fieldId,\n      validators: field.validators\n    }, function (bind) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, renderFieldElement({\n        field: field,\n        bind: bind\n      }));\n    });\n  };\n  /**\n   * Renders a single form field. You can add additional handling of other field types if needed.\n   * All of these components are located in the \"./fields\" folder.\n   */\n\n\n  var renderFieldElement = function renderFieldElement(props) {\n    switch (props.field.type) {\n      case \"text\":\n        return /*#__PURE__*/React.createElement(Input, props);\n\n      case \"textarea\":\n        return /*#__PURE__*/React.createElement(Textarea, props);\n\n      case \"number\":\n        return /*#__PURE__*/React.createElement(Input, Object.assign({}, props, {\n          type: \"number\"\n        }));\n\n      case \"select\":\n        return /*#__PURE__*/React.createElement(Select, props);\n\n      case \"radio\":\n        return /*#__PURE__*/React.createElement(Radio, props);\n\n      case \"checkbox\":\n        return /*#__PURE__*/React.createElement(Checkbox, props);\n\n      case \"hidden\":\n        return /*#__PURE__*/React.createElement(\"input\", {\n          type: \"hidden\",\n          value: props.bind.value\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"span\", null, \"Cannot render field.\");\n    }\n  };\n  /**\n   * Renders Google reCAPTCHA field (checkbox) - to protect us from spam and bots.\n   * For this we use the provided ReCaptcha component, which is a render prop component and a regular component\n   * at the same time, depending if the function was passed as its children. If no children are present, then\n   * it will render the actual Google reCAPTCHA field.\n   * Note that you don't have to worry if the reCAPTCHA was actually enabled via the Form Editor - the component\n   * does necessary checks internally and will not render anything if it isn't supposed to.\n   */\n\n\n  var renderReCaptcha = function renderReCaptcha(Bind) {\n    return /*#__PURE__*/React.createElement(ReCaptcha, null, function (_ref3) {\n      var errorMessage = _ref3.errorMessage;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"webiny-fb-form-recaptcha\"\n      }, /*#__PURE__*/React.createElement(Bind, {\n        name: \"reCaptcha\",\n        validators: validation.create(\"required\")\n      }, function (_ref4) {\n        var onChange = _ref4.onChange,\n            validation = _ref4.validation;\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReCaptcha, {\n          onChange: onChange\n        }), /*#__PURE__*/React.createElement(HelperMessage, {\n          isValid: validation.isValid,\n          errorMessage: /*#__PURE__*/React.createElement(I18NValue, {\n            value: errorMessage\n          })\n        }));\n      }));\n    });\n  };\n  /**\n   * Renders the Terms of Service checkbox - which forces the user to agree to our Terms of Service\n   * before actually submitting the form.\n   * For this we use the provided TermsOfService component, which is a simple render prop component.\n   * Note that you don't have to worry if the terms of service option was actually enabled via the Form Editor -\n   * the component does necessary checks internally and will not render anything if it isn't supposed to.\n   */\n\n\n  var renderTermsOfService = function renderTermsOfService(Bind) {\n    return /*#__PURE__*/React.createElement(TermsOfService, null, function (_ref5) {\n      var message = _ref5.message,\n          errorMessage = _ref5.errorMessage,\n          onChange = _ref5.onChange;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"webiny-fb-form-tos\"\n      }, /*#__PURE__*/React.createElement(Bind, {\n        name: \"tosAccepted\",\n        validators: validation.create(\"required\"),\n        afterChange: onChange\n      }, function (_ref6) {\n        var _onChange = _ref6.onChange,\n            value = _ref6.value,\n            validation = _ref6.validation;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"webiny-fb-form-field webiny-fb-form-field--checkbox\"\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"webiny-fb-form-field__checkbox-group\"\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"webiny-fb-form-field__checkbox\"\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          className: \"webiny-fb-form-field__checkbox-input\",\n          type: \"checkbox\",\n          name: \"webiny-tos-checkbox\",\n          id: \"webiny-tos-checkbox\",\n          checked: Boolean(value),\n          onChange: function onChange() {\n            return _onChange(!value);\n          }\n        }), /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"webiny-tos-checkbox\",\n          className: \"webiny-fb-form-field__checkbox-label\"\n        }, /*#__PURE__*/React.createElement(I18NValue, {\n          value: message\n        })))), /*#__PURE__*/React.createElement(HelperMessage, {\n          isValid: validation.isValid,\n          errorMessage: /*#__PURE__*/React.createElement(I18NValue, {\n            value: errorMessage\n          })\n        }));\n      }));\n    });\n  };\n  /**\n   * Renders the success message.\n   */\n\n\n  var renderSuccessMessage = function renderSuccessMessage() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"webiny-fb-form-form__success-message\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"webiny-fb-form-field__label webiny-pb-typography-h3\"\n    }, /*#__PURE__*/React.createElement(I18NValue, {\n      value: formData.settings.successMessage,\n      default: \"Thanks!\"\n    })))));\n  };\n  /**\n   * Renders the form submit button. We disable the button if the form is in the loading state.\n   */\n\n\n  var renderSubmitButton = function renderSubmitButton(submit, loading, tosAccepted, buttonLabel) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"webiny-fb-form-submit-button\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"webiny-fb-form-page-element-button webiny-pb-page-element-button webiny-pb-page-element-button--primary\" + (loading ? \" webiny-pb-element-button--loading\" : \"\"),\n      onClick: submit,\n      disabled: loading\n    }, /*#__PURE__*/React.createElement(I18NValue, {\n      value: buttonLabel,\n      default: \"Submit\"\n    })));\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* \"onSubmit\" callback gets triggered once all of the fields are valid. */\n\n    /* We also pass the default values for all fields via the getDefaultValues callback. */\n    React.createElement(Form, {\n      onSubmit: submitForm,\n      data: getDefaultValues()\n    }, function (_ref7) {\n      var submit = _ref7.submit,\n          Bind = _ref7.Bind,\n          data = _ref7.data;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"webiny-fb-form\"\n      }, formSuccess ? renderSuccessMessage() : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", null, fields.map(function (row, rowIndex) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: rowIndex,\n          className: \"webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row\"\n        }, row.map(function (field) {\n          return field.type !== \"hidden\" ? renderFieldCell(field, Bind) : renderHiddenField(field, Bind);\n        }));\n      })), renderTermsOfService(Bind), renderReCaptcha(Bind), renderSubmitButton(submit, loading, data.tosAccepted, formData.settings.submitButtonLabel)));\n    })\n  );\n};\n\nexport default DefaultFormLayout;","map":null,"metadata":{},"sourceType":"module"}