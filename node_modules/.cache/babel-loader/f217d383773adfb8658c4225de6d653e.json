{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isFunction from \"lodash/isFunction\";\nimport _keys from \"lodash/keys\";\nimport _isNil from \"lodash/isNil\";\nimport _get from \"lodash/get\";\nimport _has from \"lodash/has\";\nimport _each from \"lodash/each\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _isEqual from \"lodash/isEqual\";\nimport * as React from \"react\";\nimport set from \"lodash/fp/set\";\nimport { createBind } from \"./Bind\";\nimport { linkState } from \"./linkState\";\nimport ValidationError from \"./ValidationError\";\nexport var Form = /*#__PURE__*/function (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  var _super = _createSuper(Form);\n\n  function Form() {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: _this.props.data || {},\n      originalData: _this.props.data || {},\n      wasSubmitted: false,\n      validation: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isValid\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"inputs\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"lastRender\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"validateFns\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeFns\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"Bind\", createBind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onInvalid\", function () {\n      if (typeof _this.props.onInvalid === \"function\") {\n        _this.props.onInvalid();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submit\", function (event) {\n      // If event is present - prevent default behaviour\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      _this.setState({\n        wasSubmitted: true\n      });\n\n      return _this.validate().then(function (valid) {\n        if (valid) {\n          var _data = _this.state.data; // Make sure all current inputs have a value in the model (defaultValues do not exist in form data)\n\n          var inputNames = Object.keys(_this.inputs);\n          inputNames.forEach(function (name) {\n            var defaultValue = _this.inputs[name].defaultValue;\n\n            if (!_has(_data, name) && typeof defaultValue !== \"undefined\") {\n              _data = set(name, defaultValue, _data);\n            }\n          });\n\n          if (_this.props.onSubmit) {\n            return _this.props.onSubmit(_data, _assertThisInitialized(_this));\n          }\n\n          return;\n        }\n\n        return _this.onInvalid();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validate\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var allIsValid, inputNames, i, _name, validators, hasValue, isInputValid, shouldValidate, validationResult;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              allIsValid = true; // Inputs must be validated in a queue because we may have async validators\n\n              inputNames = Object.keys(_this.inputs);\n              i = 0;\n\n            case 3:\n              if (!(i < inputNames.length)) {\n                _context.next = 20;\n                break;\n              }\n\n              _name = inputNames[i];\n              validators = _this.inputs[_name].validators;\n\n              if (validators) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"continue\", 17);\n\n            case 8:\n              hasValue = !!_get(_this.state.data, _name);\n              isInputValid = _get(_this.state.validation[_name], \"isValid\");\n              shouldValidate = !hasValue || hasValue && isInputValid !== true;\n\n              if (!shouldValidate) {\n                _context.next = 17;\n                break;\n              }\n\n              if (!(isInputValid === false || _isNil(isInputValid))) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 15;\n              return _this.validateInput(_name);\n\n            case 15:\n              validationResult = _context.sent;\n\n              if (validationResult === false) {\n                allIsValid = false;\n              }\n\n            case 17:\n              i++;\n              _context.next = 3;\n              break;\n\n            case 20:\n              return _context.abrupt(\"return\", allIsValid);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"validateInput\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n        var value, validators, hasValidators, formData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return new Promise(function (res) {\n                  return setTimeout(res, 10);\n                });\n\n              case 2:\n                if (!(_this.props.validateOnFirstSubmit && !_this.state.wasSubmitted || !_this.inputs[name])) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve(null));\n\n              case 4:\n                value = _get(_this.state.data, name, _this.inputs[name].defaultValue);\n                validators = _this.inputs[name].validators;\n                hasValidators = _keys(validators).length; // Validate input\n\n                formData = {\n                  inputs: _this.inputs,\n                  data: _objectSpread({}, _this.state.data)\n                };\n\n                _this.setState(function (state) {\n                  return _objectSpread(_objectSpread({}, state), {}, {\n                    validation: _objectSpread(_objectSpread({}, state.validation), {}, _defineProperty({}, name, _objectSpread(_objectSpread({}, state.validation[name]), {}, {\n                      isValidating: true\n                    })))\n                  });\n                });\n\n                return _context2.abrupt(\"return\", Promise.resolve(Form.executeValidators(value, validators, formData)).then(function (validationResults) {\n                  var isValid = hasValidators ? value === null ? null : true : null;\n\n                  _this.setState(function (state) {\n                    return _objectSpread(_objectSpread({}, state), {}, {\n                      validation: _objectSpread(_objectSpread({}, state.validation), {}, _defineProperty({}, name, {\n                        isValid: isValid,\n                        message: null,\n                        results: validationResults\n                      }))\n                    });\n                  });\n\n                  return validationResults;\n                }).catch(function (validationError) {\n                  // Set component state to reflect validation error\n                  _this.setState(function (state) {\n                    return _objectSpread(_objectSpread({}, state), {}, {\n                      validation: _objectSpread(_objectSpread({}, state.validation), {}, _defineProperty({}, name, {\n                        isValid: false,\n                        message: validationError.getMessage(),\n                        results: false\n                      }))\n                    });\n                  });\n\n                  return false;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getOnChangeFn\", function (_ref3) {\n      var name = _ref3.name,\n          beforeChange = _ref3.beforeChange,\n          afterChange = _ref3.afterChange;\n\n      if (!_this.onChangeFns[name]) {\n        var linkStateChange = linkState(_assertThisInitialized(_this), \"data.\".concat(name));\n\n        var baseOnChange = function baseOnChange(newValue, cb) {\n          // When linkState is done processing the value change...\n          return linkStateChange(newValue, cb).then(function (value) {\n            // call the Form onChange with updated data\n            if (typeof _this.props.onChange === \"function\") {\n              _this.props.onChange(_objectSpread({}, _this.state.data), _assertThisInitialized(_this));\n            } // Execute onAfterChange\n\n\n            afterChange && afterChange(value);\n            return value;\n          });\n        };\n\n        var onChange = beforeChange ? function (newValue) {\n          return beforeChange(newValue, baseOnChange);\n        } : baseOnChange;\n        _this.onChangeFns[name] = onChange;\n      }\n\n      return _this.onChangeFns[name];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getValidateFn\", function (name) {\n      if (!_this.validateFns[name]) {\n        _this.validateFns[name] = function () {\n          return _this.validateInput(name);\n        };\n      }\n\n      return _this.validateFns[name];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"__setValue\", function (name, value) {\n      _this.onChangeFns[name](value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"__onKeyDown\", function (e) {\n      var _this$props$submitOnE = _this.props.submitOnEnter,\n          submitOnEnter = _this$props$submitOnE === void 0 ? false : _this$props$submitOnE;\n\n      if ((submitOnEnter || e.metaKey || e.ctrlKey) && e.key === \"Enter\" && !e.isDefaultPrevented()) {\n        // Need to blur current target in case of input fields to trigger validation\n        // @ts-ignore\n        e.target && e.target.blur();\n        e.preventDefault();\n        e.stopPropagation(); // Fire submit with a small delay to allow input validation to complete.\n        // Not an ideal solution but works fine at this point. Will revisit this later.\n\n        setTimeout(function () {\n          return _this.submit();\n        }, 100);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      Object.keys(this.inputs).forEach(function (name) {\n        if (!_this2.lastRender.includes(name)) {\n          delete _this2.inputs[name];\n\n          _this2.setState(function (state) {\n            var validation = _objectSpread({}, state.validation);\n\n            delete validation[name];\n            return {\n              validation: validation\n            };\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n\n      if (!_isFunction(children)) {\n        throw new Error(\"Form must have a function as its only child!\");\n      }\n\n      this.lastRender = [];\n      return /*#__PURE__*/React.createElement(\"webiny-form-container\", {\n        onKeyDown: this.__onKeyDown\n      }, children({\n        data: _cloneDeep(this.state.data),\n        setValue: this.__setValue,\n        form: this,\n        submit: this.submit,\n        Bind: this.Bind\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref4, state) {\n      var data = _ref4.data,\n          _ref4$invalidFields = _ref4.invalidFields,\n          invalidFields = _ref4$invalidFields === void 0 ? {} : _ref4$invalidFields; // If we received new `data`, overwrite current `data` in the state\n\n      if (!_isEqual(state.originalData, data)) {\n        return {\n          data: data,\n          originalData: data,\n          validation: {}\n        };\n      } // Check for validation errors\n\n\n      var validation = _cloneDeep(state.validation);\n\n      if (_isPlainObject(invalidFields) && Object.keys(invalidFields).length) {\n        _each(invalidFields, function (message, name) {\n          validation = _objectSpread(_objectSpread({}, validation), {}, _defineProperty({}, name, {\n            isValid: false,\n            message: message\n          }));\n        });\n      } // Return new state only if something has changed\n\n\n      return !_isEqual(validation, state.validation) ? {\n        validation: validation\n      } : null;\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\n_defineProperty(Form, \"defaultProps\", {\n  data: {},\n  disabled: false,\n  validateOnFirstSubmit: false,\n  onSubmit: null\n});\n\n_defineProperty(Form, \"executeValidators\", /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value, validators) {\n    var formData,\n        results,\n        _loop,\n        i,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            formData = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n            validators = Array.isArray(validators) ? _toConsumableArray(validators) : [validators];\n            results = {};\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(i) {\n              var validator;\n              return _regeneratorRuntime.wrap(function _loop$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      validator = validators[i];\n                      _context3.prev = 1;\n                      _context3.next = 4;\n                      return Promise.resolve(validator(value, formData)).then(function (result) {\n                        if (result instanceof Error) {\n                          throw result;\n                        }\n\n                        results[i] = result;\n                      }).catch(function (e) {\n                        throw new ValidationError(e.message, value);\n                      });\n\n                    case 4:\n                      _context3.next = 9;\n                      break;\n\n                    case 6:\n                      _context3.prev = 6;\n                      _context3.t0 = _context3[\"catch\"](1);\n                      throw new ValidationError(_context3.t0.message, value);\n\n                    case 9:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _loop, null, [[1, 6]]);\n            });\n            i = 0;\n\n          case 5:\n            if (!(i < validators.length)) {\n              _context4.next = 10;\n              break;\n            }\n\n            return _context4.delegateYield(_loop(i), \"t0\", 7);\n\n          case 7:\n            i++;\n            _context4.next = 5;\n            break;\n\n          case 10:\n            return _context4.abrupt(\"return\", results);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref5.apply(this, arguments);\n  };\n}());","map":null,"metadata":{},"sourceType":"module"}