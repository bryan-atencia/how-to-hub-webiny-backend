{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _get from \"lodash/get\";\n/* eslint-disable */\n\nimport React, { useState } from \"react\";\nimport { css } from \"emotion\";\nimport { useApolloClient } from \"react-apollo\";\nimport { Chips, Chip } from \"@webiny/ui/Chips\";\nimport { Tags as TagsComponent } from \"@webiny/ui/Tags\";\nimport { UPDATE_FILE, LIST_FILES, LIST_TAGS } from \"./../graphql\";\nimport { ReactComponent as EditIcon } from \"@svgr/webpack!./../icons/round-edit-24px.svg\";\nimport { useFileManager } from \"./../FileManagerContext\";\nimport { Hotkeys } from \"react-hotkeyz\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nvar style = {\n  editTag: /*#__PURE__*/css({\n    cursor: \"pointer\",\n    display: \"inline-block\"\n  }, \"label:editTag;\")\n};\n\nfunction Tags(_ref) {\n  var file = _ref.file;\n  var client = useApolloClient();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editing = _useState2[0],\n      setEdit = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      saving = _useState4[0],\n      setSaving = _useState4[1];\n\n  var initialTags = Array.isArray(file.tags) ? _toConsumableArray(file.tags) : [];\n\n  var _useState5 = useState(initialTags),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentTags = _useState6[0],\n      setCurrentTags = _useState6[1];\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var _useFileManager = useFileManager(),\n      queryParams = _useFileManager.queryParams;\n\n  if (editing) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Hotkeys, {\n      disabled: !editing,\n      zIndex: 60,\n      keys: {\n        esc: function esc() {\n          setSaving(true);\n          client.mutate({\n            mutation: UPDATE_FILE,\n            variables: {\n              id: file.id,\n              data: {\n                tags: currentTags\n              }\n            },\n            refetchQueries: [{\n              query: LIST_TAGS\n            }],\n            update: function update(cache, updated) {\n              var newFileData = _get(updated, \"data.files.updateFile.data\"); // 1. Update files list cache\n\n\n              var data = _cloneDeep(cache.readQuery({\n                query: LIST_FILES,\n                variables: queryParams\n              }));\n\n              data.files.listFiles.data.forEach(function (item) {\n                if (item.key === newFileData.key) {\n                  item.tags = newFileData.tags;\n                }\n              });\n              cache.writeQuery({\n                query: LIST_FILES,\n                variables: queryParams,\n                data: data\n              });\n            }\n          }).then(function () {\n            setSaving(false);\n            setEdit(false);\n            showSnackbar(\"Tags successfully updated.\");\n          });\n        }\n      }\n    }), /*#__PURE__*/React.createElement(TagsComponent, {\n      disabled: saving,\n      value: currentTags,\n      onChange: function onChange(tags) {\n        return setCurrentTags(tags.map(function (tag) {\n          return tag.toLowerCase();\n        }));\n      },\n      autoFocus: true,\n      placeholder: \"Enter a tag and press enter\"\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, initialTags.length > 0 ? /*#__PURE__*/React.createElement(Chips, null, initialTags.map(function (tag, index) {\n    return /*#__PURE__*/React.createElement(Chip, {\n      key: tag + index,\n      label: tag\n    });\n  })) : /*#__PURE__*/React.createElement(\"div\", null, \"No tags assigned.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.editTag\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    onClick: function onClick() {\n      return setEdit(true);\n    }\n  }, /*#__PURE__*/React.createElement(EditIcon, null), \" Edit\")));\n}\n\nexport default Tags;","map":null,"metadata":{},"sourceType":"module"}