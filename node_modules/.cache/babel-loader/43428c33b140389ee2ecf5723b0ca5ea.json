{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCSwitchFoundation } from '@material/switch';\nimport { componentFactory, classNames } from '@rmwc/base';\nimport { withRipple } from '@rmwc/ripple';\nimport { ToggleableFoundationComponent } from '@rmwc/toggleable';\nvar SwitchRoot = componentFactory({\n  displayName: 'SwitchRoot',\n  classNames: ['mdc-switch']\n});\n\nvar SwitchTrack =\n/** @class */\nfunction (_super) {\n  __extends(SwitchTrack, _super);\n\n  function SwitchTrack() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SwitchTrack.prototype.shouldComponentUpdate = function () {\n    return false;\n  };\n\n  SwitchTrack.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: \"mdc-switch__track\"\n    });\n  };\n\n  SwitchTrack.displayName = 'SwitchTrack';\n  return SwitchTrack;\n}(React.Component);\n\nvar SwitchKnob =\n/** @class */\nfunction (_super) {\n  __extends(SwitchKnob, _super);\n\n  function SwitchKnob() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SwitchKnob.prototype.shouldComponentUpdate = function () {\n    return false;\n  };\n\n  SwitchKnob.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: \"mdc-switch__knob\"\n    });\n  };\n\n  SwitchKnob.displayName = 'SwitchKnob';\n  return SwitchKnob;\n}(React.Component);\n\nvar SwitchThumbUnderlay = withRipple({\n  unbounded: true,\n  surface: false\n})(function (_a) {\n  var className = _a.className,\n      rest = __rest(_a, [\"className\"]);\n\n  return React.createElement(\"div\", __assign({\n    className: classNames(className, 'mdc-switch__thumb-underlay')\n  }, rest));\n});\nvar SwitchNativeControl = componentFactory({\n  displayName: 'SwitchNativeControl',\n  defaultProps: {\n    type: 'checkbox'\n  },\n  tag: 'input',\n  classNames: ['mdc-switch__native-control']\n});\n/** A Switch component. */\n\nvar Switch =\n/** @class */\nfunction (_super) {\n  __extends(Switch, _super);\n\n  function Switch(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.root = _this.createElement('root');\n    _this.nativeControl = _this.createElement('nativeControl');\n    _this.handleChange = _this.handleChange.bind(_this);\n    return _this;\n  }\n\n  Switch.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    this.nativeControl.ref && this.foundation.updateCheckedStyling_(this.nativeControl.ref.checked);\n    this.nativeControl.ref && this.foundation.setDisabled(this.nativeControl.ref.disabled);\n  };\n\n  Switch.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCSwitchFoundation({\n      addClass: function addClass(className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function removeClass(className) {\n        return _this.root.removeClass(className);\n      },\n      setNativeControlChecked: function setNativeControlChecked(checked) {\n        return _this.nativeControl.setProp('checked', checked);\n      },\n      setNativeControlDisabled: function setNativeControlDisabled(disabled) {\n        return _this.nativeControl.setProp('disabled', disabled);\n      }\n    });\n  };\n\n  Switch.prototype.handleChange = function (evt) {\n    this.foundation.handleChange(evt);\n    this.props.onChange && this.props.onChange(evt);\n  };\n\n  Switch.prototype.sync = function (props, prevProps) {\n    if (props.checked !== undefined && !!prevProps && props.checked !== prevProps.checked) {\n      this.foundation.updateCheckedStyling_(props.checked);\n    }\n\n    if (props.disabled !== undefined && !!prevProps && props.disabled !== prevProps.disabled) {\n      this.foundation.setDisabled(props.disabled);\n    }\n  };\n\n  Switch.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        label = _a.label,\n        style = _a.style,\n        inputRef = _a.inputRef,\n        rest = __rest(_a, [\"children\", \"className\", \"label\", \"style\", \"inputRef\"]);\n\n    var switchTag = React.createElement(SwitchRoot, __assign({}, this.toggleRootProps), React.createElement(SwitchTrack, null), React.createElement(SwitchThumbUnderlay, null, React.createElement(\"div\", {\n      className: \"mdc-switch__thumb\"\n    }, React.createElement(SwitchNativeControl, __assign({}, rest, {\n      onChange: this.handleChange,\n      id: this.id,\n      ref: function ref(el) {\n        _this.nativeControl.setRef(el);\n\n        if (typeof inputRef === 'function') {\n          inputRef && inputRef(el);\n        } else if (typeof inputRef === 'object') {\n          inputRef.current = el;\n        }\n      }\n    })))), React.createElement(SwitchKnob, null));\n    return this.renderToggle(switchTag);\n  };\n\n  Switch.displayName = 'Switch';\n  return Switch;\n}(ToggleableFoundationComponent);\n\nexport { Switch };","map":null,"metadata":{},"sourceType":"module"}