{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _isEqual from \"lodash/isEqual\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { ElementRoot } from \"@webiny/app-page-builder/render/components/ElementRoot\";\nimport DropZone from \"@webiny/app-page-builder/editor/components/DropZone\";\nimport ConnectedElement from \"@webiny/app-page-builder/editor/components/ConnectedElement\";\nimport { ReactComponent as AddCircleOutline } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/baseline-add_circle-24px.svg\";\nimport { dropElement, togglePlugin } from \"@webiny/app-page-builder/editor/actions\";\nimport { getElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport ElementAnimation from \"@webiny/app-page-builder/render/components/ElementAnimation\";\nimport ColumnChild from \"./ColumnChild\";\nvar ColumnContainer = /*#__PURE__*/styled(\"div\", {\n  target: \"eg27g9n0\",\n  label: \"ColumnContainer\"\n})({\n  position: \"relative\",\n  flex: \"1 100%\",\n  boxSizing: \"border-box\",\n  height: \"100%\",\n  width: \"100%\",\n  zIndex: 20,\n  display: \"flex\"\n});\nvar addIcon = /*#__PURE__*/css({\n  color: \"var(--mdc-theme-secondary)\",\n  transition: \"transform 0.2s\",\n  \"&:hover\": {\n    transform: \"scale(1.3)\"\n  },\n  \"&::before, &::after\": {\n    display: \"none\"\n  }\n}, \"label:addIcon;\");\n\nvar Column = function Column(props) {\n  var element = props.element;\n  var onClick = useHandler(props, function (_ref) {\n    var element = _ref.element,\n        togglePlugin = _ref.togglePlugin;\n    return function () {\n      var id = element.id,\n          path = element.path,\n          type = element.type;\n      togglePlugin({\n        name: \"pb-editor-toolbar-add-element\",\n        params: {\n          id: id,\n          path: path,\n          type: type\n        }\n      });\n    };\n  });\n  var onDrop = useHandler(props, function (_ref2) {\n    var element = _ref2.element,\n        dropElement = _ref2.dropElement;\n    return function (source) {\n      var id = element.id,\n          path = element.path,\n          type = element.type;\n      dropElement({\n        source: source,\n        target: {\n          id: id,\n          path: path,\n          type: type,\n          position: null\n        }\n      });\n    };\n  });\n  return /*#__PURE__*/React.createElement(ElementAnimation, null, /*#__PURE__*/React.createElement(ColumnContainer, {\n    style: {\n      justifyContent: \"center\"\n    }\n  }, /*#__PURE__*/React.createElement(ElementRoot, {\n    element: element,\n    className: \"webiny-pb-base-page-element-style webiny-pb-layout-column\",\n    style: {\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n  }, /*#__PURE__*/React.createElement(ConnectedElement, {\n    elementId: element.id\n  }, function (_ref3) {\n    var id = _ref3.id,\n        path = _ref3.path,\n        type = _ref3.type,\n        elements = _ref3.elements;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, !elements.length && /*#__PURE__*/React.createElement(DropZone.Center, {\n      key: id,\n      id: id,\n      type: type,\n      onDrop: onDrop\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"data-testid\": \"pb-editor-column-add-button\",\n      className: addIcon + \" addIcon\",\n      icon: /*#__PURE__*/React.createElement(AddCircleOutline, null),\n      onClick: onClick\n    })), elements.map(function (childId, index) {\n      return /*#__PURE__*/React.createElement(ColumnChild, {\n        key: childId,\n        id: childId,\n        index: index,\n        count: elements.length,\n        last: index === elements.length - 1,\n        target: {\n          id: id,\n          path: path,\n          type: type\n        }\n      });\n    }));\n  }))));\n};\n\nexport default connect(function (state, props) {\n  var element = getElement(state, props.element.id);\n  return {\n    element: _objectSpread(_objectSpread({}, element), {}, {\n      elements: element.elements.map(function (id) {\n        return getElement(state, id);\n      })\n    })\n  };\n}, {\n  dropElement: dropElement,\n  togglePlugin: togglePlugin\n}, null, {\n  areStatePropsEqual: _isEqual\n})( /*#__PURE__*/React.memo(Column));","map":null,"metadata":{},"sourceType":"module"}