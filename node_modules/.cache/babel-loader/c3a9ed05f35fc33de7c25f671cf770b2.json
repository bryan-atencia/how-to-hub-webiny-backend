{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _pick from \"lodash/pick\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport React from \"react\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { ContentFormRender } from \"./ContentFormRender\";\nexport var ContentModelForm = function ContentModelForm(props) {\n  var contentModelRaw = props.contentModel;\n\n  var contentModel = _cloneDeep(contentModelRaw);\n\n  var layout = contentModel.layout,\n      fields = contentModel.fields;\n\n  var getFieldById = function getFieldById(id) {\n    return fields.find(function (field) {\n      return field._id === id;\n    });\n  };\n\n  var getFields = function getFields() {\n    var returnFields = [];\n\n    if (layout) {\n      returnFields = _cloneDeep(layout);\n    } else {\n      // If no layout provided, just render all fields one below other.\n      returnFields = _toConsumableArray(fields.map(function (item) {\n        return [item._id];\n      }));\n    }\n\n    var validatorPlugins = getPlugins(\"form-field-validator\");\n    returnFields.forEach(function (row) {\n      row.forEach(function (id, idIndex) {\n        row[idIndex] = getFieldById(id);\n\n        if (Array.isArray(row[idIndex].validation)) {\n          row[idIndex].validators = row[idIndex].validation.map(function (item) {\n            var validatorPlugin = validatorPlugins.find(function (plugin) {\n              return plugin.validator.name === item.name;\n            });\n\n            if (!validatorPlugin || typeof validatorPlugin.validator.validate !== \"function\") {\n              return;\n            }\n\n            return /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n                var isInvalid, result;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return validatorPlugin.validator.validate(value, item);\n\n                      case 3:\n                        result = _context.sent;\n                        isInvalid = result === false;\n                        _context.next = 10;\n                        break;\n\n                      case 7:\n                        _context.prev = 7;\n                        _context.t0 = _context[\"catch\"](0);\n                        isInvalid = true;\n\n                      case 10:\n                        if (!isInvalid) {\n                          _context.next = 12;\n                          break;\n                        }\n\n                        throw new Error(I18NValue({\n                          value: item.message\n                        }) || \"Invalid value.\");\n\n                      case 12:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 7]]);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }();\n          }).filter(Boolean);\n        }\n      });\n    });\n    return returnFields;\n  };\n\n  var getDefaultValues = function getDefaultValues() {\n    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var values = {}; // TODO: finish default values.\n\n    /*fields.forEach(field => {\n        const fieldId = field.fieldId;\n         if (\n            fieldId &&\n            \"defaultValue\" in field.settings &&\n            typeof field.settings.defaultValue !== \"undefined\"\n        ) {\n            values[fieldId] = field.settings.defaultValue;\n        }\n    });*/\n\n    return _objectSpread(_objectSpread({}, values), overrides);\n  };\n\n  var content = props.content,\n      onSubmit = props.onSubmit,\n      onChange = props.onChange,\n      locale = props.locale,\n      onForm = props.onForm;\n  return /*#__PURE__*/React.createElement(ContentFormRender, {\n    onForm: onForm,\n    locale: locale,\n    getFields: getFields,\n    getDefaultValues: getDefaultValues,\n    content: content,\n    contentModel: contentModel,\n    onChange: onChange,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        var fieldsIds;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fieldsIds = contentModel.fields.map(function (item) {\n                  return item.fieldId;\n                });\n                return _context2.abrupt(\"return\", onSubmit(_pick(data, _toConsumableArray(fieldsIds))));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  });\n};","map":null,"metadata":{},"sourceType":"module"}