{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nimport _get from \"lodash/get\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { set } from \"dot-prop-immutable\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { usePageBuilder } from \"@webiny/app-page-builder/hooks/usePageBuilder\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport Input from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Input\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker\";\nimport IconPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/IconPicker\";\n\nvar ButtonSettings = function ButtonSettings(_ref) {\n  var element = _ref.element,\n      updateElement = _ref.updateElement;\n\n  var _usePageBuilder = usePageBuilder(),\n      theme = _usePageBuilder.theme;\n\n  var _get2 = _get(theme, \"elements.button\", []),\n      types = _get2.types;\n\n  var _get3 = _get(element, \"data\", {}),\n      _get3$type = _get3.type,\n      type = _get3$type === void 0 ? _get(types, \"0.name\", \"\") : _get3$type,\n      _get3$icon = _get3.icon,\n      icon = _get3$icon === void 0 ? {} : _get3$icon;\n\n  var setData = useMemo(function () {\n    var historyUpdated = {};\n    return function (name, value) {\n      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var attrKey = \"data.\".concat(name);\n      var newElement = set(element, attrKey, value);\n\n      if (name.startsWith(\"icon\")) {\n        var _get4 = _get(newElement, \"data.icon\"),\n            id = _get4.id,\n            width = _get4.width,\n            color = _get4.color;\n\n        newElement = set(newElement, \"data.icon.svg\", getSvg(id, {\n          width: width,\n          color: color\n        }));\n      }\n\n      if (!history) {\n        updateElement({\n          element: newElement,\n          history: history\n        });\n        return;\n      }\n\n      if (historyUpdated[name] !== value) {\n        historyUpdated[name] = value;\n        updateElement({\n          element: newElement\n        });\n      }\n    };\n  }, [element, updateElement]);\n  var updateType = useCallback(function (value) {\n    return setData(\"type\", value);\n  }, [setData]);\n  var updateIcon = useCallback(function (value) {\n    return setData(\"icon.id\", value.id);\n  }, [setData]);\n  var updateIconColor = useCallback(function (value) {\n    return setData(\"icon.color\", value);\n  }, [setData]);\n  var updateIconColorPreview = useCallback(function (value) {\n    return setData(\"icon.color\", value, false);\n  }, [setData]);\n  var updateIconWidth = useCallback(function (value) {\n    return setData(\"icon.width\", value);\n  }, [setData]);\n  var updateIconPosition = useCallback(function (value) {\n    return setData(\"icon.position\", value);\n  }, [setData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {\n    label: \"Button\"\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    use: \"overline\"\n  }, \"Type\")), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: type,\n    onChange: updateType\n  }, types.map(function (type) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: type.className,\n      value: type.className\n    }, type.label);\n  }))))), /*#__PURE__*/React.createElement(Tab, {\n    label: \"Icon\"\n  }, /*#__PURE__*/React.createElement(IconPicker, {\n    label: \"Icon\",\n    value: icon.id,\n    updateValue: updateIcon\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Width\",\n    value: icon.width || 50,\n    updateValue: updateIconWidth\n  }), /*#__PURE__*/React.createElement(ColorPicker, {\n    label: \"Color\",\n    value: icon.color,\n    updateValue: updateIconColor,\n    updatePreview: updateIconColorPreview\n  }), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    use: \"overline\"\n  }, \"Position\")), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: icon.position || \"left\",\n    onChange: updateIconPosition\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"left\"\n  }, \"Left\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"right\"\n  }, \"Right\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"top\"\n  }, \"Top\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"bottom\"\n  }, \"Bottom\")))))));\n};\n\nvar icons;\n\nvar getIcons = function getIcons() {\n  if (!icons) {\n    var plugins = getPlugins(\"pb-icons\");\n    icons = plugins.reduce(function (icons, pl) {\n      return icons.concat(pl.getIcons());\n    }, []);\n  }\n\n  return icons;\n};\n\nvar getSvg = function getSvg(id) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!props.width) {\n    props.width = 50;\n  }\n\n  var icon = getIcons().find(function (ic) {\n    return _isEqual(ic.id, id);\n  });\n\n  if (!icon) {\n    return null;\n  }\n\n  return renderToStaticMarkup( /*#__PURE__*/React.cloneElement(icon.svg, props));\n};\n\nexport default connect(function (state) {\n  return {\n    element: getActiveElement(state)\n  };\n}, {\n  updateElement: updateElement\n})( /*#__PURE__*/React.memo(ButtonSettings));","map":null,"metadata":{},"sourceType":"module"}