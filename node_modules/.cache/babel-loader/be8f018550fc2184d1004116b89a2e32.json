{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluginsContainer = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nconst assign = (plugins, target) => {\n  for (let i = 0; i < plugins.length; i++) {\n    const plugin = plugins[i];\n\n    if (Array.isArray(plugin)) {\n      assign(plugin, target);\n      continue;\n    }\n\n    const name = plugin._name || plugin.name;\n\n    if (!name) {\n      throw Error(`Plugin must have a \"name\" or \"_name\" key.`);\n    }\n\n    target[name] = plugin;\n    plugin.init && plugin.init();\n  }\n};\n\nclass PluginsContainer {\n  constructor(plugins = []) {\n    (0, _defineProperty2.default)(this, \"plugins\", {});\n    assign(plugins, this.plugins);\n  }\n\n  byName(name) {\n    return this.plugins[name];\n  }\n\n  byType(type) {\n    if (!type) {\n      return Object.values(this.plugins);\n    }\n\n    return Object.values(this.plugins).filter(pl => pl.type === type);\n  }\n\n  register(...plugins) {\n    assign(plugins, this.plugins);\n  }\n\n  unregister(name) {\n    delete this.plugins[name];\n  }\n\n}\n\nexports.PluginsContainer = PluginsContainer;","map":null,"metadata":{},"sourceType":"script"}