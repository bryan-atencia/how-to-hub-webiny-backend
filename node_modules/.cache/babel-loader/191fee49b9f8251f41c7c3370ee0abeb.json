{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _pick from \"lodash/pick\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _get from \"lodash/get\";\nimport React from \"react\";\nimport shortid from \"shortid\";\nimport { GET_CONTENT_MODEL, UPDATE_CONTENT_MODEL } from \"./graphql\";\nimport { getFieldPosition as _getFieldPosition, moveField as _moveField, moveRow as _moveRow, deleteField as _deleteField } from \"./functions\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport omit from \"lodash/omit\";\nexport default (function (ContentModelEditorContext) {\n  return function () {\n    // TODO: @ts-adrian add proper type\n    var context = React.useContext(ContentModelEditorContext);\n\n    if (!context) {\n      throw new Error(\"useContentModelEditor must be used within a ContentModelEditorProvider\");\n    }\n\n    var state = context.state,\n        dispatch = context.dispatch;\n    var self = {\n      apollo: state.apollo,\n      data: state.data,\n      state: state,\n      getContentModel: function getContentModel(id) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var response, _get2, data, error;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return self.apollo.query({\n                    query: GET_CONTENT_MODEL,\n                    variables: {\n                      id: id\n                    }\n                  });\n\n                case 2:\n                  response = _context.sent;\n                  _get2 = _get(response, \"data.getContentModel\"), data = _get2.data, error = _get2.error;\n\n                  if (!error) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  throw new Error(error);\n\n                case 6:\n                  self.setData(function () {\n                    return _cloneDeep(data);\n                  }, false);\n                  return _context.abrupt(\"return\", response);\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))();\n      },\n      saveContentModel: function () {\n        var _saveContentModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var rawData,\n              data,\n              response,\n              _args2 = arguments;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  rawData = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : state.data;\n                  data = _cloneDeep(rawData); // Remove \"createdOn\" from entries in the \"indexes\" field.\n\n                  data.indexes = data.indexes.map(function (item) {\n                    return omit(item, [\"createdOn\"]);\n                  });\n                  _context2.next = 5;\n                  return self.apollo.mutate({\n                    mutation: UPDATE_CONTENT_MODEL,\n                    variables: {\n                      id: data.id,\n                      data: _pick(data, [\"layout\", \"fields\", \"name\", \"settings\", \"description\", \"titleFieldId\", \"indexes\"])\n                    }\n                  });\n\n                case 5:\n                  response = _context2.sent;\n                  return _context2.abrupt(\"return\", _get(response, \"data.updateContentModel\"));\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function saveContentModel() {\n          return _saveContentModel.apply(this, arguments);\n        }\n\n        return saveContentModel;\n      }(),\n\n      /**\n       * Set form data by providing a callback, which receives a fresh copy of data on which you can work on.\n       * Return new data once finished.\n       * @param setter\n       * @param saveContentModel\n       */\n      setData: function setData(setter) {\n        var saveContentModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var data = setter(_cloneDeep(self.data));\n        dispatch({\n          type: \"data\",\n          data: data\n        });\n        return saveContentModel !== false && self.saveContentModel(data);\n      },\n\n      /**\n       * Returns fields list or complete layout with fields data in it (not just field IDs).\n       * @param layout\n       * @returns {*}\n       */\n      getFields: function getFields() {\n        var layout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (!layout) {\n          return state.data.fields;\n        } // Replace every field ID with actual field object.\n\n\n        var fields = _cloneDeep(state.data.layout);\n\n        fields.forEach(function (row, rowIndex) {\n          row.forEach(function (fieldId, fieldIndex) {\n            fields[rowIndex][fieldIndex] = self.getField({\n              _id: fieldId\n            });\n          });\n        });\n        return fields;\n      },\n\n      /**\n       * Return field plugin.\n       * @param query\n       * @returns {void|?CmsEditorField}\n       */\n      getFieldPlugin: function getFieldPlugin(query) {\n        return getPlugins(\"cms-editor-field-type\").find(function (_ref) {\n          var field = _ref.field;\n\n          for (var key in query) {\n            if (!(key in field)) {\n              return null;\n            }\n\n            if (field[key] !== query[key]) {\n              return null;\n            }\n          }\n\n          return true;\n        });\n      },\n\n      /**\n       * Checks if field of given type already exists in the list of fields.\n       * @param query\n       * @returns {boolean}\n       */\n      getField: function getField(query) {\n        return state.data.fields.find(function (field) {\n          for (var key in query) {\n            if (!(key in field)) {\n              return null;\n            }\n\n            if (field[key] !== query[key]) {\n              return null;\n            }\n          }\n\n          return true;\n        });\n      },\n\n      /**\n       * Inserts a new field into the target position.\n       * @param data\n       * @param position\n       */\n      insertField: function insertField(data, position) {\n        var field = _cloneDeep(data);\n\n        if (!field._id) {\n          field._id = shortid.generate();\n        }\n\n        if (!data.type) {\n          throw new Error(\"Field \\\"type\\\" missing.\");\n        }\n\n        var fieldPlugin = self.getFieldPlugin({\n          type: data.type\n        });\n\n        if (!fieldPlugin) {\n          throw new Error(\"Invalid field \\\"type\\\".\");\n        }\n\n        self.setData(function (data) {\n          if (!Array.isArray(data.fields)) {\n            data.fields = [];\n          }\n\n          data.fields.push(field);\n\n          _moveField({\n            field: field,\n            position: position,\n            data: data\n          }); // We are dropping a new field at the specified index.\n\n\n          return data;\n        });\n      },\n\n      /**\n       * Moves field to the given target position.\n       * @param field\n       * @param position\n       * @param data\n       */\n      moveField: function moveField(_ref2) {\n        var field = _ref2.field,\n            position = _ref2.position;\n        self.setData(function (data) {\n          _moveField({\n            field: field,\n            position: position,\n            data: data\n          });\n\n          return data;\n        });\n      },\n\n      /**\n       * Moves row to a destination row.\n       * @param source\n       * @param destination\n       */\n      moveRow: function moveRow(source, destination) {\n        self.setData(function (data) {\n          _moveRow({\n            data: data,\n            source: source,\n            destination: destination\n          });\n\n          return data;\n        });\n      },\n\n      /**\n       * Updates field.\n       * @param fieldData\n       */\n      updateField: function updateField(fieldData) {\n        var field = _cloneDeep(fieldData);\n\n        self.setData(function (data) {\n          for (var i = 0; i < data.fields.length; i++) {\n            if (data.fields[i]._id === field._id) {\n              data.fields[i] = field;\n              break;\n            }\n          }\n\n          return data;\n        });\n      },\n\n      /**\n       * Deletes a field (both from the list of field and the layout).\n       * @param field\n       */\n      deleteField: function deleteField(field) {\n        self.setData(function (data) {\n          _deleteField({\n            field: field,\n            data: data\n          });\n\n          return data;\n        });\n      },\n\n      /**\n       * Returns row / index position for given field.\n       * @param field\n       * @returns {{index: number, row: number}|{index: null, row: null}}\n       */\n      getFieldPosition: function getFieldPosition(field) {\n        return _getFieldPosition({\n          field: field,\n          data: self.data\n        });\n      }\n    };\n    return self;\n  };\n});","map":null,"metadata":{},"sourceType":"module"}