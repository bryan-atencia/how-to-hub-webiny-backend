{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useState } from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport Draggable from \"@webiny/app-page-builder/editor/components/Draggable\";\nimport { dragStart, dragEnd, deactivatePlugin, dropElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { getActivePluginParams } from \"@webiny/app-page-builder/editor/selectors\";\nimport { usePageBuilder } from \"@webiny/app-page-builder/hooks/usePageBuilder\";\nimport * as Styled from \"./StyledComponents\";\nimport { css } from \"emotion\";\nimport { List, ListItem, ListItemMeta } from \"@webiny/ui/List\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { ButtonFloating } from \"@webiny/ui/Button\";\nimport { ReactComponent as AddIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/add.svg\";\nvar ADD_ELEMENT = \"pb-editor-toolbar-add-element\"; // @ts-ignore\n\nvar categoriesList = /*#__PURE__*/css({\n  backgroundColor: \"var(--mdc-theme-surface)\",\n  boxShadow: \"inset 1px 0px 5px 0px var(--mdc-theme-background)\",\n  borderTop: \"1px solid var(--mdc-theme-background)\",\n  \".mdc-list-item\": {\n    width: 150,\n    fontWeight: \"600 !important\",\n    borderBottom: \"1px solid var(--mdc-theme-background)\",\n    \"&.active\": {\n      backgroundColor: \"var(--mdc-theme-background)\",\n      color: \"var(--mdc-theme-primary)\",\n      \".mdc-list-item__meta\": {\n        color: \"var(--mdc-theme-primary)\"\n      }\n    }\n  }\n}, \"label:categoriesList;\");\n\nvar AddElement = function AddElement(_ref) {\n  var params = _ref.params,\n      dropElement = _ref.dropElement,\n      dragStart = _ref.dragStart,\n      deactivatePlugin = _ref.deactivatePlugin,\n      dragEnd = _ref.dragEnd;\n  var getGroups = useCallback(function () {\n    return getPlugins(\"pb-editor-page-element-group\");\n  }, []);\n  var getGroupElements = useCallback(function (group) {\n    return getPlugins(\"pb-editor-page-element\").filter(function (el) {\n      return el.toolbar && el.toolbar.group === group;\n    });\n  }, []);\n\n  var _useState = useState(getGroups()[0].name),\n      _useState2 = _slicedToArray(_useState, 2),\n      group = _useState2[0],\n      setGroup = _useState2[1];\n\n  var _usePageBuilder = usePageBuilder(),\n      theme = _usePageBuilder.theme;\n\n  var refresh = useCallback(function () {\n    setGroup(group);\n  }, []);\n  var enableDragOverlay = useCallback(function () {\n    var el = document.querySelector(\".pb-editor\");\n\n    if (el) {\n      el.classList.add(\"pb-editor-dragging\");\n    }\n  }, []);\n  var disableDragOverlay = useCallback(function () {\n    var el = document.querySelector(\".pb-editor\");\n\n    if (el) {\n      el.classList.remove(\"pb-editor-dragging\");\n    }\n  }, []);\n  var renderDraggable = useCallback(function (element, plugin) {\n    var elementType = plugin.elementType;\n    return /*#__PURE__*/React.createElement(Draggable, {\n      key: plugin.name,\n      target: plugin.target,\n      beginDrag: function beginDrag(props) {\n        dragStart({\n          element: {\n            type: elementType\n          }\n        });\n        setTimeout(function () {\n          return deactivatePlugin({\n            name: ADD_ELEMENT\n          });\n        }, 20);\n        return {\n          type: elementType,\n          target: props.target\n        };\n      },\n      endDrag: function endDrag(props, monitor) {\n        dragEnd({\n          element: monitor.getItem()\n        });\n      }\n    }, function (_ref2) {\n      var drag = _ref2.drag;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: drag\n      }, renderOverlay(element, null, \"Drag to Add\", plugin));\n    });\n  }, [dragStart, deactivatePlugin, dragEnd]);\n  var renderOverlay = useCallback(function (element) {\n    var onClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var label = arguments.length > 2 ? arguments[2] : undefined;\n    var plugin = arguments.length > 3 ? arguments[3] : undefined;\n    return /*#__PURE__*/React.createElement(Styled.ElementPreview, null, /*#__PURE__*/React.createElement(Styled.Overlay, null, /*#__PURE__*/React.createElement(Styled.Backdrop, {\n      className: \"backdrop\"\n    }), /*#__PURE__*/React.createElement(Styled.AddBlock, {\n      className: \"add-block\"\n    }, /*#__PURE__*/React.createElement(ButtonFloating, {\n      \"data-testid\": \"pb-editor-add-element-button-\".concat(plugin.elementType),\n      onClick: onClick,\n      label: label,\n      icon: /*#__PURE__*/React.createElement(AddIcon, null),\n      onMouseDown: enableDragOverlay,\n      onMouseUp: disableDragOverlay\n    }))), element);\n  }, [enableDragOverlay, disableDragOverlay]);\n  var renderClickable = useCallback(function (element, plugin) {\n    var item = renderOverlay(element, function () {\n      dropElement({\n        source: {\n          type: plugin.elementType\n        },\n        target: _objectSpread({}, params)\n      });\n      deactivatePlugin({\n        name: ADD_ELEMENT\n      });\n    }, \"Click to Add\", plugin);\n    return /*#__PURE__*/React.cloneElement(item, {\n      key: plugin.name\n    });\n  }, [params, deactivatePlugin, dropElement, renderOverlay]);\n  return /*#__PURE__*/React.createElement(Styled.Flex, null, /*#__PURE__*/React.createElement(List, {\n    className: categoriesList\n  }, getGroups().map(function (plugin) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      onClick: function onClick() {\n        return setGroup(plugin.name);\n      },\n      key: plugin.name,\n      className: plugin.name === group && \"active\"\n    }, plugin.group.title, plugin.group.icon && /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(Icon, {\n      icon: plugin.group.icon\n    })));\n  })), /*#__PURE__*/React.createElement(Styled.Elements, null, group && getGroupElements(group).map(function (plugin) {\n    return (params ? renderClickable : renderDraggable)( /*#__PURE__*/React.createElement(\"div\", {\n      \"data-role\": \"draggable\"\n    }, /*#__PURE__*/React.createElement(Styled.ElementBox, null, /*#__PURE__*/React.createElement(Styled.ElementTitle, null, typeof plugin.toolbar.title === \"function\" ? plugin.toolbar.title({\n      refresh: refresh\n    }) : /*#__PURE__*/React.createElement(Typography, {\n      use: \"overline\"\n    }, plugin.toolbar.title)), /*#__PURE__*/React.createElement(Styled.ElementPreviewCanvas, null, plugin.toolbar.preview({\n      theme: theme\n    })))), plugin);\n  })));\n};\n\nexport default connect(function (state) {\n  var getParams = getActivePluginParams(\"pb-editor-toolbar-add-element\");\n  return {\n    params: getParams ? getParams(state) : null\n  };\n}, {\n  dragStart: dragStart,\n  dragEnd: dragEnd,\n  deactivatePlugin: deactivatePlugin,\n  dropElement: dropElement\n})(AddElement);","map":null,"metadata":{},"sourceType":"module"}