{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _elementResizeDetector = _interopRequireDefault(require(\"element-resize-detector\"));\n\nvar _getColumnsCount = _interopRequireDefault(require(\"./utils/getColumnsCount\"));\n\nvar useEffect = React.useEffect,\n    useRef = React.useRef,\n    useState = React.useState;\nvar style = {\n  wrap: {\n    display: \"block\"\n  },\n  column: {\n    display: \"inline-block\",\n    verticalAlign: \"top\"\n  },\n  item: {\n    display: \"block\",\n    width: \"100%\",\n    overflow: \"hidden\",\n    float: \"left\"\n  }\n};\nvar elementResizeDetector = null;\n\nfunction Columned(props) {\n  var containerRef = useRef();\n\n  var _useState = useState(0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      containerWidth = _useState2[0],\n      setContainerWidth = _useState2[1];\n\n  useEffect(function () {\n    if (containerRef.current) {\n      setContainerWidth(containerRef.current.offsetWidth);\n      elementResizeDetector = (0, _elementResizeDetector.default)({\n        strategy: \"scroll\"\n      });\n      elementResizeDetector.listenTo(containerRef.current, function (element) {\n        return setContainerWidth(element.offsetWidth);\n      });\n    }\n\n    return function () {\n      if (elementResizeDetector) {\n        elementResizeDetector.uninstall(containerRef.current);\n        elementResizeDetector = null;\n      }\n    };\n  }, []);\n  var children = props.children,\n      columns = props.columns,\n      className = props.className;\n  var columnsCount = (0, _getColumnsCount.default)(columns, containerWidth);\n  var renderedColumns = [];\n\n  for (var i = 0; i < columnsCount; i++) {\n    renderedColumns.push([]);\n  }\n\n  var columnsIndexes = {\n    current: 0,\n    last: columnsCount - 1\n  }; // Will not render anything if no children are present.\n\n  React.Children.forEach(children, function (child) {\n    renderedColumns[columnsIndexes.current].push(child);\n\n    if (columnsIndexes.current === columnsIndexes.last) {\n      columnsIndexes.current = 0;\n    } else {\n      columnsIndexes.current++;\n    }\n  });\n  return React.createElement(\"react-columned\", {\n    ref: containerRef,\n    style: style.wrap,\n    class: className\n  }, renderedColumns.map(function (column, i) {\n    return React.createElement(\"react-columned-column\", {\n      key: i,\n      style: (0, _objectSpread2.default)({}, style.column, {\n        width: \"calc(100% / \".concat(columnsCount, \")\")\n      })\n    }, column.map(function (item, j) {\n      return React.createElement(\"react-columned-item\", {\n        style: style.item,\n        key: j\n      }, item);\n    }));\n  }));\n}\n\nColumned.defaultProps = {\n  columns: {\n    \"320\": 1,\n    \"480\": 2,\n    \"800\": 3,\n    \"1366\": 4,\n    \"1920\": 6\n  }\n};\nvar _default = Columned;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}