{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validationError = _interopRequireDefault(require(\"./../validationError\"));\n/**\n * @name creditCard\n * @description Credit card validator. This validator will check if the given value is a credit card number.\n * @param {any} value This is the value that will be validated.\n * @throws {ValidationError}\n * @example\n * import { validation } from '@webiny/validation';\n * validation.validate('notACreditCard', 'creditCard').then(() => {\n *  // Valid\n * }).catch(e => {\n *  // Invalid\n * });\n */\n\n\nvar _default = value => {\n  if (!value) {\n    return;\n  }\n\n  value = value + \"\";\n\n  if (value.length < 12) {\n    throw new _validationError.default(\"Credit card number too short.\");\n  }\n\n  if (/[^0-9-\\s]+/.test(value)) {\n    throw new _validationError.default(\"Credit card number invalid.\");\n  }\n\n  let nCheck = 0;\n  let nDigit = 0;\n  let bEven = false;\n  value = value.replace(/ /g, \"\");\n  value = value.replace(/\\D/g, \"\");\n\n  for (let n = value.length - 1; n >= 0; n--) {\n    const cDigit = value.charAt(n);\n    nDigit = parseInt(cDigit);\n\n    if (bEven) {\n      nDigit *= 2;\n\n      if (nDigit > 9) {\n        nDigit -= 9;\n      }\n    }\n\n    nCheck += nDigit;\n    bEven = !bEven;\n  }\n\n  if (nCheck % 10 === 0) {\n    return;\n  }\n\n  throw new _validationError.default(\"Credit card number invalid.\");\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}