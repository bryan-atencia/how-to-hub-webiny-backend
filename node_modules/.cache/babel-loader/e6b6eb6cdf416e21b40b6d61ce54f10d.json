{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { set } from \"dot-prop-immutable\";\nimport { redux } from \"@webiny/app-page-builder/editor/redux\";\nimport Column from \"./Column\";\nimport { createElement, createColumn, cloneElement, addElementToParent } from \"@webiny/app-page-builder/editor/utils\";\nimport { updateElement, deleteElement, elementCreated } from \"@webiny/app-page-builder/editor/actions\";\nimport { getParentElementWithChildren } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ReactComponent as ColumnIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/column-icon.svg\";\nexport default (function () {\n  var PreviewBox = /*#__PURE__*/styled(\"div\", {\n    target: \"ewq6cvp0\",\n    label: \"PreviewBox\"\n  })({\n    textAlign: \"center\",\n    height: 50,\n    svg: {\n      height: 50,\n      width: 50\n    }\n  });\n  return {\n    name: \"pb-editor-page-element-column\",\n    type: \"pb-editor-page-element\",\n    elementType: \"column\",\n    toolbar: {\n      title: \"Column\",\n      group: \"pb-editor-element-group-layout\",\n      preview: function preview() {\n        return /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(ColumnIcon, null));\n      }\n    },\n    settings: [\"pb-editor-page-element-settings-background\", \"pb-editor-page-element-settings-animation\", \"\", \"pb-editor-page-element-settings-border\", \"pb-editor-page-element-settings-shadow\", \"\", \"pb-editor-page-element-settings-padding\", \"pb-editor-page-element-settings-margin\", \"pb-editor-page-element-settings-horizontal-align\", \"pb-editor-page-element-settings-vertical-align\", \"\", \"pb-editor-page-element-settings-clone\", \"pb-editor-page-element-settings-delete\", \"\"],\n    target: [\"row\"],\n    create: function create() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        type: \"column\",\n        data: _objectSpread(_objectSpread({}, options.data || {}), {}, {\n          settings: {\n            margin: {\n              desktop: {\n                all: 0\n              },\n              mobile: {\n                all: 0\n              }\n            },\n            padding: {\n              desktop: {\n                all: 0\n              },\n              mobile: {\n                all: 0\n              }\n            }\n          }\n        }),\n        elements: options.elements || []\n      };\n    },\n    render: function render(props) {\n      return /*#__PURE__*/React.createElement(Column, props);\n    },\n    canDelete: function canDelete(_ref) {\n      var element = _ref.element;\n      var parent = getParentElementWithChildren(redux.store.getState(), element.id);\n      return parent.elements.length > 1;\n    },\n    onReceived: function onReceived(_ref2) {\n      var source = _ref2.source,\n          target = _ref2.target,\n          _ref2$position = _ref2.position,\n          position = _ref2$position === void 0 ? null : _ref2$position;\n      var droppedOnCenter = position === null; // Dropped a column onto a center drop zone\n\n      if (source.type === \"column\" && droppedOnCenter) {\n        return splitColumn(source, target);\n      }\n\n      handleDroppedElement(source, target, position);\n    }\n  };\n});\n\nvar handleDroppedElement = function handleDroppedElement(source, target, position) {\n  var dispatchNew = false;\n  var element;\n\n  if (source.path) {\n    element = cloneElement(source);\n  } else {\n    dispatchNew = true;\n    element = createElement(source.type, {}, target);\n  }\n\n  target = addElementToParent(element, target, position);\n  redux.store.dispatch(updateElement({\n    element: target\n  }));\n\n  if (source.path) {\n    redux.store.dispatch(deleteElement({\n      element: source\n    }));\n  }\n\n  if (dispatchNew) {\n    redux.store.dispatch(elementCreated({\n      element: element,\n      source: source\n    }));\n  }\n};\n\nvar splitColumn = function splitColumn(source, target) {\n  var dispatchNew = false;\n  var row = getParentElementWithChildren(redux.store.getState(), target.id);\n  var targetIndex = row.elements.findIndex(function (el) {\n    return el.id === target.id;\n  }); // Split target column in half\n\n  row.elements[targetIndex].data.width /= 2; // Create a new column with half of the original target width\n\n  var newColumn;\n\n  if (source.path) {\n    newColumn = cloneElement(source);\n  } else {\n    dispatchNew = true;\n    newColumn = createColumn();\n  }\n\n  newColumn = set(newColumn, \"data.width\", row.elements[targetIndex].data.width);\n  row = addElementToParent(newColumn, row, targetIndex + 1);\n  redux.store.dispatch(updateElement({\n    element: row\n  }));\n\n  if (source.path) {\n    redux.store.dispatch(deleteElement({\n      element: source\n    }));\n  }\n\n  if (dispatchNew) {\n    redux.store.dispatch(elementCreated({\n      element: newColumn,\n      source: source\n    }));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}