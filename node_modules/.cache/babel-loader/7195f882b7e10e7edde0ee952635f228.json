{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport { TextField } from \"@rmwc/textfield\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport pick from \"lodash/pick\";\n/**\n * Use Input component to store short string values, like first name, last name, e-mail etc.\n * Additionally, with rows prop, it can also be turned into a text area, to store longer strings.\n */\n\nexport var Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  var _super = _createSuper(Input);\n\n  function Input() {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          rawOnChange = _this$props.rawOnChange;\n\n      if (!onChange) {\n        return;\n      } // @ts-ignore\n\n\n      onChange(rawOnChange ? e : e.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var _this$props2, validate, onBlur;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props2 = _this.props, validate = _this$props2.validate, onBlur = _this$props2.onBlur;\n\n                if (!validate) {\n                  _context.next = 5;\n                  break;\n                } // Since we are accessing event in an async operation, we need to persist it.\n                // See https://reactjs.org/docs/events.html#event-pooling.\n\n\n                e.persist();\n                _context.next = 5;\n                return validate();\n\n              case 5:\n                onBlur && onBlur(e);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          autoFocus = _this$props3.autoFocus,\n          value = _this$props3.value,\n          label = _this$props3.label,\n          description = _this$props3.description,\n          placeholder = _this$props3.placeholder,\n          rows = _this$props3.rows,\n          validation = _this$props3.validation,\n          icon = _this$props3.icon,\n          trailingIcon = _this$props3.trailingIcon,\n          onEnter = _this$props3.onEnter,\n          props = _objectWithoutProperties(_this$props3, [\"autoFocus\", \"value\", \"label\", \"description\", \"placeholder\", \"rows\", \"validation\", \"icon\", \"trailingIcon\", \"onEnter\"]);\n\n      var inputValue = value;\n\n      if (value === null || typeof value === \"undefined\") {\n        inputValue = \"\";\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextField, Object.assign({}, pick(props, Input.rmwcProps), {\n        onKeyDown: function onKeyDown(e) {\n          if (typeof onEnter === \"function\" && e.key === \"Enter\") {\n            onEnter();\n          }\n\n          if (typeof props.onKeyDown === \"function\") {\n            for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              rest[_key2 - 1] = arguments[_key2];\n            }\n\n            return props.onKeyDown.apply(props, [e].concat(rest));\n          }\n        },\n        autoFocus: autoFocus,\n        textarea: Boolean(rows),\n        value: inputValue,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        label: label,\n        icon: icon,\n        placeholder: !label && placeholder || undefined,\n        trailingIcon: trailingIcon,\n        rows: this.props.rows\n      })), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {\n        error: true\n      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\n_defineProperty(Input, \"defaultProps\", {\n  rawOnChange: false,\n  validation: {\n    isValid: null,\n    message: null\n  }\n});\n\n_defineProperty(Input, \"rmwcProps\", [\"label\", \"type\", \"step\", \"disabled\", \"placeholder\", \"outlined\", \"onKeyDown\", \"onKeyPress\", \"onKeyUp\", \"onFocus\", \"rootProps\", \"fullwidth\", \"inputRef\", \"className\", \"maxLength\", \"characterCount\"]);","map":null,"metadata":{},"sourceType":"module"}