{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport { set } from \"dot-prop-immutable\";\nimport { useRouter } from \"@webiny/react-router\";\nimport Downshift from \"downshift\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport classnames from \"classnames\";\nimport { Hotkeys } from \"react-hotkeyz\"; // UI components\n\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport SearchBarDropdown from \"./SearchBarDropdown\"; // Icons\n\nimport { ReactComponent as SearchIcon } from \"@svgr/webpack!./icons/round-search-24px.svg\"; // Local components\n\nimport { SearchBarWrapper, SearchBarInputWrapper, SearchShortcut, searchBarInput, icon, searchWrapper } from \"./styled\";\n\nvar SearchBar = /*#__PURE__*/function (_React$Component) {\n  _inherits(SearchBar, _React$Component);\n\n  var _super = _createSuper(SearchBar);\n  /**\n   * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.\n   */\n\n  /**\n   * At some point we must programmatically focus the input.\n   */\n\n  /**\n   * Let's check if current route is defined in one of the registered plugins.\n   * If so, then check current route query for search term and set it as default value of search input.\n   * @param props\n   */\n\n\n  function SearchBar(props) {\n    var _this;\n\n    _classCallCheck(this, SearchBar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      active: false,\n      searchTerm: {\n        previous: \"\",\n        current: \"\"\n      },\n      plugins: {\n        // List of all registered \"admin-global-search\" plugins.\n        get list() {\n          return getPlugins(\"admin-global-search\");\n        },\n\n        hotKeys: getPlugins(\"admin-global-search-prevent-hotkey\"),\n        // Current plugin - set by examining current route and its query params (on construct).\n        current: undefined\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"downshift\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"input\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenHotkey\", function (e) {\n      for (var i = 0; i < _this.state.plugins.hotKeys.length; i++) {\n        var hotKey = _this.state.plugins.hotKeys[i];\n\n        if (hotKey.preventOpen(e)) {\n          return;\n        }\n      }\n\n      e.preventDefault();\n\n      _this.input.current.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitSearchTerm\", function (plugin) {\n      _this.setState(function (state) {\n        var newState = set(state, \"searchTerm.previous\", state.searchTerm.current);\n        return set(newState, \"plugins.current\", plugin);\n      }, function () {\n        var query = new URLSearchParams();\n\n        if (_this.state.searchTerm.current) {\n          // If \"search\" key in the plugin was defined, it means SearchInput values were set. Otherwise,\n          // we need to send the plain string into the \"search\" query param. This behavior was needed\n          // eg. for pages, since Page entity doesn't use regular SearchInput type, but plain string.\n          if (plugin.search) {\n            query.set(\"search\", JSON.stringify(_objectSpread({\n              query: _this.state.searchTerm.current\n            }, plugin.search)));\n          } else {\n            query.set(\"search\", _this.state.searchTerm.current);\n          }\n        }\n\n        _this.props.history.push({\n          pathname: plugin.route,\n          search: query.toString()\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cancelSearchTerm\", function () {\n      _this.setState(function (state) {\n        state.searchTerm.current = state.searchTerm.previous;\n        return state;\n      });\n    });\n\n    _this.state.plugins.current = _this.state.plugins.list.find(function (p) {\n      return p.route === props.location.pathname;\n    });\n\n    if (_this.state.plugins.current) {\n      var search;\n      var query = new URLSearchParams(props.location.search);\n\n      try {\n        search = JSON.parse(query.get(\"search\") || \"\").query;\n      } catch (e) {\n        search = query.get(\"search\");\n      }\n\n      _this.state.searchTerm.current = search || \"\";\n      _this.state.searchTerm.previous = _this.state.searchTerm.current;\n    }\n\n    return _this;\n  }\n\n  _createClass(SearchBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Downshift, {\n        ref: this.downshift,\n        itemToString: function itemToString(item) {\n          return item && item.label;\n        }\n      }, function (downshiftProps) {\n        var isOpen = downshiftProps.isOpen,\n            openMenu = downshiftProps.openMenu,\n            closeMenu = downshiftProps.closeMenu,\n            getInputProps = downshiftProps.getInputProps;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            width: \"100%\"\n          }\n        }, /*#__PURE__*/React.createElement(Hotkeys, {\n          zIndex: 10,\n          keys: {\n            // @ts-ignore\n            esc: function esc() {\n              return document.activeElement.blur();\n            },\n            \"/\": _this2.handleOpenHotkey\n          }\n        }), /*#__PURE__*/React.createElement(Hotkeys, {\n          zIndex: 11,\n          disabled: !isOpen,\n          keys: {\n            esc: function esc() {\n              _this2.cancelSearchTerm();\n\n              closeMenu();\n            },\n            enter: function enter() {\n              return setTimeout(function () {\n                var selectedItem = _this2.downshift.current.state.selectedItem;\n\n                if (selectedItem) {\n                  closeMenu();\n\n                  _this2.submitSearchTerm(selectedItem);\n                }\n              });\n            }\n          }\n        }), /*#__PURE__*/React.createElement(Elevation, {\n          className: classnames(searchWrapper, {\n            active: _this2.state.active\n          }),\n          z: 0\n        }, /*#__PURE__*/React.createElement(SearchBarWrapper, null, /*#__PURE__*/React.createElement(SearchBarInputWrapper, null, /*#__PURE__*/React.createElement(Icon, {\n          className: icon,\n          icon: /*#__PURE__*/React.createElement(SearchIcon, null)\n        }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", getInputProps({\n          placeholder: \"Search...\",\n          className: classnames(\"mdc-text-field__input\", searchBarInput),\n          ref: _this2.input,\n          value: _this2.state.searchTerm.current,\n          // @ts-ignore\n          onClick: openMenu,\n          onBlur: function onBlur() {\n            _this2.cancelSearchTerm();\n\n            _this2.setState({\n              active: false\n            });\n          },\n          onFocus: function onFocus() {\n            _this2.setState({\n              active: true\n            });\n\n            openMenu();\n          },\n          onChange: function onChange(e) {\n            var value = e.target.value || \"\";\n\n            _this2.setState(function (state) {\n              state.searchTerm.current = value;\n              return state;\n            });\n          }\n        }))), /*#__PURE__*/React.createElement(SearchShortcut, null, \"/\"))), isOpen && /*#__PURE__*/React.createElement(SearchBarDropdown, {\n          context: _this2\n        })));\n      });\n    }\n  }]);\n\n  return SearchBar;\n}(React.Component);\n\nvar SearchBarContainer = function SearchBarContainer() {\n  var routerProps = useRouter();\n  return /*#__PURE__*/React.createElement(SearchBar, routerProps);\n};\n\nexport default SearchBarContainer;","map":null,"metadata":{},"sourceType":"module"}