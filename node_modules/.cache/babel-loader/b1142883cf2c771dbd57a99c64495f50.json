{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _get from \"lodash/get\";\nimport * as React from \"react\";\nimport invariant from \"invariant\";\n\nvar createBind = function createBind(form) {\n  var Bind = function Bind(props) {\n    var name = props.name,\n        _props$validators = props.validators,\n        validators = _props$validators === void 0 ? [] : _props$validators,\n        children = props.children,\n        defaultValue = props.defaultValue,\n        beforeChange = props.beforeChange,\n        afterChange = props.afterChange;\n    invariant(name, \"Bind component must have a \\\"name\\\" prop.\"); // Track component rendering\n\n    form.lastRender.push(name); // Store validators and custom messages\n\n    form.inputs[name] = {\n      defaultValue: defaultValue,\n      validators: validators\n    }; // Build new input props\n\n    var newProps = {\n      disabled: false,\n      form: form,\n      validate: form.getValidateFn(name),\n      validation: form.state.validation[name] || {\n        isValid: null,\n        message: null,\n        results: null\n      },\n      value: _get(form.state, \"data.\".concat(name), defaultValue),\n      onChange: form.getOnChangeFn({\n        name: name,\n        beforeChange: beforeChange,\n        afterChange: afterChange\n      })\n    }; // If Form has a `disabled` prop we must evaluate it to see if form input needs to be disabled\n\n    if (form.props.disabled) {\n      var inputDisabledByForm = typeof form.props.disabled === \"function\" ? form.props.disabled({\n        data: _objectSpread({}, form.state.data)\n      }) : form.props.disabled; // Only override the input prop if the entire Form is disabled\n\n      if (inputDisabledByForm) {\n        newProps.disabled = true;\n      }\n    }\n\n    form.inputs[name].props = newProps;\n\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      if (!newProps.disabled) {\n        newProps.disabled = children.props.disabled;\n      }\n\n      return /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, children.props), newProps));\n    }\n\n    return children(newProps);\n  };\n\n  return Bind;\n};\n\nexport { createBind };","map":null,"metadata":{},"sourceType":"module"}