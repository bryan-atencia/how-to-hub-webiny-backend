{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport * as React from \"react\";\nimport { registerPlugins, getPlugins } from \"@webiny/plugins\";\nexport var PageBuilderContext = React.createContext(null);\nexport var PageBuilderProvider = function PageBuilderProvider(_ref) {\n  var _ref$theme = _ref.theme,\n      bcTheme = _ref$theme === void 0 ? null : _ref$theme,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"theme\", \"children\"]);\n\n  var value = React.useMemo(function () {\n    var theme = Object.assign.apply(Object, [{}, bcTheme].concat(_toConsumableArray(getPlugins(\"pb-theme\").map(function (pl) {\n      return pl.theme;\n    })))); // For backwards compatibility, grab any page layouts defined in the theme and convert them to plugins\n\n    if (theme.layouts) {\n      registerPlugins(theme.layouts.map(function (l) {\n        return {\n          name: \"pb-page-layout-\".concat(l.name),\n          type: \"pb-page-layout\",\n          layout: l\n        };\n      }));\n    }\n\n    return _objectSpread({\n      theme: theme\n    }, rest);\n  }, []);\n  return /*#__PURE__*/React.createElement(PageBuilderContext.Provider, {\n    value: value\n  }, children);\n};\nexport var PageBuilderConsumer = function PageBuilderConsumer(_ref2) {\n  var children = _ref2.children;\n  return /*#__PURE__*/React.createElement(PageBuilderContext.Consumer, null, function (props) {\n    return /*#__PURE__*/React.cloneElement(children, {\n      pageBuilder: props\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}