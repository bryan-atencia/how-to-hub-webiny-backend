{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { FoundationComponent, randomId } from '@rmwc/base';\nimport { FormField } from '@rmwc/formfield';\n\nvar ToggleableFoundationComponent =\n/** @class */\nfunction (_super) {\n  __extends(ToggleableFoundationComponent, _super);\n\n  function ToggleableFoundationComponent() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // @ts-ignore\n\n\n    _this.generatedId = randomId(_this.constructor.displayName);\n    return _this;\n  }\n\n  Object.defineProperty(ToggleableFoundationComponent.prototype, \"hasLabel\", {\n    /** @internal */\n    get: function get() {\n      return this.props.label || this.props.children;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToggleableFoundationComponent.prototype, \"id\", {\n    /** @internal */\n    get: function get() {\n      return this.props.id || this.generatedId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToggleableFoundationComponent.prototype, \"toggleRootProps\", {\n    /** @internal */\n    get: function get() {\n      var _a = this.props,\n          className = _a.className,\n          style = _a.style,\n          disabled = _a.disabled,\n          _b = _a.rootProps,\n          rootProps = _b === void 0 ? {} : _b;\n\n      if (this.hasLabel) {\n        // @ts-ignore\n        return this.root.props({\n          disabled: disabled\n        });\n      }\n\n      return __assign({}, this.root.props(__assign({\n        className: className,\n        style: style,\n        disabled: disabled\n      }, rootProps)));\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ToggleableFoundationComponent.prototype.renderToggle = function (toggle) {\n    /**\n     * We have to conditionally wrap our checkbox in a formfield\n     * If we have a label\n     */\n    var _a = this.props,\n        className = _a.className,\n        style = _a.style,\n        rootProps = _a.rootProps,\n        label = _a.label,\n        children = _a.children;\n\n    if (this.hasLabel) {\n      return React.createElement(FormField, __assign({}, rootProps, {\n        className: className,\n        style: style\n      }), toggle, React.createElement(\"label\", {\n        id: this.id + 'label',\n        htmlFor: this.id\n      }, label, children));\n    } else {\n      return toggle;\n    }\n  };\n\n  return ToggleableFoundationComponent;\n}(FoundationComponent);\n\nexport { ToggleableFoundationComponent };","map":null,"metadata":{},"sourceType":"module"}