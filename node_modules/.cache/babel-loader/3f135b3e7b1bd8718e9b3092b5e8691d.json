{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useRef, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { useFocused, useSlate } from \"slate-react\";\nimport { Editor, Transforms } from \"slate\";\nvar Tooltip = /*#__PURE__*/styled(\"span\", {\n  target: \"enrzte50\",\n  label: \"Tooltip\"\n})({\n  display: \"flex\",\n  flexDirection: \"row\",\n  position: \"fixed\",\n  top: 20,\n  left: 0,\n  zIndex: 100,\n  width: \"auto\",\n  maxWidth: 520,\n  \"> span:not(:first-of-type)\": {\n    marginLeft: 10\n  }\n});\nvar tooltipInner = /*#__PURE__*/css({\n  padding: \"5px 10px\",\n  borderRadius: 2,\n  fontSize: \"0.8rem\",\n  a: {\n    cursor: \"pointer\"\n  }\n}, \"label:tooltipInner;\");\n\nvar compressLink = function compressLink(href) {\n  var start = href.substr(0, 24);\n  var end = href.substr(24).substr(-24);\n  return [start, \"...\", end].join(\"\");\n};\n\nvar getSelectionRect = function getSelectionRect() {\n  var native = window.getSelection();\n\n  if (native.type === \"None\") {\n    return {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0\n    };\n  }\n\n  var range = native.getRangeAt(0);\n  return range.getBoundingClientRect();\n};\n\nexport var Portal = function Portal(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/ReactDOM.createPortal(children, document.body);\n};\nexport var LinkTooltip = function LinkTooltip(_ref2) {\n  var activatePlugin = _ref2.activatePlugin;\n  var editor = useSlate();\n  var focused = useFocused();\n  var menuRef = useRef(null);\n  var menu = menuRef.current;\n\n  var _ref3 = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === \"link\";\n    }\n  }),\n      _ref4 = _slicedToArray(_ref3, 1),\n      inline = _ref4[0];\n\n  var link = !!inline ? inline[0] : null;\n  useEffect(function () {\n    if (!link && focused || !focused) {\n      if (menu) {\n        menu.style.display = \"none\";\n      }\n\n      return;\n    } // Calculate position\n\n\n    if (menu) {\n      menu.style.display = \"flex\";\n      var editorRect = menu.parentNode.getBoundingClientRect();\n      var menuRect = menu.getBoundingClientRect();\n\n      var _getSelectionRect = getSelectionRect(),\n          top = _getSelectionRect.top,\n          left = _getSelectionRect.left,\n          height = _getSelectionRect.height;\n\n      var menuRight = left + menuRect.width;\n      var diff = editorRect.right - menuRight; // Position menu\n\n      var position = {\n        top: top + height,\n        left: diff < 0 ? left + diff - 30 : left\n      };\n      menu.style.top = position.top + \"px\";\n      menu.style.left = position.left + \"px\";\n    }\n  });\n  var activateLink = useCallback(function () {\n    activatePlugin(\"link\");\n  }, []);\n  var removeLink = useCallback(function () {\n    Transforms.unwrapNodes(editor, {\n      match: function match(n) {\n        return n.type === \"link\";\n      }\n    });\n  }, []);\n  var href = link ? link.href : \"\";\n  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Tooltip, {\n    ref: menuRef,\n    style: {\n      display: \"none\"\n    }\n  }, /*#__PURE__*/React.createElement(Elevation, {\n    className: tooltipInner,\n    z: 1\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"Link: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: href,\n    target: \"_blank\"\n  }, href.length > 50 ? compressLink(href) : href)), \" \", \"| \", /*#__PURE__*/React.createElement(\"a\", {\n    onMouseDown: activateLink\n  }, \"Change\"), \" |\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    onMouseDown: removeLink\n  }, \"Remove\"))));\n};","map":null,"metadata":{},"sourceType":"module"}