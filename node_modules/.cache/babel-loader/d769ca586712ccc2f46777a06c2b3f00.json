{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { componentFactory, FoundationComponent } from '@rmwc/base';\nimport * as React from 'react';\nimport { MDCTopAppBarFoundation, MDCFixedTopAppBarFoundation, MDCShortTopAppBarFoundation } from '@material/top-app-bar';\nimport { IconButton } from '@rmwc/icon-button';\nvar TopAppBarRoot = componentFactory({\n  displayName: 'TopAppBarRoot',\n  tag: 'header',\n  classNames: function classNames(props) {\n    return ['mdc-top-app-bar', {\n      'mdc-top-app-bar--fixed': props.fixed,\n      'mdc-top-app-bar--prominent': props.prominent,\n      'mdc-top-app-bar--short': props.short || props.shortCollapsed,\n      'mdc-top-app-bar--short-collapsed': props.shortCollapsed,\n      'mdc-top-app-bar--dense': props.dense\n    }];\n  },\n  consumeProps: ['fixed', 'prominent', 'short', 'shortCollapsed', 'dense']\n});\n/** A row for the app bar. */\n\nexport var TopAppBarRow = componentFactory({\n  displayName: 'TopAppBarRow',\n  classNames: ['mdc-top-app-bar__row']\n});\n/** A section for the app bar. */\n\nexport var TopAppBarSection = componentFactory({\n  displayName: 'TopAppBarSection',\n  tag: 'section',\n  classNames: function classNames(props) {\n    return ['mdc-top-app-bar__section', {\n      'mdc-top-app-bar__section--align-start': props.alignStart,\n      'mdc-top-app-bar__section--align-end': props.alignEnd\n    }];\n  },\n  consumeProps: ['alignStart', 'alignEnd']\n});\n/** A navigation icon for the top app bar. This is an instance of the Icon component. */\n\nexport var TopAppBarNavigationIcon = componentFactory({\n  displayName: 'TopAppBarNavigationIcon',\n  classNames: ['mdc-top-app-bar__navigation-icon'],\n  tag: IconButton\n});\n/** Action items for the top app bar. This is an instance of the IconButton component.*/\n\nexport var TopAppBarActionItem = componentFactory({\n  displayName: 'TopAppBarActionItem',\n  classNames: ['mdc-top-app-bar__action-item'],\n  tag: IconButton\n});\n/** A title for the top app bar. */\n\nexport var TopAppBarTitle = componentFactory({\n  displayName: 'TopAppBarTitle',\n  classNames: ['mdc-top-app-bar__title']\n});\n/** An optional component to fill the space when the TopAppBar is fixed. Place it directly after the TopAppBar. */\n\nexport var TopAppBarFixedAdjust = componentFactory({\n  displayName: 'TopAppBarFixedAdjust',\n  classNames: function classNames(props) {\n    return ['mdc-top-app-bar--fixed-adjust', {\n      'mdc-top-app-bar--dense-fixed-adjust': props.dense,\n      'mdc-top-app-bar--prominent-fixed-adjust': props.prominent,\n      'mdc-top-app-bar--dense-prominent-fixed-adjust': props.denseProminent,\n      'mdc-top-app-bar--short-fixed-adjust': props.short\n    }];\n  },\n  consumeProps: ['dense', 'denseProminent', 'prominent', 'short']\n});\n/** A TopAppBar component */\n\nvar TopAppBarBase =\n/** @class */\nfunction (_super) {\n  __extends(TopAppBarBase, _super);\n\n  function TopAppBarBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.root = _this.createElement('root');\n    _this.navIcon = null;\n    _this.scrollTarget = null;\n    return _this;\n  }\n\n  Object.defineProperty(TopAppBarBase.prototype, \"window\", {\n    get: function get() {\n      return this.root.ref && this.root.ref.ownerDocument && this.root.ref.ownerDocument.defaultView ? this.root.ref.ownerDocument.defaultView : window;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TopAppBarBase.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    if (!this.props.scrollTarget) {\n      this.handleTargetScroll = this.foundation.handleTargetScroll.bind(this.foundation);\n      this.setScrollTarget(this.window);\n    }\n\n    this.navIcon = this.root.ref && this.root.ref.querySelector(MDCTopAppBarFoundation.strings.NAVIGATION_ICON_SELECTOR);\n    this.handleNavigationClick = this.foundation.handleNavigationClick.bind(this.foundation);\n    this.navIcon && this.navIcon.addEventListener('click', this.handleNavigationClick);\n  };\n\n  TopAppBarBase.prototype.componentWillUnmount = function () {\n    this.navIcon && this.navIcon.removeEventListener('click', this.handleNavigationClick);\n\n    _super.prototype.componentWillUnmount.call(this);\n  };\n\n  TopAppBarBase.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    var adapter = {\n      hasClass: function hasClass(className) {\n        return _this.root.hasClass(className);\n      },\n      addClass: function addClass(className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function removeClass(className) {\n        return _this.root.removeClass(className);\n      },\n      setStyle: function setStyle(property, value) {\n        return _this.root.ref && _this.root.ref.style.setProperty(property, value);\n      },\n      getTopAppBarHeight: function getTopAppBarHeight() {\n        return _this.root.ref ? _this.root.ref.clientHeight : 0;\n      },\n      notifyNavigationIconClicked: function notifyNavigationIconClicked() {\n        _this.emit('onNav', {});\n      },\n      registerScrollHandler: function registerScrollHandler(handler) {\n        return _this.scrollTarget && _this.scrollTarget.addEventListener('scroll', handler);\n      },\n      deregisterScrollHandler: function deregisterScrollHandler(handler) {\n        return _this.scrollTarget && _this.scrollTarget.removeEventListener('scroll', handler);\n      },\n      registerResizeHandler: function registerResizeHandler(handler) {\n        return _this.scrollTarget && _this.scrollTarget.addEventListener('resize', handler);\n      },\n      deregisterResizeHandler: function deregisterResizeHandler(handler) {\n        return _this.scrollTarget && _this.scrollTarget.removeEventListener('resize', handler);\n      },\n      getViewportScrollY: function getViewportScrollY() {\n        return _this.scrollTarget && _this.scrollTarget['pageYOffset' in _this.scrollTarget ? 'pageYOffset' : 'scrollTop'];\n      },\n      getTotalActionItems: function getTotalActionItems() {\n        return _this.root.ref ? _this.root.ref.querySelectorAll(MDCTopAppBarFoundation.strings.ACTION_ITEM_SELECTOR).length : 0;\n      }\n    };\n    var foundation;\n\n    if (this.props.short) {\n      foundation = new MDCShortTopAppBarFoundation(adapter);\n    } else if (this.props.fixed) {\n      foundation = new MDCFixedTopAppBarFoundation(adapter);\n    } else {\n      foundation = new MDCTopAppBarFoundation(adapter);\n    }\n\n    return foundation;\n  };\n\n  TopAppBarBase.prototype.setScrollTarget = function (target) {\n    // Remove scroll handler from the previous scroll target\n    this.scrollTarget && this.scrollTarget.removeEventListener('scroll', this.handleTargetScroll);\n    this.scrollTarget = target; // Initialize scroll handler on the new scroll target\n\n    this.handleTargetScroll = this.foundation.handleTargetScroll.bind(this.foundation);\n    this.scrollTarget.addEventListener('scroll', this.handleTargetScroll);\n  };\n\n  TopAppBarBase.prototype.sync = function (props) {\n    var _this = this;\n\n    this.syncProp(props.scrollTarget, this.scrollTarget, function () {\n      _this.scrollTarget = props.scrollTarget || _this.window;\n\n      _this.setScrollTarget(_this.scrollTarget);\n    });\n  };\n\n  TopAppBarBase.prototype.render = function () {\n    var _a = this.props,\n        onNav = _a.onNav,\n        scrollTarget = _a.scrollTarget,\n        rest = __rest(_a, [\"onNav\", \"scrollTarget\"]);\n\n    return React.createElement(TopAppBarRoot, __assign({}, this.root.props(rest), {\n      ref: this.root.setRef\n    }));\n  };\n\n  TopAppBarBase.displayName = 'TopAppBar';\n  return TopAppBarBase;\n}(FoundationComponent);\n\nexport var TopAppBar = function TopAppBar(props) {\n  return React.createElement(TopAppBarBase, __assign({\n    key: props.short ? 'short' : props.fixed ? 'fixed' : 'top-app-bar'\n  }, props));\n};\n/** A simplified syntax for creating an AppBar. */\n\nvar SimpleTopAppBar =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTopAppBar, _super);\n\n  function SimpleTopAppBar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleTopAppBar.prototype.render = function () {\n    var _a = this.props,\n        title = _a.title,\n        actionItems = _a.actionItems,\n        navigationIcon = _a.navigationIcon,\n        startContent = _a.startContent,\n        endContent = _a.endContent,\n        rest = __rest(_a, [\"title\", \"actionItems\", \"navigationIcon\", \"startContent\", \"endContent\"]);\n\n    return React.createElement(TopAppBar, __assign({}, rest), React.createElement(TopAppBarRow, null, React.createElement(TopAppBarSection, {\n      alignStart: true\n    }, !!navigationIcon && React.createElement(TopAppBarNavigationIcon, __assign({\n      icon: \"menu\"\n    }, typeof navigationIcon === 'boolean' ? {} : navigationIcon)), !!title && React.createElement(TopAppBarTitle, null, title), startContent), (!!actionItems || endContent) && React.createElement(TopAppBarSection, {\n      alignEnd: true\n    }, endContent, !!actionItems && actionItems.map(function (actionItemProps, index) {\n      return React.createElement(TopAppBarActionItem, __assign({}, actionItemProps, {\n        key: index\n      }));\n    }))));\n  };\n\n  SimpleTopAppBar.displayName = 'SimpleTopAppBar';\n  return SimpleTopAppBar;\n}(React.Component);\n\nexport { SimpleTopAppBar };","map":null,"metadata":{},"sourceType":"module"}