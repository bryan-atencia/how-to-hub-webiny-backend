{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCCheckboxFoundation } from '@material/checkbox';\nimport { componentFactory } from '@rmwc/base';\nimport { withRipple } from '@rmwc/ripple';\nimport { ToggleableFoundationComponent } from '@rmwc/toggleable';\n/**\n * This is an awful freaking bugfix\n * Basically, MDC decided that patching the native getter and setter\n * on a checkbox would be fun which consequently kills Reacts ability\n * to do the same.\n */\n// @ts-ignore\n\nMDCCheckboxFoundation.prototype.installPropertyChangeHooks_ = function () {};\n\nvar CheckboxRoot = withRipple({\n  surface: false,\n  unbounded: true\n})(componentFactory({\n  displayName: 'CheckboxRoot',\n  classNames: function (props) {\n    return ['mdc-checkbox', {\n      'mdc-checkbox--disabled': props.disabled\n    }];\n  },\n  consumeProps: ['disabled']\n}));\nvar CheckboxNativeControl = componentFactory({\n  displayName: 'CheckboxNativeControl',\n  defaultProps: {\n    type: 'checkbox'\n  },\n  tag: 'input',\n  classNames: ['mdc-checkbox__native-control']\n});\n\nvar CheckboxBackground =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxBackground, _super);\n\n  function CheckboxBackground() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CheckboxBackground.prototype.shouldComponentUpdate = function () {\n    return false;\n  };\n\n  CheckboxBackground.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: \"mdc-checkbox__background\"\n    }, React.createElement(\"svg\", {\n      className: \"mdc-checkbox__checkmark\",\n      viewBox: \"0 0 24 24\"\n    }, React.createElement(\"path\", {\n      className: \"mdc-checkbox__checkmark-path\",\n      fill: \"none\",\n      stroke: \"white\",\n      d: \"M1.73,12.91 8.1,19.28 22.79,4.59\"\n    })), React.createElement(\"div\", {\n      className: \"mdc-checkbox__mixedmark\"\n    }));\n  };\n\n  CheckboxBackground.displayName = 'CheckboxBackground';\n  return CheckboxBackground;\n}(React.Component);\n/** A Checkbox component. */\n\n\nvar Checkbox =\n/** @class */\nfunction (_super) {\n  __extends(Checkbox, _super);\n\n  function Checkbox(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.nativeCb = _this.createElement('nativeCb');\n    _this.root = _this.createElement('root');\n    _this.handleAnimationEnd = _this.handleAnimationEnd.bind(_this);\n    _this.handleOnChange = _this.handleOnChange.bind(_this);\n    return _this;\n  }\n\n  Checkbox.prototype.sync = function (nextProps) {\n    this.foundation && this.foundation.handleChange();\n\n    if (this.nativeCb.ref && nextProps.indeterminate !== this.nativeCb.ref.indeterminate) {\n      this.nativeCb.ref.indeterminate = !!nextProps.indeterminate;\n    }\n  };\n\n  Checkbox.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCCheckboxFoundation({\n      addClass: function (className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function (className) {\n        return _this.root.removeClass(className);\n      },\n      setNativeControlAttr: function (attr, value) {\n        return _this.nativeCb.setProp(attr, value);\n      },\n      removeNativeControlAttr: function (attr) {\n        return _this.nativeCb.removeProp(attr);\n      },\n      isIndeterminate: function () {\n        return !!_this.props.indeterminate;\n      },\n      isChecked: function () {\n        return _this.props.checked !== undefined ? !!_this.props.checked : !!_this.nativeCb.ref && _this.nativeCb.ref.checked;\n      },\n      hasNativeControl: function () {\n        return !!_this.nativeCb.ref;\n      },\n      setNativeControlDisabled: function (disabled) {\n        return _this.nativeCb.setProp('disabled', disabled);\n      },\n      forceLayout: function () {\n        return _this.root.ref && _this.root.ref.offsetWidth;\n      },\n      isAttachedToDOM: function () {\n        return true;\n      }\n    });\n  };\n\n  Checkbox.prototype.handleAnimationEnd = function (evt) {\n    this.props.onAnimationEnd && this.props.onAnimationEnd(evt);\n    this.foundation && this.foundation.handleAnimationEnd();\n  };\n\n  Checkbox.prototype.handleOnChange = function (evt) {\n    this.props.onChange && this.props.onChange(evt);\n    this.sync(this.props);\n  };\n\n  Checkbox.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        label = _a.label,\n        style = _a.style,\n        indeterminate = _a.indeterminate,\n        inputRef = _a.inputRef,\n        rest = __rest(_a, [\"children\", \"className\", \"label\", \"style\", \"indeterminate\", \"inputRef\"]);\n\n    var checkbox = React.createElement(CheckboxRoot, __assign({}, this.toggleRootProps, {\n      ref: this.root.setRef,\n      onAnimationEnd: this.handleAnimationEnd\n    }), React.createElement(CheckboxNativeControl, __assign({}, this.nativeCb.props(rest), {\n      ref: function (el) {\n        _this.nativeCb.setRef(el);\n\n        if (typeof inputRef === 'function') {\n          inputRef && inputRef(el);\n        } else if (typeof inputRef === 'object') {\n          inputRef.current = el;\n        }\n      },\n      id: this.id,\n      onChange: this.handleOnChange\n    })), React.createElement(CheckboxBackground, null));\n    return this.renderToggle(checkbox);\n  };\n\n  Checkbox.displayName = 'Checkbox';\n  return Checkbox;\n}(ToggleableFoundationComponent);\n\nexport { Checkbox };","map":null,"metadata":{},"sourceType":"module"}