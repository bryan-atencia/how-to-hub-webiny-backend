{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCChipFoundation } from '@material/chips';\nimport { FoundationComponent, componentFactory, randomId, deprecationWarning } from '@rmwc/base';\nimport { withRipple } from '@rmwc/ripple';\nimport { Icon } from '@rmwc/icon';\nvar ChipRoot = withRipple({})(componentFactory({\n  tag: 'button',\n  displayName: 'ChipRoot',\n  classNames: function (props) {\n    return ['mdc-chip', {\n      'mdc-chip--selected': props.selected\n    }];\n  },\n  consumeProps: ['selected']\n}));\n/** A Chip component. */\n\nvar Chip =\n/** @class */\nfunction (_super) {\n  __extends(Chip, _super);\n\n  function Chip(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.root = _this.createElement('root');\n    _this.id = '';\n    _this.checkmarkEl = null;\n    _this.handleInteraction = _this.handleInteraction.bind(_this);\n    _this.handleTransitionEnd = _this.handleTransitionEnd.bind(_this);\n    _this.handleTrailingIconInteraction = _this.handleTrailingIconInteraction.bind(_this);\n    return _this;\n  }\n\n  Chip.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    this.id = this.root.ref && this.root.ref.id ? this.root.ref.id : this._reactInternalFiber.key || randomId('chip');\n  };\n\n  Chip.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCChipFoundation({\n      addClass: function (className) {\n        _this.root.addClass(className);\n      },\n      removeClass: function (className) {\n        return _this.root.removeClass(className);\n      },\n      hasClass: function (className) {\n        return _this.root.hasClass(className);\n      },\n      addClassToLeadingIcon: function (className) {// handled by props\n      },\n      removeClassFromLeadingIcon: function (className) {// handled by props\n      },\n      eventTargetHasClass: function (target, className) {\n        return _this.root.hasClass(className) || target.classList.contains(className);\n      },\n      notifyInteraction: function () {\n        return _this.emit('onInteraction', {\n          chipId: _this.id\n        }, true\n        /* shouldBubble */\n        );\n      },\n      notifySelection: function (selected) {\n        return _this.emit('onSelect', {\n          chipId: _this.id,\n          selected: selected\n        }, true\n        /* shouldBubble */\n        );\n      },\n      notifyTrailingIconInteraction: function () {\n        return _this.emit('onTrailingIconInteraction', {\n          chipId: _this.id\n        }, true\n        /* shouldBubble */\n        );\n      },\n      notifyRemoval: function () {\n        return _this.emit('onRemove', {\n          chipId: _this.id,\n          root: _this.root.ref\n        }, true\n        /* shouldBubble */\n        );\n      },\n      getComputedStyleValue: function (propertyName) {\n        return _this.root.ref ? window.getComputedStyle(_this.root.ref).getPropertyValue(propertyName) : '';\n      },\n      setStyleProperty: function (propertyName, value) {\n        _this.root.setStyle(propertyName, value);\n      },\n      hasLeadingIcon: function () {\n        return !!_this.props.icon;\n      },\n      getRootBoundingClientRect: function () {\n        return _this.root.ref ? _this.root.ref.getBoundingClientRect() : {};\n      },\n      getCheckmarkBoundingClientRect: function () {\n        return _this.checkmarkEl && _this.checkmarkEl.getBoundingClientRect();\n      },\n      setAttr: function (attr, value) {\n        return _this.root.setProp(attr, value);\n      }\n    });\n  };\n\n  Chip.prototype.handleInteraction = function (evt) {\n    evt.type === 'click' && this.props.onClick && this.props.onClick(evt);\n    evt.type === 'keydown' && this.props.onKeyDown && this.props.onKeyDown(evt);\n    return this.foundation.handleInteraction(evt);\n  };\n\n  Chip.prototype.handleTransitionEnd = function (evt) {\n    this.foundation.handleTransitionEnd(evt);\n  };\n\n  Chip.prototype.handleTrailingIconInteraction = function (evt) {\n    return this.foundation.handleTrailingIconInteraction(evt);\n  };\n\n  Chip.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onInteraction = _a.onInteraction,\n        onTrailingIconInteraction = _a.onTrailingIconInteraction,\n        onRemove = _a.onRemove,\n        onSelect = _a.onSelect,\n        icon = _a.icon,\n        trailingIcon = _a.trailingIcon,\n        checkmark = _a.checkmark,\n        text = _a.text,\n        label = _a.label,\n        children = _a.children,\n        rest = __rest(_a, [\"onInteraction\", \"onTrailingIconInteraction\", \"onRemove\", \"onSelect\", \"icon\", \"trailingIcon\", \"checkmark\", \"text\", \"label\", \"children\"]);\n\n    var labelToUse = label;\n\n    if (text) {\n      deprecationWarning('Chip `text` is now `label`');\n      labelToUse = text;\n    }\n\n    return React.createElement(ChipRoot, __assign({\n      tabIndex: 0\n    }, this.root.props(rest), {\n      onClick: this.handleInteraction,\n      onKeyDown: this.handleInteraction,\n      onTransitionEnd: this.handleTransitionEnd,\n      ref: this.root.setRef\n    }), !!icon && React.createElement(ChipIcon, {\n      icon: icon,\n      leading: true,\n      hidden: rest.selected && checkmark\n    }), !!checkmark && React.createElement(ChipCheckmark, {\n      elementRef: function (el) {\n        return _this.checkmarkEl = el;\n      }\n    }), React.createElement(\"div\", {\n      className: \"mdc-chip__text\"\n    }, labelToUse, children), !!trailingIcon && React.createElement(ChipIcon, {\n      icon: trailingIcon,\n      trailing: true,\n      onClick: this.handleTrailingIconInteraction,\n      onKeyDown: this.handleTrailingIconInteraction\n    }));\n  };\n\n  Chip.displayName = 'Chip';\n  return Chip;\n}(FoundationComponent);\n\nexport { Chip };\n/** A checkmark for chip selection and filtering. */\n\nvar ChipCheckmark =\n/** @class */\nfunction (_super) {\n  __extends(ChipCheckmark, _super);\n\n  function ChipCheckmark() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ChipCheckmark.prototype.shouldComponentUpdate = function () {\n    return false;\n  };\n\n  ChipCheckmark.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.props.elementRef,\n      className: \"mdc-chip__checkmark\"\n    }, React.createElement(\"svg\", {\n      className: \"mdc-chip__checkmark-svg\",\n      viewBox: \"-2 -3 30 30\"\n    }, React.createElement(\"path\", {\n      className: \"mdc-chip__checkmark-path\",\n      fill: \"none\",\n      stroke: \"black\",\n      d: \"M1.73,12.91 8.1,19.28 22.79,4.59\"\n    })));\n  };\n\n  return ChipCheckmark;\n}(React.Component);\n/** Icons inside of a chip. This is an instance of the Icon component. To make the icons interactive, add props tabIndex=\"0\" and role=\"button\". */\n\n\nvar ChipIconRoot = componentFactory({\n  displayName: 'ChipIconRoot',\n  tag: Icon,\n  classNames: function (props) {\n    return ['mdc-chip__icon', {\n      'mdc-chip__icon--leading': props.leading,\n      'mdc-chip__icon--leading-hidden': props.hidden,\n      'mdc-chip__icon--trailing': props.trailing\n    }];\n  },\n  consumeProps: ['trailing', 'leading']\n});\nexport var ChipIcon = function (props) {\n  var hasInteractionHandler = Object.keys(props).some(function (p) {\n    return p.startsWith('on');\n  });\n  var trailingProps = props.trailing || hasInteractionHandler ? {\n    role: 'button',\n    tabIndex: 0\n  } : {};\n  return React.createElement(ChipIconRoot, __assign({}, trailingProps, props));\n};\nChipIcon.displayName = 'ChipIcon';\n/** A container for multiple chips. */\n\nexport var ChipSet = componentFactory({\n  displayName: 'ChipSet',\n  classNames: function (props) {\n    return ['mdc-chip-set', {\n      'mdc-chip-set--choice': props.choice,\n      'mdc-chip-set--filter': props.filter\n    }];\n  },\n  consumeProps: ['filter', 'choice']\n});","map":null,"metadata":{},"sourceType":"module"}