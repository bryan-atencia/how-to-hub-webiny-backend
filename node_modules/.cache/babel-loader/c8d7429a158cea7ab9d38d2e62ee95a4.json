{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React from \"react\";\nimport { redux } from \"@webiny/app-page-builder/editor/redux\";\nimport Block from \"./Block\";\nimport { set } from \"dot-prop-immutable\";\nimport { createElement, createRow, createColumn, cloneElement, addElementToParent } from \"@webiny/app-page-builder/editor/utils\";\nimport { updateElement, deleteElement, elementCreated } from \"@webiny/app-page-builder/editor/actions\";\nexport default (function () {\n  return {\n    name: \"pb-editor-page-element-block\",\n    type: \"pb-editor-page-element\",\n    elementType: \"block\",\n    settings: [\"pb-editor-page-element-settings-background\", \"pb-editor-page-element-settings-animation\", \"\", \"pb-editor-page-element-settings-border\", \"pb-editor-page-element-settings-shadow\", \"\", \"pb-editor-page-element-settings-padding\", \"pb-editor-page-element-settings-margin\", \"pb-editor-page-element-settings-width\", \"pb-editor-page-element-settings-height\", \"pb-editor-page-element-settings-horizontal-align-flex\", \"pb-editor-page-element-settings-vertical-align\", \"\", \"pb-editor-page-element-settings-clone\", \"pb-editor-page-element-settings-delete\", \"\"],\n    create: function create() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread({\n        type: \"block\",\n        elements: [createRow({\n          elements: [createColumn({\n            data: {\n              width: 100\n            }\n          })]\n        })],\n        data: {\n          settings: {\n            width: {\n              value: \"1000px\"\n            },\n            margin: {\n              mobile: {\n                top: 15,\n                left: 15,\n                right: 15,\n                bottom: 15\n              },\n              desktop: {\n                top: 25,\n                left: 0,\n                right: 0,\n                bottom: 25\n              },\n              advanced: true\n            },\n            padding: {\n              mobile: {\n                all: 10\n              },\n              desktop: {\n                all: 0\n              }\n            }\n          }\n        }\n      }, options);\n    },\n    render: function render(props) {\n      return /*#__PURE__*/React.createElement(Block, props);\n    },\n    // This callback is executed when another element is dropped on the drop zones with type \"block\"\n    onReceived: function onReceived(_ref) {\n      var source = _ref.source,\n          target = _ref.target,\n          _ref$position = _ref.position,\n          position = _ref$position === void 0 ? null : _ref$position;\n      var dispatchNew = false;\n      var element;\n\n      if (source.path) {\n        element = cloneElement(source);\n      } else {\n        dispatchNew = true;\n        element = createElement(source.type, {}, target);\n      }\n\n      var block = addElementToParent(element, target, position); // Dispatch update action\n\n      redux.store.dispatch(updateElement({\n        element: block\n      })); // Delete exiting element\n\n      if (source.path) {\n        redux.store.dispatch(deleteElement({\n          element: source\n        }));\n      }\n\n      if (dispatchNew) {\n        redux.store.dispatch(elementCreated({\n          element: element,\n          source: source\n        }));\n      }\n    },\n    onChildDeleted: function onChildDeleted(_ref2) {\n      var element = _ref2.element;\n\n      if (element.elements.length === 0) {\n        element = set(element, \"elements\", [createRow({\n          elements: [createColumn({\n            data: {\n              width: 100\n            }\n          })]\n        })]);\n        redux.store.dispatch(updateElement({\n          element: element\n        }));\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}