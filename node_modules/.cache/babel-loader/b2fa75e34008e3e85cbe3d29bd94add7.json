{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _get from \"lodash/get\";\nimport React, { useState, useCallback } from \"react\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { Query } from \"react-apollo\";\nimport { GET_RECAPTCHA_SETTINGS } from \"./graphql\";\nimport ReCaptchaSettingsDialog from \"./ReCaptchaSettingsDialog\";\nimport { Alert } from \"@webiny/ui/Alert\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\n\nvar ReCaptchaSettings = function ReCaptchaSettings(_ref) {\n  var Bind = _ref.Bind,\n      formData = _ref.formData;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dialogOpened = _useState2[0],\n      setDialogOpened = _useState2[1];\n\n  var openDialog = useCallback(function () {\n    return setDialogOpened(true);\n  }, []);\n  var closeDialog = useCallback(function () {\n    return setDialogOpened(false);\n  }, []);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      settingsLoaded = _useState4[0],\n      setSettingsLoaded = _useState4[1];\n\n  return /*#__PURE__*/React.createElement(Query, {\n    query: GET_RECAPTCHA_SETTINGS,\n    onCompleted: function onCompleted() {\n      return setSettingsLoaded(true);\n    }\n  }, function (_ref2) {\n    var data = _ref2.data,\n        refetch = _ref2.refetch;\n    var settings = _get(data, \"forms.getSettings.data.reCaptcha\") || {};\n    var reCaptchaEnabledInSettings = settings.enabled && settings.siteKey && settings.secretKey;\n\n    var reCaptchaEnabled = _get(formData, \"reCaptcha.enabled\");\n\n    return /*#__PURE__*/React.createElement(Bind, {\n      name: \"reCaptcha.enabled\"\n    }, function (_ref3) {\n      var _onChange = _ref3.onChange,\n          rest = _objectWithoutProperties(_ref3, [\"onChange\"]);\n\n      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n        span: 12\n      }, /*#__PURE__*/React.createElement(Switch, Object.assign({\n        onChange: function onChange(value) {\n          if (value && !reCaptchaEnabledInSettings) {\n            openDialog();\n            return;\n          }\n\n          _onChange(value);\n        }\n      }, rest, {\n        label: \"Enabled\",\n        description: \"Will require users to \\\"confirm they are human\\\" by clicking on a special checkbox.\"\n      }))), /*#__PURE__*/React.createElement(Cell, {\n        span: 12\n      }, /*#__PURE__*/React.createElement(Bind, {\n        name: \"reCaptcha.errorMessage\"\n      }, /*#__PURE__*/React.createElement(I18NInput, {\n        disabled: !reCaptchaEnabled,\n        label: \"Error message\"\n      }))), settingsLoaded && !reCaptchaEnabledInSettings && /*#__PURE__*/React.createElement(Cell, {\n        span: 12\n      }, /*#__PURE__*/React.createElement(Alert, {\n        type: \"danger\",\n        title: \"Google reCAPTCHA not enabled.\"\n      }, \"Click\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: openDialog\n      }, \"here\"), \" \", \"to update your Google reCAPTCHA settings.\")), /*#__PURE__*/React.createElement(ReCaptchaSettingsDialog, {\n        reCaptchaSettings: settings,\n        open: dialogOpened,\n        onClose: closeDialog,\n        onSubmit: function onSubmit() {\n          refetch();\n\n          _onChange(true);\n\n          closeDialog();\n        }\n      }));\n    });\n  });\n};\n\nexport default ReCaptchaSettings;","map":null,"metadata":{},"sourceType":"module"}