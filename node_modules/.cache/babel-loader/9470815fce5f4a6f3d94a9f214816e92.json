{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _camelCase from \"lodash/camelCase\";\nimport React, { useState } from \"react\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport { OptionsListItem, AddOptionInput, EditFieldOptionDialog } from \"./OptionsListComponents\"; // @ts-ignore\n\nimport { sortableContainer, sortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { ReactComponent as HandleIcon } from \"@svgr/webpack!@webiny/app-form-builder/admin/icons/round-drag_indicator-24px.svg\";\nimport { validation } from \"@webiny/validation\";\nvar OptionList = /*#__PURE__*/styled(\"ul\", {\n  target: \"en72itt0\",\n  label: \"OptionList\"\n})({\n  padding: 25,\n  border: \"1px solid var(--mdc-theme-on-background)\"\n});\nvar OptionListItem = /*#__PURE__*/styled(\"li\", {\n  target: \"en72itt1\",\n  label: \"OptionListItem\"\n})({\n  zIndex: 10,\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  borderBottom: \"1px solid var(--mdc-theme-background)\",\n  background: \"var(--mdc-theme-surface)\",\n  \"&:hover\": {\n    background: \"var(--mdc-theme-background)\"\n  },\n  \"&:last-child\": {\n    border: \"none\"\n  }\n});\nvar sortableList = /*#__PURE__*/css({\n  zIndex: 20\n}, \"label:sortableList;\");\nvar DragHandle = sortableHandle(function () {\n  return /*#__PURE__*/React.createElement(Icon, {\n    icon: /*#__PURE__*/React.createElement(HandleIcon, {\n      style: {\n        cursor: \"pointer\"\n      }\n    })\n  });\n});\nvar SortableContainer = sortableContainer(function (_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/React.createElement(OptionList, null, children);\n});\nvar SortableItem = sortableElement(function (_ref2) {\n  var setOptionsValue = _ref2.setOptionsValue,\n      setEditOption = _ref2.setEditOption,\n      option = _ref2.option,\n      options = _ref2.optionsValue,\n      Bind = _ref2.Bind,\n      multiple = _ref2.multiple,\n      optionIndex = _ref2.optionIndex;\n  return /*#__PURE__*/React.createElement(OptionListItem, null, /*#__PURE__*/React.createElement(OptionsListItem, {\n    dragHandle: /*#__PURE__*/React.createElement(DragHandle, null),\n    key: option.value,\n    Bind: Bind,\n    multiple: multiple,\n    option: option,\n    deleteOption: function deleteOption() {\n      var newValue = _toConsumableArray(options);\n\n      newValue.splice(optionIndex, 1);\n      setOptionsValue(newValue);\n    },\n    editOption: function editOption() {\n      return setEditOption({\n        index: optionIndex,\n        data: _cloneDeep(option)\n      });\n    },\n    setOptionTranslations: function setOptionTranslations(label) {\n      var newValue = _toConsumableArray(options);\n\n      newValue.splice(optionIndex, 1, {\n        value: option.value,\n        label: label\n      });\n      setOptionsValue(newValue);\n    }\n  }));\n});\n\nvar OptionsList = function OptionsList(_ref3) {\n  var form = _ref3.form,\n      multiple = _ref3.multiple;\n  var Bind = form.Bind;\n\n  var _useI18N = useI18N(),\n      getDefaultLocale = _useI18N.getDefaultLocale;\n\n  var _useState = useState({\n    data: null,\n    index: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      editOption = _useState2[0],\n      setEditOption = _useState2[1];\n\n  var clearEditOption = function clearEditOption() {\n    return setEditOption({\n      data: null,\n      index: null\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Bind, {\n    name: \"options\",\n    validators: validation.create(\"required,minLength:1\")\n  }, function (_ref4) {\n    var optionsValidation = _ref4.validation,\n        optionsValue = _ref4.value,\n        setOptionsValue = _ref4.onChange;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", null, \"Options\"), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(AddOptionInput, {\n      options: optionsValue,\n      validation: optionsValidation,\n      onAdd: function onAdd(label) {\n        var newValue = Array.isArray(optionsValue) ? _toConsumableArray(optionsValue) : [];\n        newValue.push({\n          value: _camelCase(label),\n          label: {\n            values: [{\n              locale: getDefaultLocale().id,\n              value: label\n            }]\n          }\n        });\n        setOptionsValue(newValue);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\"\n      }\n    }, Array.isArray(optionsValue) && optionsValue.length > 0 ? /*#__PURE__*/React.createElement(SortableContainer, {\n      helperClass: sortableList,\n      useDragHandle: true,\n      transitionDuration: 0,\n      onSortEnd: function onSortEnd(_ref5) {\n        var oldIndex = _ref5.oldIndex,\n            newIndex = _ref5.newIndex;\n\n        var newValue = _toConsumableArray(optionsValue);\n\n        var _newValue$splice = newValue.splice(oldIndex, 1),\n            _newValue$splice2 = _slicedToArray(_newValue$splice, 1),\n            movedItem = _newValue$splice2[0];\n\n        newValue.splice(newIndex, 0, movedItem);\n        setOptionsValue(newValue);\n      }\n    }, optionsValue.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(SortableItem, {\n        key: \"item-\".concat(index),\n        Bind: Bind,\n        multiple: multiple,\n        setEditOption: setEditOption,\n        setOptionsValue: setOptionsValue,\n        option: item,\n        optionsValue: optionsValue,\n        optionIndex: index,\n        index: index\n      });\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 40,\n        textAlign: \"center\"\n      }\n    }, \"No options added.\")), /*#__PURE__*/React.createElement(EditFieldOptionDialog, {\n      onClose: clearEditOption,\n      open: editOption.data,\n      options: optionsValue,\n      option: editOption.data,\n      optionIndex: editOption.index,\n      onSubmit: function onSubmit(data) {\n        var newValue = _toConsumableArray(optionsValue);\n\n        newValue.splice(editOption.index, 1, data);\n        setOptionsValue(newValue);\n        clearEditOption();\n      }\n    }));\n  });\n};\n\nexport default OptionsList;","map":null,"metadata":{},"sourceType":"module"}