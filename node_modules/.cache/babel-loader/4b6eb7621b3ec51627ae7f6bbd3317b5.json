{"ast":null,"code":"import _get from \"lodash/get\";\nimport _isEqual from \"lodash/isEqual\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { css } from \"emotion\";\n\nfunction appendSDK(props) {\n  var element = props.element;\n\n  var _ref = _get(element, \"data.source\") || {},\n      url = _ref.url;\n\n  if (!url || window[\"PinUtils\"]) {\n    return Promise.resolve();\n  }\n\n  return new Promise(function (resolve) {\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = encodeURI(\"https://assets.pinterest.com/js/pinit.js\");\n    script.setAttribute(\"async\", \"\");\n    script.setAttribute(\"charset\", \"utf-8\");\n    script.onload = resolve;\n    document.body.appendChild(script);\n  });\n}\n\nfunction initEmbed(props) {\n  var element = props.element;\n  var node = document.getElementById(element.id);\n\n  if (node && window.PinUtils) {\n    window.PinUtils.build();\n  }\n}\n\nvar centerAlign = /*#__PURE__*/css({\n  textAlign: \"center\"\n}, \"label:centerAlign;\");\n\nvar getHTML = function getHTML(data) {\n  return \"<a\\n        data-pin-do=\\\"embedPin\\\"\\n        data-pin-width=\\\"\".concat(data.size || \"small\", \"\\\"\\n        href=\\\"\").concat(data.url, \"\\\"\\n    />\");\n};\n\nexport default /*#__PURE__*/React.memo(function (props) {\n  var element = props.element;\n  useEffect(function () {\n    appendSDK(props).then(function () {\n      return initEmbed(props);\n    });\n  }, [element]);\n  var empty = /*#__PURE__*/React.createElement(\"div\", null, \"You must configure your embed in the settings!\");\n  var renderEmbed = useCallback(function () {\n    var data = _get(element, \"data.source\");\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: element.id,\n      className: centerAlign,\n      dangerouslySetInnerHTML: {\n        __html: getHTML(data)\n      }\n    });\n  }, [element]);\n\n  var _ref2 = _get(element, \"data.source\") || {},\n      url = _ref2.url;\n\n  return url ? renderEmbed() : empty;\n}, function (props, nextProps) {\n  return _isEqual(props, nextProps);\n});","map":null,"metadata":{},"sourceType":"module"}