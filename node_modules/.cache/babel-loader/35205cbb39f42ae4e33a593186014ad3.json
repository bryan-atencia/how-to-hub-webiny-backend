{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback } from \"react\";\nimport slugify from \"slugify\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { updateRevision } from \"@webiny/app-page-builder/editor/actions\";\nimport { getPage } from \"@webiny/app-page-builder/editor/selectors\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { PageMeta, PageTitle, pageTitleWrapper, PageVersion, TitleInputWrapper, TitleWrapper } from \"./Styled\";\n\nvar Title = function Title(_ref) {\n  var pageTitle = _ref.pageTitle,\n      pageCategory = _ref.pageCategory,\n      pageCategoryUrl = _ref.pageCategoryUrl,\n      pageLocked = _ref.pageLocked,\n      pageVersion = _ref.pageVersion,\n      updateRevision = _ref.updateRevision;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editTitle = _useState2[0],\n      setEdit = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stateTitle = _useState4[0],\n      setTitle = _useState4[1];\n\n  var title = stateTitle === null ? pageTitle : stateTitle;\n  var enableEdit = useCallback(function () {\n    return setEdit(true);\n  }, []);\n  var onBlur = useCallback(function () {\n    if (title === \"\") {\n      title = \"Untitled\";\n      setTitle(title);\n    }\n\n    setEdit(false);\n    updateRevision(getRevData({\n      title: title,\n      pageTitle: pageTitle,\n      pageCategoryUrl: pageCategoryUrl\n    }));\n  }, [title]);\n  var onKeyDown = useCallback(function (e) {\n    // @ts-ignore\n    switch (e.key) {\n      case \"Escape\":\n        e.preventDefault();\n        setEdit(false);\n        setTitle(pageTitle);\n        break;\n\n      case \"Enter\":\n        if (title === \"\") {\n          title = \"Untitled\";\n          setTitle(title);\n        }\n\n        e.preventDefault();\n        setEdit(false);\n        updateRevision(getRevData({\n          title: title,\n          pageTitle: pageTitle,\n          pageCategoryUrl: pageCategoryUrl\n        }));\n        break;\n\n      default:\n        return;\n    }\n  }, [title, pageTitle]); // Disable autoFocus because for some reason, blur event would automatically be triggered when clicking\n  // on the page title when doing Cypress testing. Not sure if this is RMWC or Cypress related issue.\n\n  var autoFocus = !window.Cypress;\n  return editTitle ? /*#__PURE__*/React.createElement(TitleInputWrapper, null, /*#__PURE__*/React.createElement(Input, {\n    autoFocus: autoFocus,\n    fullwidth: true,\n    value: title,\n    onChange: setTitle,\n    onKeyDown: onKeyDown,\n    onBlur: onBlur\n  })) : /*#__PURE__*/React.createElement(TitleWrapper, null, /*#__PURE__*/React.createElement(PageMeta, null, /*#__PURE__*/React.createElement(Typography, {\n    use: \"overline\"\n  }, \"\".concat(pageCategory, \" (status: \").concat(pageLocked ? \"published\" : \"draft\", \")\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      display: \"flex\"\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    className: pageTitleWrapper,\n    placement: \"bottom\",\n    content: /*#__PURE__*/React.createElement(\"span\", null, \"Rename\")\n  }, /*#__PURE__*/React.createElement(PageTitle, {\n    \"data-testid\": \"pb-editor-page-title\",\n    onClick: enableEdit\n  }, title)), /*#__PURE__*/React.createElement(PageVersion, null, \"(v\".concat(pageVersion, \")\"))));\n};\n\nvar getRevData = function getRevData(_ref2) {\n  var title = _ref2.title,\n      pageTitle = _ref2.pageTitle,\n      pageCategoryUrl = _ref2.pageCategoryUrl;\n  var newData = {\n    title: title\n  };\n\n  if (pageTitle === \"Untitled\") {\n    newData.url = pageCategoryUrl + slugify(title, {\n      replacement: \"-\",\n      lower: true,\n      remove: /[*#\\?<>_\\{\\}\\[\\]+~.()'\"!:;@]/g\n    });\n  }\n\n  return newData;\n};\n\nexport default connect(function (state) {\n  var _getPage = getPage(state),\n      title = _getPage.title,\n      version = _getPage.version,\n      locked = _getPage.locked,\n      category = _getPage.category;\n\n  return {\n    pageTitle: title,\n    pageVersion: version,\n    pageLocked: locked,\n    pageCategory: category.name,\n    pageCategoryUrl: category.url\n  };\n}, {\n  updateRevision: updateRevision\n})( /*#__PURE__*/React.memo(Title));","map":null,"metadata":{},"sourceType":"module"}