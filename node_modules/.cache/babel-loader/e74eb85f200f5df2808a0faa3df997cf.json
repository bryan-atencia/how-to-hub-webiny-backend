{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport { css } from \"emotion\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid } from \"react-virtualized\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DelayedOnChange from \"./DelayedOnChange\";\nimport { Menu } from \"@webiny/ui/Menu\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\n/**\n * Controls the helper text below the checkbox.\n * @type {string}\n */\n\nvar iconPickerLabel = /*#__PURE__*/css({\n  marginBottom: 5,\n  marginLeft: 2\n}, \"label:iconPickerLabel;\");\nvar MenuWrapper = /*#__PURE__*/css({\n  color: \"var(--mdc-theme-text-secondary-on-background)\",\n  backgroundColor: \"var(--mdc-theme-on-background)\",\n  padding: \"16px 8px\"\n}, \"label:MenuWrapper;\");\nvar NoResultWrapper = /*#__PURE__*/css({\n  width: 640,\n  color: \"var(--mdc-theme-text-secondary-on-background)\",\n  padding: \"16px 12px\"\n}, \"label:NoResultWrapper;\");\nvar COLUMN_COUNT = 6;\nvar gridItem = /*#__PURE__*/css({\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"flex-start\",\n  boxSizing: \"border-box\",\n  paddingTop: 15,\n  alignItems: \"center\",\n  textAlign: \"center\",\n  cursor: \"pointer\",\n  transform: \"translateZ(0)\",\n  borderRadius: 2,\n  color: \"var(--mdc-theme-text-secondary-on-background)\",\n  transition: \"all 0.5s cubic-bezier(0.165, 0.84, 0.44, 1)\",\n  \"&::after\": {\n    boxShadow: \"0 0.25rem 0.125rem 0 rgba(0,0,0,0.05)\",\n    transition: \"opacity 0.5s cubic-bezier(0.165, 0.84, 0.44, 1)\",\n    content: '\"\"',\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: -1,\n    opacity: 0\n  },\n  \"&:hover\": {\n    backgroundColor: \"var(--mdc-theme-background)\",\n    color: \"var(--mdc-theme-text-primary-on-background)\",\n    \"&::after\": {\n      opacity: 1\n    }\n  },\n  \">svg\": {\n    width: 42,\n    marginBottom: 5\n  }\n}, \"label:gridItem;\");\nvar grid = /*#__PURE__*/css({\n  padding: 20\n}, \"label:grid;\");\nvar pickIcon = /*#__PURE__*/css({\n  width: 50,\n  textAlign: \"center\",\n  cursor: \"pointer\"\n}, \"label:pickIcon;\");\nvar searchInput = /*#__PURE__*/css({\n  input: {\n    padding: \"20px 12px 20px\"\n  }\n}, \"label:searchInput;\");\nvar useState = React.useState,\n    useCallback = React.useCallback,\n    useMemo = React.useMemo;\n\nvar IconPicker = function IconPicker(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      label = _ref.label,\n      description = _ref.description,\n      validation = _ref.validation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      filter = _useState2[0],\n      setFilter = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mustRenderGrid = _useState4[0],\n      setMustRenderGrid = _useState4[1];\n\n  var onFilterChange = useCallback(function (value, cb) {\n    setFilter(value);\n    cb();\n  }, [filter]);\n  var allIcons = useMemo(function () {\n    var plugins = getPlugins(\"cms-icons\");\n    return plugins.reduce(function (icons, pl) {\n      return icons.concat(pl.getIcons());\n    }, []);\n  }, []);\n  var icons = useMemo(function () {\n    return filter ? allIcons.filter(function (ic) {\n      return ic.name.includes(filter);\n    }) : allIcons;\n  }, [filter]);\n  var renderCell = useCallback(function (_ref2) {\n    var closeMenu = _ref2.closeMenu;\n    return function renderCell(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          key = _ref3.key,\n          rowIndex = _ref3.rowIndex,\n          style = _ref3.style;\n      var item = icons[rowIndex * COLUMN_COUNT + columnIndex];\n\n      if (!item) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: key,\n        style: style,\n        className: gridItem,\n        onClick: function onClick() {\n          onChange(item.id.join(\"/\"));\n          closeMenu();\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: item.id,\n        size: \"2x\"\n      }), /*#__PURE__*/React.createElement(Typography, {\n        use: \"body2\"\n      }, item.name));\n    };\n  }, [icons]);\n  var renderGrid = useCallback(function (_ref4) {\n    var closeMenu = _ref4.closeMenu;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DelayedOnChange, {\n      value: filter,\n      onChange: onFilterChange\n    }, function (_ref5) {\n      var value = _ref5.value,\n          onChange = _ref5.onChange;\n      return /*#__PURE__*/React.createElement(Input, {\n        autoFocus: true,\n        className: searchInput,\n        value: value,\n        onChange: onChange,\n        placeholder: \"Search icons...\"\n      });\n    }), icons.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: NoResultWrapper\n    }, /*#__PURE__*/React.createElement(Typography, {\n      use: \"body1\"\n    }, \"No results found.\")) : /*#__PURE__*/React.createElement(Grid, {\n      className: grid,\n      cellRenderer: renderCell({\n        closeMenu: closeMenu\n      }),\n      columnCount: COLUMN_COUNT,\n      columnWidth: 100,\n      height: 440,\n      rowCount: Math.ceil(icons.length / COLUMN_COUNT),\n      rowHeight: 100,\n      width: 640\n    }));\n  }, [icons]);\n  var fontAwesomeIconValue = typeof value === \"string\" && value.includes(\"/\") ? value.split(\"/\") : [\"fas\", \"star\"];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, label && /*#__PURE__*/React.createElement(\"div\", {\n    className: iconPickerLabel\n  }, /*#__PURE__*/React.createElement(Typography, {\n    use: \"body1\"\n  }, label)), /*#__PURE__*/React.createElement(\"div\", {\n    className: MenuWrapper\n  }, /*#__PURE__*/React.createElement(Menu, {\n    onOpen: function onOpen() {\n      return setMustRenderGrid(true);\n    },\n    onClose: function onClose() {\n      return setMustRenderGrid(false);\n    },\n    handle: /*#__PURE__*/React.createElement(\"div\", {\n      className: pickIcon\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: fontAwesomeIconValue,\n      size: \"2x\"\n    }))\n  }, mustRenderGrid && renderGrid)), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {\n    error: true\n  }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));\n};\n\nexport default IconPicker;","map":null,"metadata":{},"sourceType":"module"}