{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport { ContentModelForm } from \"@webiny/app-headless-cms/admin/components/ContentModelForm\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { createCreateFromMutation, createCreateMutation, createListQuery, createUpdateMutation } from \"@webiny/app-headless-cms/admin/components/ContentModelForm/graphql\";\nimport { useMutation } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { useCallback, useMemo } from \"react\";\nimport get from \"lodash/get\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\nvar ContentForm = function ContentForm(_ref) {\n  var contentModel = _ref.contentModel,\n      content = _ref.content,\n      getLocale = _ref.getLocale,\n      setLoading = _ref.setLoading,\n      getLoading = _ref.getLoading,\n      setState = _ref.setState;\n  var query = new URLSearchParams(location.search);\n\n  var _useRouter = useRouter(),\n      history = _useRouter.history;\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var _useMemo = useMemo(function () {\n    return {\n      LIST_CONTENT: createListQuery(contentModel),\n      CREATE_CONTENT: createCreateMutation(contentModel),\n      UPDATE_CONTENT: createUpdateMutation(contentModel),\n      CREATE_CONTENT_FROM: createCreateFromMutation(contentModel)\n    };\n  }, [contentModel.modelId]),\n      CREATE_CONTENT = _useMemo.CREATE_CONTENT,\n      UPDATE_CONTENT = _useMemo.UPDATE_CONTENT,\n      CREATE_CONTENT_FROM = _useMemo.CREATE_CONTENT_FROM,\n      LIST_CONTENT = _useMemo.LIST_CONTENT;\n\n  var _useMutation = useMutation(CREATE_CONTENT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_CONTENT),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateMutation = _useMutation4[0];\n\n  var _useMutation5 = useMutation(CREATE_CONTENT_FROM),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      createFromMutation = _useMutation6[0];\n\n  var createContent = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var response, id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return createMutation({\n                variables: {\n                  data: data\n                },\n                update: function update(cache, response) {\n                  if (response.data.content.error) {\n                    return;\n                  } // Prepend the newly created item to the content list.\n\n\n                  var data = cloneDeep(cache.readQuery({\n                    query: LIST_CONTENT\n                  }));\n                  data.content.data = [response.data.content.data].concat(_toConsumableArray(data.content.data));\n                  cache.writeQuery({\n                    query: LIST_CONTENT,\n                    data: data\n                  });\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              setLoading(false);\n\n              if (!response.data.content.error) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", showSnackbar(response.data.content.message));\n\n            case 7:\n              showSnackbar(\"Content created successfully.\");\n              id = response.data.content.data.id;\n              query.set(\"id\", id);\n              history.push({\n                search: query.toString()\n              });\n              return _context.abrupt(\"return\", response);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [contentModel.modelId]);\n  var updateContent = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, data) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.next = 3;\n              return updateMutation({\n                variables: {\n                  id: id,\n                  data: data\n                }\n              });\n\n            case 3:\n              response = _context2.sent;\n              setLoading(false);\n\n              if (!response.data.content.error) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", showSnackbar(response.data.content.message));\n\n            case 7:\n              showSnackbar(\"Content saved successfully.\");\n              return _context2.abrupt(\"return\", response);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [contentModel.modelId]);\n  var createContentFrom = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id, data) {\n      var response, revisionId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setLoading(true);\n              _context3.next = 3;\n              return createFromMutation({\n                variables: {\n                  revision: id,\n                  data: data\n                },\n                update: function update(cache, response) {\n                  if (response.data.content.error) {\n                    return;\n                  }\n\n                  var data = cloneDeep(cache.readQuery({\n                    query: LIST_CONTENT\n                  }));\n                  var previousItemIndex = data.content.data.findIndex(function (item) {\n                    return item.id === id;\n                  });\n                  data.content.data.splice(previousItemIndex, 1, response.data.content.data);\n                  cache.writeQuery({\n                    query: LIST_CONTENT,\n                    data: data\n                  });\n                }\n              });\n\n            case 3:\n              response = _context3.sent;\n              setLoading(false);\n\n              if (!response.data.content.error) {\n                _context3.next = 7;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", showSnackbar(response.data.content.message));\n\n            case 7:\n              showSnackbar(\"A new revision was created.\");\n              revisionId = response.data.content.data.id;\n              query.set(\"id\", revisionId);\n              history.push({\n                search: query.toString()\n              });\n              return _context3.abrupt(\"return\", response);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [contentModel.modelId]);\n  return /*#__PURE__*/React.createElement(ContentModelForm, {\n    locale: getLocale(),\n    loading: getLoading(),\n    contentModel: contentModel,\n    content: content,\n    onForm: function onForm(contentForm) {\n      return setState({\n        contentForm: contentForm\n      });\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!content.id) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                if (!get(content, \"meta.locked\")) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", createContentFrom(content.id, data));\n\n              case 3:\n                return _context4.abrupt(\"return\", updateContent(content.id, data));\n\n              case 4:\n                return _context4.abrupt(\"return\", createContent(data));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  });\n};\n\nexport default ContentForm;","map":null,"metadata":{},"sourceType":"module"}