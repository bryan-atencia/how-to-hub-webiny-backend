{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from \"react\";\nimport { ReactComponent as RotateRight } from \"@svgr/webpack!./icons/rotateRight.svg\";\nimport { Slider } from \"@webiny/ui/Slider\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport Cropper from \"cropperjs\";\nimport \"cropperjs/dist/cropper.css\";\nvar cropper = null;\n\nvar RenderForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(RenderForm, _React$Component);\n\n  var _super = _createSuper(RenderForm);\n\n  function RenderForm() {\n    var _this;\n\n    _classCallCheck(this, RenderForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      rangeInput: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(RenderForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"500px\",\n          margin: \"0 auto\"\n        }\n      }, /*#__PURE__*/React.createElement(Slider, {\n        label: \"Range Input\",\n        value: this.state.rangeInput,\n        min: 0,\n        max: 360,\n        step: 10,\n        discrete: true,\n        displayMarkers: true,\n        onInput: function onInput(value) {\n          _this2.setState({\n            rangeInput: value\n          }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (cropper) {\n                      cropper.rotateTo(parseInt(value, 10));\n                    }\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })));\n        }\n      }));\n    }\n  }]);\n\n  return RenderForm;\n}(React.Component);\n\nvar tool = {\n  name: \"rotate\",\n  icon: function icon(_ref2) {\n    var activateTool = _ref2.activateTool;\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"bottom\",\n      content: \"Rotate\"\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      icon: /*#__PURE__*/React.createElement(RotateRight, null),\n      onClick: activateTool\n    }));\n  },\n  renderForm: function renderForm(props) {\n    return /*#__PURE__*/React.createElement(RenderForm, props);\n  },\n  onActivate: function onActivate(_ref3) {\n    var canvas = _ref3.canvas;\n    cropper = new Cropper(canvas.current, {\n      background: false,\n      modal: false,\n      guides: false,\n      dragMode: \"none\",\n      highlight: false,\n      autoCrop: false\n    });\n  },\n  cancel: function cancel() {\n    return cropper && cropper.destroy();\n  },\n  apply: function apply(_ref4) {\n    var canvas = _ref4.canvas;\n    return new Promise(function (resolve) {\n      if (!cropper) {\n        resolve();\n        return;\n      }\n\n      var current = canvas.current;\n      var src = cropper.getCroppedCanvas().toDataURL();\n\n      if (current) {\n        var image = new window.Image();\n        var ctx = current.getContext(\"2d\");\n\n        image.onload = function () {\n          ctx.drawImage(image, 0, 0);\n          current.width = image.width;\n          current.height = image.height;\n          ctx.drawImage(image, 0, 0);\n        };\n\n        image.src = src;\n        resolve();\n      }\n\n      cropper.destroy();\n    });\n  }\n};\nexport default tool;","map":null,"metadata":{},"sourceType":"module"}