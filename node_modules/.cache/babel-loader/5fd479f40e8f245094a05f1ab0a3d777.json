{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { SimpleDialog } from './dialog';\nimport { ArrayEmitter, randomId } from '@rmwc/base';\nimport { TextField } from '@rmwc/textfield';\n/** A snackbar queue for rendering messages */\n\nvar DialogQueue =\n/** @class */\nfunction (_super) {\n  __extends(DialogQueue, _super);\n\n  function DialogQueue(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      closingDialogs: {}\n    };\n    _this.forceUpdate = _this.forceUpdate.bind(_this);\n\n    _this.props.dialogs.on('change', _this.forceUpdate);\n\n    return _this;\n  }\n\n  DialogQueue.prototype.componentWillUnmount = function () {\n    this.props.dialogs.off('change', this.forceUpdate);\n  };\n\n  DialogQueue.prototype.removeDialog = function (evt, dialog) {\n    var _a;\n\n    var _this = this;\n\n    this.setState({\n      closingDialogs: __assign({}, this.state.closingDialogs, (_a = {}, _a[dialog.id] = true, _a))\n    }, function () {\n      dialog.resolve(evt);\n      setTimeout(function () {\n        var index = _this.props.dialogs.array.indexOf(dialog);\n\n        !!~index && _this.props.dialogs.array.splice(index, 1);\n        var closingDialogs = _this.state.closingDialogs;\n        delete closingDialogs[dialog.id];\n\n        _this.setState({\n          closingDialogs: closingDialogs\n        });\n      }, 150);\n    });\n  };\n\n  DialogQueue.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        dialogs = _a.dialogs,\n        defaultDialogProps = __rest(_a, [\"dialogs\"]); // A simple way to show only one at a time\n    // We loop through until we find a dialog thats not closing\n    // When one is closing, we flip this flag and render all of the other ones in a closed state\n    // This ensures we get the proper animations for closing dialogs\n\n\n    var foundOpen = false;\n    return dialogs.array.map(function (dialog) {\n      var resolve = dialog.resolve,\n          reject = dialog.reject,\n          id = dialog.id,\n          inputProps = dialog.inputProps,\n          rest = __rest(dialog, [\"resolve\", \"reject\", \"id\", \"inputProps\"]);\n\n      var rendered = React.createElement(SimpleDialog, __assign({}, defaultDialogProps, rest, {\n        key: id,\n        open: !_this.state.closingDialogs[id] && !foundOpen,\n        onClose: function (evt) {\n          _this.removeDialog(evt, dialog);\n\n          dialog.onClose && dialog.onClose(evt);\n        }\n      }));\n\n      if (!_this.state.closingDialogs[id]) {\n        foundOpen = true;\n      }\n\n      return rendered;\n    });\n  };\n\n  DialogQueue.displayName = 'DialogQueue';\n  return DialogQueue;\n}(React.Component);\n\nexport { DialogQueue };\n/**\n * A base dialog factory that handle setting up the promise\n * With some consistent behavior\n */\n\nvar dialogFactory = function (factory, queue) {\n  return function (dialog) {\n    return new Promise(function (resolve, reject) {\n      var d = factory(__assign({\n        id: randomId()\n      }, dialog, {\n        resolve: resolve,\n        reject: reject\n      }));\n      queue.push(d);\n    });\n  };\n};\n/**\n * Handle prompt dialogs\n * We have to jump through a few hoops to get the value back out\n */\n\n\nvar PromptBody =\n/** @class */\nfunction (_super) {\n  __extends(PromptBody, _super);\n\n  function PromptBody() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      value: ''\n    };\n    return _this;\n  }\n\n  PromptBody.prototype.componentDidMount = function () {\n    var _this = this;\n\n    this.props.apiRef(function () {\n      return _this.state.value;\n    });\n  };\n\n  PromptBody.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(\"div\", null, !!this.props.body && React.createElement(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      }\n    }, this.props.body), React.createElement(TextField, __assign({\n      style: {\n        width: '100%'\n      },\n      autoFocus: true\n    }, this.props.inputProps, {\n      value: this.state.value,\n      onChange: function (evt) {\n        return _this.setState({\n          value: evt.currentTarget.value\n        });\n      }\n    })));\n  };\n\n  PromptBody.displayName = 'PromptBody';\n  return PromptBody;\n}(React.Component);\n\nvar promptFactory = function (dialog) {\n  var getValue = function () {\n    return '';\n  };\n\n  var body = React.createElement(PromptBody, {\n    body: dialog.body,\n    inputProps: dialog.inputProps,\n    apiRef: function (_getValue) {\n      return getValue = _getValue;\n    }\n  });\n  return __assign({\n    title: 'Prompt'\n  }, dialog, {\n    body: body,\n    resolve: function (evt) {\n      dialog.resolve(evt.detail.action === 'accept' ? getValue() : null);\n      getValue = undefined;\n    }\n  });\n};\n/** Alerts */\n\n\nvar alertFactory = function (dialog) {\n  return __assign({\n    title: 'Alert',\n    body: 'You have been alerted!',\n    acceptLabel: 'OK',\n    cancelLabel: null\n  }, dialog, {\n    resolve: function (evt) {\n      return dialog.resolve(evt.detail.action);\n    }\n  });\n};\n/** Confirm */\n\n\nvar confirmFactory = function (dialog) {\n  return __assign({\n    title: 'Confirm',\n    body: 'Are you sure you want do that?',\n    acceptLabel: 'OK',\n    cancelLabel: 'Cancel'\n  }, dialog, {\n    resolve: function (evt) {\n      return dialog.resolve(evt.detail.action === 'accept');\n    }\n  });\n};\n/** Creates a snackbar queue */\n\n\nexport var createDialogQueue = function () {\n  var dialogs = new ArrayEmitter();\n  return {\n    dialogs: dialogs,\n    alert: dialogFactory(alertFactory, dialogs),\n    confirm: dialogFactory(confirmFactory, dialogs),\n    prompt: dialogFactory(promptFactory, dialogs)\n  };\n};","map":null,"metadata":{},"sourceType":"module"}