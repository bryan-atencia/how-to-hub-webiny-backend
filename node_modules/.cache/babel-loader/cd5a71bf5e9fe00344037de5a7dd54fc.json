{"ast":null,"code":"import _clone from \"lodash/clone\";\nimport { get, set } from \"dot-prop-immutable\";\n\nvar findHigherOrderReducer = function findHigherOrderReducer(reducers, statePath, action) {\n  for (var i = 0; i < reducers.length; i++) {\n    var hor = reducers[i];\n\n    if (hor.actions.includes(action.type)) {\n      if (!hor.statePath) {\n        // If HOR does not have a slice defined it means it will process the entire app state\n        return {\n          statePath: null,\n          reducer: hor.reducer\n        };\n      } // Normalize statePath using current action\n\n\n      var horStatePath = resolveStatePath(hor.statePath, action);\n\n      if (statePath && horStatePath && typeof statePath === \"string\" && (statePath.startsWith(horStatePath + \".\") || statePath === horStatePath)) {\n        return {\n          statePath: horStatePath,\n          reducer: hor.reducer\n        };\n      }\n    }\n  }\n\n  return null;\n};\n\nvar runReducer = function runReducer(appState, action, extra, reducer, statePath) {\n  // Get a slice of state for this reducer\n  var stateSlice = statePath ? get(appState, statePath) : appState; // Run reducer and update app state\n\n  var newState = reducer(stateSlice, action, extra);\n  return statePath ? set(appState, statePath, newState) : newState;\n}; // Resolve statePath to string\n\n\nvar resolveStatePath = function resolveStatePath(statePath, action) {\n  if (typeof statePath === \"function\") {\n    return statePath(action);\n  }\n\n  return statePath;\n};\n\nexport default (function () {\n  var INIT_STATE = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var redux = arguments.length > 1 ? arguments[1] : undefined;\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    var newState = _clone(state);\n\n    redux.reducers.forEach(function (_ref) {\n      var statePath = _ref.statePath,\n          reducer = _ref.reducer,\n          actions = _ref.actions;\n\n      if (!actions.includes(action.type)) {\n        return;\n      }\n\n      statePath = resolveStatePath(statePath, action); // If requested statePath triggers a higher order reducer - delegate processing to that HOR\n\n      var horDef = findHigherOrderReducer(redux.higherOrderReducers, statePath, action);\n\n      if (horDef) {\n        // Run HOR and pass the original {slice, reducer} that triggered this HOR\n        newState = runReducer(newState, action, {\n          statePath: statePath,\n          reducer: reducer\n        }, horDef.reducer, horDef.statePath);\n      } else {\n        newState = runReducer(newState, action, {}, reducer, statePath);\n      }\n    });\n    return newState;\n  };\n});","map":null,"metadata":{},"sourceType":"module"}