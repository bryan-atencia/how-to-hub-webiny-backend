{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport { SketchPicker } from \"react-color\";\nimport { css } from \"emotion\";\nimport { FormElementMessage } from \"../FormElementMessage\";\nimport classNames from \"classnames\";\nvar classes = {\n  label: /*#__PURE__*/css({\n    marginBottom: \"10px !important\"\n  }, \"label:label;\"),\n  color: /*#__PURE__*/css({\n    width: \"36px\",\n    height: \"14px\",\n    borderRadius: \"2px\"\n  }, \"label:color;\"),\n  swatch: /*#__PURE__*/css({\n    padding: \"5px\",\n    background: \"#fff\",\n    borderRadius: \"1px\",\n    boxShadow: \"0 0 0 1px rgba(0,0,0,.1)\",\n    display: \"inline-block\",\n    cursor: \"pointer\"\n  }, \"label:swatch;\"),\n  // @ts-ignore\n  popover: /*#__PURE__*/css({\n    position: \"absolute\",\n    zIndex: \"2\"\n  }, \"label:popover;\"),\n  classNames: /*#__PURE__*/css({\n    position: \"fixed\",\n    top: \"0px\",\n    right: \"0px\",\n    bottom: \"0px\",\n    left: \"0px\"\n  }, \"label:classNames;\"),\n  disable: /*#__PURE__*/css({\n    opacity: 0.7,\n    pointerEvents: \"none\"\n  }, \"label:disable;\")\n};\n/**\n * Use ColorPicker component to display a list of choices, once the handler is triggered.\n */\n\nvar ColorPicker = /*#__PURE__*/function (_React$Component) {\n  _inherits(ColorPicker, _React$Component);\n\n  var _super = _createSuper(ColorPicker);\n\n  function ColorPicker() {\n    var _this;\n\n    _classCallCheck(this, ColorPicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      showColorPicker: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function () {\n      _this.setState({\n        showColorPicker: !_this.state.showColorPicker\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function () {\n      _this.setState({\n        showColorPicker: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (color) {\n      var onChange = _this.props.onChange;\n      onChange && onChange(color.hex);\n    });\n\n    return _this;\n  }\n\n  _createClass(ColorPicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          label = _this$props.label,\n          disable = _this$props.disable,\n          description = _this$props.description,\n          validation = _this$props.validation;\n      var backgroundColorStyle = null;\n\n      if (value) {\n        backgroundColorStyle = {\n          background: \"\".concat(value)\n        };\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(_defineProperty({}, classes.disable, disable))\n      }, label && /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(\"mdc-text-field-helper-text mdc-text-field-helper-text--persistent\", classes.label)\n      }, label), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.swatch,\n        onClick: this.handleClick\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.color,\n        style: backgroundColorStyle\n      })), this.state.showColorPicker ? /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.popover\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.classNames,\n        onClick: this.handleClose\n      }), /*#__PURE__*/React.createElement(SketchPicker, {\n        color: value || \"\",\n        onChange: this.handleChange\n      })) : null), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {\n        error: true\n      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));\n    }\n  }]);\n\n  return ColorPicker;\n}(React.Component);\n\n_defineProperty(ColorPicker, \"defaultProps\", {\n  validation: {\n    isValid: null\n  }\n});\n\nexport { ColorPicker };","map":null,"metadata":{},"sourceType":"module"}