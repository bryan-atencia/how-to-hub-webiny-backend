{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { MDCFadingTabIndicatorFoundation, MDCSlidingTabIndicatorFoundation } from '@material/tab-indicator';\nimport { FoundationComponent, classNames } from '@rmwc/base';\nimport { Icon } from '@rmwc/icon';\n\nvar TabIndicator =\n/** @class */\nfunction (_super) {\n  __extends(TabIndicator, _super);\n\n  function TabIndicator() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.root = _this.createElement('root');\n    _this.content = _this.createElement('content');\n    return _this;\n  }\n\n  TabIndicator.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    var adapter = {\n      addClass: function addClass(className) {\n        _this.root.addClass(className);\n      },\n      removeClass: function removeClass(className) {\n        _this.root.removeClass(className);\n      },\n      computeContentClientRect: function computeContentClientRect() {\n        return _this.content.ref ? _this.content.ref.getBoundingClientRect() : {};\n      },\n      setContentStyleProperty: function setContentStyleProperty(prop, value) {\n        _this.content.setStyle(prop, value);\n      }\n    };\n\n    if (this.props.transition === 'fade') {\n      return new MDCFadingTabIndicatorFoundation(adapter);\n    }\n\n    return new MDCSlidingTabIndicatorFoundation(adapter);\n  };\n\n  TabIndicator.prototype.activate = function (previousIndicatorClientRect) {\n    this.foundation.activate(previousIndicatorClientRect);\n  };\n\n  TabIndicator.prototype.deactivate = function () {\n    this.foundation.deactivate();\n  };\n\n  TabIndicator.prototype.computeContentClientRect = function () {\n    return this.foundation.computeContentClientRect();\n  };\n\n  TabIndicator.prototype.render = function () {\n    var _a = this.props,\n        icon = _a.icon,\n        transition = _a.transition;\n    var Tag = !!icon ? Icon : 'span';\n    return React.createElement(\"span\", __assign({}, this.root.props({\n      className: classNames('mdc-tab-indicator', {\n        'mdc-tab-indicator--fade': transition === 'fade'\n      })\n    })), React.createElement(Tag, __assign({\n      \"aria-hidden\": \"true\",\n      icon: icon,\n      ref: this.content.setRef\n    }, this.content.props({}), {\n      className: \"mdc-tab-indicator__content mdc-tab-indicator__content--\" + (icon ? 'icon' : 'underline')\n    })));\n  };\n\n  return TabIndicator;\n}(FoundationComponent);\n\nexport { TabIndicator };","map":null,"metadata":{},"sourceType":"module"}