{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"publish it\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Selected content entry is not published. Make sure to {publishItLink} before publishing the main content entry.\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { createListQuery, createGetQuery, GET_CONTENT_MODEL } from \"./graphql\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Link } from \"@webiny/react-router\";\nvar t = i18n.ns(\"app-headless-cms/admin/fields/ref\");\n\nfunction ContentEntriesAutocomplete(_ref) {\n  var bind = _ref.bind,\n      field = _ref.field; // Value can be an object (received from API) or an ID (set by the Autocomplete component).\n\n  var value = get(bind, \"value.id\", bind.value);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useI18N = useI18N(),\n      getValue = _useI18N.getValue; // Format value coming from API.\n\n\n  useEffect(function () {\n    if (typeof bind.value !== \"string\") {\n      // We only need IDs to send back in request to API.\n      bind.onChange(get(bind.value, \"id\", bind.value));\n    }\n  }, [bind.value]); // Fetch ref content model data, so that we can its title field.\n\n  var refContentModelQuery = useQuery(GET_CONTENT_MODEL, {\n    variables: {\n      where: {\n        modelId: field.settings.modelId\n      }\n    }\n  });\n  var refContentModel = get(refContentModelQuery, \"data.getContentModel.data\", {}); // Once we have the refContentModel loaded, this will construct proper list and get queries.\n\n  var _useMemo = useMemo(function () {\n    return {\n      LIST_CONTENT: createListQuery(refContentModel),\n      GET_CONTENT: createGetQuery(refContentModel)\n    };\n  }, [field.settings.modelId, refContentModel.id]),\n      LIST_CONTENT = _useMemo.LIST_CONTENT,\n      GET_CONTENT = _useMemo.GET_CONTENT; // Once the query in the input has changed, this query will be triggered.\n\n\n  var titleFieldId = refContentModel.titleFieldId;\n  var listContentQuery = useQuery(LIST_CONTENT, {\n    skip: !search || !titleFieldId,\n    variables: {\n      where: _defineProperty({}, \"\".concat(titleFieldId, \"_contains\"), search)\n    }\n  }); // Once we have a valid ID, we load the data.\n\n  var getContentQuery = useQuery(GET_CONTENT, {\n    skip: !value || !titleFieldId,\n    variables: {\n      where: {\n        id: value\n      }\n    }\n  }); // Format options for the Autocomplete component.\n\n  var options = get(listContentQuery, \"data.content.data\", []).map(function (item) {\n    return {\n      id: item.id,\n      name: getValue(item.meta.title)\n    };\n  }); // Calculate a couple of props for the Autocomplete component.\n\n  var id = get(getContentQuery, \"data.content.data.id\");\n  var published = get(getContentQuery, \"data.content.data.meta.published\");\n  var name = getValue(get(getContentQuery, \"data.content.data.meta.title\"));\n  var loading = listContentQuery.loading || refContentModelQuery.loading || getContentQuery.loading;\n  var unpublishedEntryInfo = published === false && t(_templateObject())({\n    publishItLink: /*#__PURE__*/React.createElement(Link, {\n      to: \"/cms/content-models/manage/\".concat(refContentModel.modelId, \"?id=\").concat(id)\n    }, t(_templateObject2()))\n  });\n  return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, bind, {\n    loading: loading,\n    value: {\n      id: id,\n      name: name\n    },\n    options: options,\n    label: /*#__PURE__*/React.createElement(I18NValue, {\n      value: field.label\n    }),\n    description: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(I18NValue, {\n      value: field.helpText\n    }), unpublishedEntryInfo),\n    onInput: debounce(function (search) {\n      return search && setSearch(search);\n    }, 250)\n  }));\n}\n\nexport default ContentEntriesAutocomplete;","map":null,"metadata":{},"sourceType":"module"}