{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport { useDrop } from \"react-dnd\";\nvar Droppable = /*#__PURE__*/React.memo(function (props) {\n  var children = props.children,\n      onDrop = props.onDrop,\n      _props$isVisible = props.isVisible,\n      isVisible = _props$isVisible === void 0 ? function () {\n    return true;\n  } : _props$isVisible;\n\n  var _useDrop = useDrop({\n    accept: \"element\",\n    collect: function collect(monitor) {\n      return {\n        isOver: monitor.isOver() && monitor.isOver({\n          shallow: true\n        }),\n        item: monitor.getItem()\n      };\n    },\n    drop: function drop(item, monitor) {\n      if (typeof onDrop === \"function\") {\n        onDrop(monitor.getItem());\n      }\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      _useDrop2$ = _useDrop2[0],\n      item = _useDrop2$.item,\n      isOver = _useDrop2$.isOver,\n      drop = _useDrop2[1];\n\n  if (item && !isVisible(item)) {\n    return null;\n  }\n\n  return children({\n    isDragging: Boolean(item),\n    isOver: isOver,\n    item: item,\n    drop: drop\n  });\n});\nexport default Droppable;","map":null,"metadata":{},"sourceType":"module"}