{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport { useApolloClient } from \"react-apollo\";\nimport dataURLtoBlob from \"dataurl-to-blob\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { getPlugins, getPlugin } from \"@webiny/plugins\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { useKeyHandler } from \"@webiny/app-page-builder/editor/hooks/useKeyHandler\";\nimport { getActiveElementId, getElementWithChildren } from \"@webiny/app-page-builder/editor/selectors\";\nimport createElementPlugin from \"@webiny/app-page-builder/admin/utils/createElementPlugin\";\nimport createBlockPlugin from \"@webiny/app-page-builder/admin/utils/createBlockPlugin\";\nimport { CREATE_ELEMENT, UPDATE_ELEMENT } from \"@webiny/app-page-builder/admin/graphql/pages\";\nimport SaveDialog from \"./SaveDialog\";\nimport { CREATE_FILE } from \"./SaveDialog/graphql\";\nimport get from \"lodash.get\";\nimport pick from \"lodash.pick\";\n\nvar SaveAction = function SaveAction(props) {\n  var children = props.children,\n      element = props.element;\n\n  var _useKeyHandler = useKeyHandler(),\n      addKeyHandler = _useKeyHandler.addKeyHandler,\n      removeKeyHandler = _useKeyHandler.removeKeyHandler;\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDialogOpened = _useState2[0],\n      setOpenDialog = _useState2[1];\n\n  var client = useApolloClient();\n  var onSubmit = useHandler(props, function (_ref) {\n    var element = _ref.element;\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {\n        var meta, blob, fileUploaderPlugin, previewImage, createdImageResponse, createdImage, query, _yield$client$mutate, res, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                formData.content = removeIdsAndPaths(_cloneDeep(element));\n                _context.next = 3;\n                return getDataURLImageDimensions(formData.preview);\n\n              case 3:\n                meta = _context.sent;\n                blob = dataURLtoBlob(formData.preview);\n                blob.name = \"pb-editor-page-element-\" + element.id + \".png\";\n                fileUploaderPlugin = getPlugin(\"file-uploader\");\n                _context.next = 9;\n                return fileUploaderPlugin.upload(blob, {\n                  apolloClient: client\n                });\n\n              case 9:\n                previewImage = _context.sent;\n                previewImage.meta = meta;\n                previewImage.meta.private = true;\n                _context.next = 14;\n                return client.mutate({\n                  mutation: CREATE_FILE,\n                  variables: {\n                    data: previewImage\n                  }\n                });\n\n              case 14:\n                createdImageResponse = _context.sent;\n                createdImage = get(createdImageResponse, \"data.files.createFile\", {});\n\n                if (!createdImage.error) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", showSnackbar(\"Image could not be saved.\"));\n\n              case 18:\n                formData.preview = createdImage.data.id; // eslint-disable-line\n\n                query = formData.overwrite ? UPDATE_ELEMENT : CREATE_ELEMENT;\n                _context.next = 22;\n                return client.mutate({\n                  mutation: query,\n                  variables: formData.overwrite ? {\n                    id: element.source,\n                    data: pick(formData, [\"content\", \"id\"])\n                  } : {\n                    data: pick(formData, [\"type\", \"category\", \"preview\", \"name\", \"content\"])\n                  }\n                });\n\n              case 22:\n                _yield$client$mutate = _context.sent;\n                res = _yield$client$mutate.data;\n                hideDialog();\n                data = res.pageBuilder.element.data;\n\n                if (data.type === \"block\") {\n                  createBlockPlugin(data);\n                } else {\n                  createElementPlugin(data);\n                }\n\n                showSnackbar( /*#__PURE__*/React.createElement(\"span\", null, formData.type[0].toUpperCase() + formData.type.slice(1), \" \", /*#__PURE__*/React.createElement(\"strong\", null, data.name), \" was saved!\"));\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  });\n  useEffect(function () {\n    isDialogOpened ? addKeyHandler(\"escape\", hideDialog) : removeKeyHandler(\"escape\");\n  }, [isDialogOpened]);\n  var showDialog = useCallback(function () {\n    return setOpenDialog(true);\n  }, []);\n  var hideDialog = useCallback(function () {\n    return setOpenDialog(false);\n  }, []);\n\n  if (!element) {\n    return null;\n  }\n\n  var plugin = getPlugins(\"pb-editor-page-element\").find(function (pl) {\n    return pl.elementType === element.type;\n  });\n\n  if (!plugin) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SaveDialog, {\n    key: element.id,\n    element: element,\n    open: isDialogOpened,\n    onClose: hideDialog,\n    onSubmit: onSubmit,\n    type: element.type === \"block\" ? \"block\" : \"element\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    onClick: showDialog\n  }));\n};\n\nvar removeIdsAndPaths = function removeIdsAndPaths(el) {\n  delete el.id;\n  delete el.path;\n  el.elements = el.elements.map(function (el) {\n    delete el.id;\n    delete el.path;\n\n    if (el.elements && el.elements.length) {\n      el = removeIdsAndPaths(el);\n    }\n\n    return el;\n  });\n  return el;\n};\n\nfunction getDataURLImageDimensions(dataURL) {\n  return new Promise(function (resolve) {\n    var image = new window.Image();\n\n    image.onload = function () {\n      resolve({\n        width: image.width,\n        height: image.height\n      });\n    };\n\n    image.src = dataURL;\n  });\n}\n\nexport default connect(function (state) {\n  return {\n    element: getElementWithChildren(state, getActiveElementId(state))\n  };\n})(SaveAction);","map":null,"metadata":{},"sourceType":"module"}