{"ast":null,"code":"import _camelCase from \"lodash/camelCase\";\nimport React, { useEffect, useCallback, useRef } from \"react\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { useFormEditor } from \"@webiny/app-form-builder/admin/components/FormEditor/Context\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { validation } from \"@webiny/validation\";\n\nvar GeneralTab = function GeneralTab(_ref) {\n  var field = _ref.field,\n      form = _ref.form;\n  var Bind = form.Bind,\n      setValue = form.setValue;\n  var inputRef = useRef(null);\n\n  var _useFormEditor = useFormEditor(),\n      getField = _useFormEditor.getField,\n      getFieldPlugin = _useFormEditor.getFieldPlugin;\n\n  var _useI18N = useI18N(),\n      getValue = _useI18N.getValue;\n\n  var setRef = useCallback(function (ref) {\n    return inputRef.current = ref;\n  }, []);\n  useEffect(function () {\n    inputRef.current && inputRef.current.focus();\n  }, []);\n  var afterChangeLabel = useCallback(function (value) {\n    setValue(\"fieldId\", _camelCase(getValue(value)));\n  }, []);\n  var uniqueFieldIdValidator = useCallback(function (fieldId) {\n    var existingField = getField({\n      fieldId: fieldId\n    });\n\n    if (!existingField) {\n      return;\n    }\n\n    if (existingField._id === field._id) {\n      return true;\n    }\n\n    throw new Error(\"Please enter a unique Field ID\");\n  }, undefined);\n  var fieldPlugin = getFieldPlugin({\n    name: field.name\n  });\n  var additionalSettings = null;\n\n  if (typeof fieldPlugin.field.renderSettings === \"function\") {\n    additionalSettings = fieldPlugin.field.renderSettings({\n      form: form,\n      afterChangeLabel: afterChangeLabel,\n      uniqueFieldIdValidator: uniqueFieldIdValidator\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"label\",\n    validators: validation.create(\"required\"),\n    afterChange: afterChangeLabel\n  }, /*#__PURE__*/React.createElement(I18NInput, {\n    label: \"Label\",\n    inputRef: setRef\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"fieldId\",\n    validators: [validation.create(\"required\"), uniqueFieldIdValidator]\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"Field ID\"\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"helpText\"\n  }, /*#__PURE__*/React.createElement(I18NInput, {\n    label: \"Help text\",\n    description: \"Help text (optional)\"\n  })))), additionalSettings);\n};\n\nexport default GeneralTab;","map":null,"metadata":{},"sourceType":"module"}