{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _isEqual from \"lodash/isEqual\";\nimport _get from \"lodash/get\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useQuery } from \"react-apollo\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { prepareLoadListParams } from \"./utils\";\nimport { getData, getError, getMeta } from \"./functions\";\n\nvar useDataList = function useDataList(params) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      multiSelectedItems = _useState2[0],\n      _multiSelect = _useState2[1];\n\n  var history = null;\n  var location = null;\n  var routerHook = useRouter();\n\n  if (params.useRouter !== false) {\n    history = routerHook.history;\n    location = routerHook.location;\n  }\n\n  var getQueryOptions = useCallback(function () {\n    var variables = params.variables;\n\n    if (typeof variables === \"function\") {\n      variables = variables(params);\n    }\n\n    return {\n      client: params.client,\n      variables: _objectSpread(_objectSpread({}, variables), prepareLoadListParams(location))\n    };\n  }, undefined);\n  var queryData = useQuery(params.query, getQueryOptions());\n  var prevLoadParamsRef = useRef({});\n  var dataListProps = {\n    data: _get(params, \"getData\", getData)(queryData.data),\n    meta: _get(params, \"getMeta\", getMeta)(queryData.data),\n    error: _get(params, \"getError\", getError)(queryData.data),\n    loading: queryData.loading,\n    init: function init() {\n      this.refresh();\n    },\n    refresh: function refresh() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null; // Refresh multi select first.\n\n      _multiSelect([]);\n\n      if (!params) {\n        queryData.refetch(dataListProps.__loadParams);\n        return;\n      } // if (history) {\n      //     redirectToRouteWithQueryParams(params, { history, location });\n      //     return;\n      // }\n\n\n      queryData.refetch(params);\n    },\n    setPerPage: function setPerPage(perPage) {\n      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {\n        limit: parseInt(\"\" + perPage),\n        after: undefined,\n        before: undefined\n      });\n\n      this.refresh(preparedParams);\n    },\n    setNextPage: function setNextPage(cursor) {\n      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {\n        after: cursor,\n        before: undefined\n      });\n\n      this.refresh(preparedParams);\n    },\n    setPreviousPage: function setPreviousPage(cursor) {\n      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {\n        after: undefined,\n        before: cursor\n      });\n\n      this.refresh(preparedParams);\n    },\n    setSearch: function setSearch(search) {\n      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {\n        search: search,\n        after: undefined,\n        before: undefined\n      });\n\n      this.refresh(preparedParams);\n    },\n    setWhere: function setWhere(where) {\n      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {\n        where: where,\n        after: undefined,\n        before: undefined\n      });\n\n      this.refresh(preparedParams);\n    },\n    setSorters: function setSorters(sort) {\n      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {\n        sort: sort,\n        after: undefined,\n        before: undefined\n      });\n\n      this.refresh(preparedParams);\n    },\n    multiSelect: function multiSelect(items, value) {\n      if (!Array.isArray(items)) {\n        items = [items];\n      }\n\n      var returnItems = _toConsumableArray(multiSelectedItems);\n\n      items.forEach(function (item) {\n        if (value === undefined) {\n          returnItems.includes(item) ? returnItems.splice(returnItems.indexOf(item), 1) : returnItems.push(item);\n        } else {\n          if (value === true) {\n            !returnItems.includes(item) && returnItems.push(item);\n          } else {\n            returnItems.includes(item) && returnItems.splice(returnItems.indexOf(item), 1);\n          }\n        }\n      });\n\n      _multiSelect(returnItems);\n    },\n    isSelected: function isSelected(item) {\n      var query = new URLSearchParams(location.search);\n      return query.get(\"id\") === item.id;\n    },\n    select: function select(item) {\n      var query = new URLSearchParams(location.search);\n      query.set(\"id\", item.id);\n      history.push({\n        search: query.toString()\n      });\n    },\n    isMultiSelected: function isMultiSelected(item) {\n      if (!Array.isArray(multiSelectedItems)) {\n        return false;\n      }\n\n      return multiSelectedItems.includes(item);\n    },\n    isNoneMultiSelected: function isNoneMultiSelected() {\n      return multiSelectedItems.length === 0;\n    },\n    getMultiSelected: function getMultiSelected() {\n      return multiSelectedItems;\n    },\n    multiSelectAll: function multiSelectAll(value) {\n      var data = dataListProps.data;\n\n      if (Array.isArray(data)) {\n        dataListProps.multiSelect(data, value);\n      } else {\n        dataListProps.multiSelect([], value);\n      }\n    },\n    isAllMultiSelected: function isAllMultiSelected() {\n      var data = dataListProps.data;\n      return Array.isArray(data) && multiSelectedItems.length === data.length;\n    },\n    __loadParams: prepareLoadListParams(location)\n  };\n  useEffect(function () {\n    var params = {\n      prev: prevLoadParamsRef.current,\n      current: dataListProps.__loadParams\n    };\n\n    if (!_isEqual(params.prev, params.current)) {\n      dataListProps.init();\n    }\n\n    prevLoadParamsRef.current = params.current;\n  });\n  return dataListProps;\n};\n\nexport { useDataList };","map":null,"metadata":{},"sourceType":"module"}