{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport * as React from 'react';\nimport { componentFactory, FoundationComponent } from '@rmwc/base';\nimport { MDCTabBarFoundation } from '@material/tab-bar';\nimport { TabScroller } from './tab-scroller';\nimport { TabBarContext } from './tab-bar-context';\nexport var TabBarRoot = componentFactory({\n  displayName: 'TabBarRoot',\n  tag: 'nav',\n  classNames: function (props) {\n    return ['mdc-tab-bar', {\n      'mdc-tab-scroller__scroll-frame__tabs': props.isTabScroller\n    }];\n  },\n  consumeProps: ['isTabScroller']\n});\n/** The TabBar component */\n\nvar TabBar =\n/** @class */\nfunction (_super) {\n  __extends(TabBar, _super);\n\n  function TabBar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.root = _this.createElement('root');\n    _this.currentActiveTabIndex = _this.props.activeTabIndex || 0;\n    _this.tabScroller = null;\n    _this.tabList = [];\n    _this.contextApi = {\n      onTabInteraction: function (evt) {\n        return _this.handleTabInteraction(evt);\n      },\n      registerTab: function (tab) {\n        return _this.tabList.push(tab);\n      },\n      unregisterTab: function (tab) {\n        return _this.tabList.splice(_this.tabList.indexOf(tab), 1);\n      },\n      indicatorTransition: 'slide'\n    };\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleTabInteraction = _this.handleTabInteraction.bind(_this);\n    return _this;\n  }\n\n  TabBar.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this); // This corrects an issue where passing in 0 or no activeTabIndex\n    // causes the first tab of the set to not be active\n    // to make this even more annoying, Tabs focus by default\n    // restore the focus and scroll position after we activate the tab\n\n\n    var activeElement = window.document.activeElement;\n\n    var _a = __read([window.scrollX, window.scrollY], 2),\n        scrollX = _a[0],\n        scrollY = _a[1]; //activate the tab\n\n\n    this.foundation.adapter_.activateTabAtIndex(this.props.activeTabIndex || 0, this.foundation.adapter_.getTabIndicatorClientRectAtIndex(undefined));\n    this.foundation.scrollIntoView(this.props.activeTabIndex || 0); // restore focus and scroll\n\n    activeElement && activeElement.focus();\n    window.scrollTo(scrollX, scrollY);\n  };\n\n  TabBar.prototype.activateTab = function (index) {\n    var _this = this;\n\n    var foundation = this.foundation;\n    this.currentActiveTabIndex = index;\n    var previousActiveIndex = foundation.adapter_.getPreviousActiveTabIndex();\n\n    if (!foundation.indexIsInRange_(index) || index === previousActiveIndex) {\n      return;\n    }\n\n    foundation.adapter_.notifyTabActivated(index);\n    setTimeout(function () {\n      if (_this.props.activeTabIndex === index || _this.props.activeTabIndex === undefined) {\n        foundation.adapter_.deactivateTabAtIndex(previousActiveIndex);\n        foundation.adapter_.activateTabAtIndex(index, foundation.adapter_.getTabIndicatorClientRectAtIndex(previousActiveIndex));\n        foundation.scrollIntoView(index);\n      } else {\n        // reset the currentActiveTab index because we didnt actually change\n        _this.currentActiveTabIndex = previousActiveIndex;\n      }\n    });\n  };\n\n  TabBar.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCTabBarFoundation(\n    /** @type {!MDCTabBarAdapter} */\n    {\n      scrollTo: function (scrollX) {\n        _this.tabScroller && _this.tabScroller.scrollTo(scrollX);\n      },\n      incrementScroll: function (scrollXIncrement) {\n        return _this.tabScroller && _this.tabScroller.incrementScroll(scrollXIncrement);\n      },\n      getScrollPosition: function () {\n        return _this.tabScroller ? _this.tabScroller.getScrollPosition() : 0;\n      },\n      getScrollContentWidth: function () {\n        return _this.tabScroller ? _this.tabScroller.getScrollContentWidth() : 0;\n      },\n      getOffsetWidth: function () {\n        return _this.root.ref ? _this.root.ref.offsetWidth : 0;\n      },\n      isRTL: function () {\n        return !!_this.root.ref && window.getComputedStyle(_this.root.ref).getPropertyValue('direction') === 'rtl';\n      },\n      setActiveTab: function (index) {\n        return _this.activateTab(index);\n      },\n      activateTabAtIndex: function (index, clientRect) {\n        _this.tabList[index] && _this.tabList[index].activate(clientRect);\n      },\n      deactivateTabAtIndex: function (index) {\n        return _this.tabList[index] && _this.tabList[index].deactivate();\n      },\n      focusTabAtIndex: function (index) {\n        return _this.tabList[index].focus();\n      },\n      getTabIndicatorClientRectAtIndex: function (index) {\n        return _this.tabList[index] && _this.tabList[index].computeIndicatorClientRect();\n      },\n      getTabDimensionsAtIndex: function (index) {\n        return _this.tabList[index] && _this.tabList[index].computeDimensions();\n      },\n      getPreviousActiveTabIndex: function () {\n        for (var i = 0; i < _this.tabList.length; i++) {\n          if (_this.tabList[i].active) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      getFocusedTabIndex: function () {\n        var tabElements = _this.getTabElements();\n\n        var activeElement = document.activeElement;\n        return tabElements ? tabElements.indexOf(activeElement) : -1;\n      },\n      getIndexOfTabById: function (id) {\n        for (var i = 0; i < _this.tabList.length; i++) {\n          if (_this.tabList[i].id === id) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      getTabListLength: function () {\n        return _this.tabList.length;\n      },\n      notifyTabActivated: function (index) {\n        return _this.emit('onActivate', {\n          index: index\n        }, true);\n      }\n    });\n  };\n\n  TabBar.prototype.sync = function (props, prevProps) {\n    // this will re-activate the appropriate tabs if they get-rendered\n    if (props.activeTabIndex !== prevProps.activeTabIndex && props.activeTabIndex !== this.currentActiveTabIndex) {\n      typeof props.activeTabIndex === 'number' && this.activateTab(props.activeTabIndex);\n    }\n  };\n\n  TabBar.prototype.getTabElements = function () {\n    return [].slice.call(this.root.ref && this.root.ref.querySelectorAll(MDCTabBarFoundation.strings.TAB_SELECTOR));\n  };\n\n  TabBar.prototype.handleTabInteraction = function (evt) {\n    this.foundation.handleTabInteraction(evt);\n  };\n\n  TabBar.prototype.handleKeyDown = function (evt) {\n    this.props.onKeyDown && this.props.onKeyDown(evt);\n    this.foundation.handleKeyDown(evt);\n  };\n\n  TabBar.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        activeTabIndex = _a.activeTabIndex,\n        onActivate = _a.onActivate,\n        rest = __rest(_a, [\"children\", \"activeTabIndex\", \"onActivate\"]);\n\n    return React.createElement(TabBarContext.Provider, {\n      value: __assign({}, this.contextApi, {\n        indicatorTransition: this.props.indicatorTransition || 'slide'\n      })\n    }, React.createElement(TabBarRoot, __assign({}, rest, {\n      ref: this.root.setRef,\n      onKeyDown: this.handleKeyDown\n    }), React.createElement(TabScroller, {\n      ref: function (api) {\n        return _this.tabScroller = api;\n      }\n    }, children)));\n  };\n\n  TabBar.displayName = 'TabBar';\n  return TabBar;\n}(FoundationComponent);\n\nexport { TabBar };","map":null,"metadata":{},"sourceType":"module"}