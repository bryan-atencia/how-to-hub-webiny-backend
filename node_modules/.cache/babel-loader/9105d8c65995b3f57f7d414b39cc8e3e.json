{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _debounce from \"lodash/debounce\";\nimport _get from \"lodash/get\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"Upload...\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"Select\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"Search by filename or tags\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"File upload complete.\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"One or more files were not uploaded successfully:\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from \"react\";\nimport Files from \"react-butterfiles\";\nimport { ButtonPrimary, ButtonIcon } from \"@webiny/ui/Button\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport File from \"./File\";\nimport { useQuery, useMutation, useApolloClient } from \"react-apollo\";\nimport { LIST_FILES, CREATE_FILE, GET_FILE_SETTINGS } from \"./graphql\";\nimport getFileTypePlugin from \"./getFileTypePlugin\";\nimport getFileUploader from \"./getFileUploader\";\nimport outputFileSelectionError from \"./outputFileSelectionError\";\nimport DropFilesHere from \"./DropFilesHere\";\nimport NoResults from \"./NoResults\";\nimport FileDetails from \"./FileDetails\";\nimport LeftSidebar from \"./LeftSidebar\";\nimport BottomInfoBar from \"./BottomInfoBar\";\nimport { OverlayLayout } from \"@webiny/app-admin/components/OverlayLayout\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { Scrollbar } from \"@webiny/ui/Scrollbar\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport { useHotkeys } from \"react-hotkeyz\";\nimport { useFileManager } from \"./FileManagerContext\";\nimport { i18n } from \"@webiny/app/i18n\";\nvar t = i18n.ns(\"app-admin/file-manager/file-manager-view\");\nimport { ReactComponent as SearchIcon } from \"@svgr/webpack!./icons/round-search-24px.svg\";\nimport { ReactComponent as UploadIcon } from \"@svgr/webpack!./icons/round-cloud_upload-24px.svg\";\nvar style = {\n  draggingFeedback: /*#__PURE__*/css({\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    opacity: 0.5,\n    background: \"white\",\n    zIndex: 100\n  }, \"label:draggingFeedback;\"),\n  leftDrawer: {\n    header: /*#__PURE__*/css({\n      textAlign: \"center\",\n      fontSize: 18,\n      padding: 10,\n      fontWeight: 600,\n      color: \"var(--mdc-theme-on-surface)\"\n    }, \"label:header;\")\n  }\n};\nvar InputSearch = /*#__PURE__*/styled(\"div\", {\n  target: \"ee8m09m0\",\n  label: \"InputSearch\"\n})({\n  backgroundColor: \"var(--mdc-theme-on-background)\",\n  position: \"relative\",\n  height: 32,\n  padding: 3,\n  width: \"100%\",\n  borderRadius: 2,\n  \"> input\": {\n    border: \"none\",\n    fontSize: 14,\n    width: \"calc(100% - 10px)\",\n    height: \"100%\",\n    marginLeft: 50,\n    backgroundColor: \"transparent\",\n    outline: \"none\",\n    color: \"var(--mdc-theme-text-primary-on-background)\"\n  }\n});\nvar searchIcon = /*#__PURE__*/css({\n  \"&.mdc-button__icon\": {\n    color: \"var(--mdc-theme-text-secondary-on-background)\",\n    position: \"absolute\",\n    width: 24,\n    height: 24,\n    left: 15,\n    top: 7\n  }\n}, \"label:searchIcon;\");\nvar FileListWrapper = /*#__PURE__*/styled(\"div\", {\n  target: \"ee8m09m1\",\n  label: \"FileListWrapper\"\n})({\n  float: \"right\",\n  display: \"inline-block\",\n  width: \"calc(100vw - 270px)\",\n  height: \"100%\"\n});\nvar FileList = /*#__PURE__*/styled(\"div\", {\n  target: \"ee8m09m2\",\n  label: \"FileList\"\n})({\n  width: \"100%\",\n  display: \"grid\",\n\n  /* define the number of grid columns */\n  gridTemplateColumns: \"repeat( auto-fill, minmax(220px, 1fr) )\",\n  marginBottom: 95\n});\n\nfunction renderFile(props) {\n  var file = props.file;\n  var plugin = getFileTypePlugin(file);\n  return /*#__PURE__*/React.createElement(File, Object.assign({}, props, {\n    key: file.src\n  }), plugin.render({\n    file: file\n  }));\n}\n\nvar renderEmpty = function renderEmpty(_ref) {\n  var hasPreviouslyUploadedFiles = _ref.hasPreviouslyUploadedFiles,\n      browseFiles = _ref.browseFiles;\n\n  if (hasPreviouslyUploadedFiles) {\n    return /*#__PURE__*/React.createElement(NoResults, null);\n  }\n\n  return /*#__PURE__*/React.createElement(DropFilesHere, {\n    empty: true,\n    onClick: browseFiles\n  });\n};\n\nfunction FileManagerView(props) {\n  var onClose = props.onClose,\n      onChange = props.onChange,\n      accept = props.accept,\n      multiple = props.multiple,\n      maxSize = props.maxSize,\n      multipleMaxCount = props.multipleMaxCount,\n      multipleMaxSize = props.multipleMaxSize;\n\n  var _useFileManager = useFileManager(),\n      selected = _useFileManager.selected,\n      toggleSelected = _useFileManager.toggleSelected,\n      dragging = _useFileManager.dragging,\n      setDragging = _useFileManager.setDragging,\n      uploading = _useFileManager.uploading,\n      setUploading = _useFileManager.setUploading,\n      _showFileDetails = _useFileManager.showFileDetails,\n      showingFileDetails = _useFileManager.showingFileDetails,\n      queryParams = _useFileManager.queryParams,\n      setQueryParams = _useFileManager.setQueryParams,\n      hasPreviouslyUploadedFiles = _useFileManager.hasPreviouslyUploadedFiles,\n      setHasPreviouslyUploadedFiles = _useFileManager.setHasPreviouslyUploadedFiles;\n\n  var useRef = React.useRef,\n      useCallback = React.useCallback;\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var searchOnChange = useCallback( // @ts-ignore\n  _debounce(function (search) {\n    return setQueryParams({\n      search: search\n    });\n  }, 500), []);\n\n  var _toggleTag = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var tag, queryParams, finalTags;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tag = _ref2.tag, queryParams = _ref2.queryParams;\n              finalTags = Array.isArray(queryParams.tags) ? _toConsumableArray(queryParams.tags) : [];\n\n              if (finalTags.includes(tag)) {\n                finalTags.splice(finalTags.indexOf(tag), 1);\n              } else {\n                finalTags.push(tag);\n              }\n\n              setQueryParams(_objectSpread(_objectSpread({}, queryParams), {}, {\n                tags: finalTags\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), []);\n\n  var refreshOnScroll = useCallback( // @ts-ignore\n  _debounce(function (_ref4) {\n    var scrollFrame = _ref4.scrollFrame,\n        fetchMore = _ref4.fetchMore;\n\n    if (scrollFrame.top > 0.9) {\n      // @ts-ignore // TODO: @adrian - what is `current` ?\n      if (!gqlQuery.current) {\n        return;\n      } // @ts-ignore // TODO: @adrian - what is `current` ?\n\n\n      var _gqlQuery$current$get = gqlQuery.current.getQueryResult(),\n          _data = _gqlQuery$current$get.data;\n\n      var nextPage = _get(_data, \"files.listFiles.meta.nextPage\");\n\n      nextPage && fetchMore({\n        variables: {\n          page: nextPage\n        },\n        updateQuery: function updateQuery(prev, _ref5) {\n          var fetchMoreResult = _ref5.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            return prev;\n          }\n\n          var next = _objectSpread({}, fetchMoreResult);\n\n          next.files.listFiles.data = [].concat(_toConsumableArray(prev.files.listFiles.data), _toConsumableArray(fetchMoreResult.files.listFiles.data));\n          return next;\n        }\n      });\n    }\n  }, 500), []);\n  var getFileUploadErrorMessage = useCallback(function (e) {\n    if (typeof e === \"string\") {\n      var match = e.match(/Message>(.*?)<\\/Message/);\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            message = _match[1];\n\n        return message;\n      }\n\n      return e;\n    }\n\n    return e.message;\n  }, []);\n\n  var updateCacheAfterCreateFile = function updateCacheAfterCreateFile(cache, newFile) {\n    var newFileData = _get(newFile, \"data.files.createFile.data\");\n\n    var data = _cloneDeep(cache.readQuery({\n      query: LIST_FILES,\n      variables: queryParams\n    }));\n\n    data.files.listFiles.data.unshift(newFileData);\n    cache.writeQuery({\n      query: LIST_FILES,\n      variables: queryParams,\n      data: data\n    });\n  };\n\n  var getFileDetailsFile = useCallback(function getFileDetailsFile(_ref6) {\n    var src = _ref6.src,\n        list = _ref6.list;\n    return list.find(function (item) {\n      return item.src === src;\n    });\n  }, []);\n  useHotkeys({\n    zIndex: 50,\n    keys: {\n      esc: onClose\n    }\n  });\n  var searchInput = useRef();\n  var apolloClient = useApolloClient();\n  var gqlQuery = useQuery(LIST_FILES, {\n    variables: queryParams,\n    onCompleted: function onCompleted(response) {\n      var list = _get(response, \"files.listFiles.data\") || [];\n\n      if (hasPreviouslyUploadedFiles === null) {\n        setHasPreviouslyUploadedFiles(list.length > 0);\n      }\n    }\n  });\n  var data = gqlQuery.data,\n      fetchMore = gqlQuery.fetchMore;\n  var list = _get(data, \"files.listFiles.data\") || [];\n\n  var _useMutation = useMutation(CREATE_FILE, {\n    update: updateCacheAfterCreateFile\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createFile = _useMutation2[0];\n\n  var uploadFile = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(files) {\n      var list, errors;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setUploading(true);\n              list = Array.isArray(files) ? files : [files];\n              errors = [];\n              _context3.next = 5;\n              return Promise.all(list.map( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n                  var response;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.prev = 0;\n                          _context2.next = 3;\n                          return getFileUploader()(file, {\n                            apolloClient: apolloClient\n                          });\n\n                        case 3:\n                          response = _context2.sent;\n                          _context2.next = 6;\n                          return createFile({\n                            variables: {\n                              data: response\n                            }\n                          });\n\n                        case 6:\n                          _context2.next = 11;\n                          break;\n\n                        case 8:\n                          _context2.prev = 8;\n                          _context2.t0 = _context2[\"catch\"](0);\n                          errors.push({\n                            file: file,\n                            e: _context2.t0\n                          });\n\n                        case 11:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[0, 8]]);\n                }));\n\n                return function (_x3) {\n                  return _ref8.apply(this, arguments);\n                };\n              }()));\n\n            case 5:\n              if (!hasPreviouslyUploadedFiles) {\n                setHasPreviouslyUploadedFiles(true);\n              }\n\n              setUploading(false);\n\n              if (!(errors.length > 0)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", setTimeout(function () {\n                showSnackbar( /*#__PURE__*/React.createElement(React.Fragment, null, t(_templateObject()), /*#__PURE__*/React.createElement(\"ol\", null, errors.map(function (_ref9) {\n                  var file = _ref9.file,\n                      e = _ref9.e;\n                  return /*#__PURE__*/React.createElement(\"li\", {\n                    key: file.name\n                  }, /*#__PURE__*/React.createElement(\"strong\", null, file.name), \": \", getFileUploadErrorMessage(e));\n                }))));\n              }, 750));\n\n            case 9:\n              // We wait 750ms, just for everything to settle down a bit.\n              setTimeout(function () {\n                return showSnackbar(t(_templateObject2()));\n              }, 750);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function uploadFile(_x2) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var settingsQuery = useQuery(GET_FILE_SETTINGS);\n  var settings = _get(settingsQuery.data, \"files.getSettings.data\") || {};\n  return /*#__PURE__*/React.createElement(Files, {\n    multiple: true,\n    maxSize: settings.uploadMaxFileSize ? settings.uploadMaxFileSize + \"b\" : maxSize,\n    multipleMaxSize: multipleMaxSize,\n    multipleMaxCount: multipleMaxCount,\n    accept: accept,\n    onSuccess: function onSuccess(files) {\n      return uploadFile(files.map(function (file) {\n        return file.src.file;\n      }));\n    },\n    onError: function onError(errors) {\n      var message = outputFileSelectionError(errors);\n      showSnackbar(message);\n    }\n  }, function (_ref10) {\n    var getDropZoneProps = _ref10.getDropZoneProps,\n        browseFiles = _ref10.browseFiles,\n        validateFiles = _ref10.validateFiles;\n    return /*#__PURE__*/React.createElement(OverlayLayout, Object.assign({}, getDropZoneProps({\n      onDragEnter: function onDragEnter() {\n        return hasPreviouslyUploadedFiles && setDragging(true);\n      },\n      onExited: onClose\n    }), {\n      barLeft: /*#__PURE__*/React.createElement(InputSearch, null, /*#__PURE__*/React.createElement(Icon, {\n        className: searchIcon,\n        icon: /*#__PURE__*/React.createElement(SearchIcon, null)\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        ref: searchInput,\n        onChange: function onChange(e) {\n          return searchOnChange(e.target.value);\n        },\n        placeholder: t(_templateObject3())\n      })),\n      barRight: selected.length > 0 ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n        disabled: uploading,\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return onChange(multiple ? selected : selected[0]);\n\n                case 2:\n                  onClose();\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }))\n      }, t(_templateObject4()), \" \", multiple && \"(\".concat(selected.length, \")\")) :\n      /*#__PURE__*/\n      // @ts-ignore\n      React.createElement(ButtonPrimary, {\n        onClick: browseFiles,\n        disabled: uploading\n      }, /*#__PURE__*/React.createElement(ButtonIcon, {\n        icon: /*#__PURE__*/React.createElement(UploadIcon, null)\n      }), t(_templateObject5()))\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, dragging && hasPreviouslyUploadedFiles && /*#__PURE__*/React.createElement(DropFilesHere // @ts-ignore TODO: @adrian - className is never rendered?!\n    , {\n      className: style.draggingFeedback,\n      onDragLeave: function onDragLeave() {\n        return setDragging(false);\n      },\n      onDrop: function onDrop() {\n        return setDragging(false);\n      }\n    }), /*#__PURE__*/React.createElement(FileDetails, {\n      validateFiles: validateFiles,\n      uploadFile: uploadFile,\n      file: getFileDetailsFile({\n        list: list,\n        src: showingFileDetails\n      })\n    }), /*#__PURE__*/React.createElement(LeftSidebar, {\n      queryParams: queryParams,\n      toggleTag: function toggleTag(tag) {\n        return _toggleTag({\n          tag: tag,\n          queryParams: queryParams\n        });\n      }\n    }), /*#__PURE__*/React.createElement(FileListWrapper, null, /*#__PURE__*/React.createElement(Scrollbar, {\n      onScrollFrame: function onScrollFrame(scrollFrame) {\n        return refreshOnScroll({\n          scrollFrame: scrollFrame,\n          fetchMore: fetchMore\n        });\n      }\n    }, /*#__PURE__*/React.createElement(FileList, null, list.length ? list.map(function (file) {\n      return renderFile({\n        uploadFile: uploadFile,\n        file: file,\n        showFileDetails: function showFileDetails() {\n          return _showFileDetails(file.src);\n        },\n        selected: selected.find(function (current) {\n          return current.src === file.src;\n        }),\n        onSelect: function () {\n          var _onSelect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    if (!multiple) {\n                      _context5.next = 3;\n                      break;\n                    }\n\n                    toggleSelected(file);\n                    return _context5.abrupt(\"return\");\n\n                  case 3:\n                    _context5.next = 5;\n                    return onChange(file);\n\n                  case 5:\n                    onClose();\n\n                  case 6:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          function onSelect() {\n            return _onSelect.apply(this, arguments);\n          }\n\n          return onSelect;\n        }()\n      });\n    }) : renderEmpty({\n      hasPreviouslyUploadedFiles: hasPreviouslyUploadedFiles,\n      browseFiles: browseFiles\n    }))), /*#__PURE__*/React.createElement(BottomInfoBar, {\n      accept: accept,\n      uploading: uploading\n    }))));\n  });\n}\n\nFileManagerView.defaultProps = {\n  multiple: false,\n  maxSize: \"10mb\",\n  multipleMaxSize: \"100mb\",\n  multipleMaxCount: 100\n};\nexport default FileManagerView;","map":null,"metadata":{},"sourceType":"module"}