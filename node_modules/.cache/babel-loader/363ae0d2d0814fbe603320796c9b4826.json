{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport dotProp from \"dot-prop-immutable\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\n\nvar Fieldset = /*#__PURE__*/function (_React$Component) {\n  _inherits(Fieldset, _React$Component);\n\n  var _super = _createSuper(Fieldset);\n\n  function Fieldset() {\n    var _this;\n\n    _classCallCheck(this, Fieldset);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"header\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"rows\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"empty\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"actions\", {\n      add: function add() {\n        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n        return function () {\n          return _this.addData(index);\n        };\n      },\n      remove: function remove() {\n        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n        return function () {\n          return _this.removeData(index);\n        };\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeData\", function (index) {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          onChange = _this$props.onChange;\n      onChange(dotProp.delete(value, index));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addData\", function () {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var _this$props2 = _this.props,\n          value = _this$props2.value,\n          onChange = _this$props2.onChange;\n\n      if (index < 0) {\n        onChange([].concat(_toConsumableArray(value), [{}]));\n      } else {\n        onChange([].concat(_toConsumableArray(value.slice(0, index + 1)), [{}], _toConsumableArray(value.slice(index + 1))));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (cb) {\n      _this.header = cb();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderRow\", function (cb) {\n      var value = _this.props.value;\n      _this.rows = value.map(function (record, index) {\n        return /*#__PURE__*/React.createElement(\"webiny-dynamic-fieldset-row\", {\n          key: index\n        }, cb({\n          data: record,\n          index: index\n        }));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderEmpty\", function (cb) {\n      _this.empty = cb();\n    });\n\n    return _this;\n  }\n\n  _createClass(Fieldset, [{\n    key: \"renderComponent\",\n    value: function renderComponent() {\n      var value = this.props.value;\n      var children = this.props.children;\n      children({\n        actions: this.actions,\n        header: this.renderHeader,\n        row: this.renderRow,\n        empty: this.renderEmpty\n      });\n\n      if (value.length) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, this.header, this.rows);\n      }\n\n      return this.empty;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          description = _this$props3.description,\n          _this$props3$validati = _this$props3.validation,\n          validation = _this$props3$validati === void 0 ? {\n        isValid: null\n      } : _this$props3$validati;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderComponent(), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {\n        error: true\n      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));\n    }\n  }]);\n\n  return Fieldset;\n}(React.Component);\n\n_defineProperty(Fieldset, \"defaultProps\", {\n  value: [],\n  description: null\n});\n\nexport default Fieldset;","map":null,"metadata":{},"sourceType":"module"}