{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _omit from \"lodash/omit\";\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"Update account\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"E-mail\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"Last Name\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"First Name\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updateMe($data: SecurityCurrentUserInput!) {\\n        security {\\n            updateCurrentUser(data: $data) {\\n                data {\\n                    id\\n                    email\\n                    avatar {\\n                        id\\n                        src\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n        security {\\n            getCurrentUser {\\n                data {\\n                    id\\n                    email\\n                    firstName\\n                    lastName\\n                    avatar {\\n                        id\\n                        src\\n                    }\\n                    personalAccessTokens {\\n                        id\\n                        name\\n                        token\\n                    }\\n                }\\n                error {\\n                    code\\n                    message\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useReducer, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { get } from \"dot-prop-immutable\";\nimport { useApolloClient } from \"react-apollo\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Form } from \"@webiny/form\";\nimport { getPlugin } from \"@webiny/plugins\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport AvatarImage from \"./Components/AvatarImage\";\nimport { validation } from \"@webiny/validation\";\nimport { useSecurity } from \"@webiny/app-security/hooks/useSecurity\";\nimport AccuntTokens from \"./AccountTokens\";\nimport { SimpleForm, SimpleFormHeader, SimpleFormFooter, SimpleFormContent } from \"@webiny/app-admin/components/SimpleForm\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nvar t = i18n.ns(\"app-security/admin/account-form\");\nvar GET_CURRENT_USER = gql(_templateObject());\nvar UPDATE_CURRENT_USER = gql(_templateObject2());\n\nvar UserAccountForm = function UserAccountForm() {\n  var auth = getPlugin(\"security-view-user-account-form\");\n\n  if (!auth) {\n    throw Error(\"You must register a \\\"security-view-user-account-form\\\" plugin to render Account form!\");\n  }\n\n  var _useReducer = useReducer(function (prev, next) {\n    return _objectSpread(_objectSpread({}, prev), next);\n  }, {\n    loading: true,\n    user: {\n      data: {}\n    }\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      _useReducer2$ = _useReducer2[0],\n      loading = _useReducer2$.loading,\n      user = _useReducer2$.user,\n      setState = _useReducer2[1];\n\n  var setIsLoading = function setIsLoading(loading) {\n    return setState({\n      loading: loading\n    });\n  };\n\n  var client = useApolloClient();\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var security = useSecurity();\n  var onSubmit = useHandler(null, function () {\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {\n        var _yield$client$mutate, response, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setState({\n                  loading: true\n                });\n                _context.next = 3;\n                return client.mutate({\n                  mutation: UPDATE_CURRENT_USER,\n                  variables: {\n                    data: _omit(formData, [\"id\", \"personalAccessTokens\"])\n                  }\n                });\n\n              case 3:\n                _yield$client$mutate = _context.sent;\n                response = _yield$client$mutate.data;\n                error = response.security.updateCurrentUser.error;\n                setState({\n                  loading: false\n                });\n\n                if (!error) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", showSnackbar(error.message, {\n                  action: \"Close\"\n                }));\n\n              case 9:\n                security.refreshUser();\n                showSnackbar(\"Account saved successfully!\");\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  });\n  useEffect(function () {\n    client.query({\n      query: GET_CURRENT_USER\n    }).then(function (_ref2) {\n      var data = _ref2.data;\n      setState({\n        loading: false,\n        user: get(data, \"security.getCurrentUser\")\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 3\n  }), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Form, {\n    data: user.data,\n    onSubmit: onSubmit\n  }, function (_ref3) {\n    var data = _ref3.data,\n        form = _ref3.form,\n        Bind = _ref3.Bind,\n        setValue = _ref3.setValue;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginBottom: \"32px\"\n      }\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"avatar\"\n    }, /*#__PURE__*/React.createElement(AvatarImage, {\n      round: true\n    }))), /*#__PURE__*/React.createElement(SimpleForm, null, loading && /*#__PURE__*/React.createElement(CircularProgress, {\n      style: {\n        zIndex: 3\n      }\n    }), /*#__PURE__*/React.createElement(SimpleFormHeader, {\n      title: \"Account\"\n    }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(auth.view, {\n      Bind: Bind,\n      data: data,\n      fields: {\n        firstName: /*#__PURE__*/React.createElement(Bind, {\n          name: \"firstName\",\n          validators: validation.create(\"required\")\n        }, /*#__PURE__*/React.createElement(Input, {\n          label: t(_templateObject3())\n        })),\n        lastName: /*#__PURE__*/React.createElement(Bind, {\n          name: \"lastName\",\n          validators: validation.create(\"required\")\n        }, /*#__PURE__*/React.createElement(Input, {\n          label: t(_templateObject4())\n        })),\n        email: /*#__PURE__*/React.createElement(Bind, {\n          name: \"email\",\n          validators: validation.create(\"required\")\n        }, /*#__PURE__*/React.createElement(Input, {\n          label: t(_templateObject5())\n        })),\n        personalAccessTokens: /*#__PURE__*/React.createElement(Bind, {\n          name: \"personalAccessTokens\"\n        }, /*#__PURE__*/React.createElement(AccuntTokens, {\n          data: data,\n          setValue: setValue,\n          setFormIsLoading: setIsLoading\n        }))\n      }\n    })), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {\n      onClick: form.submit\n    }, t(_templateObject6())))));\n  })));\n};\n\nexport default UserAccountForm;","map":null,"metadata":{},"sourceType":"module"}