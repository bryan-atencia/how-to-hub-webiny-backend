{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { strings } from './constants';\nimport { MDCChipFoundation } from './foundation';\nvar INTERACTION_EVENTS = ['click', 'keydown'];\n\nvar MDCChip =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChip, _super);\n\n  function MDCChip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MDCChip.prototype, \"selected\", {\n    /**\n     * @return Whether the chip is selected.\n     */\n    get: function get() {\n      return this.foundation_.isSelected();\n    },\n\n    /**\n     * Sets selected state on the chip.\n     */\n    set: function set(selected) {\n      this.foundation_.setSelected(selected);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChip.prototype, \"shouldRemoveOnTrailingIconClick\", {\n    /**\n     * @return Whether a trailing icon click should trigger exit/removal of the chip.\n     */\n    get: function get() {\n      return this.foundation_.getShouldRemoveOnTrailingIconClick();\n    },\n\n    /**\n     * Sets whether a trailing icon click should trigger exit/removal of the chip.\n     */\n    set: function set(shouldRemove) {\n      this.foundation_.setShouldRemoveOnTrailingIconClick(shouldRemove);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChip.prototype, \"ripple\", {\n    get: function get() {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChip.prototype, \"id\", {\n    get: function get() {\n      return this.root_.id;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCChip.attachTo = function (root) {\n    return new MDCChip(root);\n  };\n\n  MDCChip.prototype.initialize = function (rippleFactory) {\n    var _this = this;\n\n    if (rippleFactory === void 0) {\n      rippleFactory = function rippleFactory(el, foundation) {\n        return new MDCRipple(el, foundation);\n      };\n    }\n\n    this.leadingIcon_ = this.root_.querySelector(strings.LEADING_ICON_SELECTOR);\n    this.trailingIcon_ = this.root_.querySelector(strings.TRAILING_ICON_SELECTOR);\n    this.checkmark_ = this.root_.querySelector(strings.CHECKMARK_SELECTOR); // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n    var rippleAdapter = tslib_1.__assign({}, MDCRipple.createAdapter(this), {\n      computeBoundingRect: function computeBoundingRect() {\n        return _this.foundation_.getDimensions();\n      }\n    });\n\n    this.ripple_ = rippleFactory(this.root_, new MDCRippleFoundation(rippleAdapter));\n  };\n\n  MDCChip.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleInteraction_ = function (evt) {\n      return _this.foundation_.handleInteraction(evt);\n    };\n\n    this.handleTransitionEnd_ = function (evt) {\n      return _this.foundation_.handleTransitionEnd(evt);\n    };\n\n    this.handleTrailingIconInteraction_ = function (evt) {\n      return _this.foundation_.handleTrailingIconInteraction(evt);\n    };\n\n    INTERACTION_EVENTS.forEach(function (evtType) {\n      _this.listen(evtType, _this.handleInteraction_);\n    });\n    this.listen('transitionend', this.handleTransitionEnd_);\n\n    if (this.trailingIcon_) {\n      INTERACTION_EVENTS.forEach(function (evtType) {\n        _this.trailingIcon_.addEventListener(evtType, _this.handleTrailingIconInteraction_);\n      });\n    }\n  };\n\n  MDCChip.prototype.destroy = function () {\n    var _this = this;\n\n    this.ripple_.destroy();\n    INTERACTION_EVENTS.forEach(function (evtType) {\n      _this.unlisten(evtType, _this.handleInteraction_);\n    });\n    this.unlisten('transitionend', this.handleTransitionEnd_);\n\n    if (this.trailingIcon_) {\n      INTERACTION_EVENTS.forEach(function (evtType) {\n        _this.trailingIcon_.removeEventListener(evtType, _this.handleTrailingIconInteraction_);\n      });\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n\n\n  MDCChip.prototype.beginExit = function () {\n    this.foundation_.beginExit();\n  };\n\n  MDCChip.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function addClass(className) {\n        return _this.root_.classList.add(className);\n      },\n      addClassToLeadingIcon: function addClassToLeadingIcon(className) {\n        if (_this.leadingIcon_) {\n          _this.leadingIcon_.classList.add(className);\n        }\n      },\n      eventTargetHasClass: function eventTargetHasClass(target, className) {\n        return target ? target.classList.contains(className) : false;\n      },\n      getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {\n        return _this.checkmark_ ? _this.checkmark_.getBoundingClientRect() : null;\n      },\n      getComputedStyleValue: function getComputedStyleValue(propertyName) {\n        return window.getComputedStyle(_this.root_).getPropertyValue(propertyName);\n      },\n      getRootBoundingClientRect: function getRootBoundingClientRect() {\n        return _this.root_.getBoundingClientRect();\n      },\n      hasClass: function hasClass(className) {\n        return _this.root_.classList.contains(className);\n      },\n      hasLeadingIcon: function hasLeadingIcon() {\n        return !!_this.leadingIcon_;\n      },\n      notifyInteraction: function notifyInteraction() {\n        return _this.emit(strings.INTERACTION_EVENT, {\n          chipId: _this.id\n        }, true\n        /* shouldBubble */\n        );\n      },\n      notifyRemoval: function notifyRemoval() {\n        return _this.emit(strings.REMOVAL_EVENT, {\n          chipId: _this.id,\n          root: _this.root_\n        }, true\n        /* shouldBubble */\n        );\n      },\n      notifySelection: function notifySelection(selected) {\n        return _this.emit(strings.SELECTION_EVENT, {\n          chipId: _this.id,\n          selected: selected\n        }, true\n        /* shouldBubble */\n        );\n      },\n      notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {\n        return _this.emit(strings.TRAILING_ICON_INTERACTION_EVENT, {\n          chipId: _this.id\n        }, true\n        /* shouldBubble */\n        );\n      },\n      removeClass: function removeClass(className) {\n        return _this.root_.classList.remove(className);\n      },\n      removeClassFromLeadingIcon: function removeClassFromLeadingIcon(className) {\n        if (_this.leadingIcon_) {\n          _this.leadingIcon_.classList.remove(className);\n        }\n      },\n      setAttr: function setAttr(attr, value) {\n        return _this.root_.setAttribute(attr, value);\n      },\n      setStyleProperty: function setStyleProperty(propertyName, value) {\n        return _this.root_.style.setProperty(propertyName, value);\n      }\n    };\n    return new MDCChipFoundation(adapter);\n  };\n\n  return MDCChip;\n}(MDCComponent);\n\nexport { MDCChip };","map":null,"metadata":{},"sourceType":"module"}