{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport { isDescendant } from \"react-sortable-tree\";\nimport classnames from \"classnames\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport \"react-sortable-tree/style.css\";\nimport { rowHandle, fieldContainer, Row, RowContainer } from \"./Styled\";\nimport { ReactComponent as EditIcon } from \"@svgr/webpack!./icons/round-edit-24px.svg\";\nimport { ReactComponent as DeleteIcon } from \"@svgr/webpack!./icons/round-delete-24px.svg\";\nimport { ReactComponent as HandleIcon } from \"@svgr/webpack!./icons/round-drag_indicator-24px.svg\";\n\nvar NodeRendererDefault = /*#__PURE__*/function (_React$Component) {\n  _inherits(NodeRendererDefault, _React$Component);\n\n  var _super = _createSuper(NodeRendererDefault);\n\n  function NodeRendererDefault() {\n    _classCallCheck(this, NodeRendererDefault);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NodeRendererDefault, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          scaffoldBlockPxWidth = _this$props.scaffoldBlockPxWidth,\n          toggleChildrenVisibility = _this$props.toggleChildrenVisibility,\n          connectDragPreview = _this$props.connectDragPreview,\n          connectDragSource = _this$props.connectDragSource,\n          isDragging = _this$props.isDragging,\n          canDrop = _this$props.canDrop,\n          canDrag = _this$props.canDrag,\n          node = _this$props.node,\n          title = _this$props.title,\n          draggedNode = _this$props.draggedNode,\n          path = _this$props.path,\n          treeIndex = _this$props.treeIndex,\n          editItem = _this$props.editItem,\n          deleteItem = _this$props.deleteItem,\n          className = _this$props.className,\n          style = _this$props.style,\n          didDrop = _this$props.didDrop;\n      var nodeTitle = title || node.title;\n      var plugins = getPlugins(\"pb-menu-item\");\n      var plugin = plugins.find(function (pl) {\n        return pl.menuItem.type === node.type;\n      });\n\n      if (!plugin) {\n        return null;\n      }\n\n      var handle = connectDragSource( /*#__PURE__*/React.createElement(\"div\", {\n        className: rowHandle\n      }, /*#__PURE__*/React.createElement(Icon, {\n        icon: /*#__PURE__*/React.createElement(HandleIcon, null)\n      })), {\n        dropEffect: \"copy\"\n      });\n      var isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);\n      var isLandingPadActive = !didDrop && isDragging;\n      var buttonStyle = {\n        left: -0.5 * scaffoldBlockPxWidth\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        \"data-testid\": \"pb-menu-item-render-\".concat(nodeTitle)\n      }, toggleChildrenVisibility && node.children && (node.children.length > 0 || typeof node.children === \"function\") && /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        \"aria-label\": node.expanded ? \"Collapse\" : \"Expand\",\n        className: classnames(node.expanded ? \"rst__collapseButton\" : \"rst__expandButton\"),\n        style: buttonStyle,\n        onClick: function onClick() {\n          return toggleChildrenVisibility({\n            node: node,\n            path: path,\n            treeIndex: treeIndex\n          });\n        }\n      }), node.expanded && !isDragging && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: scaffoldBlockPxWidth\n        },\n        className: classnames(\"rst__lineChildren\")\n      })), /*#__PURE__*/React.createElement(RowContainer, {\n        className: \"rst__rowWrapper\"\n      }, connectDragPreview( /*#__PURE__*/React.createElement(\"div\", null, handle, /*#__PURE__*/React.createElement(Row, {\n        className: classnames(\"rst__row\", isLandingPadActive && \"rst__rowLandingPad\", isLandingPadActive && !canDrop && \"rst__rowCancelPad\", className),\n        style: _objectSpread({\n          opacity: isDraggedDescendant ? 0.5 : 1\n        }, style)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames(fieldContainer, !canDrag && \"rst__rowContentsDragDisabled\")\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames(\"rst__rowLabel\")\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: classnames(\"rst__rowTitle\", node.subtitle && \"rst__rowTitleWithSubtitle\")\n      }, /*#__PURE__*/React.createElement(Typography, {\n        use: \"overline\"\n      }, nodeTitle))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rst__rowToolbar\"\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        \"data-testid\": \"pb-edit-icon-button\",\n        icon: /*#__PURE__*/React.createElement(EditIcon, null),\n        onClick: function onClick() {\n          return editItem(node);\n        }\n      }), /*#__PURE__*/React.createElement(IconButton, {\n        \"data-testid\": \"pb-delete-icon-button\",\n        icon: /*#__PURE__*/React.createElement(DeleteIcon, null),\n        onClick: function onClick() {\n          return deleteItem(node);\n        }\n      }))))))));\n    }\n  }]);\n\n  return NodeRendererDefault;\n}(React.Component);\n\n_defineProperty(NodeRendererDefault, \"defaultProps\", {\n  canDrag: false,\n  toggleChildrenVisibility: null,\n  buttons: [],\n  className: \"\",\n  style: {},\n  parentNode: null,\n  draggedNode: null,\n  canDrop: false,\n  title: null,\n  subtitle: null\n});\n\nexport default NodeRendererDefault;","map":null,"metadata":{},"sourceType":"module"}