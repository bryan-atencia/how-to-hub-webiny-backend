{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _isEqual from \"lodash/isEqual\";\nimport _get from \"lodash/get\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { css } from \"emotion\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ReactComponent as TopIcon } from \"@svgr/webpack!./icons/round-border_top-24px.svg\";\nimport { ReactComponent as RightIcon } from \"@svgr/webpack!./icons/round-border_right-24px.svg\";\nimport { ReactComponent as BottomIcon } from \"@svgr/webpack!./icons/round-border_bottom-24px.svg\";\nimport { ReactComponent as LeftIcon } from \"@svgr/webpack!./icons/round-border_left-24px.svg\";\nvar enabled = /*#__PURE__*/css({\n  color: \"var(--mdc-theme-primary, #fa5723) !important\"\n}, \"label:enabled;\");\nvar cellStyle = {\n  marginBottom: 0\n};\n\nvar getValue = function getValue(value, side) {\n  var enabled = value[side];\n  return typeof enabled === \"undefined\" ? true : enabled;\n};\n\nvar Selector = /*#__PURE__*/React.memo(function (_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      updateValue = _ref.updateValue;\n  var top = getValue(value, \"top\");\n  var right = getValue(value, \"right\");\n  var bottom = getValue(value, \"bottom\");\n  var left = getValue(value, \"left\");\n  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 4\n  }, /*#__PURE__*/React.createElement(Typography, {\n    use: \"overline\"\n  }, label)), /*#__PURE__*/React.createElement(Cell, {\n    span: 8\n  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 3,\n    style: cellStyle\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return updateValue(_objectSpread(_objectSpread({}, value), {}, {\n        top: !top\n      }));\n    },\n    className: top && enabled,\n    icon: /*#__PURE__*/React.createElement(TopIcon, null)\n  })), /*#__PURE__*/React.createElement(Cell, {\n    span: 3,\n    style: cellStyle\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return updateValue(_objectSpread(_objectSpread({}, value), {}, {\n        right: !right\n      }));\n    },\n    className: right && enabled,\n    icon: /*#__PURE__*/React.createElement(RightIcon, null)\n  })), /*#__PURE__*/React.createElement(Cell, {\n    span: 3,\n    style: cellStyle\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return updateValue(_objectSpread(_objectSpread({}, value), {}, {\n        bottom: !bottom\n      }));\n    },\n    className: bottom && enabled,\n    icon: /*#__PURE__*/React.createElement(BottomIcon, null)\n  })), /*#__PURE__*/React.createElement(Cell, {\n    span: 3,\n    style: cellStyle\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return updateValue(_objectSpread(_objectSpread({}, value), {}, {\n        left: !left\n      }));\n    },\n    className: left && enabled,\n    icon: /*#__PURE__*/React.createElement(LeftIcon, null)\n  })))));\n});\nSelector.displayName = \"Selector\";\nexport default connect(function (state, _ref2) {\n  var valueKey = _ref2.valueKey;\n  return {\n    value: _get(getActiveElement(state), valueKey, 0)\n  };\n}, null, null, {\n  areStatePropsEqual: _isEqual\n})(Selector);","map":null,"metadata":{},"sourceType":"module"}