{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Cannot render \\\"{fieldName}\\\" field - field renderer missing.\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useCallback, cloneElement } from \"react\";\nimport get from \"lodash.get\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport getValue from \"./functions/getValue\";\nimport setValue from \"./functions/setValue\";\nimport Label from \"./components/Label\";\nvar t = i18n.ns(\"app-headless-cms/admin/components/content-form\");\n\nvar RenderFieldElement = function RenderFieldElement(props) {\n  var renderPlugins = props.renderPlugins,\n      field = props.field,\n      BaseFormBind = props.Bind,\n      locale = props.locale,\n      contentModel = props.contentModel;\n  var renderPlugin = renderPlugins.find(function (plugin) {\n    return plugin.renderer.rendererName === get(field, \"renderer.name\");\n  });\n  var memoizedBindComponents = useRef({});\n  var getBind = useCallback(function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    var memoKey = field.fieldId + field.multipleValues + index + locale;\n\n    if (memoizedBindComponents.current[memoKey]) {\n      return memoizedBindComponents.current[memoKey];\n    }\n\n    var name = field.fieldId;\n    var validators,\n        defaultValue = undefined;\n\n    if (field.multipleValues) {\n      defaultValue = [];\n      validators = field.multipleValuesValidation;\n\n      if (index >= 0) {\n        validators = field.validation;\n      }\n    } else {\n      validators = field.validation;\n    }\n\n    memoizedBindComponents.current[memoKey] = function Bind(_ref) {\n      var children = _ref.children;\n      return /*#__PURE__*/React.createElement(BaseFormBind, {\n        name: name,\n        validators: validators,\n        defaultValue: defaultValue\n      }, function (bind) {\n        var value = getValue({\n          bind: bind,\n          locale: locale,\n          field: field,\n          index: index\n        });\n\n        var onChange = function onChange(value) {\n          return setValue({\n            value: value,\n            bind: bind,\n            locale: locale,\n            field: field,\n            index: index\n          });\n        };\n\n        var props = _objectSpread(_objectSpread({}, bind), {}, {\n          value: value,\n          onChange: onChange\n        }); // Multiple-values functions below.\n\n\n        if (field.multipleValues) {\n          if (index >= 0) {\n            props.removeValue = function () {\n              if (index >= 0) {\n                var _value = getValue({\n                  bind: bind,\n                  locale: locale,\n                  field: field,\n                  index: -1\n                });\n\n                _value = [].concat(_toConsumableArray(_value.slice(0, index)), _toConsumableArray(_value.slice(index + 1)));\n                setValue({\n                  value: _value,\n                  bind: bind,\n                  locale: locale,\n                  field: field,\n                  index: -1\n                });\n              }\n            };\n          } else {\n            props.appendValue = function (newValue) {\n              return onChange([].concat(_toConsumableArray(value), [newValue]));\n            };\n\n            props.prependValue = function (newValue) {\n              return onChange([newValue].concat(_toConsumableArray(value)));\n            };\n\n            props.appendValues = function (newValues) {\n              return onChange([].concat(_toConsumableArray(value), _toConsumableArray(newValues)));\n            };\n          }\n        }\n\n        if (typeof children === \"function\") {\n          return children(props);\n        }\n\n        return /*#__PURE__*/cloneElement(children, props);\n      });\n    };\n\n    return memoizedBindComponents.current[memoKey];\n  }, [field.fieldId, locale]);\n\n  if (!renderPlugin) {\n    return t(_templateObject())({\n      fieldName: /*#__PURE__*/React.createElement(\"strong\", null, field.fieldId)\n    });\n  }\n\n  return renderPlugin.renderer.render({\n    field: field,\n    getBind: getBind,\n    Label: Label,\n    contentModel: contentModel,\n    locale: locale\n  });\n};\n\nexport default RenderFieldElement;","map":null,"metadata":{},"sourceType":"module"}