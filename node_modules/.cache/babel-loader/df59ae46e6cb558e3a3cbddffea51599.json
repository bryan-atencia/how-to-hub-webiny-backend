{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Could not load content for \\\"{modelId}\\\" model. Redirecting...\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useMemo, useState } from \"react\";\nimport { SplitView, LeftPanel, RightPanel } from \"@webiny/app-admin/components/SplitView\";\nimport { useDataList } from \"@webiny/app/hooks/useDataList\";\nimport ContentDataList from \"./ContentDataList\";\nimport ContentDetails from \"./ContentDetails\";\nimport { createListQuery } from \"@webiny/app-headless-cms/admin/components/ContentModelForm/graphql\";\nimport get from \"lodash.get\";\nimport { useApolloClient, useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { GET_CONTENT_MODEL_BY_MODEL_ID } from \"./graphql\";\nimport { FloatingActionButton } from \"@webiny/app-admin/components/FloatingActionButton\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { i18n } from \"@webiny/app/i18n\";\nvar t = i18n.ns(\"app-headless-cms/admin/content\");\n\nvar ContentRender = function ContentRender(_ref) {\n  var contentModel = _ref.contentModel;\n  var apolloClient = useApolloClient();\n\n  var _useRouter = useRouter(),\n      history = _useRouter.history;\n\n  var LIST_QUERY = useMemo(function () {\n    return createListQuery(contentModel);\n  }, [contentModel.modelId]);\n  var query = new URLSearchParams(location.search);\n  var variables = {};\n\n  if (query.get(\"search\")) {\n    // We use the title field with the \"contains\" operator for doing basic searches.\n    var searchField = contentModel.titleFieldId + \"_contains\";\n    variables = {\n      where: _defineProperty({}, searchField, query.get(\"search\"))\n    };\n  }\n\n  var dataList = useDataList({\n    client: apolloClient,\n    query: LIST_QUERY,\n    variables: variables,\n    getData: function getData(response) {\n      return get(response, \"content.data\");\n    },\n    getMeta: function getMeta(response) {\n      return get(response, \"content.meta\");\n    },\n    getError: function getError(response) {\n      return get(response, \"content.error\");\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SplitView, null, /*#__PURE__*/React.createElement(LeftPanel, {\n    span: 4\n  }, /*#__PURE__*/React.createElement(ContentDataList, {\n    dataList: dataList,\n    contentModel: contentModel\n  })), /*#__PURE__*/React.createElement(RightPanel, {\n    span: 8\n  }, /*#__PURE__*/React.createElement(ContentDetails, {\n    dataList: dataList,\n    contentModel: contentModel\n  }))), /*#__PURE__*/React.createElement(FloatingActionButton, {\n    \"data-testid\": \"new-record-button\",\n    onClick: function onClick() {\n      var query = new URLSearchParams(location.search);\n      query.delete(\"id\");\n      history.push({\n        search: query.toString()\n      });\n    }\n  }));\n};\n\nvar Content = function Content() {\n  var _useRouter2 = useRouter(),\n      match = _useRouter2.match;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      contentModel = _useState2[0],\n      setContentModel = _useState2[1];\n\n  var _useRouter3 = useRouter(),\n      history = _useRouter3.history;\n\n  var modelId = get(match, \"params.modelId\");\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  useQuery(GET_CONTENT_MODEL_BY_MODEL_ID, {\n    skip: !modelId,\n    variables: {\n      modelId: modelId\n    },\n    onCompleted: function onCompleted(data) {\n      var contentModel = get(data, \"getContentModel.data\");\n\n      if (contentModel) {\n        return setContentModel(contentModel);\n      }\n\n      history.push(\"/cms/content-models\");\n      showSnackbar(t(_templateObject())({\n        modelId: modelId\n      }));\n    }\n  });\n\n  if (!contentModel) {\n    return null;\n  } // Added \"key\" prop which somehow fixes the \"Internal Error: may not update existing query string in store\" error\n  // that would occur when doing a search on a different content model (via the global search bar).\n  // Didn't find what was actually causing the issue, nor the Google returned any results for the error above.\n\n\n  return /*#__PURE__*/React.createElement(ContentRender, {\n    contentModel: contentModel,\n    key: contentModel.modelId\n  });\n};\n\nexport default Content;","map":null,"metadata":{},"sourceType":"module"}