{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Menu as BaseMenu, MenuItem as BaseMenuItem, MenuSurface, MenuSurfaceAnchor } from \"@rmwc/menu\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nvar style = {\n  disabledMenuItem: /*#__PURE__*/css({\n    opacity: 0.5,\n    pointerEvents: \"none\"\n  }, \"label:disabledMenuItem;\")\n};\nvar el = null;\n\nvar getElement = function getElement() {\n  if (!el) {\n    el = document.createElement(\"div\");\n    el.id = \"menu-container\";\n    el.style.position = \"fixed\";\n    el.style.top = \"0\";\n    el.style.zIndex = \"10\";\n    document.body.appendChild(el);\n  }\n\n  return el;\n};\n/**\n * Use Menu component to display a list of choices, once the handler is triggered.\n */\n\n\nvar Menu = /*#__PURE__*/function (_React$Component) {\n  _inherits(Menu, _React$Component);\n\n  var _super = _createSuper(Menu);\n\n  function Menu() {\n    var _this;\n\n    _classCallCheck(this, Menu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      menuIsOpen: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"anchorRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"menuRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"openMenu\", function () {\n      _this.setState({\n        menuIsOpen: true\n      }, function () {\n        return _this.props.onOpen && _this.props.onOpen();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeMenu\", function () {\n      _this.setState({\n        menuIsOpen: false\n      }, function () {\n        return _this.props.onClose && _this.props.onClose();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMenuWithPortal\", function () {\n      return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(\"div\", {\n        ref: _this.menuRef\n      }, /*#__PURE__*/React.createElement(BaseMenu, {\n        anchorCorner: _this.props.anchor,\n        open: _this.state.menuIsOpen,\n        className: _this.props.className,\n        onClose: _this.closeMenu,\n        onSelect: _this.props.onSelect\n      }, _this.props.children)), getElement());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCustomContent\", function () {\n      var children = _this.props.children;\n      return /*#__PURE__*/React.createElement(MenuSurface, {\n        open: _this.state.menuIsOpen,\n        onClose: _this.closeMenu\n      }, typeof children === \"function\" ? children({\n        closeMenu: _this.closeMenu\n      }) : children);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMenuContent\", function () {\n      return Array.isArray(_this.props.children) ? _this.renderMenuWithPortal() : _this.renderCustomContent();\n    });\n\n    return _this;\n  }\n\n  _createClass(Menu, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.menuRef.current || !this.anchorRef.current) {\n        return;\n      }\n\n      var menu = this.menuRef.current; // @ts-ignore\n\n      var anchorRect = this.anchorRef.current.getBoundingClientRect();\n      menu.style.position = \"absolute\";\n      menu.style.left = anchorRect.left - 60 + \"px\";\n      menu.style.top = anchorRect.top + \"px\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(MenuSurfaceAnchor, {\n        ref: this.anchorRef,\n        \"data-testid\": this.props[\"data-testid\"]\n      }, this.renderMenuContent(), this.props.handle && /*#__PURE__*/React.cloneElement(this.props.handle, {\n        onClick: this.openMenu\n      }));\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\n_defineProperty(Menu, \"defaultProps\", {\n  handle: null,\n  anchor: \"topStart\"\n});\n\nvar MenuDivider = function MenuDivider() {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"mdc-list-divider\",\n    role: \"separator\"\n  });\n};\n\nvar MenuItem = function MenuItem(_ref) {\n  var disabled = _ref.disabled,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"disabled\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(BaseMenuItem, Object.assign({}, rest, {\n    className: classNames(className, _defineProperty({}, style.disabledMenuItem, disabled))\n  }));\n};\n\nexport { Menu, MenuItem, MenuDivider };","map":null,"metadata":{},"sourceType":"module"}