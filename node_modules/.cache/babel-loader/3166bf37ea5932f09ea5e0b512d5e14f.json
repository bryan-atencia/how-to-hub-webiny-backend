{"ast":null,"code":"import React, { useMemo, useCallback } from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { get, set } from \"dot-prop-immutable\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport Input from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Input\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker\";\nimport IconPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/IconPicker\";\nimport { getSvg } from \"./utils\";\n\nvar IconSettings = function IconSettings(_ref) {\n  var element = _ref.element,\n      updateElement = _ref.updateElement;\n  var _element$data = element.data;\n  _element$data = _element$data === void 0 ? {} : _element$data;\n  var _element$data$icon = _element$data.icon,\n      icon = _element$data$icon === void 0 ? {} : _element$data$icon;\n  var setData = useMemo(function () {\n    var historyUpdated = {};\n    return function (name, value) {\n      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var attrKey = \"data.icon.\".concat(name);\n      var newElement = set(element, attrKey, value);\n\n      var _get = get(newElement, \"data.icon\"),\n          id = _get.id,\n          width = _get.width,\n          color = _get.color;\n\n      newElement = set(newElement, \"data.icon.svg\", getSvg(id, {\n        width: width,\n        color: color\n      }));\n\n      if (!history) {\n        updateElement({\n          element: newElement,\n          history: history\n        });\n        return;\n      }\n\n      if (historyUpdated[name] !== value) {\n        historyUpdated[name] = value;\n        updateElement({\n          element: newElement\n        });\n      }\n    };\n  }, [element, updateElement]);\n  var updateIcon = useCallback(function (value) {\n    return setData(\"id\", value.id);\n  }, [setData]);\n  var updateColor = useCallback(function (value) {\n    return setData(\"color\", value);\n  }, [setData]);\n  var updateColorPreview = useCallback(function (value) {\n    return setData(\"color\", value, false);\n  }, [setData]);\n  var updateWidth = useCallback(function (value) {\n    return setData(\"width\", value);\n  }, [setData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {\n    label: \"Icon\"\n  }, /*#__PURE__*/React.createElement(IconPicker, {\n    label: \"Icon\",\n    value: icon.id,\n    updateValue: updateIcon\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Width\",\n    value: icon.width,\n    updateValue: updateWidth,\n    placeholder: \"50\"\n  }), /*#__PURE__*/React.createElement(ColorPicker, {\n    label: \"Color\",\n    value: icon.color,\n    updateValue: updateColor,\n    updatePreview: updateColorPreview\n  }))));\n};\n\nexport default connect(function (state) {\n  return {\n    element: getActiveElement(state)\n  };\n}, {\n  updateElement: updateElement\n})(IconSettings);","map":null,"metadata":{},"sourceType":"module"}