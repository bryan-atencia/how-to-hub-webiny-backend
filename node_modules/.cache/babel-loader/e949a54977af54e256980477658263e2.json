{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport React from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport domToImage from \"./domToImage\";\n\nvar ElementPreview = /*#__PURE__*/function (_React$Component) {\n  _inherits(ElementPreview, _React$Component);\n\n  var _super = _createSuper(ElementPreview);\n\n  function ElementPreview() {\n    _classCallCheck(this, ElementPreview);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ElementPreview, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.generateImage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.generateImage();\n    }\n  }, {\n    key: \"replaceContent\",\n    value: function replaceContent(element, doc) {\n      var _this = this;\n\n      var pl = getPlugins(\"pb-editor-page-element\").find(function (pl) {\n        return pl.elementType === element.type;\n      });\n\n      if (!pl) {\n        return doc;\n      }\n\n      if (typeof pl.renderElementPreview === \"function\") {\n        var elementNode = document.getElementById(element.id);\n\n        if (!elementNode) {\n          return doc;\n        }\n\n        var newContentString = renderToStaticMarkup(pl.renderElementPreview({\n          element: element,\n          width: elementNode.offsetWidth || 0,\n          height: elementNode.offsetHeight || 0\n        }));\n        var wrapper = document.createElement(\"div\");\n        wrapper.innerHTML = newContentString;\n        var newContentDoc = wrapper.firstChild;\n        doc.querySelector(\"#\" + element.id).replaceWith(newContentDoc);\n      }\n\n      if (element.elements.length) {\n        element.elements.forEach(function (el) {\n          doc = _this.replaceContent(el, doc);\n        });\n      }\n\n      return doc;\n    }\n  }, {\n    key: \"generateImage\",\n    value: function () {\n      var _generateImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var element, node, editor, dataUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                element = this.props.element;\n                node = document.getElementById(element.id);\n\n                if (node) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 4:\n                editor = document.querySelector(\".pb-editor\"); // Hide element highlight while creating the image\n\n                editor.classList.add(\"pb-editor-no-highlight\");\n                _context.next = 8;\n                return domToImage.toPng(node, {\n                  onDocument: function onDocument(doc) {\n                    return _this2.replaceContent(element, doc);\n                  },\n                  width: 1000\n                });\n\n              case 8:\n                dataUrl = _context.sent;\n                editor.classList.remove(\"pb-editor-no-highlight\");\n                this.props.onChange(dataUrl);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function generateImage() {\n        return _generateImage.apply(this, arguments);\n      }\n\n      return generateImage;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return ElementPreview;\n}(React.Component);\n\nexport { ElementPreview as default };","map":null,"metadata":{},"sourceType":"module"}