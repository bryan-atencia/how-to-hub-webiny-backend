{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _trim from \"lodash/trim\";\nimport * as React from \"react\";\nimport { DynamicFieldset } from \"@webiny/ui/DynamicFieldset\";\nimport { ButtonPrimary, ButtonSecondary } from \"@webiny/ui/Button\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { css } from \"emotion\";\nimport { validation } from \"@webiny/validation\";\nvar controlButtons = /*#__PURE__*/css({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  \">button\": {\n    marginRight: 15\n  }\n}, \"label:controlButtons;\");\nvar textStyling = /*#__PURE__*/css({\n  color: \"var(--mdc-theme-text-secondary-on-background)\"\n}, \"label:textStyling;\");\n\nvar MetaTags = function MetaTags(_ref) {\n  var prefix = _ref.prefix,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      Bind = _ref.Bind,\n      other = _objectWithoutProperties(_ref, [\"prefix\", \"value\", \"onChange\", \"Bind\"]);\n\n  return /*#__PURE__*/React.createElement(DynamicFieldset, Object.assign({\n    value: value,\n    onChange: onChange\n  }, other), function (_ref2) {\n    var actions = _ref2.actions,\n        header = _ref2.header,\n        row = _ref2.row,\n        empty = _ref2.empty;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, header(function () {\n      return /*#__PURE__*/React.createElement(Grid, {\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        span: 12,\n        className: textStyling\n      }, /*#__PURE__*/React.createElement(Typography, {\n        use: \"button\"\n      }, \"Open Graph tags\")));\n    }), row(function (_ref3) {\n      var index = _ref3.index;\n      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n        span: 3\n      }, /*#__PURE__*/React.createElement(Bind, {\n        name: \"\".concat(prefix, \".\").concat(index, \".property\"),\n        validators: validation.create(\"required\"),\n        beforeChange: function beforeChange(tag, cb) {\n          return cb(_trim(tag));\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        label: \"Property\"\n      }))), /*#__PURE__*/React.createElement(Cell, {\n        span: 4\n      }, /*#__PURE__*/React.createElement(Bind, {\n        name: \"\".concat(prefix, \".\").concat(index, \".content\"),\n        validators: validation.create(\"required\")\n      }, /*#__PURE__*/React.createElement(Input, {\n        label: \"Content\"\n      }))), /*#__PURE__*/React.createElement(Cell, {\n        span: 3,\n        className: controlButtons\n      }, /*#__PURE__*/React.createElement(ButtonPrimary, {\n        small: true,\n        onClick: actions.add(index)\n      }, \"+\"), /*#__PURE__*/React.createElement(ButtonSecondary, {\n        small: true,\n        onClick: actions.remove(index)\n      }, \"-\")));\n    }), empty(function () {\n      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n        span: 12,\n        className: textStyling\n      }, /*#__PURE__*/React.createElement(Typography, {\n        use: \"button\"\n      }, \"To add other Open Graph tags, click\", \" \", /*#__PURE__*/React.createElement(ButtonPrimary, {\n        onClick: actions.add()\n      }, \"Add Open Graph tag\"))));\n    }));\n  });\n};\n\nexport default MetaTags;","map":null,"metadata":{},"sourceType":"module"}