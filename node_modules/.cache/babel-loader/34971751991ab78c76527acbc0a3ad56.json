{"ast":null,"code":"import _camelCase from \"lodash/camelCase\";\nimport React, { useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { useContentModelEditor } from \"@webiny/app-headless-cms/admin/components/ContentModelEditor/Context\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { validation } from \"@webiny/validation\";\n\nvar GeneralTab = function GeneralTab(_ref) {\n  var field = _ref.field,\n      form = _ref.form,\n      fieldPlugin = _ref.fieldPlugin;\n  var Bind = form.Bind,\n      setValue = form.setValue;\n  var inputRef = useRef(null);\n\n  var _useContentModelEdito = useContentModelEditor(),\n      getField = _useContentModelEdito.getField;\n\n  var _useI18N = useI18N(),\n      getValue = _useI18N.getValue; // Had problems with auto-focusing the \"label\" field. A couple of comments on this.\n  // 1. It's probably caused by the Tabs component which wraps this component.\n  // 2. It seems that the \"autoFocus\" prop on the Input does'nt work. I can't see it attached in the actual DOM.\n  // 3. This works, but it's not 100%. Visually, the cursor is frozen, and that's probably caused by a bug / design\n  //    in the RMWC / Material library. If you were to click somewhere on screen, and then apply focus, then\n  //    it seems it's behaving correctly. ¯\\_(ツ)_/¯\n\n\n  useEffect(function () {\n    setTimeout(function () {\n      inputRef.current && inputRef.current.focus();\n    }, 200);\n  }, []);\n  var afterChangeLabel = useCallback(function (value) {\n    setValue(\"fieldId\", _camelCase(getValue(value)));\n  }, []);\n  var uniqueFieldIdValidator = useCallback(function (fieldId) {\n    var existingField = getField({\n      fieldId: fieldId\n    });\n\n    if (!existingField) {\n      return;\n    }\n\n    if (existingField._id === field._id) {\n      return true;\n    }\n\n    throw new Error(\"Please enter a unique Field ID\");\n  }, undefined);\n  var additionalSettings = null;\n\n  if (typeof fieldPlugin.field.renderSettings === \"function\") {\n    additionalSettings = fieldPlugin.field.renderSettings({\n      form: form,\n      afterChangeLabel: afterChangeLabel,\n      uniqueFieldIdValidator: uniqueFieldIdValidator\n    });\n  }\n\n  var predefinedValuesEnabled = useMemo(function () {\n    return fieldPlugin.field.allowPredefinedValues && typeof fieldPlugin.field.renderPredefinedValues === \"function\";\n  }, [field.fieldId]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"label\",\n    validators: validation.create(\"required\"),\n    afterChange: !field._id && afterChangeLabel\n  }, /*#__PURE__*/React.createElement(I18NInput, {\n    label: \"Label\",\n    inputRef: inputRef\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"fieldId\",\n    validators: [validation.create(\"required\"), uniqueFieldIdValidator]\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"Field ID\",\n    disabled: !!field._id\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"multipleValues\"\n  }, /*#__PURE__*/React.createElement(Switch, {\n    label: fieldPlugin.field.multipleValuesLabel,\n    disabled: !fieldPlugin.field.allowMultipleValues\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 6\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"predefinedValues.enabled\"\n  }, /*#__PURE__*/React.createElement(Switch, {\n    label: \"Use predefined values\",\n    disabled: !predefinedValuesEnabled\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"helpText\"\n  }, /*#__PURE__*/React.createElement(I18NInput, {\n    label: \"Help text\",\n    description: \"Help text (optional)\"\n  })))), additionalSettings);\n};\n\nexport default GeneralTab;","map":null,"metadata":{},"sourceType":"module"}