{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _get from \"lodash/get\";\nimport { CREATE_FORM_SUBMISSION } from \"./graphql\";\nimport getClientIp from \"./getClientIp\";\nexport default /*#__PURE__*/(function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var client, _ref$props, form, preview, rawData, reCaptchaResponseToken, data, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = _ref.client, _ref$props = _ref.props, form = _ref$props.data, preview = _ref$props.preview, rawData = _ref.data, reCaptchaResponseToken = _ref.reCaptchaResponseToken;\n\n            if (!preview) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              preview: true,\n              error: null,\n              data: null\n            });\n\n          case 3:\n            data = {};\n\n            if (form) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              error: {\n                message: \"Form data is missing.\",\n                code: \"FORM_DATA_MISSING\"\n              },\n              data: null,\n              preview: false\n            });\n\n          case 6:\n            form.fields.forEach(function (field) {\n              if (field.fieldId in rawData) {\n                data[field.fieldId] = rawData[field.fieldId];\n              }\n            });\n            _context.t0 = client;\n            _context.t1 = CREATE_FORM_SUBMISSION;\n            _context.t2 = form.id;\n            _context.t3 = reCaptchaResponseToken;\n            _context.t4 = data;\n            _context.next = 14;\n            return getClientIp();\n\n          case 14:\n            _context.t5 = _context.sent;\n            _context.t6 = {\n              ip: _context.t5\n            };\n            _context.t7 = {\n              id: _context.t2,\n              reCaptchaResponseToken: _context.t3,\n              data: _context.t4,\n              meta: _context.t6\n            };\n            _context.t8 = {\n              mutation: _context.t1,\n              variables: _context.t7\n            };\n            _context.next = 20;\n            return _context.t0.mutate.call(_context.t0, _context.t8);\n\n          case 20:\n            response = _context.sent;\n            response = _get(response, \"data.forms.createFormSubmission\");\n            return _context.abrupt(\"return\", {\n              preview: false,\n              data: null,\n              error: response.error\n            });\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}