{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _omit from \"lodash/omit\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport shortid from \"shortid\";\nimport invariant from \"invariant\";\nimport { set } from \"dot-prop-immutable\";\nimport { getPlugin, getPlugins } from \"@webiny/plugins\";\nexport var updateChildPaths = function updateChildPaths(element) {\n  if (!element.id) {\n    element.id = shortid.generate();\n  }\n\n  if (!element.path) {\n    element.path = \"0\";\n  }\n\n  if (Array.isArray(element.elements)) {\n    // Process children only if \"elements\" is an array of objects.\n    // We may get an array of strings when working with shallow element copies.\n    if (_isPlainObject(element.elements[0])) {\n      element.elements.forEach(function (el, index) {\n        if (!el.id) {\n          el.id = shortid.generate();\n        }\n\n        el.path = element.path + \".\" + index;\n\n        if (el.elements.length) {\n          updateChildPaths(el);\n        }\n      });\n    }\n  }\n};\nexport var addElementToParent = function addElementToParent(element, parent, position) {\n  var newParent;\n\n  if (position === null) {\n    newParent = set(parent, \"elements\", [].concat(_toConsumableArray(parent.elements), [element]));\n  } else {\n    newParent = set(parent, \"elements\", [].concat(_toConsumableArray(parent.elements.slice(0, position)), [element], _toConsumableArray(parent.elements.slice(position))));\n  }\n\n  updateChildPaths(newParent);\n  return newParent;\n};\nexport var createElement = function createElement(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parent = arguments.length > 2 ? arguments[2] : undefined;\n  var plugin = getPlugins(\"pb-editor-page-element\").find(function (pl) {\n    return pl.elementType === type;\n  });\n  invariant(plugin, \"Missing element plugin for type \\\"\".concat(type, \"\\\"!\"));\n  return _objectSpread({\n    id: shortid.generate(),\n    data: {},\n    elements: [],\n    path: \"\",\n    type: type\n  }, plugin.create(options, parent));\n};\nexport var createBlock = function createBlock() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var parent = arguments.length > 1 ? arguments[1] : undefined;\n  return createElement(\"block\", options, parent);\n};\nexport var createRow = function createRow() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var parent = arguments.length > 1 ? arguments[1] : undefined;\n  return createElement(\"row\", options, parent);\n};\nexport var createColumn = function createColumn() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var parent = arguments.length > 1 ? arguments[1] : undefined;\n  return createElement(\"column\", options, parent);\n};\nexport var createBlockElements = function createBlockElements(name) {\n  var plugin = getPlugin(name);\n  invariant(plugin, \"Missing block plugin \\\"\".concat(name, \"\\\"!\"));\n  return _objectSpread({\n    id: shortid.generate(),\n    data: {},\n    elements: [],\n    path: \"\"\n  }, plugin.create());\n};\nexport var cloneElement = function cloneElement(element) {\n  var clone = _omit(element, [\"id\", \"path\"]);\n\n  clone.elements = clone.elements.map(function (el) {\n    return cloneElement(el);\n  });\n  return clone;\n};","map":null,"metadata":{},"sourceType":"module"}