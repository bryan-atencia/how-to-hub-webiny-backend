{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React from \"react\";\n\nfunction init(_ref) {\n  var accept = _ref.accept;\n  return {\n    showingFileDetails: null,\n    selected: [],\n    hasPreviouslyUploadedFiles: null,\n    queryParams: {\n      types: accept,\n      limit: 50,\n      sort: {\n        createdOn: -1\n      }\n    }\n  };\n}\n\nfunction fileManagerReducer(state, action) {\n  var next = _objectSpread({}, state);\n\n  switch (action.type) {\n    case \"toggleSelected\":\n      {\n        var existingIndex = state.selected.findIndex(function (item) {\n          return item.src === action.file.src;\n        });\n\n        if (existingIndex < 0) {\n          next.selected.push(action.file);\n        } else {\n          next.selected.splice(existingIndex, 1);\n        }\n\n        break;\n      }\n\n    case \"queryParams\":\n      {\n        next.selected = [];\n        next.queryParams = _objectSpread(_objectSpread(_objectSpread({}, state.queryParams), action.queryParams), {}, {\n          types: state.queryParams.types,\n          limit: 40,\n          sort: {\n            createdOn: -1\n          }\n        });\n        break;\n      }\n\n    case \"showFileDetails\":\n      {\n        next.showingFileDetails = action.src;\n        break;\n      }\n\n    case \"dragging\":\n      {\n        next.dragging = action.state;\n        break;\n      }\n\n    case \"hasPreviouslyUploadedFiles\":\n      {\n        next.hasPreviouslyUploadedFiles = action.hasPreviouslyUploadedFiles;\n        break;\n      }\n\n    case \"uploading\":\n      {\n        next.uploading = action.state;\n        break;\n      }\n  }\n\n  return next;\n}\n\nvar FileManagerContext = React.createContext({});\n\nfunction FileManagerProvider(_ref2) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  var _React$useReducer = React.useReducer(fileManagerReducer, props, init),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var value = React.useMemo(function () {\n    return {\n      state: state,\n      dispatch: dispatch\n    };\n  }, [state]);\n  return /*#__PURE__*/React.createElement(FileManagerContext.Provider, Object.assign({\n    value: value\n  }, props), children);\n}\n\nfunction useFileManager() {\n  var context = React.useContext(FileManagerContext);\n\n  if (!context) {\n    throw new Error(\"useFileManager must be used within a FileManagerProvider\");\n  }\n\n  var state = context.state,\n      dispatch = context.dispatch;\n  return {\n    selected: state.selected,\n    toggleSelected: function toggleSelected(file) {\n      dispatch({\n        type: \"toggleSelected\",\n        file: file\n      });\n    },\n    hasPreviouslyUploadedFiles: state.hasPreviouslyUploadedFiles,\n    setHasPreviouslyUploadedFiles: function setHasPreviouslyUploadedFiles(hasPreviouslyUploadedFiles) {\n      dispatch({\n        type: \"hasPreviouslyUploadedFiles\",\n        hasPreviouslyUploadedFiles: hasPreviouslyUploadedFiles\n      });\n    },\n    queryParams: state.queryParams,\n    setQueryParams: function setQueryParams(queryParams) {\n      dispatch({\n        type: \"queryParams\",\n        queryParams: queryParams\n      });\n    },\n    setDragging: function setDragging() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      dispatch({\n        type: \"dragging\",\n        state: state\n      });\n    },\n    dragging: state.dragging,\n    setUploading: function setUploading() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      dispatch({\n        type: \"uploading\",\n        state: state\n      });\n    },\n    uploading: state.uploading,\n    showFileDetails: function showFileDetails(src) {\n      dispatch({\n        type: \"showFileDetails\",\n        src: src\n      });\n    },\n    hideFileDetails: function hideFileDetails() {\n      dispatch({\n        type: \"showFileDetails\",\n        src: null\n      });\n    },\n    showingFileDetails: state.showingFileDetails,\n    state: state,\n    dispatch: dispatch\n  };\n}\n\nexport { FileManagerProvider, useFileManager };","map":null,"metadata":{},"sourceType":"module"}