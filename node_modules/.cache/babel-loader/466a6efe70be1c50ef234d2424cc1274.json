{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluginsContainer = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar assign = function assign(plugins, target) {\n  for (var i = 0; i < plugins.length; i++) {\n    var plugin = plugins[i];\n\n    if (Array.isArray(plugin)) {\n      assign(plugin, target);\n      continue;\n    }\n\n    var name = plugin._name || plugin.name;\n\n    if (!name) {\n      throw Error(\"Plugin must have a \\\"name\\\" or \\\"_name\\\" key.\");\n    }\n\n    target[name] = plugin;\n    plugin.init && plugin.init();\n  }\n};\n\nvar PluginsContainer = /*#__PURE__*/function () {\n  function PluginsContainer() {\n    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, PluginsContainer);\n\n    (0, _defineProperty2.default)(this, \"plugins\", {});\n    assign(plugins, this.plugins);\n  }\n\n  _createClass(PluginsContainer, [{\n    key: \"byName\",\n    value: function byName(name) {\n      return this.plugins[name];\n    }\n  }, {\n    key: \"byType\",\n    value: function byType(type) {\n      if (!type) {\n        return Object.values(this.plugins);\n      }\n\n      return Object.values(this.plugins).filter(function (pl) {\n        return pl.type === type;\n      });\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n        plugins[_key] = arguments[_key];\n      }\n\n      assign(plugins, this.plugins);\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      delete this.plugins[name];\n    }\n  }]);\n\n  return PluginsContainer;\n}();\n\nexports.PluginsContainer = PluginsContainer;","map":null,"metadata":{},"sourceType":"script"}