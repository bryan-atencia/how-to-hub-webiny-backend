{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _get from \"lodash/get\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport React from \"react\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useApolloClient } from \"react-apollo\";\nimport { useHandlers } from \"@webiny/app/hooks/useHandlers\";\nimport { GET_FORM, CREATE_REVISION_FROM, DELETE_REVISION, PUBLISH_REVISION, UNPUBLISH_REVISION } from \"@webiny/app-form-builder/admin/viewsGraphql\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nexport var useRevision = function useRevision(_ref) {\n  var revision = _ref.revision,\n      form = _ref.form;\n\n  var _useRouter = useRouter(),\n      history = _useRouter.history;\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var client = useApolloClient();\n\n  var _useHandlers = useHandlers(null, {\n    createRevision: function createRevision() {\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$client$mutate, res, _res$forms$revision, data, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return client.mutate({\n                  mutation: CREATE_REVISION_FROM,\n                  variables: {\n                    revision: revision.id\n                  },\n                  refetchQueries: [\"FormsListForms\"]\n                });\n\n              case 2:\n                _yield$client$mutate = _context.sent;\n                res = _yield$client$mutate.data;\n                _res$forms$revision = res.forms.revision, data = _res$forms$revision.data, error = _res$forms$revision.error;\n\n                if (!error) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", showSnackbar(error.message));\n\n              case 7:\n                history.push(\"/forms/\".concat(data.id));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    },\n    editRevision: function editRevision() {\n      return function () {\n        history.push(\"/forms/\".concat(revision.id));\n      };\n    },\n    deleteRevision: function deleteRevision() {\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return client.mutate({\n                  mutation: DELETE_REVISION,\n                  variables: {\n                    id: revision.id\n                  },\n                  refetchQueries: [\"FormsListForms\"],\n                  update: function update(cache, updated) {\n                    var error = _get(updated, \"data.forms.deleteRevision.error\");\n\n                    if (error) {\n                      return showSnackbar(error.message);\n                    } // Should we redirect to list (remove \"?id=XYZ\" from URL?):\n                    // If parent was deleted, that means all revisions were deleted, and we can redirect.\n\n\n                    if (revision.parent === revision.id) {\n                      return history.push(\"/forms\");\n                    }\n\n                    var gqlParams = {\n                      query: GET_FORM,\n                      variables: {\n                        id: form.id\n                      }\n                    };\n\n                    var data = _cloneDeep(cache.readQuery(gqlParams));\n\n                    var indexOfDeleted = data.forms.form.data.revisions.findIndex(function (item) {\n                      return item.id === revision.id;\n                    });\n                    data.forms.form.data.revisions.splice(indexOfDeleted, 1);\n                    cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {\n                      data: data\n                    })); // If currently selected revision (from left list of forms) was deleted.\n\n                    if (revision.id === form.id) {\n                      return history.push(\"/forms\");\n                    }\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    },\n    publishRevision: function publishRevision() {\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _yield$client$mutate2, res, error;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return client.mutate({\n                  mutation: PUBLISH_REVISION,\n                  variables: {\n                    id: revision.id\n                  },\n                  refetchQueries: [\"FormsListForms\"]\n                });\n\n              case 2:\n                _yield$client$mutate2 = _context3.sent;\n                res = _yield$client$mutate2.data;\n                error = res.forms.publishRevision.error;\n\n                if (!error) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", showSnackbar(error.message));\n\n              case 7:\n                showSnackbar( /*#__PURE__*/React.createElement(\"span\", null, \"Successfully published revision \", /*#__PURE__*/React.createElement(\"strong\", null, \"#\", revision.version), \"!\"));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    },\n    unpublishRevision: function unpublishRevision() {\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return client.mutate({\n                  mutation: UNPUBLISH_REVISION,\n                  variables: {\n                    id: revision.id\n                  },\n                  refetchQueries: [\"FormsListForms\"]\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }),\n      createRevision = _useHandlers.createRevision,\n      editRevision = _useHandlers.editRevision,\n      deleteRevision = _useHandlers.deleteRevision,\n      publishRevision = _useHandlers.publishRevision,\n      unpublishRevision = _useHandlers.unpublishRevision;\n\n  return {\n    createRevision: createRevision,\n    editRevision: editRevision,\n    deleteRevision: deleteRevision,\n    publishRevision: publishRevision,\n    unpublishRevision: unpublishRevision\n  };\n};","map":null,"metadata":{},"sourceType":"module"}