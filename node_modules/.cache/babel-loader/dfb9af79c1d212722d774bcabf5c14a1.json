{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _get from \"lodash/get\";\nimport _isEqual from \"lodash/isEqual\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query GetOEmbedData($url: String!, $width: String, $height: String) {\\n        pageBuilder {\\n            oembedData(url: $url, width: $width, height: $height) {\\n                data\\n                error {\\n                    code\\n                    message\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { css } from \"emotion\";\nimport { set } from \"dot-prop-immutable\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"react-apollo\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\n\nfunction appendSDK(props) {\n  var sdk = props.sdk,\n      global = props.global,\n      element = props.element;\n\n  var _ref = _get(element, \"data.source\") || {},\n      url = _ref.url;\n\n  if (!sdk || !url || window[global]) {\n    return Promise.resolve();\n  }\n\n  return new Promise(function (resolve) {\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = encodeURI(sdk);\n    script.setAttribute(\"async\", \"\");\n    script.setAttribute(\"charset\", \"utf-8\");\n    script.onload = resolve;\n    document.body.appendChild(script);\n  });\n}\n\nfunction initEmbed(props) {\n  var sdk = props.sdk,\n      init = props.init,\n      element = props.element;\n\n  if (sdk && _get(element, \"data.source.url\")) {\n    var node = document.getElementById(element.id);\n\n    if (typeof init === \"function\" && node) {\n      init({\n        props: props,\n        node: node\n      });\n    }\n  }\n}\n\nvar oembedQuery = gql(_templateObject());\nvar centerAlign = /*#__PURE__*/css({\n  \"*:first-of-type\": {\n    marginLeft: \"auto !important\",\n    marginRight: \"auto !important\"\n  }\n}, \"label:centerAlign;\");\nvar OEmbed = /*#__PURE__*/React.memo(function (props) {\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var element = props.element,\n      updateElement = props.updateElement,\n      _props$onData = props.onData,\n      onData = _props$onData === void 0 ? function (d) {\n    return d;\n  } : _props$onData;\n  React.useEffect(function () {\n    appendSDK(props).then(function () {\n      return initEmbed(props);\n    });\n  });\n  var source = _get(element, \"data.source\") || {};\n  var oembed = _get(element, \"data.oembed\") || {};\n\n  var skip = !source.url || _isEqual(oembed.source, source);\n\n  var _useQuery = useQuery(oembedQuery, {\n    skip: skip,\n    variables: source,\n    onCompleted: function onCompleted(data) {\n      if (skip) {\n        return;\n      }\n\n      var _get2 = _get(data, \"pageBuilder.oembedData\"),\n          oembed = _get2.data,\n          error = _get2.error;\n\n      if (oembed) {\n        // Store loaded oembed data\n        updateElement({\n          element: set(element, \"data.oembed\", onData(oembed))\n        });\n      }\n\n      if (error) {\n        showSnackbar(error.message);\n      }\n    }\n  }),\n      loading = _useQuery.loading;\n\n  var renderEmpty = React.useCallback(function () {\n    return /*#__PURE__*/React.createElement(\"div\", null, \"You must configure your embed in the settings!\");\n  }, []);\n  var renderEmbed = React.useCallback(function () {\n    if (typeof props.renderEmbed === \"function\") {\n      return props.renderEmbed(props);\n    }\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(\"div\", null, \"Loading embed data...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: element.id,\n      className: centerAlign + \" pb-editor-dragging--disabled pb-editor-resizing--disabled\",\n      dangerouslySetInnerHTML: {\n        __html: _get(element, \"data.oembed.html\") || \"\"\n      }\n    });\n  }, [element, loading]);\n\n  var _ref2 = _get(element, \"data.source\") || {},\n      url = _ref2.url;\n\n  return url ? renderEmbed() : renderEmpty();\n});\nexport default connect(null, {\n  updateElement: updateElement\n})(OEmbed);","map":null,"metadata":{},"sourceType":"module"}