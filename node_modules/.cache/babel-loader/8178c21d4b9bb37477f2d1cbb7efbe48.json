{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/bryanatencia/demo/how-to-demo-backend-webiny/how-to-demo-backend-webiny/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _validationError = _interopRequireDefault(require(\"./validationError\"));\n\nvar entries = function entries(validators) {\n  return Object.entries(validators);\n};\n\nvar invalidRules = \"Validators must be specified as a string (eg. required,minLength:10,email).\";\nvar createdValidators = {\n  async: {},\n  sync: {}\n};\n/**\n * Main class of Validation library.\n * Exported as a singleton instance, it offers methods for sync/async data validation and overwriting or adding new validators.\n *\n * @class Validation\n * @example\n * import { validation } from '@webiny/validation';\n *\n * // `validation` is a preconfigured instance of Validation class.\n * // From here you can either add new validators or use it as-is.\n */\n\nvar Validation = /*#__PURE__*/function () {\n  /**\n   * Contains a list of all set validators.\n   * @private\n   */\n  function Validation() {\n    _classCallCheck(this, Validation);\n\n    (0, _defineProperty2.default)(this, \"__validators\", void 0);\n    this.__validators = {};\n  }\n  /**\n   * Add new validator.\n   * @param name Validator name.\n   * @param callable Validator function which throws a ValidationError if validation fails.\n   * @returns {Validation}\n   */\n\n\n  _createClass(Validation, [{\n    key: \"setValidator\",\n    value: function setValidator(name, callable) {\n      this.__validators[name] = callable;\n      return this;\n    }\n    /**\n     * Get validator function by name.\n     * @param name Validator name.\n     * @returns {Validator} A validator function.\n     */\n\n  }, {\n    key: \"getValidator\",\n    value: function getValidator(name) {\n      if (!this.__validators[name]) {\n        throw new _validationError.default(\"Validator `\" + name + \"` does not exist!\", name);\n      }\n\n      return this.__validators[name];\n    }\n    /**\n     * Asynchronously validates value.\n     * @param value Value to validate.\n     * @param validators A list of comma-separated validators (eg. required,number,gt:20).\n     * @param [options] Validation options.\n     * @returns {Promise<boolean | ValidationError>}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function () {\n      var _validate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, validators) {\n        var options,\n            parsedValidateProperty,\n            _iterator,\n            _step,\n            _step$value,\n            name,\n            params,\n            validator,\n            validationError,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n                if (!((0, _isString2.default)(validators) && (0, _isEmpty2.default)(validators))) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n                if ((0, _isString2.default)(validators)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(invalidRules);\n\n              case 5:\n                parsedValidateProperty = this.__parseValidateProperty(validators);\n                _iterator = _createForOfIteratorHelper(entries(parsedValidateProperty));\n                _context.prev = 7;\n\n                _iterator.s();\n\n              case 9:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _step$value = _slicedToArray(_step.value, 2), name = _step$value[0], params = _step$value[1];\n                validator = this.getValidator(name);\n                _context.prev = 12;\n                _context.next = 15;\n                return validator(value, params);\n\n              case 15:\n                _context.next = 23;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](12);\n                validationError = new _validationError.default(_context.t0.message, name, value);\n\n                if (!(options.throw === false)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", validationError);\n\n              case 22:\n                throw validationError;\n\n              case 23:\n                _context.next = 9;\n                break;\n\n              case 25:\n                _context.next = 30;\n                break;\n\n              case 27:\n                _context.prev = 27;\n                _context.t1 = _context[\"catch\"](7);\n\n                _iterator.e(_context.t1);\n\n              case 30:\n                _context.prev = 30;\n\n                _iterator.f();\n\n                return _context.finish(30);\n\n              case 33:\n                return _context.abrupt(\"return\", true);\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 27, 30, 33], [12, 17]]);\n      }));\n\n      function validate(_x, _x2) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n    /**\n     * Synchronously validates value.\n     * @param value Value to validate.\n     * @param validators A list of comma-separated validators (eg. required,number,gt:20).\n     * @param [options] Validation options.\n     * @returns {Promise<boolean | ValidationError>}\n     */\n\n  }, {\n    key: \"validateSync\",\n    value: function validateSync(value, validators) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if ((0, _isString2.default)(validators) && (0, _isEmpty2.default)(validators)) {\n        return true;\n      }\n\n      if (!(0, _isString2.default)(validators)) {\n        throw new Error(invalidRules);\n      }\n\n      var parsedValidateProperty = this.__parseValidateProperty(validators);\n\n      var _iterator2 = _createForOfIteratorHelper(entries(parsedValidateProperty)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              name = _step2$value[0],\n              params = _step2$value[1];\n\n          var validator = this.getValidator(name);\n\n          try {\n            validator(value, params);\n          } catch (e) {\n            var validationError = new _validationError.default(e.message, name, value);\n\n            if (options.throw === false) {\n              return validationError;\n            }\n\n            throw validationError;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"create\",\n    value: function create(validators) {\n      var _this = this;\n\n      if (createdValidators.async[validators]) {\n        return createdValidators.async[validators];\n      }\n\n      createdValidators.async[validators] = function (value) {\n        return _this.validate(value, validators);\n      };\n\n      return createdValidators.async[validators];\n    }\n  }, {\n    key: \"createSync\",\n    value: function createSync(validators) {\n      var _this2 = this;\n\n      if (createdValidators.sync[validators]) {\n        return createdValidators.sync[validators];\n      }\n\n      createdValidators.sync[validators] = function (value) {\n        return _this2.validateSync(value, validators);\n      };\n\n      return createdValidators.sync[validators];\n    }\n    /**\n     * Parses a string of validators with parameters.\n     * @param validators A list of comma-separated validators (eg. required,number,gt:20).\n     * @returns {ParsedValidators}\n     * @private\n     */\n\n  }, {\n    key: \"__parseValidateProperty\",\n    value: function __parseValidateProperty(validators) {\n      var validate = validators.split(\",\");\n      var parsedValidators = {};\n      validate.forEach(function (v) {\n        var params = (0, _trim2.default)(v).split(\":\");\n        var vName = params.shift();\n        parsedValidators[vName] = params;\n      });\n      return parsedValidators;\n    }\n  }]);\n\n  return Validation;\n}();\n\nvar _default = Validation;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}