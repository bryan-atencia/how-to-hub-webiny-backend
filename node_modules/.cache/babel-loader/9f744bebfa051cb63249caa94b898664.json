{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _debounce from \"lodash/debounce\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport React, { useMemo } from \"react\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { SimpleForm, SimpleFormContent, SimpleFormHeader } from \"@webiny/app-admin/components/SimpleForm\";\nimport { useFormEditor } from \"@webiny/app-form-builder/admin/components/FormEditor/Context\";\nimport { Form } from \"@webiny/form\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { validation } from \"@webiny/validation\";\n\nvar onEnabledChange = function onEnabledChange(_ref) {\n  var i18n = _ref.i18n,\n      data = _ref.data,\n      validationValue = _ref.validationValue,\n      onChangeValidation = _ref.onChangeValidation,\n      validator = _ref.validator;\n\n  if (data) {\n    var index = validationValue.findIndex(function (item) {\n      return item.name === validator.name;\n    });\n    onChangeValidation([].concat(_toConsumableArray(validationValue.slice(0, index)), _toConsumableArray(validationValue.slice(index + 1))));\n  } else {\n    onChangeValidation([].concat(_toConsumableArray(validationValue), [{\n      name: validator.name,\n      settings: validator.defaultSettings,\n      message: {\n        values: [{\n          locale: i18n.getDefaultLocale().id,\n          value: validator.defaultMessage\n        }]\n      }\n    }]));\n  }\n};\n\nvar onFormChange = _debounce(function (_ref2) {\n  var data = _ref2.data,\n      validationValue = _ref2.validationValue,\n      onChangeValidation = _ref2.onChangeValidation,\n      validatorIndex = _ref2.validatorIndex;\n\n  var newValidationValue = _cloneDeep(validationValue);\n\n  newValidationValue[validatorIndex] = _objectSpread(_objectSpread({}, newValidationValue[validatorIndex]), _cloneDeep(data));\n  onChangeValidation(newValidationValue);\n}, 200);\n\nvar ValidatorsTab = function ValidatorsTab(props) {\n  var i18n = useI18N();\n\n  var _useFormEditor = useFormEditor(),\n      getFieldPlugin = _useFormEditor.getFieldPlugin;\n\n  var field = props.field,\n      Bind = props.form.Bind;\n  var fieldPlugin = getFieldPlugin({\n    name: field.name\n  });\n  var validators = useMemo(function () {\n    return getPlugins(\"form-editor-field-validator\").map(function (plugin) {\n      return plugin.validator;\n    }).map(function (validator) {\n      if (fieldPlugin.field.validators.includes(validator.name)) {\n        return {\n          optional: true,\n          validator: validator\n        };\n      } else if (fieldPlugin.field.validators.includes(\"!\".concat(validator.name))) {\n        return {\n          optional: false,\n          validator: validator\n        };\n      }\n\n      return null;\n    }).filter(Boolean).sort(function (a, b) {\n      if (!a.optional && b.optional) {\n        return -1;\n      }\n\n      if (a.optional && !b.optional) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Bind, {\n    name: \"validation\"\n  }, function (_ref3) {\n    var validationValue = _ref3.value,\n        onChangeValidation = _ref3.onChange;\n    return validators.map(function (_ref4) {\n      var optional = _ref4.optional,\n          validator = _ref4.validator;\n      var validatorIndex = validationValue.findIndex(function (item) {\n        return item.name === validator.name;\n      });\n      var data = validationValue[validatorIndex];\n      return /*#__PURE__*/React.createElement(SimpleForm, {\n        key: validator.name\n      }, /*#__PURE__*/React.createElement(SimpleFormHeader, {\n        title: validator.label\n      }, optional && /*#__PURE__*/React.createElement(Switch, {\n        label: \"Enabled\",\n        value: validatorIndex >= 0,\n        onChange: function onChange() {\n          return onEnabledChange({\n            i18n: i18n,\n            data: data,\n            validationValue: validationValue,\n            onChangeValidation: onChangeValidation,\n            validator: validator\n          });\n        }\n      })), data && /*#__PURE__*/React.createElement(Form, {\n        data: data,\n        onChange: function onChange(data) {\n          return onFormChange({\n            data: data,\n            validationValue: validationValue,\n            onChangeValidation: onChangeValidation,\n            validatorIndex: validatorIndex\n          });\n        }\n      }, function (_ref5) {\n        var Bind = _ref5.Bind,\n            setValue = _ref5.setValue;\n        return /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n          span: 12\n        }, /*#__PURE__*/React.createElement(Bind, {\n          name: \"message\",\n          validators: validation.create(\"required\")\n        }, /*#__PURE__*/React.createElement(I18NInput, {\n          label: \"Message\",\n          description: \"This message will be displayed to the user\"\n        })))), typeof validator.renderSettings === \"function\" && validator.renderSettings({\n          setValue: setValue,\n          setMessage: function setMessage(message) {\n            setValue(\"message\", {\n              values: [{\n                locale: i18n.getDefaultLocale().id,\n                value: message\n              }]\n            });\n          },\n          data: data,\n          Bind: Bind\n        }));\n      }));\n    });\n  });\n};\n\nexport default ValidatorsTab;","map":null,"metadata":{},"sourceType":"module"}