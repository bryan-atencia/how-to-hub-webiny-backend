{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { deactivatePlugin, updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getContent } from \"@webiny/app-page-builder/editor/selectors\";\nimport { useKeyHandler } from \"@webiny/app-page-builder/editor/hooks/useKeyHandler\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { getPlugins, unregisterPlugin } from \"@webiny/plugins\";\nimport { createBlockElements } from \"@webiny/app-page-builder/editor/utils\";\nimport { OverlayLayout } from \"@webiny/app-admin/components/OverlayLayout\";\nimport { LeftPanel, RightPanel, SplitView } from \"@webiny/app-admin/components/SplitView\";\nimport { List, ListItem, ListItemGraphic } from \"@webiny/ui/List\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { DelayedOnChange } from \"@webiny/app-page-builder/editor/components/DelayedOnChange\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { ReactComponent as SearchIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/search.svg\";\nimport { SimpleForm, SimpleFormContent, SimpleFormHeader } from \"@webiny/app-admin/components/SimpleForm\";\nimport { ReactComponent as AllIcon } from \"@svgr/webpack!./icons/round-clear_all-24px.svg\";\nimport createBlockPlugin from \"@webiny/app-page-builder/admin/utils/createBlockPlugin\";\nimport BlocksList from \"./BlocksList\";\nimport { DELETE_ELEMENT, UPDATE_ELEMENT } from \"./graphql\";\nimport EditBlockDialog from \"./EditBlockDialog\";\nimport { listItem, ListItemTitle, listStyle, TitleContent } from \"./SearchBlocksStyled\";\nimport * as Styled from \"./StyledComponents\";\nvar allBlockCategory = {\n  type: \"pb-editor-block-category\",\n  name: \"pb-editor-block-category-all\",\n  categoryName: \"all\",\n  title: \"All blocks\",\n  description: \"List of all available blocks.\",\n  icon: /*#__PURE__*/React.createElement(AllIcon, null)\n};\n\nvar sortBlocks = function sortBlocks(blocks) {\n  return blocks.sort(function (a, b) {\n    if (a.name === \"pb-editor-block-empty\") {\n      return -1;\n    }\n\n    if (b.name === \"pb-editor-block-empty\") {\n      return 1;\n    }\n\n    if (a.title < b.title) {\n      return -1;\n    }\n\n    if (a.title > b.title) {\n      return 1;\n    }\n\n    return 0;\n  });\n};\n\nvar SearchBar = function SearchBar(props) {\n  var updateElement = props.updateElement,\n      content = props.content,\n      deactivatePlugin = props.deactivatePlugin;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editingBlock = _useState4[0],\n      setEditingBlock = _useState4[1];\n\n  var _useState5 = useState(\"all\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      activeCategory = _useState6[0],\n      setActiveCategory = _useState6[1];\n\n  var allCategories = useMemo(function () {\n    return [allBlockCategory].concat(_toConsumableArray(getPlugins(\"pb-editor-block-category\")));\n  }, []);\n  var allBlocks = getPlugins(\"pb-editor-block\");\n\n  var _useKeyHandler = useKeyHandler(),\n      addKeyHandler = _useKeyHandler.addKeyHandler,\n      removeKeyHandler = _useKeyHandler.removeKeyHandler;\n\n  useEffect(function () {\n    addKeyHandler(\"escape\", function (e) {\n      e.preventDefault();\n      deactivatePlugin({\n        name: \"pb-editor-search-blocks-bar\"\n      });\n    });\n    return function () {\n      return removeKeyHandler(\"escape\");\n    };\n  }, []);\n  var addBlockToContent = useCallback(function (plugin) {\n    var element = _objectSpread(_objectSpread({}, content), {}, {\n      elements: [].concat(_toConsumableArray(content.elements), [createBlockElements(plugin.name)])\n    });\n\n    updateElement({\n      element: element\n    });\n  }, [content]);\n  /**\n   * Returns a list of blocks - by selected category and by searched term (if present).\n   * @returns {*}\n   */\n\n  var getBlocksList = function getBlocksList() {\n    if (!activeCategory) {\n      return [];\n    }\n\n    var output = allBlocks; // If \"all\" is selected, no category filtering is required.\n\n    if (activeCategory !== \"all\") {\n      if (activeCategory === \"saved\") {\n        output = output.filter(function (item) {\n          return item.tags && item.tags.includes(\"saved\");\n        });\n      } else {\n        output = output.filter(function (item) {\n          return item.category === activeCategory;\n        });\n      }\n    } // Finally, filter by typed search term.\n\n\n    if (search) {\n      output = output.filter(function (item) {\n        return item.title.toLowerCase().includes(search.toLowerCase());\n      });\n    }\n\n    return sortBlocks(output);\n  };\n\n  var getCategoryBlocksCount = useCallback(function (category) {\n    if (category === \"all\") {\n      return allBlocks.length;\n    }\n\n    return allBlocks.filter(function (pl) {\n      return pl.category === category;\n    }).length;\n  }, []);\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var deleteBlock = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var plugin, deleteElement, response, error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              plugin = _ref.plugin, deleteElement = _ref.deleteElement;\n              _context.next = 3;\n              return deleteElement({\n                variables: {\n                  id: plugin.id\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              error = response.data.pageBuilder.deleteElement.error;\n\n              if (!error) {\n                _context.next = 8;\n                break;\n              }\n\n              showSnackbar(error.message);\n              return _context.abrupt(\"return\");\n\n            case 8:\n              unregisterPlugin(plugin.name);\n              showSnackbar( /*#__PURE__*/React.createElement(\"span\", null, \"Block \", /*#__PURE__*/React.createElement(\"strong\", null, plugin.title), \" was deleted!\"));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  var updateBlock = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n      var updateElement, _ref3$data, name, category, response, _response$data$pageBu, error, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              updateElement = _ref3.updateElement, _ref3$data = _ref3.data, name = _ref3$data.title, category = _ref3$data.category;\n\n              if (editingBlock) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _context2.next = 5;\n              return updateElement({\n                variables: {\n                  id: editingBlock.id,\n                  data: {\n                    name: name,\n                    category: category\n                  }\n                }\n              });\n\n            case 5:\n              response = _context2.sent;\n              _response$data$pageBu = response.data.pageBuilder.updateElement, error = _response$data$pageBu.error, data = _response$data$pageBu.data;\n\n              if (!error) {\n                _context2.next = 10;\n                break;\n              }\n\n              showSnackbar(error.message);\n              return _context2.abrupt(\"return\");\n\n            case 10:\n              // This will replace previously registered block plugin.\n              createBlockPlugin(data);\n              setEditingBlock(null);\n              setTimeout(function () {\n                // For better UX, success message is shown after 300ms.\n                showSnackbar( /*#__PURE__*/React.createElement(\"span\", null, \"Block \", /*#__PURE__*/React.createElement(\"strong\", null, name), \" was saved!\"));\n              }, 300);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [editingBlock]);\n  var renderSearchInput = useCallback(function () {\n    return /*#__PURE__*/React.createElement(Styled.Input, null, /*#__PURE__*/React.createElement(Icon, {\n      className: Styled.searchIcon,\n      icon: /*#__PURE__*/React.createElement(SearchIcon, null)\n    }), /*#__PURE__*/React.createElement(DelayedOnChange, {\n      value: search,\n      onChange: function onChange(value) {\n        return setSearch(value);\n      }\n    }, function (_ref5) {\n      var value = _ref5.value,\n          _onChange = _ref5.onChange;\n      return /*#__PURE__*/React.createElement(\"input\", {\n        autoFocus: true,\n        type: \"text\",\n        placeholder: \"Search blocks...\",\n        value: value,\n        onChange: function onChange(e) {\n          return _onChange(e.target.value);\n        }\n      });\n    }));\n  }, [search]);\n  var onExited = useCallback(function () {\n    deactivatePlugin({\n      name: \"pb-editor-search-blocks-bar\"\n    });\n  }, []);\n  var categoryPlugin = allCategories.find(function (pl) {\n    return pl.categoryName === activeCategory;\n  });\n  return /*#__PURE__*/React.createElement(OverlayLayout, {\n    barMiddle: renderSearchInput(),\n    onExited: onExited\n  }, /*#__PURE__*/React.createElement(SplitView, null, /*#__PURE__*/React.createElement(LeftPanel, {\n    span: 3\n  }, /*#__PURE__*/React.createElement(List, {\n    twoLine: true,\n    className: listStyle\n  }, allCategories.map(function (p) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: p.name,\n      className: listItem,\n      onClick: function onClick() {\n        setActiveCategory(p.categoryName);\n      }\n    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {\n      icon: p.icon\n    })), /*#__PURE__*/React.createElement(TitleContent, null, /*#__PURE__*/React.createElement(ListItemTitle, null, p.title, \" (\", getCategoryBlocksCount(p.categoryName), \")\"), /*#__PURE__*/React.createElement(Typography, {\n      use: \"subtitle2\"\n    }, p.description)));\n  }))), /*#__PURE__*/React.createElement(RightPanel, {\n    span: 9\n  }, /*#__PURE__*/React.createElement(Mutation, {\n    mutation: UPDATE_ELEMENT\n  }, function (updateElement, _ref6) {\n    var updateInProgress = _ref6.loading;\n    return /*#__PURE__*/React.createElement(Mutation, {\n      mutation: DELETE_ELEMENT\n    }, function (deleteElement) {\n      return activeCategory && /*#__PURE__*/React.createElement(SimpleForm, null, /*#__PURE__*/React.createElement(SimpleFormHeader, {\n        title: categoryPlugin.title,\n        icon: categoryPlugin.icon\n      }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Styled.BlockList, null, /*#__PURE__*/React.createElement(BlocksList, {\n        category: activeCategory,\n        addBlock: addBlockToContent,\n        deactivatePlugin: deactivatePlugin,\n        blocks: getBlocksList(),\n        onEdit: function onEdit(plugin) {\n          return setEditingBlock(plugin);\n        },\n        onDelete: function onDelete(plugin) {\n          return deleteBlock({\n            plugin: plugin,\n            deleteElement: deleteElement\n          });\n        }\n      })), /*#__PURE__*/React.createElement(EditBlockDialog, {\n        onClose: function onClose() {\n          return setEditingBlock(null);\n        },\n        onSubmit: function onSubmit(data) {\n          return updateBlock({\n            data: data,\n            updateElement: updateElement\n          });\n        },\n        open: !!editingBlock,\n        plugin: editingBlock,\n        loading: updateInProgress\n      })));\n    });\n  }))));\n};\n\nexport default connect(function (state) {\n  return {\n    content: getContent(state)\n  };\n}, {\n  deactivatePlugin: deactivatePlugin,\n  updateElement: updateElement\n})(SearchBar);","map":null,"metadata":{},"sourceType":"module"}