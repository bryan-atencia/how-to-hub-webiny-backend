{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback } from \"react\";\nimport { useQuery } from \"react-apollo\";\nimport { LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS } from \"./graphql\";\nimport get from \"lodash.get\";\nimport set from \"lodash.set\";\nimport createApolloClient from \"./createApolloClient\";\nexport var CmsContext = React.createContext({});\nvar apolloClientsCache = {};\n\nvar getCurrentEnvironmentFromLocalStorage = function getCurrentEnvironmentFromLocalStorage() {\n  try {\n    return JSON.parse(get(window, \"localStorage.cms_environment\"));\n  } catch (_unused) {\n    return null;\n  }\n};\n\nexport function CmsProvider(props) {\n  var _useState = useState(function () {\n    var environment = getCurrentEnvironmentFromLocalStorage();\n    return environment && environment.id;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentEnvironmentId = _useState2[0],\n      setCurrentEnvironmentId = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      apolloClient = _useState4[0],\n      setApolloClient = _useState4[1];\n\n  var environmentsQuery = useQuery(LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS, {\n    onCompleted: function onCompleted(response) {\n      var _get = get(response, \"cms.listEnvironments\", {}),\n          _get$data = _get.data,\n          data = _get$data === void 0 ? [] : _get$data;\n\n      if (currentEnvironmentId) {\n        var existingEnvironment = data.find(function (item) {\n          return item.id === currentEnvironmentId;\n        });\n\n        if (existingEnvironment) {\n          selectEnvironment(existingEnvironment);\n          return;\n        }\n      } // 1. Try to get production environment as the default one.\n      // 2. If nothing was found, just use the first one in the list.\n\n\n      var environmentToSelect = data.find(function (item) {\n        return item.isProduction;\n      });\n\n      if (!environmentToSelect) {\n        environmentToSelect = data[0];\n      }\n\n      selectEnvironment(environmentToSelect);\n    }\n  });\n  var environments = get(environmentsQuery, \"data.cms.listEnvironments.data\") || [];\n  environments.hash = environments.map(function (item) {\n    return item.id;\n  }).join(\"-\");\n  var selectEnvironment = useCallback(function (environment) {\n    set(window, \"localStorage.cms_environment\", JSON.stringify({\n      id: environment.id,\n      name: environment.name,\n      isProduction: environment.isProduction\n    }));\n    setCurrentEnvironmentId(environment.id);\n\n    if (!apolloClientsCache[environment.id]) {\n      apolloClientsCache[environment.id] = createApolloClient({\n        uri: \"\".concat(process.env.REACT_APP_API_URL, \"/cms/manage/\").concat(environment.id)\n      });\n    }\n\n    setApolloClient(apolloClientsCache[environment.id]);\n  }, []);\n  var isSelectedEnvironment = useCallback(function (environment) {\n    return environment.id === currentEnvironmentId;\n  }, [currentEnvironmentId]);\n  var selectAvailableEnvironment = useCallback(function (blacklist) {\n    var _loop = function _loop(i) {\n      var current = environments[i];\n\n      if (!blacklist.find(function (item) {\n        return item.id === current.id;\n      })) {\n        selectEnvironment(current);\n        return \"break\";\n      }\n    };\n\n    for (var i = 0; i < environments.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"break\") break;\n    }\n  }, [currentEnvironmentId, environments.hash]);\n  var value = {\n    environments: {\n      apolloClient: apolloClient,\n      selectEnvironment: selectEnvironment,\n      isSelectedEnvironment: isSelectedEnvironment,\n      selectAvailableEnvironment: selectAvailableEnvironment,\n      environments: environments,\n\n      get currentEnvironment() {\n        return environments.find(function (item) {\n          return item.id === currentEnvironmentId;\n        });\n      },\n\n      refreshEnvironments: environmentsQuery.refetch\n    }\n  };\n  return /*#__PURE__*/React.createElement(CmsContext.Provider, Object.assign({\n    value: value\n  }, props));\n}","map":null,"metadata":{},"sourceType":"module"}