{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from \"react\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { set } from \"dot-prop-immutable\";\nimport { redux } from \"@webiny/app-page-builder/editor/redux\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { cloneElement } from \"@webiny/app-page-builder/editor/utils\";\nimport { getElementWithChildren, getParentElementWithChildren } from \"@webiny/app-page-builder/editor/selectors\";\n\nvar CloneAction = function CloneAction(props) {\n  var element = props.element,\n      children = props.children;\n  var onClick = useHandler(props, function (_ref) {\n    var element = _ref.element,\n        updateElement = _ref.updateElement;\n    return function () {\n      var state = redux.store.getState();\n      element = getElementWithChildren(state, element.id);\n      var parent = getParentElementWithChildren(state, element.id);\n      var position = parent.elements.findIndex(function (el) {\n        return el.id === element.id;\n      }) + 1;\n      var newElement = set(parent, \"elements\", [].concat(_toConsumableArray(parent.elements.slice(0, position)), [cloneElement(element)], _toConsumableArray(position < parent.elements.length ? parent.elements.slice(position) : [])));\n      updateElement({\n        element: newElement\n      });\n    };\n  });\n  var plugin = getPlugins(\"pb-editor-page-element\").find(function (pl) {\n    return pl.elementType === element.type;\n  });\n\n  if (!plugin) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.cloneElement(children, {\n    onClick: onClick\n  });\n};\n\nexport default connect(function (state) {\n  return {\n    element: getActiveElement(state)\n  };\n}, {\n  updateElement: updateElement\n})(CloneAction);","map":null,"metadata":{},"sourceType":"module"}