{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCLineRippleFoundation } from '@material/line-ripple';\nimport { FoundationComponent } from '@rmwc/base';\n\nvar LineRipple =\n/** @class */\nfunction (_super) {\n  __extends(LineRipple, _super);\n\n  function LineRipple() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.root = _this.createElement('root');\n    return _this;\n  }\n\n  LineRipple.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCLineRippleFoundation({\n      addClass: function (className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function (className) {\n        return _this.root.removeClass(className);\n      },\n      hasClass: function (className) {\n        return _this.root.hasClass(className);\n      },\n      setStyle: function (propertyName, value) {\n        return _this.root.setStyle(propertyName, value);\n      },\n      registerEventHandler: function (evtType, handler) {\n        return _this.root.addEventListener(evtType, handler);\n      },\n      deregisterEventHandler: function (evtType, handler) {\n        return _this.root.removeEventListener(evtType, handler);\n      }\n    });\n  };\n\n  LineRipple.prototype.sync = function (props, prevProps) {\n    var _this = this; // active\n\n\n    this.syncProp(props.active, prevProps.active, function () {\n      props.active ? _this.foundation.activate() : _this.foundation.deactivate();\n    }); // center\n\n    this.syncProp(props.center, prevProps.center, function () {\n      typeof props.center === 'number' && _this.foundation.setRippleCenter(props.center);\n    });\n  };\n\n  LineRipple.prototype.render = function () {\n    var _a = this.props,\n        active = _a.active,\n        center = _a.center,\n        rest = __rest(_a, [\"active\", \"center\"]);\n\n    return React.createElement(\"div\", __assign({}, this.root.props(__assign({}, rest, {\n      className: \"mdc-line-ripple \" + (this.props.className || '')\n    })), {\n      ref: this.root.setRef\n    }));\n  };\n\n  LineRipple.displayName = 'LineRipple';\n  return LineRipple;\n}(FoundationComponent);\n\nexport { LineRipple };","map":null,"metadata":{},"sourceType":"module"}