{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useReducer, useEffect } from \"react\";\nimport { Graph, alg } from \"graphlib\";\nimport { useApolloClient } from \"react-apollo\";\nimport { getPlugins } from \"@webiny/plugins\";\nexport var useInstaller = function useInstaller() {\n  var _useReducer = useReducer(function (prev, next) {\n    return _objectSpread(_objectSpread({}, prev), next);\n  }, {\n    loading: true,\n    installers: [],\n    installerIndex: -1,\n    showLogin: false\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      _useReducer2$ = _useReducer2[0],\n      loading = _useReducer2$.loading,\n      installers = _useReducer2$.installers,\n      installerIndex = _useReducer2$.installerIndex,\n      showLogin = _useReducer2$.showLogin,\n      setState = _useReducer2[1];\n\n  var client = useApolloClient();\n\n  var validateGraph = function validateGraph(graph) {\n    var isAcyclic = alg.isAcyclic(graph);\n\n    if (!isAcyclic) {\n      var cycles = alg.findCycles(graph);\n      var msg = [\"Your installers have circular dependencies:\"];\n      cycles.forEach(function (cycle, index) {\n        var fromAToB = cycle.join(\" --> \");\n        fromAToB = \"\".concat(index + 1, \". \").concat(fromAToB);\n        var fromBToA = cycle.reverse().join(\" <-- \");\n        var padLength = fromAToB.length + 4;\n        msg.push(fromAToB.padStart(padLength));\n        msg.push(fromBToA.padStart(padLength));\n      }, cycles);\n      throw new Error(msg.join(\"\\n\"));\n    }\n  };\n\n  var createGraph = function createGraph(installers) {\n    var graph = new Graph();\n    installers.forEach(function (_ref) {\n      var plugin = _ref.plugin;\n      graph.setNode(plugin.name, plugin);\n    });\n    installers.forEach(function (_ref2) {\n      var pl = _ref2.plugin;\n\n      if (Array.isArray(pl.dependencies)) {\n        pl.dependencies.forEach(function (dep) {\n          graph.setEdge(pl.name, dep);\n        });\n      }\n    });\n    validateGraph(graph);\n    return graph;\n  };\n\n  var getInstallers = useCallback(function (installers, graph) {\n    var list = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var leaf = graph.sinks()[0];\n\n    if (leaf) {\n      var installer = installers.find(function (inst) {\n        return inst.plugin.name === leaf;\n      });\n      graph.removeNode(leaf);\n\n      if (!installer.installed) {\n        list.push(installer);\n      }\n\n      return getInstallers(installers, graph, list);\n    }\n\n    return list;\n  }, []);\n\n  var onUser = function onUser() {\n    setState({\n      showLogin: false\n    });\n  };\n\n  var showNextInstaller = function showNextInstaller() {\n    var prevInstaller = installers[installerIndex];\n    installers[installerIndex].installed = true;\n    setState({\n      installers: installers\n    });\n\n    if (installers.length < installerIndex + 1) {\n      setState({\n        installerIndex: null\n      });\n      return;\n    }\n\n    var nextIndex = installerIndex + 1;\n    var showLogin = false;\n    var nextInstaller = installers[nextIndex];\n    var prevSecure = prevInstaller && prevInstaller.plugin.secure;\n    var nextSecure = nextInstaller && nextInstaller.plugin.secure;\n\n    if (!prevSecure && nextSecure) {\n      showLogin = true;\n    }\n\n    setState({\n      installerIndex: nextIndex,\n      showLogin: showLogin\n    });\n  };\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var allInstallers, graph, installers;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              allInstallers = [];\n              _context2.next = 3;\n              return Promise.all(getPlugins(\"admin-installation\").map( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pl) {\n                  var installed;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return pl.isInstalled({\n                            client: client\n                          });\n\n                        case 2:\n                          installed = _context.sent;\n                          allInstallers.push({\n                            plugin: pl,\n                            installed: installed\n                          });\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()));\n\n            case 3:\n              graph = createGraph(allInstallers);\n              installers = getInstallers(allInstallers, graph);\n              setState({\n                installers: installers,\n                installerIndex: 0,\n                loading: false\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }, []);\n  return {\n    loading: loading,\n    installers: installers,\n    installer: installers[installerIndex],\n    showNextInstaller: showNextInstaller,\n    showLogin: showLogin,\n    onUser: onUser\n  };\n};","map":null,"metadata":{},"sourceType":"module"}