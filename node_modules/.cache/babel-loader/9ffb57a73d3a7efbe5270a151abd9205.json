{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _isEqual from \"lodash/isEqual\";\nimport React, { useRef, useCallback, useState } from \"react\";\nimport { css } from \"emotion\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { set } from \"dot-prop-immutable\";\nimport { getElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { resizeStart, resizeStop } from \"./actions\";\nimport RowChild from \"./RowChild\";\nvar innerElement = /*#__PURE__*/css({\n  position: \"relative\",\n  display: \"flex\",\n  flex: \"1 100%\",\n  boxSizing: \"border-box\"\n}, \"label:innerElement;\");\n\nvar RowContainer = function RowContainer(_ref) {\n  var element = _ref.element,\n      updateElement = _ref.updateElement,\n      resizeStart = _ref.resizeStart,\n      resizeStop = _ref.resizeStop;\n  var ref = useRef({});\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      resizing = _useState2[0],\n      setResizing = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  var id = element.id,\n      path = element.path,\n      type = element.type,\n      elements = element.elements;\n  var onResizeStart = useCallback(function (leftElement, rightElement) {\n    resizeStart(); // @ts-ignore\n\n    setResizing({\n      left: leftElement,\n      right: rightElement\n    });\n    setWidth({\n      left: leftElement.data.width,\n      right: rightElement.data.width\n    });\n  }, [resizeStart]);\n  var onResizeStop = useCallback(function () {\n    var left = resizing.left,\n        right = resizing.right;\n    setResizing(false);\n    updateElement({\n      element: set(left, \"data.width\", width.left)\n    });\n    updateElement({\n      element: set(right, \"data.width\", width.right)\n    });\n    setWidth(null);\n    resizeStop();\n  }, [resizing, width, updateElement, resizeStop]);\n  var onResize = useCallback(function (diff) {\n    var change = parseFloat((diff / ref.current.offsetWidth * 100).toFixed(2));\n    var totalWidth = width.left + width.right; // Apply the change\n\n    var rightWidth = width.right + change;\n    var leftWidth = totalWidth - rightWidth;\n\n    if (rightWidth < 10) {\n      rightWidth = 10;\n      leftWidth = totalWidth - rightWidth;\n    }\n\n    if (leftWidth < 10) {\n      leftWidth = 10;\n      rightWidth = totalWidth - leftWidth;\n    }\n\n    setWidth({\n      left: leftWidth,\n      right: rightWidth\n    });\n  }, [width]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: innerElement\n  }, elements.map(function (childElement, index) {\n    var last = index === elements.length - 1;\n    var leftElement = index > 0 && elements[index - 1];\n\n    if (resizing) {\n      if (resizing.left.id === childElement.id) {\n        childElement = set(childElement, \"data.width\", width.left);\n      }\n\n      if (resizing.right.id === childElement.id) {\n        childElement = set(childElement, \"data.width\", width.right);\n        leftElement = set(leftElement, \"data.width\", width.left);\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(RowChild, {\n      key: childElement.id,\n      resizing: resizing,\n      element: childElement,\n      index: index,\n      leftElement: leftElement,\n      count: elements.length,\n      last: last,\n      target: {\n        id: id,\n        path: path,\n        type: type\n      },\n      onResizeStart: onResizeStart,\n      onResizeStop: onResizeStop,\n      onResize: onResize\n    });\n  }));\n};\n\nexport default connect(function (state, props) {\n  var element = getElement(state, props.elementId);\n  return {\n    element: _objectSpread(_objectSpread({}, element), {}, {\n      elements: element.elements.map(function (id) {\n        return getElement(state, id);\n      })\n    })\n  };\n}, {\n  updateElement: updateElement,\n  resizeStart: resizeStart,\n  resizeStop: resizeStop\n}, null, {\n  areStatePropsEqual: _isEqual\n})(RowContainer);","map":null,"metadata":{},"sourceType":"module"}