{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport Downshift from \"downshift\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { usePageBuilder } from \"@webiny/app-page-builder/hooks/usePageBuilder\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { Item, Button, List, dropDownDialog } from \"./Styled\";\n\nvar TypographySelector = function TypographySelector(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showMenu = _useState2[0],\n      setShowMenu = _useState2[1];\n\n  var dropdown = useRef();\n\n  var _usePageBuilder = usePageBuilder(),\n      theme = _usePageBuilder.theme;\n\n  useEffect(function () {\n    if (showMenu) {\n      var domRect = dropdown.current.getBoundingClientRect();\n\n      if (domRect.right > window.innerWidth) {\n        dropdown.current.style.left = window.innerWidth - domRect.right + \"px\";\n      }\n    }\n  });\n  var setBlock = useHandler(props, function (_ref) {\n    var editor = _ref.editor,\n        onChange = _ref.onChange;\n    return function (type) {\n      editor.change(function (change) {\n        return onChange(change.setBlocks(type));\n      });\n    };\n  });\n  var onStateChange = useCallback(function (_ref2) {\n    var isOpen = _ref2.isOpen;\n    return setShowMenu(isOpen);\n  }, []);\n  var editor = props.editor;\n  var blockType = editor.value.blocks.first().type;\n  var style = theme.typography[blockType] || theme.typography.paragraph;\n  return /*#__PURE__*/React.createElement(Downshift, {\n    selectedItem: blockType,\n    onChange: setBlock,\n    onStateChange: onStateChange\n  }, function (_ref3) {\n    var isOpen = _ref3.isOpen,\n        getToggleButtonProps = _ref3.getToggleButtonProps,\n        getItemProps = _ref3.getItemProps,\n        selectedItem = _ref3.selectedItem;\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, getToggleButtonProps(), style.label), isOpen && /*#__PURE__*/React.createElement(Elevation, {\n      z: 2,\n      className: dropDownDialog\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: dropdown\n    }, /*#__PURE__*/React.createElement(List, null, Object.keys(theme.typography).map(function (name) {\n      var style = theme.typography[name];\n      return /*#__PURE__*/React.createElement(Item, Object.assign({}, getItemProps({\n        item: name,\n        // TODO: check this; TS is complaining: isActive: highlightedIndex === index,\n        isSelected: selectedItem === name\n      }), {\n        key: name\n      }), /*#__PURE__*/React.createElement(style.component || \"span\", {}, style.label));\n    })))));\n  });\n};\n\nexport default TypographySelector;","map":null,"metadata":{},"sourceType":"module"}