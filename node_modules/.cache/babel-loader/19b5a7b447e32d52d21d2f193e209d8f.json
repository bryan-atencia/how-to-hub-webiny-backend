{"ast":null,"code":"import _set from \"lodash/set\";\nimport { useMemo } from \"react\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nexport default (function (props) {\n  var updateSettings = useHandler(props, function (_ref) {\n    var element = _ref.element,\n        updateElement = _ref.updateElement,\n        dataNamespace = _ref.dataNamespace;\n    var historyUpdated = {};\n    return function (name, newValue) {\n      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var propName = \"\".concat(dataNamespace, \".\").concat(name);\n\n      var newElement = _set(element, propName, newValue);\n\n      if (!history) {\n        updateElement({\n          element: newElement,\n          history: history,\n          merge: true\n        });\n        return;\n      }\n\n      if (historyUpdated[propName] !== newValue) {\n        historyUpdated[propName] = newValue;\n        updateElement({\n          element: newElement,\n          merge: true\n        });\n      }\n    };\n  });\n  var getUpdateValue = useMemo(function () {\n    var handlers = {};\n    return function (name) {\n      if (!handlers[name]) {\n        handlers[name] = function (value) {\n          return updateSettings(name, value, true);\n        };\n      }\n\n      return handlers[name];\n    };\n  }, [updateSettings]);\n  var getUpdatePreview = useMemo(function () {\n    var handlers = {};\n    return function (name) {\n      if (!handlers[name]) {\n        handlers[name] = function (value) {\n          return updateSettings(name, value, false);\n        };\n      }\n\n      return handlers[name];\n    };\n  }, [updateSettings]);\n  return {\n    getUpdateValue: getUpdateValue,\n    getUpdatePreview: getUpdatePreview\n  };\n});","map":null,"metadata":{},"sourceType":"module"}