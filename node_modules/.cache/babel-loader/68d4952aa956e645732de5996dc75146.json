{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport shortid from \"shortid\";\nimport isHotkey from \"is-hotkey\";\nvar keyStack = {};\nvar listener = false;\nvar filter = [\"TEXTAREA\", \"INPUT\"];\n\nvar setupListener = function setupListener() {\n  if (!listener && document.body) {\n    document.body.addEventListener(\"keydown\", function (e) {\n      // We ignore all keyboard events coming from within `slateEditor` element and inputs.\n      // @ts-ignore\n      if (e.srcElement.dataset.slateEditor || filter.includes(e.srcElement.nodeName)) {\n        return;\n      }\n\n      var matchedKey = Object.keys(keyStack).find(function (key) {\n        return isHotkey(key, e);\n      });\n\n      if (matchedKey && keyStack[matchedKey].length > 0) {\n        var item = keyStack[matchedKey][0];\n        item.handler(e);\n        e.stopPropagation();\n      }\n    });\n    listener = true;\n  }\n};\n\nvar _addKeyHandler = function addKeyHandler(id, key, handler) {\n  setupListener();\n  keyStack[key] = keyStack[key] || [];\n\n  if (!keyStack[key].find(function (item) {\n    return item.id === id;\n  })) {\n    keyStack[key].unshift({\n      id: id,\n      handler: handler\n    });\n  }\n};\n\nvar _removeKeyHandler = function removeKeyHandler(id, key) {\n  if (!keyStack[key]) {\n    return;\n  }\n\n  var index = keyStack[key].findIndex(function (item) {\n    return item.id === id;\n  });\n\n  if (index >= 0) {\n    keyStack[key].splice(index, 1);\n  }\n};\n\nexport function useKeyHandler() {\n  var _React$useState = React.useState(shortid.generate()),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      id = _React$useState2[0];\n\n  return React.useMemo(function () {\n    return {\n      addKeyHandler: function addKeyHandler(key, handler) {\n        _addKeyHandler(id, key, handler);\n      },\n      removeKeyHandler: function removeKeyHandler(key) {\n        _removeKeyHandler(id, key);\n      }\n    };\n  }, []);\n}","map":null,"metadata":{},"sourceType":"module"}