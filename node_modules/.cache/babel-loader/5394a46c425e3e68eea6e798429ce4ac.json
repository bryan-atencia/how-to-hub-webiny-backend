{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from \"react\";\nimport store from \"store\";\nimport observe from \"store/plugins/observe\";\nstore.addPlugin(observe);\nvar LOCAL_STORAGE_KEY = \"webiny_dark_mode\";\nexport var ThemeContext = React.createContext(null);\nexport var ThemeProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider() {\n    var _this;\n\n    _classCallCheck(this, ThemeProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dark: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"enableDarkMode\", function () {\n      store.set(LOCAL_STORAGE_KEY, 1);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"disableDarkMode\", function () {\n      store.remove(LOCAL_STORAGE_KEY);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleDarkMode\", function () {\n      if (store.get(LOCAL_STORAGE_KEY)) {\n        store.remove(LOCAL_STORAGE_KEY);\n      } else {\n        store.set(LOCAL_STORAGE_KEY, 1);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ThemeProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      store.observe(LOCAL_STORAGE_KEY, function (theme) {\n        _this2.setState({\n          dark: Boolean(theme)\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.dark === prevState.dark) {\n        return;\n      }\n\n      if (!this.state.dark) {\n        window.document.body.classList.remove(\"dark-theme\");\n      } else {\n        window.document.body.classList.add(\"dark-theme\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var theme = {\n        enableDarkMode: this.enableDarkMode,\n        disableDarkMode: this.disableDarkMode,\n        toggleDarkMode: this.toggleDarkMode,\n        theme: {\n          dark: this.state.dark\n        }\n      };\n      return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n        value: theme\n      }, this.props.children);\n    }\n  }]);\n\n  return ThemeProvider;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}