{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _isEqual from \"lodash/isEqual\";\nimport _get from \"lodash/get\";\nimport React, { useMemo, useState } from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { set, merge } from \"dot-prop-immutable\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ReactComponent as BorderOuterIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/border_outer.svg\";\nimport { ReactComponent as BorderLeftIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/border_left.svg\";\nimport { ReactComponent as BorderRightIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/border_right.svg\";\nimport { ReactComponent as BorderTopIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/border_top.svg\";\nimport { ReactComponent as BorderBottomIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/border_bottom.svg\";\nimport SliderWithInput from \"./SliderWithInput\";\nimport Footer from \"./Footer\";\n/**\n * PMSettings (Padding/Margin settings).\n * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.\n */\n\nvar PMSettings = function PMSettings(props) {\n  var advanced = props.advanced,\n      valueKey = props.valueKey;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tabIndex = _useState2[0],\n      setTabIndex = _useState2[1];\n\n  var updateSettings = useHandler(props, function (_ref) {\n    var element = _ref.element,\n        updateElement = _ref.updateElement;\n    return function (name, newValue) {\n      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var propName = \"\".concat(valueKey, \".\").concat(name);\n\n      if (name !== \"advanced\") {\n        newValue = parseInt(newValue) || 0;\n      }\n\n      var newElement = set(element, propName, newValue); // Update all values in advanced settings\n\n      if (propName.endsWith(\".all\")) {\n        var prefix = propName.includes(\"desktop\") ? \"desktop\" : \"mobile\";\n        newElement = merge(newElement, \"\".concat(valueKey, \".\").concat(prefix), {\n          top: newValue,\n          right: newValue,\n          bottom: newValue,\n          left: newValue\n        });\n      }\n\n      updateElement({\n        element: newElement,\n        history: history,\n        merge: true\n      });\n    };\n  });\n  var getUpdateValue = useMemo(function () {\n    var handlers = {};\n    return function (name) {\n      if (!handlers[name]) {\n        handlers[name] = function (value) {\n          return updateSettings(name, value, true);\n        };\n      }\n\n      return handlers[name];\n    };\n  }, [updateSettings]);\n  var getUpdatePreview = useMemo(function () {\n    var handlers = {};\n    return function (name) {\n      if (!handlers[name]) {\n        handlers[name] = function (value) {\n          return updateSettings(name, value, false);\n        };\n      }\n\n      return handlers[name];\n    };\n  }, [updateSettings]);\n  return /*#__PURE__*/React.createElement(Tabs, {\n    onActivate: setTabIndex\n  }, /*#__PURE__*/React.createElement(Tab, {\n    label: \"Desktop\"\n  }, tabIndex === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, !advanced ? /*#__PURE__*/React.createElement(SliderWithInput, {\n    className: \"no-bottom-padding\",\n    icon: /*#__PURE__*/React.createElement(BorderOuterIcon, null),\n    valueKey: valueKey + \".desktop.all\",\n    updateValue: getUpdateValue(\"desktop.all\"),\n    updatePreview: getUpdatePreview(\"desktop.all\")\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SliderWithInput, {\n    icon: /*#__PURE__*/React.createElement(BorderTopIcon, null),\n    valueKey: valueKey + \".desktop.top\",\n    updateValue: getUpdateValue(\"desktop.top\"),\n    updatePreview: getUpdatePreview(\"desktop.top\")\n  }), /*#__PURE__*/React.createElement(SliderWithInput, {\n    icon: /*#__PURE__*/React.createElement(BorderRightIcon, null),\n    valueKey: valueKey + \".desktop.right\",\n    updateValue: getUpdateValue(\"desktop.right\"),\n    updatePreview: getUpdatePreview(\"desktop.right\")\n  }), /*#__PURE__*/React.createElement(SliderWithInput, {\n    icon: /*#__PURE__*/React.createElement(BorderBottomIcon, null),\n    valueKey: valueKey + \".desktop.bottom\",\n    updateValue: getUpdateValue(\"desktop.bottom\"),\n    updatePreview: getUpdatePreview(\"desktop.bottom\")\n  }), /*#__PURE__*/React.createElement(SliderWithInput, {\n    className: \"no-bottom-padding\",\n    icon: /*#__PURE__*/React.createElement(BorderLeftIcon, null),\n    valueKey: valueKey + \".desktop.left\",\n    updateValue: getUpdateValue(\"desktop.left\"),\n    updatePreview: getUpdatePreview(\"desktop.left\")\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    advanced: Boolean(advanced),\n    toggleAdvanced: getUpdateValue(\"advanced\")\n  })), /*#__PURE__*/React.createElement(Tab, {\n    label: \"Mobile\"\n  }, tabIndex === 1 && /*#__PURE__*/React.createElement(React.Fragment, null, !advanced ? /*#__PURE__*/React.createElement(SliderWithInput, {\n    className: \"no-bottom-padding\",\n    icon: /*#__PURE__*/React.createElement(BorderOuterIcon, null),\n    valueKey: valueKey + \".mobile.all\",\n    updateValue: getUpdateValue(\"mobile.all\"),\n    updatePreview: getUpdatePreview(\"mobile.all\")\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SliderWithInput, {\n    icon: /*#__PURE__*/React.createElement(BorderTopIcon, null),\n    valueKey: valueKey + \".mobile.top\",\n    updateValue: getUpdateValue(\"mobile.top\"),\n    updatePreview: getUpdatePreview(\"mobile.top\")\n  }), /*#__PURE__*/React.createElement(SliderWithInput, {\n    icon: /*#__PURE__*/React.createElement(BorderRightIcon, null),\n    valueKey: valueKey + \".mobile.right\",\n    updateValue: getUpdateValue(\"mobile.right\"),\n    updatePreview: getUpdatePreview(\"mobile.right\")\n  }), /*#__PURE__*/React.createElement(SliderWithInput, {\n    icon: /*#__PURE__*/React.createElement(BorderBottomIcon, null),\n    valueKey: valueKey + \".mobile.bottom\",\n    updateValue: getUpdateValue(\"mobile.bottom\"),\n    updatePreview: getUpdatePreview(\"mobile.bottom\")\n  }), /*#__PURE__*/React.createElement(SliderWithInput, {\n    className: \"no-bottom-padding\",\n    icon: /*#__PURE__*/React.createElement(BorderLeftIcon, null),\n    valueKey: valueKey + \".mobile.left\",\n    updateValue: getUpdateValue(\"mobile.left\"),\n    updatePreview: getUpdatePreview(\"mobile.left\")\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    advanced: Boolean(advanced),\n    toggleAdvanced: getUpdateValue(\"advanced\")\n  })));\n};\n\nexport default connect(function (state, _ref2) {\n  var styleAttribute = _ref2.styleAttribute;\n  var valueKey = \"data.settings.\" + styleAttribute;\n  var element = getActiveElement(state);\n  return {\n    valueKey: valueKey,\n    advanced: _get(element, valueKey + \".advanced\", false),\n    element: {\n      id: element.id,\n      type: element.type,\n      path: element.path\n    }\n  };\n}, {\n  updateElement: updateElement\n}, null, {\n  areStatePropsEqual: _isEqual\n})(PMSettings);","map":null,"metadata":{},"sourceType":"module"}