{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _noop from \"lodash/noop\";\nimport _isEqual from \"lodash/isEqual\";\nimport _get from \"lodash/get\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport shortid from \"shortid\";\nimport { Editor } from \"slate-react\";\nimport { Value } from \"slate\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { usePageBuilder } from \"@webiny/app-page-builder/hooks/usePageBuilder\";\nimport { createValue } from \"./index\";\nimport Menu from \"./Menu\";\n\nvar valueToJSON = function valueToJSON(value) {\n  return {\n    selection: value.selection.toJSON(),\n    anchorText: value.anchorText.getText(),\n    focusText: value.focusText.getText(),\n    inlines: value.inlines.toJSON(),\n    marks: value.marks.toJSON(),\n    activeMarks: value.activeMarks.toJSON(),\n    blocks: value.blocks.toJSON(),\n    texts: value.texts.toJSON()\n  };\n};\n\nvar SlateEditor = /*#__PURE__*/function (_React$Component) {\n  _inherits(SlateEditor, _React$Component);\n\n  var _super = _createSuper(SlateEditor);\n\n  function SlateEditor(props) {\n    var _this;\n\n    _classCallCheck(this, SlateEditor);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"nextElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"plugins\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"editor\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"trackNextElement\", function (e) {\n      // Store the clicked element. If it is set, it means we clicked inside the editor div.\n      _this.nextElement = e.target;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"untrackNextElement\", function () {\n      _this.nextElement = null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (change) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _noop;\n\n      if (_this.state.readOnly) {\n        return;\n      } // Prevent `onChange` if it is a `set_value` operation.\n      // We only need to handle changes on user input.\n\n\n      var operations = change.operations.toJSON();\n\n      if (_get(operations, \"0.type\") === \"set_value\") {\n        return;\n      } // Only update local state.\n\n\n      _this.setState(function (state) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          value: change.value,\n          modified: true\n        });\n      }, callback);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function () {\n      // Do not save changes if there is a plugin that's still active. This can happen, for example, when\n      // you click on the \"Link\" tool, which opens a dialog, which then triggers the blur event and this callback.\n      if (_this.state.activePlugin) {\n        return;\n      }\n\n      if (!_this.nextElement) {\n        _this.setState({\n          modified: false\n        });\n\n        _this.props.onChange(_this.state.value.toJSON());\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMenuContainer\", function () {\n      var id = \"slate-menu-container\"; // Get menu container\n\n      var menuContainer = document.getElementById(id);\n\n      if (!menuContainer) {\n        menuContainer = document.createElement(\"div\");\n        menuContainer.setAttribute(\"id\", id);\n        document.body && document.body.appendChild(menuContainer);\n      } // Position menu container\n\n\n      var rect = _this.getSelectionRect();\n\n      if (rect.top === 0) {\n        return menuContainer;\n      }\n\n      menuContainer.style.position = \"fixed\";\n      menuContainer.style.pointerEvents = \"none\";\n      menuContainer.style.zIndex = \"4\";\n      menuContainer.style.top = rect.top - 20 + \"px\";\n      menuContainer.style.left = rect.left + \"px\";\n      menuContainer.style.width = rect.width + \"px\";\n      menuContainer.style.height = rect.height + \"px\";\n      return menuContainer;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSelectionRect\", function () {\n      var native = window.getSelection();\n\n      if (native.type === \"None\") {\n        return {\n          top: 0,\n          left: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      var range = native.getRangeAt(0);\n      return range.getBoundingClientRect();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderFloatingMenu\", function () {\n      var container = _this.getMenuContainer();\n\n      if (container) {\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(Menu, {\n          exclude: _this.props.exclude,\n          value: _this.state.value,\n          onChange: _this.onChange,\n          editor: _this.editor,\n          activatePlugin: _this.activatePlugin,\n          activePlugin: _this.state.activePlugin,\n          deactivatePlugin: _this.deactivatePlugin\n        }), container);\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"activatePlugin\", function (plugin) {\n      var value = _this.state.value;\n\n      _this.setState({\n        activePlugin: {\n          plugin: plugin,\n          value: valueToJSON(value)\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deactivatePlugin\", function () {\n      _this.setState({\n        activePlugin: null\n      });\n    });\n\n    _this.id = shortid.generate();\n    _this.nextElement = null;\n\n    var _value = typeof props.value === \"string\" ? createValue(props.value) : props.value;\n\n    _this.state = {\n      modified: false,\n      showMenu: false,\n      value: Value.fromJSON(_value),\n      readOnly: !props.onChange,\n      activePlugin: null\n    };\n    var plugins = getPlugins(\"pb-editor-slate-editor\");\n    _this.plugins = plugins.filter(function (pl) {\n      return !props.exclude.includes(pl.name);\n    }).map(function (pl) {\n      return pl.slate;\n    });\n    return _this;\n  }\n\n  _createClass(SlateEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.getElementById(this.id).addEventListener(\"mousedown\", this.trackNextElement);\n      document.getElementById(this.id).addEventListener(\"mouseup\", this.untrackNextElement);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.getElementById(this.id).removeEventListener(\"mousedown\", this.trackNextElement);\n      document.getElementById(this.id).removeEventListener(\"mouseup\", this.untrackNextElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var activePlugin = this.state.activePlugin;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.id\n      }, !this.state.readOnly && this.renderFloatingMenu(), /*#__PURE__*/React.createElement(WithPageBuilderTheme, null, function (_ref) {\n        var theme = _ref.theme;\n        return /*#__PURE__*/React.createElement(Editor, {\n          ref: _this2.editor,\n          onBlur: _this2.onBlur,\n          readOnly: _this2.state.readOnly,\n          autoCorrect: false,\n          spellCheck: false,\n          plugins: _this2.plugins,\n          placeholder: \"Enter some text...\",\n          value: _this2.state.value,\n          onChange: _this2.onChange,\n          theme: theme,\n          activatePlugin: function activatePlugin(name) {\n            return _this2.activatePlugin(name);\n          },\n          activePlugin: _this2.state.activePlugin,\n          deactivatePlugin: _this2.deactivatePlugin\n        });\n      }), getPlugins(\"pb-editor-slate-menu-item\").filter(function (pl) {\n        return typeof pl.renderDialog === \"function\";\n      }).map(function (pl) {\n        var props = {\n          onChange: function onChange(change) {\n            // For dialogs, we send a complete callback, which will not only update the state of\n            // the Slate editor, but will also save the changes via GraphQL mutation.\n            _this2.onChange(change, function () {\n              return _this2.props.onChange(_this2.state.value.toJSON());\n            });\n\n            _this2.setState({\n              modified: false\n            });\n          },\n          editor: _this2.editor.current,\n          open: activePlugin ? activePlugin.plugin === pl.name : false,\n          closeDialog: _this2.deactivatePlugin,\n          activePlugin: activePlugin,\n          activatePlugin: function activatePlugin(name) {\n            return _this2.activatePlugin(name);\n          }\n        };\n        return /*#__PURE__*/React.cloneElement(pl.renderDialog(props), {\n          key: pl.name\n        });\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (!state.modified && !props.readOnly) {\n        // Got new editor value through props.\n        var _value2 = typeof props.value === \"string\" ? createValue(props.value) : props.value;\n\n        if (_isEqual(_value2, state.value.toJSON())) {\n          return null;\n        }\n\n        return {\n          value: Value.fromJSON(_value2)\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return SlateEditor;\n}(React.Component);\n\n_defineProperty(SlateEditor, \"defaultProps\", {\n  exclude: []\n});\n\nvar WithPageBuilderTheme = function WithPageBuilderTheme(_ref2) {\n  var children = _ref2.children;\n\n  var _usePageBuilder = usePageBuilder(),\n      theme = _usePageBuilder.theme;\n\n  return children({\n    theme: theme\n  });\n};\n\nexport default SlateEditor;","map":null,"metadata":{},"sourceType":"module"}