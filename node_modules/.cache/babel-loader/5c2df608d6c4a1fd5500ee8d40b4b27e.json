{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from \"react\";\nimport { Transition } from \"react-transition-group\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { css } from \"emotion\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { hoverMenuStyle, defaultStyle, transitionStyles } from \"./styled\";\n\nvar MenuButton = function MenuButton(_ref) {\n  var onClick = _ref.onClick,\n      active = _ref.active,\n      children = _ref.children,\n      _ref$onMouseDown = _ref.onMouseDown,\n      onMouseDown = _ref$onMouseDown === void 0 ? function (e) {\n    return e.preventDefault();\n  } : _ref$onMouseDown;\n  var buttonStyle = /*#__PURE__*/css({\n    cursor: \"pointer\",\n    color: active ? \"var(--mdc-theme-primary)\" : \"var(--mdc-theme-text-secondary-on-background)\",\n    \"&:hover\": {\n      color: \"var(--mdc-theme-primary)\"\n    }\n  }, \"label:buttonStyle;\");\n  return /*#__PURE__*/React.createElement(\"span\", {\n    onClick: onClick,\n    className: buttonStyle,\n    onMouseDown: onMouseDown\n  }, children);\n};\n\nvar Menu = /*#__PURE__*/function (_React$Component) {\n  _inherits(Menu, _React$Component);\n\n  var _super = _createSuper(Menu);\n\n  function Menu() {\n    var _this;\n\n    _classCallCheck(this, Menu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"menu\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"renderPlugins\", function () {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          editor = _this$props.editor,\n          exclude = _this$props.exclude;\n      var plugins = getPlugins(\"pb-editor-slate-menu-item\");\n      return plugins.filter(function (pl) {\n        return !exclude.includes(pl.name);\n      }).map(function (plugin) {\n        return /*#__PURE__*/React.cloneElement(plugin.render({\n          MenuButton: MenuButton,\n          value: value,\n          onChange: onChange,\n          editor: editor.current,\n          activatePlugin: _this.props.activatePlugin\n        }), {\n          key: plugin.name\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Menu, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var menu = this.menu.current;\n\n      if (!menu) {\n        return;\n      } // @ts-ignore\n\n\n      var rect = menu.parentNode.getBoundingClientRect();\n      var menuLeft = window.pageXOffset - (menu.offsetWidth - rect.width) / 2;\n      var absoluteMenuLeft = Math.abs(rect.left + menuLeft); // Check left border\n\n      if (absoluteMenuLeft < 65) {\n        menuLeft = -(rect.left - 65);\n      } // Check right border\n\n\n      var absoluteMenuRight = absoluteMenuLeft + menu.offsetWidth;\n\n      if (absoluteMenuRight > window.innerWidth) {\n        menuLeft -= absoluteMenuRight - window.innerWidth + 15;\n      }\n\n      menu.style.left = \"\".concat(menuLeft, \"px\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selection = this.props.value.selection;\n\n      if (selection.isFocused && selection.isCollapsed) {\n        return null;\n      }\n\n      if (!selection.isFocused) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(Transition, {\n        in: Boolean(this.menu),\n        timeout: 200,\n        appear: true\n      }, function (state) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Elevation, {\n          z: 1,\n          ref: _this2.menu,\n          className: hoverMenuStyle,\n          style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state])\n        }, _this2.renderPlugins()));\n      });\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\n_defineProperty(Menu, \"menus\", []);\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}