{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React, { Fragment, useCallback, useMemo } from \"react\";\nimport { Form } from \"@webiny/form\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport { Dialog, DialogContent, DialogTitle, DialogCancel, DialogActions, DialogButton } from \"@webiny/ui/Dialog\";\nimport { getLinkRange, isLink, TYPE } from \"./utils\";\nimport { validation } from \"@webiny/validation\";\n\nvar LinkDialog = function LinkDialog(_ref) {\n  var open = _ref.open,\n      editor = _ref.editor,\n      onChange = _ref.onChange,\n      closeDialog = _ref.closeDialog,\n      activePlugin = _ref.activePlugin;\n\n  var _useMemo = useMemo(function () {\n    if (!activePlugin) {\n      return {\n        linkData: null\n      };\n    }\n\n    var _activePlugin$value = activePlugin.value,\n        selection = _activePlugin$value.selection,\n        inlines = _activePlugin$value.inlines;\n    var anchorText = activePlugin.value.anchorText;\n    var link = inlines.find(isLink);\n\n    if (typeof anchorText !== \"string\") {\n      anchorText = anchorText.getText();\n    }\n\n    var ns = normalizeSelection(selection);\n    var start = ns.anchor.offset;\n    var end = ns.focus.offset;\n    var selectedText = link ? anchorText : anchorText.substr(start, end - start);\n    return {\n      linkData: _objectSpread(_objectSpread({}, link && link.data), {}, {\n        text: selectedText\n      })\n    };\n  }, [activePlugin]),\n      linkData = _useMemo.linkData;\n\n  var updateLink = useCallback(function (_ref2) {\n    var text = _ref2.text,\n        data = _objectWithoutProperties(_ref2, [\"text\"]);\n\n    editor.change(function (change) {\n      var selection = activePlugin.value.selection;\n      var linkSelection = getLinkRange(change, normalizeSelection(selection));\n      change.select(linkSelection).unwrapInline(TYPE).insertText(text).moveAnchorBackward(text.length).wrapInline({\n        type: TYPE,\n        data: data\n      }).moveToStart();\n      onChange(change);\n      closeDialog();\n    });\n  }, [editor, activePlugin, onChange, closeDialog]);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: closeDialog\n  }, /*#__PURE__*/React.createElement(Form, {\n    data: linkData,\n    onSubmit: updateLink\n  }, function (_ref3) {\n    var Bind = _ref3.Bind,\n        submit = _ref3.submit;\n    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, null, \"Edit Link\"), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"text\",\n      validators: validation.create(\"required\")\n    }, /*#__PURE__*/React.createElement(Input, {\n      label: \"Text to display\"\n    }))), /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"href\",\n      validators: validation.create(\"required\")\n    }, /*#__PURE__*/React.createElement(Input, {\n      label: \"URL\"\n    }))), /*#__PURE__*/React.createElement(Cell, {\n      span: 6\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"newTab\"\n    }, /*#__PURE__*/React.createElement(Switch, {\n      onChange: function onChange() {\n        return submit();\n      },\n      label: \"Open in new window\"\n    }))), /*#__PURE__*/React.createElement(Cell, {\n      span: 6\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"noFollow\"\n    }, /*#__PURE__*/React.createElement(Switch, {\n      onChange: function onChange() {\n        return submit();\n      },\n      label: \"Add \\\"rel=nofollow\\\"\"\n    }))))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, {\n      onClick: closeDialog\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(DialogButton, {\n      onClick: submit\n    }, \"OK\")));\n  }));\n};\n\nvar normalizeSelection = function normalizeSelection(selection) {\n  var start, end;\n\n  if (selection.anchor.offset > selection.focus.offset) {\n    start = selection.focus;\n    end = selection.anchor;\n  } else {\n    start = selection.anchor;\n    end = selection.focus;\n  }\n\n  return {\n    anchor: start,\n    focus: end\n  };\n};\n\nexport default LinkDialog;","map":null,"metadata":{},"sourceType":"module"}