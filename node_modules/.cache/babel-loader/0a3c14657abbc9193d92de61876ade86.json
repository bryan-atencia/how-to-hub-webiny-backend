{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileManagerView from \"./FileManager/FileManagerView\";\nimport pick from \"lodash/pick\";\nimport { FileManagerProvider } from \"./FileManager/FileManagerContext\";\nvar useState = React.useState;\n\nvar FileManagerPortal = /*#__PURE__*/function (_React$Component) {\n  _inherits(FileManagerPortal, _React$Component);\n\n  var _super = _createSuper(FileManagerPortal);\n\n  function FileManagerPortal(props) {\n    var _this;\n\n    _classCallCheck(this, FileManagerPortal);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", void 0);\n\n    if (!window) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.container = window.document.getElementById(\"file-manager-container\");\n\n    if (!_this.container) {\n      _this.container = document.createElement(\"div\");\n\n      _this.container.setAttribute(\"id\", \"file-manager-container\");\n\n      var container = _this.container;\n      document.body && document.body.appendChild(container);\n    }\n\n    return _this;\n  }\n\n  _createClass(FileManagerPortal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _onChange = _this$props.onChange,\n          onClose = _this$props.onClose,\n          accept = _this$props.accept,\n          multiple = _this$props.multiple,\n          images = _this$props.images,\n          maxSize = _this$props.maxSize,\n          multipleMaxCount = _this$props.multipleMaxCount,\n          multipleMaxSize = _this$props.multipleMaxSize;\n      var container = this.container;\n      var props = {\n        onChange: function onChange(files) {\n          var fields = [\"id\", \"name\", \"key\", \"src\", \"size\", \"type\"];\n\n          if (Array.isArray(files)) {\n            _onChange(files.map(function (file) {\n              return pick(file, fields);\n            }));\n          } else {\n            _onChange(pick(files, fields));\n          }\n        },\n        onClose: onClose,\n        accept: accept,\n        multiple: multiple,\n        maxSize: maxSize,\n        multipleMaxCount: multipleMaxCount,\n        multipleMaxSize: multipleMaxSize\n      };\n\n      if (images) {\n        props.accept = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\", \"image/svg+xml\"];\n      } // Let's pass \"permanent\" / \"persistent\" / \"temporary\" flags as \"mode\" prop instead.\n\n\n      return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(FileManagerProvider, props, /*#__PURE__*/React.createElement(FileManagerView, props)), container);\n    }\n  }]);\n\n  return FileManagerPortal;\n}(React.Component);\n\nexport function FileManager(_ref) {\n  var children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, show && /*#__PURE__*/React.createElement(FileManagerPortal, Object.assign({\n    onClose: function onClose() {\n      return setShow(false);\n    }\n  }, rest)), children({\n    showFileManager: function showFileManager() {\n      return setShow(true);\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}