{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCIconButtonToggleFoundation } from '@material/icon-button';\nimport { componentFactory, FoundationComponent, deprecationWarning } from '@rmwc/base';\nimport { Icon } from '@rmwc/icon';\nimport { withRipple } from '@rmwc/ripple';\nvar IconButtonRoot = withRipple({\n  surface: false,\n  unbounded: true\n})(componentFactory({\n  displayName: 'IconButtonRoot',\n  tag: Icon,\n  classNames: function classNames(props) {\n    return ['mdc-icon-button', {\n      'mdc-icon-button--on': props.checked\n    }];\n  },\n  defaultProps: {\n    role: 'button',\n    tabIndex: '0'\n  },\n  consumeProps: ['checked']\n}));\nvar IconButtonToggleRoot = withRipple({\n  surface: false,\n  unbounded: true\n})(componentFactory({\n  displayName: 'IconButtonRoot',\n  tag: 'button',\n  classNames: function classNames(props) {\n    return ['mdc-icon-button', {\n      'mdc-icon-button--on': props.checked\n    }];\n  },\n  defaultProps: {\n    role: 'button',\n    tabIndex: '0'\n  },\n  consumeProps: ['checked']\n}));\nvar IconButtonIcon = componentFactory({\n  displayName: 'IconButtonIcon',\n  tag: Icon,\n  classNames: function classNames(props) {\n    return ['mdc-icon-button__icon', {\n      'mdc-icon-button__icon--on': props.on\n    }];\n  },\n  consumeProps: ['on']\n});\n\nvar IconButtonToggle =\n/** @class */\nfunction (_super) {\n  __extends(IconButtonToggle, _super);\n\n  function IconButtonToggle(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.root = _this.createElement('root');\n    _this.handleClick = _this.handleClick.bind(_this);\n    return _this;\n  }\n\n  Object.defineProperty(IconButtonToggle.prototype, \"on\", {\n    get: function get() {\n      return this.foundation && this.foundation.isOn();\n    },\n    set: function set(isOn) {\n      this.foundation.toggle(isOn);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IconButtonToggle.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCIconButtonToggleFoundation({\n      addClass: function addClass(className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function removeClass(className) {\n        return _this.root.removeClass(className);\n      },\n      hasClass: function hasClass(className) {\n        return _this.root.hasClass(className);\n      },\n      setAttr: function setAttr(attrName, attrValue) {\n        return _this.root.setProp(attrName, attrValue);\n      },\n      notifyChange: function notifyChange(evtData) {\n        return _this.emit('onChange', evtData);\n      }\n    });\n  };\n  /** Takes into account our checked prop */\n\n\n  IconButtonToggle.prototype.isOn = function () {\n    if (this.props.checked !== undefined) {\n      return this.props.checked;\n    }\n\n    return this.on;\n  };\n\n  IconButtonToggle.prototype.sync = function (nextProps) {\n    // checked\n    if (nextProps.checked !== undefined && this.on !== nextProps.checked) {\n      this.on = !!nextProps.checked;\n    }\n  };\n\n  IconButtonToggle.prototype.handleClick = function (evt) {\n    this.props.onClick && this.props.onClick(evt);\n    this.foundation.handleClick();\n  };\n\n  IconButtonToggle.prototype.render = function () {\n    var _a = this.props,\n        icon = _a.icon,\n        iconOptions = _a.iconOptions,\n        onIcon = _a.onIcon,\n        onIconOptions = _a.onIconOptions,\n        rest = __rest(_a, [\"icon\", \"iconOptions\", \"onIcon\", \"onIconOptions\"]);\n\n    if (iconOptions || onIconOptions) {\n      deprecationWarning('IconButton component props iconOptions and onIconOptions must be passed directly to the icon and onIcon prop. This issue has NOT been automatically fixed for you, please update your code.');\n    }\n\n    return React.createElement(IconButtonToggleRoot, __assign({\n      \"aria-pressed\": this.isOn(),\n      \"aria-hidden\": \"true\"\n    }, this.root.props(rest), {\n      tag: \"button\",\n      onClick: this.handleClick\n    }), React.createElement(IconButtonIcon, {\n      icon: icon\n    }), React.createElement(IconButtonIcon, {\n      icon: onIcon,\n      on: true\n    }));\n  };\n\n  IconButtonToggle.displayName = 'IconButton';\n  return IconButtonToggle;\n}(FoundationComponent);\n/** An IconButton component that can also be used as a toggle. */\n\n\nexport var IconButton = function IconButton(_a) {\n  var rest = __rest(_a, []);\n\n  if (rest.onIcon) {\n    return React.createElement(IconButtonToggle, __assign({}, rest));\n  }\n\n  return React.createElement(IconButtonRoot, __assign({\n    \"aria-hidden\": \"true\",\n    tag: \"button\"\n  }, rest));\n};\nIconButton.displayName = 'IconButton';","map":null,"metadata":{},"sourceType":"module"}