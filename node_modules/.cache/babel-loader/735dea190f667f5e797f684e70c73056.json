{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCDialogFoundation } from '@material/dialog';\nimport { FoundationComponent, componentFactory, createFocusTrap, closest, matches } from '@rmwc/base';\nimport { Button } from '@rmwc/button';\n\nvar isScrollable = function isScrollable(el) {\n  return el.scrollHeight > el.offsetHeight;\n};\n\nvar areTopsMisaligned = function areTopsMisaligned(els) {\n  var tops = new Set();\n  [].forEach.call(els, function (el) {\n    return tops.add(el.offsetTop);\n  });\n  return tops.size > 1;\n};\n\nvar DialogRoot = componentFactory({\n  displayName: 'DialogRoot',\n  defaultProps: {\n    role: 'alertdialog',\n    'aria-modal': true\n  },\n  classNames: ['mdc-dialog']\n});\n\nvar DialogScrim =\n/** @class */\nfunction (_super) {\n  __extends(DialogScrim, _super);\n\n  function DialogScrim() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DialogScrim.prototype.shouldComponentUpdate = function (nextProps) {\n    return this.props.disableInteraction !== nextProps.disableInteraction;\n  };\n\n  DialogScrim.prototype.render = function () {\n    var style = this.props.disableInteraction ? {\n      pointerEvents: 'none'\n    } : {};\n    return React.createElement(\"div\", {\n      className: \"mdc-dialog__scrim\",\n      style: style\n    });\n  };\n\n  return DialogScrim;\n}(React.Component);\n/** The Dialog title. */\n\n\nexport var DialogTitle = componentFactory({\n  displayName: 'DialogTitle',\n  tag: 'h2',\n  classNames: ['mdc-dialog__title']\n});\n/** The Dialog content. */\n\nexport var DialogContent = componentFactory({\n  displayName: 'DialogContent',\n  classNames: ['mdc-dialog__content']\n});\n/** Actions container for the Dialog. */\n\nexport var DialogActions = componentFactory({\n  displayName: 'DialogActions',\n  classNames: ['mdc-dialog__actions']\n});\n/** Action buttons for the Dialog. */\n\nvar DialogButton =\n/** @class */\nfunction (_super) {\n  __extends(DialogButton, _super);\n\n  function DialogButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DialogButton.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        _c = _b.action,\n        action = _c === void 0 ? '' : _c,\n        className = _b.className,\n        isDefaultAction = _b.isDefaultAction,\n        rest = __rest(_b, [\"action\", \"className\", \"isDefaultAction\"]);\n\n    var defaultProp = !!isDefaultAction ? (_a = {}, _a[MDCDialogFoundation.strings.BUTTON_DEFAULT_ATTRIBUTE] = true, _a) : {};\n    return React.createElement(Button, __assign({}, rest, defaultProp, {\n      \"data-mdc-dialog-action\": action,\n      className: [className, 'mdc-dialog__button'].filter(Boolean).join(' ')\n    }));\n  };\n\n  DialogButton.displayName = 'DialogButton';\n  return DialogButton;\n}(React.Component);\n\nexport { DialogButton };\n/** A Dialog component. */\n\nvar Dialog =\n/** @class */\nfunction (_super) {\n  __extends(Dialog, _super);\n\n  function Dialog(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.root = _this.createElement('root');\n    _this.container = null;\n    _this.content = null;\n    _this.buttons = null;\n    _this.defaultButton = null;\n    _this.focusTrap = null;\n\n    _this.handleDocumentKeydown = function () {};\n\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleKeydown = _this.handleKeydown.bind(_this);\n    return _this;\n  }\n\n  Dialog.prototype.open = function () {\n    var _this = this;\n\n    if (!this.foundation.isOpen()) {\n      document.addEventListener('keydown', this.handleDocumentKeydown);\n      this.foundation.open(); // Don't like this fix\n      // This corrects an issue where the default button was stealing focus\n      // When something else in the dialog should have it\n\n      setTimeout(function () {\n        if (_this.defaultButton && document.activeElement !== _this.defaultButton && document.activeElement && document.activeElement.classList.contains('mdc-dialog__button')) {\n          _this.defaultButton.focus();\n        }\n      }, 200);\n    }\n  };\n\n  Dialog.prototype.close = function () {\n    if (this.foundation.isOpen()) {\n      document.removeEventListener('keydown', this.handleDocumentKeydown);\n      this.foundation.close();\n    }\n  };\n\n  Dialog.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    this.container = this.root.ref && this.root.ref.querySelector(MDCDialogFoundation.strings.CONTAINER_SELECTOR);\n    this.content = this.root.ref && this.root.ref.querySelector(MDCDialogFoundation.strings.CONTENT_SELECTOR);\n    this.buttons = this.root.ref && [].slice.call(this.root.ref.querySelectorAll(MDCDialogFoundation.strings.BUTTON_SELECTOR));\n    this.defaultButton = this.root.ref && this.root.ref.querySelector(\"[\" + MDCDialogFoundation.strings.BUTTON_DEFAULT_ATTRIBUTE + \"]\");\n    this.container && (this.focusTrap = createFocusTrap(this.container, {\n      initialFocus: undefined,\n      escapeDeactivates: false,\n      clickOutsideDeactivates: true\n    }));\n    this.handleDocumentKeydown = this.foundation.handleDocumentKeydown.bind(this.foundation);\n    document.addEventListener('keydown', this.handleDocumentKeydown);\n  };\n\n  Dialog.prototype.componentWillUnmount = function () {\n    _super.prototype.componentWillUnmount.call(this);\n\n    document.removeEventListener('keydown', this.handleDocumentKeydown);\n  };\n\n  Dialog.prototype.sync = function (props) {\n    if (this.props.open) {\n      this.open();\n    } else {\n      this.close();\n    }\n  };\n\n  Dialog.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCDialogFoundation({\n      addClass: function addClass(className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function removeClass(className) {\n        return _this.root.removeClass(className);\n      },\n      hasClass: function hasClass(className) {\n        return _this.root.hasClass(className);\n      },\n      addBodyClass: function addBodyClass(className) {\n        return document.body && document.body.classList.add(className);\n      },\n      removeBodyClass: function removeBodyClass(className) {\n        return document.body && document.body.classList.remove(className);\n      },\n      eventTargetMatches: function eventTargetMatches(target, selector) {\n        return matches(target, selector);\n      },\n      trapFocus: function trapFocus() {\n        try {\n          // we dont always have an item to focus\n          // so we try catch it\n          _this.focusTrap && _this.focusTrap.activate();\n        } catch (err) {}\n      },\n      releaseFocus: function releaseFocus() {\n        return _this.focusTrap && _this.focusTrap.deactivate();\n      },\n      isContentScrollable: function isContentScrollable() {\n        return !!_this.content && isScrollable(_this.content);\n      },\n      areButtonsStacked: function areButtonsStacked() {\n        return areTopsMisaligned(_this.buttons);\n      },\n      getActionFromEvent: function getActionFromEvent(evt) {\n        var element = closest(evt.target, \"[\" + MDCDialogFoundation.strings.ACTION_ATTRIBUTE + \"]\");\n        return element && element.getAttribute(MDCDialogFoundation.strings.ACTION_ATTRIBUTE);\n      },\n      clickDefaultButton: function clickDefaultButton() {\n        if (_this.defaultButton) {\n          _this.defaultButton.click();\n        }\n      },\n      reverseButtons: function reverseButtons() {\n        _this.buttons && _this.buttons.reverse();\n        _this.buttons && _this.buttons.forEach(function (button) {\n          return button.parentElement && button.parentElement.appendChild(button);\n        });\n      },\n      notifyOpening: function notifyOpening() {\n        _this.emit('onOpen', {});\n\n        _this.props.onStateChange && _this.props.onStateChange('opening');\n      },\n      notifyOpened: function notifyOpened() {\n        _this.emit('onOpened', {});\n\n        _this.props.onStateChange && _this.props.onStateChange('opened');\n      },\n      notifyClosing: function notifyClosing(action) {\n        _this.emit('onClose', action ? {\n          action: action\n        } : {});\n\n        _this.props.onStateChange && _this.props.onStateChange('closing');\n      },\n      notifyClosed: function notifyClosed(action) {\n        _this.emit('onClosed', action ? {\n          action: action\n        } : {});\n\n        _this.props.onStateChange && _this.props.onStateChange('closed');\n      },\n      getInitialFocusEl: function getInitialFocusEl() {\n        return document.querySelector(\"[\" + MDCDialogFoundation.strings.INITIAL_FOCUS_ATTRIBUTE + \"]\");\n      }\n    });\n  };\n\n  Dialog.prototype.handleClick = function (evt) {\n    this.props.onClick && this.props.onClick(evt);\n    return this.foundation.handleClick(evt);\n  };\n\n  Dialog.prototype.handleKeydown = function (evt) {\n    this.props.onKeyDown && this.props.onKeyDown(evt);\n    return this.foundation.handleKeydown(evt);\n  };\n\n  Dialog.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        open = _a.open,\n        onOpen = _a.onOpen,\n        onClose = _a.onClose,\n        onStateChange = _a.onStateChange,\n        preventOutsideDismiss = _a.preventOutsideDismiss,\n        rest = __rest(_a, [\"children\", \"open\", \"onOpen\", \"onClose\", \"onStateChange\", \"preventOutsideDismiss\"]);\n\n    return React.createElement(DialogRoot, __assign({}, this.root.props(rest), {\n      ref: this.root.setRef,\n      onClick: this.handleClick,\n      onKeyDown: this.handleKeydown\n    }), React.createElement(\"div\", {\n      className: \"mdc-dialog__container\"\n    }, React.createElement(\"div\", {\n      className: \"mdc-dialog__surface\"\n    }, children)), React.createElement(DialogScrim, {\n      disableInteraction: preventOutsideDismiss\n    }));\n  };\n\n  Dialog.displayName = 'Dialog';\n  return Dialog;\n}(FoundationComponent);\n\nexport { Dialog };\n/** A SimpleDialog component for ease of use. */\n\nvar SimpleDialog =\n/** @class */\nfunction (_super) {\n  __extends(SimpleDialog, _super);\n\n  function SimpleDialog() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleDialog.prototype.render = function () {\n    var _a = this.props,\n        title = _a.title,\n        header = _a.header,\n        body = _a.body,\n        footer = _a.footer,\n        acceptLabel = _a.acceptLabel,\n        cancelLabel = _a.cancelLabel,\n        children = _a.children,\n        open = _a.open,\n        rest = __rest(_a, [\"title\", \"header\", \"body\", \"footer\", \"acceptLabel\", \"cancelLabel\", \"children\", \"open\"]);\n\n    return React.createElement(Dialog, __assign({\n      open: open\n    }, rest), (!!title || !!header) && React.createElement(DialogTitle, null, !!title && title, !!header && header), (!!body || children) && React.createElement(DialogContent, null, body, children), (!!cancelLabel || !!acceptLabel || !!footer) && React.createElement(DialogActions, null, !!footer && footer, !!cancelLabel && React.createElement(DialogButton, {\n      action: \"close\"\n    }, cancelLabel), !!acceptLabel && React.createElement(DialogButton, {\n      action: \"accept\",\n      isDefaultAction: true\n    }, acceptLabel)));\n  };\n\n  SimpleDialog.displayName = 'SimpleDialog';\n  SimpleDialog.defaultProps = {\n    title: undefined,\n    header: undefined,\n    body: undefined,\n    footer: undefined,\n    acceptLabel: 'Accept',\n    cancelLabel: 'Cancel',\n    open: false,\n    children: undefined\n  };\n  return SimpleDialog;\n}(React.Component);\n\nexport { SimpleDialog };","map":null,"metadata":{},"sourceType":"module"}