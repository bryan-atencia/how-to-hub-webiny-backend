{"ast":null,"code":"import _get from \"lodash/get\";\nimport _set from \"lodash/set\";\nimport React, { useCallback } from \"react\";\nimport slugify from \"slugify\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { TagsMultiAutocomplete } from \"@webiny/app-page-builder/admin/components/TagsMultiAutocomplete\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Select } from \"@webiny/ui/Select\";\nimport PageImage from \"./PageImage\";\nimport appendOgImageDimensions from \"./appendOgImageDimensions\";\nimport { validation } from \"@webiny/validation\";\n\nvar toSlug = function toSlug(value, cb) {\n  cb(slugify(value, {\n    replacement: \"-\",\n    lower: true,\n    remove: /[*#\\?<>_\\{\\}\\[\\]+~.()'\"!:;@]/g\n  })); // eslint-disable-line\n};\n\nvar GeneralSettings = function GeneralSettings(_ref) {\n  var form = _ref.form,\n      Bind = _ref.Bind;\n  var layouts = React.useMemo(function () {\n    return getPlugins(\"pb-page-layout\").map(function (pl) {\n      return pl.layout;\n    });\n  }, []);\n  var hasOgImage = useCallback(function () {\n    // const src = get(data, \"settings.social.image.src\"); // Doesn't work.\n    var src = _get(form.state, \"data.settings.social.image.src\"); // Works.\n\n\n    return typeof src === \"string\" && src && !src.startsWith(\"data:\");\n  }, [form]);\n  var onAfterChangeImage = useCallback(function (selectedImage) {\n    // If not already set, set selectedImage as og:image too.\n    if (selectedImage && !hasOgImage()) {\n      form.setState(function (state) {\n        _set(state, \"data.settings.social.image\", selectedImage);\n\n        return state;\n      });\n      return appendOgImageDimensions({\n        form: form,\n        value: selectedImage\n      });\n    }\n  }, [hasOgImage, form]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"title\",\n    validators: validation.create(\"required\")\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"Title\",\n    description: \"Page title\"\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"url\",\n    validators: validation.create(\"required\"),\n    beforeChange: toSlug\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"URL\",\n    description: \"Page URL\"\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"snippet\"\n  }, /*#__PURE__*/React.createElement(Input, {\n    rows: 4,\n    label: \"Snippet\",\n    description: \"Page snippet\"\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"settings.general.layout\",\n    defaultValue: layouts[0].name\n  }, /*#__PURE__*/React.createElement(Select, {\n    box: \"true\",\n    label: \"Layout\",\n    description: \"Render this page using the selected layout\"\n  }, layouts.map(function (_ref2) {\n    var name = _ref2.name,\n        title = _ref2.title;\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: name,\n      value: name\n    }, title);\n  })))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"settings.general.tags\"\n  }, /*#__PURE__*/React.createElement(TagsMultiAutocomplete, {\n    description: \"Enter tags to filter pages\"\n  }))), /*#__PURE__*/React.createElement(Cell, {\n    span: 12\n  }, /*#__PURE__*/React.createElement(Bind, {\n    name: \"settings.general.image\",\n    afterChange: onAfterChangeImage\n  }, /*#__PURE__*/React.createElement(PageImage, {\n    label: \"Page Image\"\n  })))));\n};\n\nexport default GeneralSettings;","map":null,"metadata":{},"sourceType":"module"}