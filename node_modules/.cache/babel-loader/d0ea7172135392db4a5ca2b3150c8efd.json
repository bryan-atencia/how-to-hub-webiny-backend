{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { componentFactory } from '@rmwc/base';\nvar GridRoot = componentFactory({\n  displayName: 'GridRoot',\n  classNames: function (props) {\n    var _a;\n\n    return ['mdc-layout-grid', (_a = {}, _a[\"mdc-layout-grid--align-\" + (props.align || '')] = props.align !== undefined, _a['mdc-layout-grid--fixed-column-width'] = props.fixedColumnWidth, _a)];\n  },\n  consumeProps: ['fixedColumnWidth', 'align']\n});\n/** A Grid component */\n\nexport var Grid = function (_a) {\n  var children = _a.children,\n      rest = __rest(_a, [\"children\"]);\n\n  var child = children;\n  var needsInnerGrid = !(child && typeof child === 'object' && (child.type || {}).displayName === 'GridInner');\n  return React.createElement(GridRoot, __assign({}, rest), !!needsInnerGrid ? React.createElement(GridInner, null, children) : children);\n};\nGrid.displayName = 'Grid';\n/** A Grid cell */\n\nexport var GridCell = componentFactory({\n  displayName: 'GridCell',\n  classNames: function (props) {\n    var _a;\n\n    return ['mdc-layout-grid__cell', (_a = {}, _a[\"mdc-layout-grid__cell--order-\" + (props.order || '')] = props.order !== undefined, _a[\"mdc-layout-grid__cell--align-\" + (props.align || '')] = props.align !== undefined, _a[\"mdc-layout-grid__cell--span-\" + (props.span || '')] = props.span !== undefined, _a[\"mdc-layout-grid__cell--span-\" + (props.phone || '') + \"-phone\"] = props.phone !== undefined, _a[\"mdc-layout-grid__cell--span-\" + (props.tablet || '') + \"-tablet\"] = props.tablet !== undefined, _a[\"mdc-layout-grid__cell--span-\" + (props.desktop || '') + \"-desktop\"] = props.desktop !== undefined, _a)];\n  },\n  consumeProps: ['span', 'phone', 'tablet', 'desktop', 'order', 'align']\n});\n/** By default, an inner grid component is included inside of <Grid>. Use GridInner when doing nested Grids. */\n\nexport var GridInner = componentFactory({\n  displayName: 'GridInner',\n  classNames: ['mdc-layout-grid__inner']\n});","map":null,"metadata":{},"sourceType":"module"}