{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"Cannot be changed later\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"Content Model\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"Use as a list of references\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"Reference existing content entries. For example, a book can reference one or more authors.\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Reference\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { ReactComponent as RefIcon } from \"@svgr/webpack!./icons/round-link-24px.svg\";\nimport { useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { LIST_CONTENT_MODELS } from \"../../viewsGraphql\";\nimport { validation } from \"@webiny/validation\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport get from \"lodash/get\";\nimport { i18n } from \"@webiny/app/i18n\";\nvar t = i18n.ns(\"app-headless-cms/admin/fields\");\nvar plugin = {\n  type: \"cms-editor-field-type\",\n  name: \"cms-editor-field-type-ref\",\n  field: {\n    type: \"ref\",\n    validators: [],\n    label: t(_templateObject()),\n    description: t(_templateObject2()),\n    icon: /*#__PURE__*/React.createElement(RefIcon, null),\n    allowMultipleValues: true,\n    allowPredefinedValues: false,\n    allowIndexes: {\n      singleValue: false,\n      multipleValues: false\n    },\n    multipleValuesLabel: t(_templateObject3()),\n    createField: function createField() {\n      return {\n        type: this.type,\n        settings: {\n          modelId: \"\"\n        },\n        validation: [],\n        renderer: {\n          name: \"\"\n        }\n      };\n    },\n    renderSettings: function renderSettings(_ref) {\n      var Bind = _ref.form.Bind;\n\n      var _useQuery = useQuery(LIST_CONTENT_MODELS),\n          data = _useQuery.data,\n          loading = _useQuery.loading,\n          error = _useQuery.error;\n\n      var _useSnackbar = useSnackbar(),\n          showSnackbar = _useSnackbar.showSnackbar;\n\n      if (error) {\n        showSnackbar(error.message);\n        return null;\n      } // Format options for the Autocomplete component.\n\n\n      var options = get(data, \"listContentModels.data\", []).map(function (item) {\n        return {\n          id: item.modelId,\n          name: item.name\n        };\n      });\n      return /*#__PURE__*/React.createElement(Grid, null, loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(Cell, {\n        span: 12\n      }, /*#__PURE__*/React.createElement(Bind, {\n        name: \"settings.modelId\",\n        validators: validation.create(\"required\")\n      }, function (bind) {\n        var id = get(bind, \"value.id\", bind.value); // Format value prop for AutoComplete component.\n\n        var formattedValueForAutoComplete = options.find(function (option) {\n          return option.id === id;\n        });\n        return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, bind, {\n          value: formattedValueForAutoComplete,\n          onChange: bind.onChange,\n          label: t(_templateObject4()),\n          description: t(_templateObject5()),\n          options: options\n        }));\n      })));\n    },\n    graphql: {\n      queryField:\n      /* GraphQL */\n      \"\\n                {\\n                    values {\\n                        value {\\n                            id\\n                            meta {\\n                                title {\\n                                    value\\n                                }\\n                            }\\n                        }\\n                        locale\\n                    }\\n                }\\n            \"\n    }\n  }\n};\nexport default plugin;","map":null,"metadata":{},"sourceType":"module"}