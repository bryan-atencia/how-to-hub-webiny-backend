{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from \"react\";\nimport { Image } from \"@webiny/ui/Image\";\nvar SUPPORTED_IMAGE_RESIZE_WIDTHS = [100, 300, 500, 750, 1000, 1500, 2500];\n/**\n * Width of the image should not be just any random number. For optimization reasons,\n * we only allow the ones listed in SUPPORTED_IMAGE_RESIZE_WIDTHS list (Webiny Cloud supports only these).\n */\n\nvar getSupportedImageResizeWidth = function getSupportedImageResizeWidth(width) {\n  var output = SUPPORTED_IMAGE_RESIZE_WIDTHS[0];\n  var i = SUPPORTED_IMAGE_RESIZE_WIDTHS.length;\n\n  while (i >= 0) {\n    if (width === SUPPORTED_IMAGE_RESIZE_WIDTHS[i]) {\n      output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i];\n      break;\n    }\n\n    if (width > SUPPORTED_IMAGE_RESIZE_WIDTHS[i]) {\n      // Use next larger width. If there isn't any, use current.\n      output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i + 1];\n\n      if (!output) {\n        output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i];\n      }\n\n      break;\n    }\n\n    i--;\n  }\n\n  return output;\n};\n/**\n * Currently we only allow \"width\" as a transform option.\n * @param args\n */\n\n\nvar sanitizeTransformArgs = function sanitizeTransformArgs(args) {\n  var output = {};\n\n  if (args) {\n    var width = parseInt(args.width);\n\n    if (width > 0) {\n      output.width = getSupportedImageResizeWidth(width);\n    }\n  }\n\n  return output;\n};\n\nvar isFixedImageWidth = function isFixedImageWidth(width) {\n  if (Number.isFinite(width)) {\n    return true;\n  }\n\n  if (typeof width === \"string\" && width.endsWith(\"px\")) {\n    return true;\n  }\n\n  return false;\n};\n\nvar getSrcSetAutoSizes = function getSrcSetAutoSizes(max) {\n  max = isFixedImageWidth(max) ? parseInt(\"\" + max) : 2500;\n  var maxWidth = getSupportedImageResizeWidth(max);\n  return SUPPORTED_IMAGE_RESIZE_WIDTHS.filter(function (supportedWidth) {\n    return supportedWidth <= maxWidth;\n  });\n};\n\nvar convertTransformToQueryParams = function convertTransformToQueryParams(transform) {\n  return Object.keys(transform).map(function (key) {\n    return \"\".concat(key, \"=\").concat(transform[key]);\n  }).join(\"&\");\n};\n\nexport default (function () {\n  var imagePlugin = {\n    name: \"image-component\",\n    type: \"image-component\",\n    presets: {\n      avatar: {\n        width: 300\n      }\n    },\n    getImageSrc: function getImageSrc(props) {\n      if (!props) {\n        return \"\";\n      }\n\n      var src = props.src,\n          transform = props.transform;\n\n      if (!transform) {\n        return src;\n      }\n\n      if (!src || src.startsWith(\"data:\") || src.endsWith(\"svg\")) {\n        return src;\n      }\n\n      var params = sanitizeTransformArgs(transform);\n      params = convertTransformToQueryParams(params);\n      return src + \"?\" + params;\n    },\n    render: function render(props) {\n      var transform = props.transform,\n          srcSetInitial = props.srcSet,\n          imageProps = _objectWithoutProperties(props, [\"transform\", \"srcSet\"]);\n\n      var srcSet = srcSetInitial;\n      var src = imageProps.src;\n\n      if (srcSet && srcSet === \"auto\") {\n        srcSet = {}; // Check if image width was forced, and additionally if width was set as pixels, with \"px\" in the value.\n\n        var forcedWidth = props.width || props.style && props.style.width;\n        var srcSetAutoWidths = getSrcSetAutoSizes(forcedWidth);\n        srcSetAutoWidths.forEach(function (width) {\n          srcSet[width + \"w\"] = imagePlugin.getImageSrc({\n            src: src,\n            transform: _objectSpread(_objectSpread({}, transform), {}, {\n              width: width\n            })\n          });\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Image, Object.assign({}, imageProps, {\n        srcSet: srcSet,\n        src: src\n      }));\n    }\n  };\n  return imagePlugin;\n});","map":null,"metadata":{},"sourceType":"module"}