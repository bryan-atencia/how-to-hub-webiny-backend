{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { Input } from \"@webiny/ui/Input\";\nimport I18NInputLocalesOverlay from \"./I18NInputLocalesOverlay\";\nimport { ReactComponent as I18NIcon } from \"@svgr/webpack!./icons/round-translate-24px.svg\";\nimport { css } from \"emotion\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport classNames from \"classnames\";\nimport cloneDeep from \"lodash.clonedeep\";\nimport I18NRichTextEditor from \"./I18NRichTextEditor\";\nvar style = {\n  i18nDialogIconButton: /*#__PURE__*/css({\n    \".webiny-ui-tooltip\": {\n      display: \"block\"\n    },\n    \".webiny-ui-icon\": {\n      pointerEvents: \"all\",\n      cursor: \"pointer\",\n      zIndex: 1\n    }\n  }, \"label:i18nDialogIconButton;\"),\n  i18nRichEditorDialogIconButton: /*#__PURE__*/css({\n    position: \"absolute\",\n    right: 10\n  }, \"label:i18nRichEditorDialogIconButton;\")\n};\n\nvar prepareII8NValues = function prepareII8NValues(_ref) {\n  var locales = _ref.locales,\n      values = _ref.values;\n  var output = [];\n\n  var _loop = function _loop(i) {\n    var item = values.find(function (item) {\n      return item.locale === locales[i].id;\n    });\n\n    if (item) {\n      output.push(_objectSpread({}, item));\n    } else {\n      output.push({\n        locale: locales[i].id,\n        value: \"\"\n      });\n    }\n  };\n\n  for (var i = 0; i < locales.length; i++) {\n    _loop(i);\n  }\n\n  return output;\n};\n\nexport var I18NInput = function I18NInput(_ref2) {\n  var richText = _ref2.richText,\n      value = _ref2.value,\n      onChange = _ref2.onChange,\n      children = _ref2.children,\n      showTranslateIcon = _ref2.showTranslateIcon,\n      inputProps = _objectWithoutProperties(_ref2, [\"richText\", \"value\", \"onChange\", \"children\", \"showTranslateIcon\"]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\n  var _useI18N = useI18N(),\n      getLocale = _useI18N.getLocale,\n      getLocales = _useI18N.getLocales;\n\n  var openDialog = useCallback(function () {\n    var newValues = prepareII8NValues({\n      locales: getLocales(),\n      values: value && Array.isArray(value.values) ? value.values : []\n    });\n    setValues(newValues);\n  }, []);\n  var closeDialog = useCallback(function () {\n    setValues(null);\n  }, []);\n  var submitDialog = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = typeof onChange === \"function\";\n\n              if (!_context.t0) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return onChange(_objectSpread(_objectSpread({}, value), {}, {\n                values: values.filter(function (item) {\n                  return !!item.value;\n                })\n              }));\n\n            case 4:\n              closeDialog();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), []);\n  var inputValue = \"\";\n\n  if (value && Array.isArray(value.values)) {\n    var foundValue = value.values.find(function (item) {\n      return item.locale === getLocale().id;\n    });\n\n    if (foundValue) {\n      inputValue = foundValue.value;\n    }\n  }\n\n  var inputOnChange = function inputOnChange(inputValue) {\n    var newValue = cloneDeep(_objectSpread({\n      values: []\n    }, value));\n    var index = value ? value.values.findIndex(function (item) {\n      return item.locale === getLocale().id;\n    }) : -1;\n\n    if (index >= 0) {\n      newValue.values[index].value = inputValue;\n    } else {\n      newValue.values.push({\n        locale: getLocale().id,\n        value: inputValue\n      });\n    } // Filter out redundant empty values.\n\n\n    newValue.values = newValue.values.filter(function (item) {\n      return !!item.value;\n    });\n    typeof onChange === 'function' && onChange(newValue);\n  };\n\n  var translateMenuItem = useMemo(function () {\n    if (showTranslateIcon === false) {\n      return null;\n    }\n\n    return {\n      name: \"i18NInputLocalesOverlay\",\n      menu: {\n        render: function render(_ref4) {\n          var MenuButton = _ref4.MenuButton;\n          return /*#__PURE__*/React.createElement(MenuButton, {\n            right: true,\n            onClick: openDialog,\n            className: style.i18nRichEditorDialogIconButton\n          }, /*#__PURE__*/React.createElement(I18NIcon, null));\n        }\n      }\n    };\n  }, []);\n  var localesOverlay = /*#__PURE__*/React.createElement(I18NInputLocalesOverlay, {\n    richText: richText,\n    values: values,\n    open: !!values,\n    onClose: closeDialog,\n    onSubmit: submitDialog\n  });\n\n  if (typeof children === \"function\") {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children({\n      openDialog: openDialog\n    }), localesOverlay);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, richText ? /*#__PURE__*/React.createElement(I18NRichTextEditor, Object.assign({}, inputProps, {\n    value: inputValue,\n    onChange: inputOnChange,\n    plugins: showTranslateIcon !== false ? [translateMenuItem] : []\n  })) : /*#__PURE__*/React.createElement(Input, Object.assign({}, inputProps, {\n    value: inputValue,\n    onChange: inputOnChange,\n    className: classNames(inputProps.className, style.i18nDialogIconButton),\n    trailingIcon: showTranslateIcon !== false && /*#__PURE__*/React.createElement(Tooltip, {\n      content: /*#__PURE__*/React.createElement(\"span\", null, \"Set locale values\"),\n      placement: \"top\"\n    }, /*#__PURE__*/React.createElement(Icon, {\n      icon: /*#__PURE__*/React.createElement(I18NIcon, null),\n      onClick: openDialog\n    }))\n  })), localesOverlay);\n};","map":null,"metadata":{},"sourceType":"module"}