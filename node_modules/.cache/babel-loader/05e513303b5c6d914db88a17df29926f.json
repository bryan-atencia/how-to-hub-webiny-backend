{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from \"react\";\nimport BrowseFiles from \"react-butterfiles\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport styled from \"@emotion/styled\";\nimport classNames from \"classnames\";\nimport Image from \"./Image\";\nimport ImageEditorDialog from \"./ImageEditorDialog\";\nvar ImageUploadWrapper = /*#__PURE__*/styled(\"div\", {\n  target: \"e96x95k0\",\n  label: \"ImageUploadWrapper\"\n})({\n  position: \"relative\",\n  \".disabled\": {\n    opacity: 0.75,\n    pointerEvents: \"none\"\n  },\n  \".mdc-floating-label--float-above\": {\n    transform: \"scale(0.75)\",\n    top: 10,\n    left: 10,\n    color: \"var(--mdc-theme-text-secondary-on-background)\"\n  },\n  \".mdc-text-field-helper-text\": {\n    color: \"var(--mdc-theme-text-secondary-on-background)\"\n  }\n}); // Do not apply editing for following image types.\n\nvar noImageEditingTypes = [\"image/svg+xml\", \"image/gif\"];\nexport var SingleImageUpload = /*#__PURE__*/function (_React$Component) {\n  _inherits(SingleImageUpload, _React$Component);\n\n  var _super = _createSuper(SingleImageUpload);\n\n  function SingleImageUpload() {\n    var _this;\n\n    _classCallCheck(this, SingleImageUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false,\n      error: null,\n      imageEditor: {\n        open: false,\n        image: null\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFiles\", function (images) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          imageEditor = _this$props.imageEditor;\n      var image = {\n        name: images[0].name,\n        type: images[0].type,\n        size: images[0].size,\n        src: images[0].src.base64\n      };\n\n      _this.setState({\n        error: null\n      }, function () {\n        if (imageEditor && !noImageEditingTypes.includes(image.type)) {\n          _this.setState({\n            imageEditor: {\n              image: image,\n              open: true\n            }\n          });\n        } else {\n          onChange && onChange(image);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleErrors\", function (errors) {\n      var _errors = _slicedToArray(errors, 1),\n          error = _errors[0];\n\n      _this.setState({\n        error: error\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(SingleImageUpload, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          value = _this$props2.value,\n          validation = _this$props2.validation,\n          label = _this$props2.label,\n          description = _this$props2.description,\n          accept = _this$props2.accept,\n          maxSize = _this$props2.maxSize,\n          onChange = _this$props2.onChange,\n          imageEditor = _this$props2.imageEditor,\n          showRemoveImageButton = _this$props2.showRemoveImageButton,\n          renderImagePreview = _this$props2.renderImagePreview;\n      var imageEditorImageSrc = \"\";\n\n      if (this.state.imageEditor.image) {\n        imageEditorImageSrc = this.state.imageEditor.image.src;\n      }\n\n      var src = value ? value.src : null;\n      return /*#__PURE__*/React.createElement(ImageUploadWrapper, {\n        className: classNames(className)\n      }, label && !src && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mdc-floating-label mdc-floating-label--float-above\"\n      }, label), /*#__PURE__*/React.createElement(ImageEditorDialog, {\n        options: imageEditor,\n        open: this.state.imageEditor.open,\n        src: imageEditorImageSrc,\n        onClose: function onClose() {\n          _this2.setState(function (state) {\n            state.imageEditor.open = false;\n            return state;\n          });\n        },\n        onAccept: function onAccept(src) {\n          // We wrapped everything into setTimeout - prevents dialog freeze when larger image is selected.\n          setTimeout(function () {\n            _this2.setState({\n              loading: true\n            }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.t0 = onChange;\n\n                      if (!_context.t0) {\n                        _context.next = 4;\n                        break;\n                      }\n\n                      _context.next = 4;\n                      return onChange(_objectSpread(_objectSpread({}, _this2.state.imageEditor.image), {}, {\n                        src: src\n                      }));\n\n                    case 4:\n                      _this2.setState({\n                        loading: false,\n                        imageEditor: {\n                          image: null,\n                          open: false\n                        }\n                      });\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            })));\n          });\n        }\n      }), /*#__PURE__*/React.createElement(BrowseFiles, {\n        accept: accept,\n        maxSize: maxSize,\n        convertToBase64: true,\n        onSuccess: this.handleFiles,\n        onError: this.handleErrors\n      }, function (_ref2) {\n        var browseFiles = _ref2.browseFiles,\n            getDropZoneProps = _ref2.getDropZoneProps;\n        return /*#__PURE__*/React.createElement(\"div\", getDropZoneProps(), /*#__PURE__*/React.createElement(Image, {\n          renderImagePreview: renderImagePreview,\n          loading: _this2.state.loading,\n          value: value,\n          removeImage: showRemoveImageButton ? onChange : null,\n          uploadImage: browseFiles,\n          editImage: browseFiles\n        }));\n      }), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {\n        error: true\n      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description), this.state.error && /*#__PURE__*/React.createElement(FormElementMessage, {\n        error: true\n      }, this.props.errorMessages[this.state.error.type] || this.props.errorMessages.default));\n    }\n  }]);\n\n  return SingleImageUpload;\n}(React.Component);\n\n_defineProperty(SingleImageUpload, \"defaultProps\", {\n  validation: {\n    isValid: null\n  },\n  maxSize: \"10mb\",\n  imageEditor: {},\n  accept: [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/svg+xml\"],\n  showRemoveImageButton: true,\n  errorMessages: {\n    maxSizeExceeded: \"Max size exceeded.\",\n    multipleMaxSizeExceeded: \"Selected fields exceed max file size.\",\n    multipleNotAllowed: \"Multiple selection not allowed.\",\n    unsupportedFileType: \"Unsupported file type.\",\n    default: \"An error occurred.\"\n  }\n});","map":null,"metadata":{},"sourceType":"module"}