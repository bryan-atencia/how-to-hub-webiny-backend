{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nvar layerStyles = {\n  position: \"fixed\",\n  pointerEvents: \"none\",\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: \"100%\",\n  height: \"100%\"\n};\nvar subscribedToOffsetChange = false;\nvar dragPreviewRef = null;\n\nvar onOffsetChange = function onOffsetChange(monitor) {\n  return function () {\n    if (!dragPreviewRef) {\n      return;\n    }\n\n    var offset = monitor.getClientOffset();\n\n    if (!offset) {\n      return;\n    }\n\n    var transform = \"translate(\".concat(offset.x - 15, \"px, \").concat(offset.y - 15, \"px)\");\n    dragPreviewRef.style[\"transform\"] = transform;\n    dragPreviewRef.style[\"-webkit-transform\"] = transform;\n  };\n};\n\nexport default function DragPreview() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      dragHelperOpacity = _useState2[0],\n      setDragHelperOpacity = _useState2[1];\n\n  var _useDragLayer = useDragLayer(function (monitor) {\n    if (!subscribedToOffsetChange) {\n      // @ts-ignore\n      monitor.subscribeToOffsetChange(onOffsetChange(monitor));\n      subscribedToOffsetChange = true;\n    }\n\n    return {\n      isDragging: monitor.isDragging()\n    };\n  }),\n      isDragging = _useDragLayer.isDragging;\n\n  useEffect(function () {\n    return function () {\n      subscribedToOffsetChange = false;\n      dragPreviewRef = null;\n    };\n  }, []); // We track the value of \"isDragging\" and apply opacity=1 (after 100ms), when it switches to true.\n  // Without this, the drag cursor would be shown in the top-left corner for a short amount of time, and then it\n  // would be repositioned correctly. Definitely looks like a glitch. This also adds a nice little fade-in effect.\n\n  useEffect(function () {\n    if (isDragging) {\n      setTimeout(function () {\n        setDragHelperOpacity(isDragging ? 1 : 0);\n      }, 100);\n    } else {\n      setDragHelperOpacity(0);\n    }\n  }, [isDragging]);\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: layerStyles\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: function ref(el) {\n      return dragPreviewRef = el;\n    },\n    style: {\n      display: \"block\",\n      opacity: dragHelperOpacity,\n      transition: \"opacity .25s ease-in-out\"\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 30,\n      height: 30,\n      backgroundColor: \"var(--mdc-theme-primary)\",\n      borderRadius: \"50%\"\n    }\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}