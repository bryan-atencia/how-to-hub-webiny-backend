{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Fragment } from \"react\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { Form } from \"@webiny/form\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport { Dialog, DialogContent, DialogTitle, DialogCancel, DialogActions, DialogButton } from \"@webiny/ui/Dialog\";\nimport { validation } from \"@webiny/validation\";\nimport { Editor, Transforms, Range } from \"slate\";\nimport { ReactEditor } from \"slate-react\";\n\nvar getLink = function getLink(editor) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === \"link\";\n    }\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      item = _Editor$nodes2[0];\n\n  return item;\n};\n\nvar createLink = function createLink(data, children) {\n  return _objectSpread(_objectSpread({\n    type: \"link\"\n  }, data), {}, {\n    children: children\n  });\n};\n\nexport var LinkDialog = function LinkDialog(props) {\n  var editor = props.editor,\n      open = props.open,\n      closeDialog = props.closeDialog,\n      activePlugin = props.activePlugin;\n  var linkData = null;\n\n  if (activePlugin) {\n    Transforms.select(editor, activePlugin.selection);\n    var item = getLink(editor);\n\n    var _ref = Array.isArray(item) ? [item[0], item[1]] : [null, null],\n        _ref2 = _slicedToArray(_ref, 2),\n        link = _ref2[0],\n        path = _ref2[1];\n\n    var selectedText = \"\";\n\n    if (link) {\n      activePlugin.selection = {\n        anchor: Editor.start(editor, path),\n        focus: Editor.end(editor, path)\n      };\n    }\n\n    if (link) {\n      selectedText = link.children[0].text;\n    } else {\n      var _activePlugin$fragmen = _slicedToArray(activePlugin.fragment, 1),\n          fragment = _activePlugin$fragmen[0];\n\n      selectedText = fragment ? fragment.children[0].text : \"\";\n    }\n\n    linkData = _objectSpread(_objectSpread({}, link), {}, {\n      text: selectedText\n    });\n  }\n\n  var updateLink = useHandler(props, function (_ref3) {\n    var closeDialog = _ref3.closeDialog,\n        activePlugin = _ref3.activePlugin,\n        editor = _ref3.editor;\n    return function (_ref4) {\n      var text = _ref4.text,\n          data = _objectWithoutProperties(_ref4, [\"text\"]);\n\n      var selection = activePlugin.selection;\n      Transforms.select(editor, selection);\n      var isCollapsed = selection && Range.isCollapsed(selection);\n      var existingLink = getLink(editor);\n\n      if (existingLink) {\n        var _path = ReactEditor.findPath(editor, existingLink[0]);\n\n        Transforms.setNodes(editor, createLink(data, [{\n          text: text\n        }]), {\n          at: _path\n        });\n        Transforms.insertText(editor, text, {\n          at: _path\n        });\n      } else if (isCollapsed) {\n        Transforms.insertNodes(editor, createLink(data, [{\n          text: text\n        }]));\n      } else {\n        Transforms.wrapNodes(editor, createLink(data, []), {\n          split: true,\n          at: selection\n        });\n        Transforms.collapse(editor, {\n          edge: \"end\"\n        });\n      }\n\n      Transforms.deselect(editor);\n      closeDialog();\n    };\n  }); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  var _ref5 = linkData || {},\n      children = _ref5.children,\n      type = _ref5.type,\n      formData = _objectWithoutProperties(_ref5, [\"children\", \"type\"]);\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: closeDialog,\n    style: {\n      zIndex: 11000\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    data: formData,\n    onSubmit: updateLink\n  }, function (_ref6) {\n    var Bind = _ref6.Bind,\n        submit = _ref6.submit;\n    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, null, \"Edit Link\"), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"text\",\n      validators: validation.create(\"required\")\n    }, /*#__PURE__*/React.createElement(Input, {\n      label: \"Text to display\"\n    }))), /*#__PURE__*/React.createElement(Cell, {\n      span: 12\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"href\",\n      validators: validation.create(\"required,url:allowRelative\")\n    }, /*#__PURE__*/React.createElement(Input, {\n      label: \"URL\"\n    }))), /*#__PURE__*/React.createElement(Cell, {\n      span: 6\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"newTab\"\n    }, /*#__PURE__*/React.createElement(Switch, {\n      onChange: function onChange() {\n        return submit();\n      },\n      label: \"Open in new window\"\n    }))), /*#__PURE__*/React.createElement(Cell, {\n      span: 6\n    }, /*#__PURE__*/React.createElement(Bind, {\n      name: \"noFollow\"\n    }, /*#__PURE__*/React.createElement(Switch, {\n      onChange: function onChange() {\n        return submit();\n      },\n      label: \"Add \\\"rel=nofollow\\\"\"\n    }))))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, {\n      onClick: closeDialog\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(DialogButton, {\n      onClick: submit\n    }, \"OK\")));\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}