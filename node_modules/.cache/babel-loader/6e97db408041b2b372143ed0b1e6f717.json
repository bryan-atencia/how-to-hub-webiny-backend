{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from \"react\";\nimport { ReactComponent as AlignCenterIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_center.svg\";\nimport { ReactComponent as AlignLeftIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_left.svg\";\nimport { ReactComponent as AlignJustifyIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_justify.svg\";\nimport { ReactComponent as AlignRightIcon } from \"@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_right.svg\";\nimport TypographySelector from \"./TypographySelector\"; // Icons map for dynamic render\n\nvar icons = {\n  left: AlignLeftIcon,\n  center: AlignCenterIcon,\n  right: AlignRightIcon,\n  justify: AlignJustifyIcon\n}; // Alignment types for faster access\n\nvar alignments = Object.keys(icons);\n\nvar setAlign = function setAlign(align, blockType, onChange, editor) {\n  editor.change(function (change) {\n    change.setBlocks({\n      type: blockType,\n      data: {\n        align: align\n      }\n    }).focus();\n    onChange(change);\n    return change;\n  });\n};\n\nexport default (function () {\n  return {\n    menu: [{\n      name: \"pb-editor-slate-menu-item-typography\",\n      type: \"pb-editor-slate-menu-item\",\n      render: function render(_ref) {\n        var MenuButton = _ref.MenuButton,\n            props = _objectWithoutProperties(_ref, [\"MenuButton\"]);\n\n        return /*#__PURE__*/React.createElement(MenuButton, null, /*#__PURE__*/React.createElement(TypographySelector, props));\n      }\n    }, {\n      name: \"pb-editor-slate-menu-item-align\",\n      type: \"pb-editor-slate-menu-item\",\n      render: function render(_ref2) {\n        var MenuButton = _ref2.MenuButton,\n            editor = _ref2.editor,\n            onChange = _ref2.onChange;\n        var block = editor.value.blocks.first();\n        var align = block.data.get(\"align\") || \"left\";\n        var nextAlign = alignments[alignments.indexOf(align) + 1] || \"left\";\n        return (\n          /*#__PURE__*/\n          // eslint-disable-next-line react/jsx-no-bind\n          React.createElement(MenuButton, {\n            onClick: function onClick() {\n              return setAlign(nextAlign, block.type, onChange, editor);\n            }\n          }, /*#__PURE__*/React.createElement(icons[align]))\n        );\n      }\n    }],\n    editor: [{\n      name: \"pb-editor-slate-editor-typography\",\n      type: \"pb-editor-slate-editor\",\n      slate: {\n        renderNode: function renderNode(props, next) {\n          var attributes = props.attributes,\n              children = props.children,\n              node = props.node,\n              editor = props.editor; // @ts-ignore\n\n          var type = node.type; // @ts-ignore\n\n          var typography = editor.props.theme.typography;\n\n          if (typography.hasOwnProperty(type) && typography[type].component) {\n            var _typography$type = typography[type],\n                Component = _typography$type.component,\n                _typography$type$clas = _typography$type.className,\n                className = _typography$type$clas === void 0 ? null : _typography$type$clas;\n\n            var nodeProps = _objectSpread(_objectSpread({}, attributes), {}, {\n              className: className,\n              // @ts-ignore\n              style: {\n                textAlign: \"\".concat(node.data.get(\"align\"))\n              }\n            });\n\n            if (typeof Component !== \"string\") {\n              nodeProps = props;\n            }\n\n            return /*#__PURE__*/React.createElement(Component, nodeProps, children);\n          }\n\n          return next();\n        }\n      }\n    }]\n  };\n});","map":null,"metadata":{},"sourceType":"module"}