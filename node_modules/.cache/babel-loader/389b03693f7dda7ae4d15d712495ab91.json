{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { MDCRadioFoundation } from '@material/radio';\nimport { componentFactory } from '@rmwc/base';\nimport { withRipple } from '@rmwc/ripple';\nimport { ToggleableFoundationComponent } from '@rmwc/toggleable';\nvar RadioRoot = withRipple({\n  unbounded: true,\n  accent: true\n})(componentFactory({\n  displayName: 'RadioRoot',\n  classNames: function classNames(props) {\n    return ['mdc-radio', {\n      'mdc-radio--disabled': props.disabled\n    }];\n  }\n}));\nvar RadioNativeControl = componentFactory({\n  displayName: 'RadioNativeControl',\n  defaultProps: {\n    type: 'radio'\n  },\n  tag: 'input',\n  classNames: ['mdc-radio__native-control']\n});\n\nvar RadioBackground =\n/** @class */\nfunction (_super) {\n  __extends(RadioBackground, _super);\n\n  function RadioBackground() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RadioBackground.prototype.shouldComponentUpdate = function () {\n    return false;\n  };\n\n  RadioBackground.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: \"mdc-radio__background\"\n    }, React.createElement(\"div\", {\n      className: \"mdc-radio__outer-circle\"\n    }), React.createElement(\"div\", {\n      className: \"mdc-radio__inner-circle\"\n    }));\n  };\n\n  RadioBackground.displayName = 'RadioBackground';\n  return RadioBackground;\n}(React.Component);\n/** A Radio button component. */\n\n\nvar Radio =\n/** @class */\nfunction (_super) {\n  __extends(Radio, _super);\n\n  function Radio() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.root = _this.createElement('root');\n    return _this;\n  }\n\n  Radio.prototype.getDefaultFoundation = function () {\n    var _this = this;\n\n    return new MDCRadioFoundation({\n      addClass: function addClass(className) {\n        return _this.root.addClass(className);\n      },\n      removeClass: function removeClass(className) {\n        return _this.root.removeClass(className);\n      }\n    });\n  };\n\n  Radio.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        label = _a.label,\n        style = _a.style,\n        inputRef = _a.inputRef,\n        rest = __rest(_a, [\"children\", \"className\", \"label\", \"style\", \"inputRef\"]);\n\n    var radio = React.createElement(RadioRoot, __assign({}, this.toggleRootProps, {\n      ref: this.root.setRef\n    }), React.createElement(RadioNativeControl, __assign({}, rest, {\n      id: this.id,\n      ref: inputRef\n    })), React.createElement(RadioBackground, null));\n    return this.renderToggle(radio);\n  };\n\n  Radio.displayName = 'Radio';\n  return Radio;\n}(ToggleableFoundationComponent);\n\nexport { Radio };","map":null,"metadata":{},"sourceType":"module"}