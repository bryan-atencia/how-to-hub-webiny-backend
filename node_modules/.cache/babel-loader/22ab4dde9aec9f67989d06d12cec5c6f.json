{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _get from \"lodash/get\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport React, { useEffect, useRef, useMemo } from \"react\";\nimport { useApolloClient } from \"react-apollo\";\nimport { createReCaptchaComponent, createTermsOfServiceComponent } from \"./components\";\nimport { createFormSubmission, handleFormTriggers, onFormMounted, reCaptchaEnabled, termsOfServiceEnabled } from \"./functions\";\n\nvar FormRender = function FormRender(props) {\n  var theme = useMemo(function () {\n    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(getPlugins(\"pb-theme\").map(function (pl) {\n      return pl.theme;\n    }))));\n  }, []);\n  var client = useApolloClient();\n  var data = props.data || {};\n  useEffect(function () {\n    if (data.id) {\n      onFormMounted(_objectSpread(_objectSpread({}, props), {}, {\n        client: client\n      }));\n    }\n  }, [data.id]);\n  var reCaptchaResponseToken = useRef(\"\");\n  var termsOfServiceAccepted = useRef(false);\n\n  if (!data.id) {\n    return null;\n  }\n\n  var formData = _cloneDeep(data);\n\n  var layout = formData.layout,\n      fields = formData.fields,\n      settings = formData.settings;\n\n  var getFieldById = function getFieldById(id) {\n    return fields.find(function (field) {\n      return field._id === id;\n    });\n  };\n\n  var getFieldByFieldId = function getFieldByFieldId(id) {\n    return fields.find(function (field) {\n      return field.fieldId === id;\n    });\n  };\n\n  var getFields = function getFields() {\n    var fields = _cloneDeep(layout);\n\n    var validatorPlugins = getPlugins(\"form-field-validator\");\n    fields.forEach(function (row) {\n      row.forEach(function (id, idIndex) {\n        row[idIndex] = getFieldById(id);\n        row[idIndex].validators = row[idIndex].validation.map(function (item) {\n          var validatorPlugin = validatorPlugins.find(function (plugin) {\n            return plugin.validator.name === item.name;\n          });\n\n          if (!validatorPlugin || typeof validatorPlugin.validator.validate !== \"function\") {\n            return;\n          }\n\n          return /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n              var isInvalid, result;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      isInvalid = true;\n                      _context.prev = 1;\n                      _context.next = 4;\n                      return validatorPlugin.validator.validate(value, item);\n\n                    case 4:\n                      result = _context.sent;\n                      isInvalid = result === false;\n                      _context.next = 11;\n                      break;\n\n                    case 8:\n                      _context.prev = 8;\n                      _context.t0 = _context[\"catch\"](1);\n                      isInvalid = true;\n\n                    case 11:\n                      if (!isInvalid) {\n                        _context.next = 13;\n                        break;\n                      }\n\n                      throw new Error(I18NValue({\n                        value: item.message\n                      }) || \"Invalid value.\");\n\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[1, 8]]);\n            }));\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }();\n        }).filter(Boolean);\n      });\n    });\n    return fields;\n  };\n\n  var getDefaultValues = function getDefaultValues() {\n    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var values = {};\n    fields.forEach(function (field) {\n      var fieldId = field.fieldId;\n\n      if (fieldId && \"defaultValue\" in field.settings && typeof field.settings.defaultValue !== \"undefined\") {\n        values[fieldId] = field.settings.defaultValue;\n      }\n    });\n    return _objectSpread(_objectSpread({}, values), overrides);\n  };\n\n  var submit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n      var formSubmission;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(reCaptchaEnabled(formData) && !reCaptchaResponseToken.current)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                data: null,\n                preview: Boolean(props.preview),\n                error: {\n                  code: \"RECAPTCHA_NOT_PASSED\",\n                  message: settings.reCaptcha.errorMessage\n                }\n              });\n\n            case 2:\n              if (!(termsOfServiceEnabled(formData) && !termsOfServiceAccepted.current)) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                data: null,\n                preview: Boolean(props.preview),\n                error: {\n                  code: \"TOS_NOT_ACCEPTED\",\n                  message: settings.termsOfServiceMessage.errorMessage\n                }\n              });\n\n            case 4:\n              _context2.next = 6;\n              return createFormSubmission({\n                client: client,\n                props: props,\n                data: data,\n                reCaptchaResponseToken: reCaptchaResponseToken.current\n              });\n\n            case 6:\n              formSubmission = _context2.sent;\n              _context2.next = 9;\n              return handleFormTriggers({\n                props: props,\n                data: data,\n                formSubmission: formSubmission\n              });\n\n            case 9:\n              return _context2.abrupt(\"return\", formSubmission);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function submit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var layouts = React.useMemo(function () {\n    return [].concat(_toConsumableArray(_get(theme, \"forms.layouts\") || []), _toConsumableArray(getPlugins(\"form-layout\").map(function (pl) {\n      return pl.layout;\n    }))).reduce(function (acc, item) {\n      if (!acc.find(function (l) {\n        return l.name === item.name;\n      })) {\n        acc.push(item);\n      }\n\n      return acc;\n    }, []);\n  }, []); // Get form layout, defined in theme.\n\n  var LayoutRenderComponent = layouts.find(function (item) {\n    return item.name === settings.layout.renderer;\n  });\n\n  if (!LayoutRenderComponent) {\n    return /*#__PURE__*/React.createElement(\"span\", null, \"Cannot render form, layout missing.\");\n  }\n\n  LayoutRenderComponent = LayoutRenderComponent.component;\n  var ReCaptcha = createReCaptchaComponent({\n    props: props,\n    formData: formData,\n    setResponseToken: function setResponseToken(value) {\n      return reCaptchaResponseToken.current = value;\n    }\n  });\n  var TermsOfService = createTermsOfServiceComponent({\n    props: props,\n    formData: formData,\n    setTermsOfServiceAccepted: function setTermsOfServiceAccepted(value) {\n      return termsOfServiceAccepted.current = value;\n    }\n  });\n  var layoutProps = {\n    getFieldById: getFieldById,\n    getFieldByFieldId: getFieldByFieldId,\n    getDefaultValues: getDefaultValues,\n    getFields: getFields,\n    submit: submit,\n    formData: formData,\n    ReCaptcha: ReCaptcha,\n    TermsOfService: TermsOfService\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ssr-cache\", {\n    \"data-class\": \"fb-form\",\n    \"data-id\": data.parent\n  }), /*#__PURE__*/React.createElement(LayoutRenderComponent, layoutProps));\n};\n\nexport default FormRender;","map":null,"metadata":{},"sourceType":"module"}