{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Select a file\\\"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport fileIcon from \"../../fields/icons/round_insert_drive_file-24px.svg\";\nimport { createRenderImagePreview, imageWrapperStyles, imageExtensions } from \"./utils\";\nimport { i18n } from \"@webiny/app/i18n\";\nvar t = i18n.ns(\"app-headless-cms/admin/fields/file\");\nvar imagePreviewProps = {\n  transform: {\n    width: 300\n  },\n  style: {\n    width: \"100%\",\n    height: 232,\n    objectFit: \"cover\"\n  }\n};\n\nvar MultipleFile = function MultipleFile(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isImage = _useState2[0],\n      setIsImage = _useState2[1]; // Update `previewURL`\n\n\n  useEffect(function () {\n    if (props.bind.value && props.bind.value.includes(\"http\")) {\n      var key = props.bind.value.split(\"/\").pop();\n\n      if (props.previewURLs[key] === undefined) {\n        props.setPreviewURLs(_objectSpread(_objectSpread({}, props.previewURLs), {}, _defineProperty({}, key, null)));\n      }\n    }\n  }, [props.bind.value, props.previewURLs]); // Update `isImage`\n\n  useEffect(function () {\n    if (props.bind.value) {\n      setIsImage(imageExtensions.some(function (extension) {\n        return props.bind.value.includes(extension);\n      }));\n    }\n  }, [props.bind.value]);\n  var getImageSrc = useCallback(function () {\n    if (imageExtensions.some(function (extension) {\n      return props.bind.value.includes(extension);\n    })) {\n      return props.bind.value;\n    }\n\n    return fileIcon;\n  }, [props.bind.value]);\n  var getValue = useCallback(function () {\n    if (!props.bind.value) {\n      return props.bind.value;\n    }\n\n    return {\n      src: props.previewURLs[props.bind.value] || getImageSrc()\n    };\n  }, [props.previewURLs, props.bind.value]);\n  return /*#__PURE__*/React.createElement(FileUpload, Object.assign({}, props.bind, {\n    onChange: function onChange(value) {\n      if (value !== null) {\n        var keys = value.map(function (file) {\n          return file.key;\n        });\n\n        var newPreviewURLs = _objectSpread({}, props.previewURLs);\n\n        if (keys.length === 1) {\n          props.bind.onChange(keys[0]);\n          newPreviewURLs[keys[0]] = value[0].src;\n        } else {\n          props.appendValue(keys);\n          value.forEach(function (file) {\n            newPreviewURLs[file.key] = file.src;\n          });\n        }\n\n        props.setPreviewURLs(newPreviewURLs);\n      } else {\n        props.removeValue();\n        props.setPreviewURLs(_objectSpread(_objectSpread({}, props.previewURLs), {}, _defineProperty({}, props.bind.value, null)));\n      }\n    },\n    value: getValue(),\n    imagePreviewProps: imagePreviewProps,\n    multiple: props.field.multipleValues,\n    placeholder: t(_templateObject()),\n    className: imageWrapperStyles,\n    renderImagePreview: !isImage && createRenderImagePreview({\n      value: props.bind.value,\n      imagePreviewProps: imagePreviewProps\n    })\n  }));\n};\n\nexport default MultipleFile;","map":null,"metadata":{},"sourceType":"module"}