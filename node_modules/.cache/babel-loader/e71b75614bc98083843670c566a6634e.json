{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport Input from \"./Input\";\nimport Select from \"./Select\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { UTC_TIMEZONES, DEFAULT_TIME, DEFAULT_DATE, DEFAULT_TIMEZONE, appendTextToLabel, RemoveFieldButton } from \"./utils\";\n\nvar DateTimeWithTimezone = function DateTimeWithTimezone(props) {\n  // \"2020-05-18T09:00+10:00\"\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      date = _React$useState2[0],\n      setDate = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      time = _React$useState4[0],\n      setTime = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      timezone = _React$useState6[0],\n      setTimezone = _React$useState6[1];\n\n  React.useEffect(function () {\n    if (props.bind.value === null) {\n      // Set initial values\n      setDate(DEFAULT_DATE);\n      setTime(DEFAULT_TIME);\n      setTimezone(DEFAULT_TIMEZONE);\n      return;\n    }\n\n    var _props$bind$value$spl = props.bind.value.split(\"T\"),\n        _props$bind$value$spl2 = _slicedToArray(_props$bind$value$spl, 2),\n        isoDate = _props$bind$value$spl2[0],\n        rest = _props$bind$value$spl2[1];\n\n    var sign = rest.includes(\"+\") ? \"+\" : \"-\";\n\n    var _rest$split = rest.split(sign),\n        _rest$split2 = _slicedToArray(_rest$split, 2),\n        fullTime = _rest$split2[0],\n        zone = _rest$split2[1];\n\n    var formattedDate = isoDate;\n    var formattedTime = fullTime;\n    var formattedTimezone = sign + zone; // Set previously saved values\n\n    if (date !== formattedDate) {\n      setDate(formattedDate);\n    }\n\n    if (time !== formattedTime) {\n      setTime(formattedTime);\n    }\n\n    if (timezone !== formattedTimezone) {\n      setTimezone(formattedTimezone);\n    }\n  }, [props.bind.value]);\n  var cellSize = props.trailingIcon ? 3 : 4;\n  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {\n    span: 4\n  }, /*#__PURE__*/React.createElement(Input, {\n    bind: _objectSpread(_objectSpread({}, props.bind), {}, {\n      value: date,\n      onChange: function onChange(value) {\n        setDate(value);\n        return props.bind.onChange(\"\".concat(value, \"T\").concat(time).concat(timezone));\n      }\n    }),\n    field: _objectSpread(_objectSpread({}, props.field), {}, {\n      label: appendTextToLabel(props.field.label, \" date\")\n    }),\n    type: \"date\"\n  })), /*#__PURE__*/React.createElement(Cell, {\n    span: 4\n  }, /*#__PURE__*/React.createElement(Input, {\n    bind: _objectSpread(_objectSpread({}, props.bind), {}, {\n      value: time,\n      onChange: function onChange(value) {\n        setTime(value);\n        return props.bind.onChange(\"\".concat(date, \"T\").concat(value).concat(timezone));\n      }\n    }),\n    field: _objectSpread(_objectSpread({}, props.field), {}, {\n      label: appendTextToLabel(props.field.label, \" time\")\n    }),\n    type: \"time\",\n    step: 5\n  })), /*#__PURE__*/React.createElement(Cell, {\n    span: cellSize\n  }, /*#__PURE__*/React.createElement(Select, {\n    label: \"Timezone\",\n    value: timezone,\n    onChange: function onChange(value) {\n      setTimezone(value);\n      return props.bind.onChange(\"\".concat(date, \"T\").concat(time).concat(value));\n    },\n    options: UTC_TIMEZONES.map(function (t) {\n      return {\n        value: t.value,\n        label: t.label\n      };\n    })\n  })), /*#__PURE__*/React.createElement(RemoveFieldButton, {\n    trailingIcon: props.trailingIcon\n  }));\n};\n\nexport default DateTimeWithTimezone;","map":null,"metadata":{},"sourceType":"module"}