{"ast":null,"code":"import _get from \"lodash/get\";\nimport invariant from \"invariant\";\nimport { getPlugin } from \"@webiny/plugins\";\n\nvar getPluginType = function getPluginType(name) {\n  var plugin = getPlugin(name);\n  return plugin ? plugin.type : null;\n};\n/**\n * Get editor `ui` state\n */\n\n\nexport var getUi = function getUi(state) {\n  return state.ui || {};\n};\n/**\n * Get editor `page` state\n */\n\nexport var getPage = function getPage(state) {\n  return state.page || {};\n};\n/**\n * Get editor `revisions` state\n */\n\nexport var getRevisions = function getRevisions(state) {\n  return state.revisions || [];\n};\n/**\n * Get editor content.\n */\n\nexport var getContent = function getContent(state) {\n  var page = getPage(state);\n\n  if (page.content && page.content.present) {\n    return page.content.present;\n  } else if (page.content) {\n    return page.content;\n  }\n\n  var document = getPlugin(\"pb-editor-page-element-document\");\n  invariant(document, \"\\\"pb-editor-page-element-document\\\" plugin must exist for Page Builder to work!\");\n  return document.create();\n};\n/**\n * Get element and all of its children recursively.\n * WARNING: use carefully as this makes render optimization really difficult when used in `connect`!\n */\n\nexport var getElementWithChildren = function getElementWithChildren(state, id) {\n  var element = getElement(state, id);\n\n  if (!element) {\n    return null;\n  }\n\n  var content = getContent(state);\n  return _get(content, element.path.replace(/\\./g, \".elements.\").slice(2));\n};\n/**\n * Get element by ID or path.\n * @param state\n * @param id ID or path of the element\n */\n\nexport var getElement = function getElement(state, id) {\n  if (state.elements.hasOwnProperty(id)) {\n    return state.elements[id];\n  } // Find by path\n\n\n  return Object.values(state.elements).find(function (el) {\n    return el.path === id;\n  });\n};\n/**\n * Get parent element and all of its children recursively\n * WARNING: use carefully as this makes render optimization really difficult when used in `connect`!\n * @param state\n * @param id\n * @returns {*}\n */\n\nexport var getParentElementWithChildren = function getParentElementWithChildren(state, id) {\n  var element = getElement(state, id);\n  var content = getContent(state);\n  var parentPaths = element.path.split(\".\").slice(0, -1);\n\n  if (parentPaths.length === 1) {\n    return content;\n  }\n\n  return _get(content, parentPaths.join(\".elements.\").slice(2));\n};\nexport var getActiveElement = function getActiveElement(state) {\n  return getElement(state, getActiveElementId(state));\n};\n/**\n * Get active element ID.\n */\n\nexport var getActiveElementId = function getActiveElementId(state) {\n  return getUi(state).activeElement;\n};\n/**\n * Get editor plugins (this mostly contains UI state).\n */\n\nexport var getPlugins = function getPlugins(state) {\n  return getUi(state).plugins || {};\n};\n/**\n * Get editor plugins of certain type (this mostly contains UI state).\n */\n\nexport var getPluginsByType = function getPluginsByType(type) {\n  return function (state) {\n    return getPlugins(state)[type] || [];\n  };\n};\n/**\n * Get an active plugin of the given type.\n */\n\nexport var getActivePlugins = function getActivePlugins(type) {\n  var pluginsByType = getPluginsByType(type);\n  return function (state) {\n    return pluginsByType(state) || [];\n  };\n};\n/**\n * Get active plugin params\n */\n\nexport var getActivePluginParams = function getActivePluginParams(name) {\n  var type = getPluginType(name);\n\n  if (typeof type !== \"string\") {\n    return null;\n  }\n\n  var pluginsByType = getPluginsByType(type);\n  return function (state) {\n    var plugins = pluginsByType(state);\n\n    if (plugins) {\n      var plugin = plugins.find(function (pl) {\n        return pl.name === name;\n      });\n      return plugin ? plugin.params : null;\n    }\n\n    return null;\n  };\n};\nexport var isPluginActive = function isPluginActive(name) {\n  var type = getPluginType(name);\n\n  if (typeof type !== \"string\") {\n    // eslint-disable-next-line\n    return function (state) {\n      return false;\n    };\n  }\n\n  var pluginsByType = getPluginsByType(type);\n  return function (state) {\n    return Boolean(pluginsByType(state).find(function (pl) {\n      return pl.name === name;\n    }));\n  };\n};\n/**\n * Get dragging state.\n */\n\nexport var getIsDragging = function getIsDragging(state) {\n  return getUi(state).dragging;\n};\n/**\n * Get props that need to be passed to an <Element>.\n */\n\nexport var getElementProps = function getElementProps(state, _ref) {\n  var id = _ref.id;\n\n  var _getUi = getUi(state),\n      activeElement = _getUi.activeElement,\n      highlightElement = _getUi.highlightElement,\n      resizing = _getUi.resizing,\n      dragging = _getUi.dragging;\n\n  var element = state.elements[id];\n  var active = activeElement && activeElement === element.id;\n  var highlight = active || highlightElement && highlightElement === id;\n  return {\n    active: active,\n    highlight: highlight && !dragging && !resizing\n  };\n};","map":null,"metadata":{},"sourceType":"module"}