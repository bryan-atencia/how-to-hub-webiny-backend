{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _get from \"lodash/get\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { useRouter } from \"@webiny/react-router\";\nimport styled from \"@emotion/styled\";\nimport { renderPlugins } from \"@webiny/app/plugins\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { createReadQuery, createListRevisionsQuery } from \"@webiny/app-headless-cms/admin/components/ContentModelForm/graphql\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nvar DetailsContainer = /*#__PURE__*/styled(\"div\", {\n  target: \"e46f7jz0\",\n  label: \"DetailsContainer\"\n})({\n  overflow: \"hidden\",\n  position: \"relative\",\n  nav: {\n    backgroundColor: \"var(--mdc-theme-surface)\"\n  }\n});\n\nvar ContentDetails = function ContentDetails(_ref) {\n  var contentModel = _ref.contentModel,\n      dataList = _ref.dataList;\n\n  var _useRouter = useRouter(),\n      history = _useRouter.history,\n      location = _useRouter.location;\n\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var i18n = useI18N();\n\n  var _useState3 = useState(i18n.getLocale().id),\n      _useState4 = _slicedToArray(_useState3, 2),\n      locale = _useState4[0],\n      setLocale = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var query = new URLSearchParams(location.search);\n  var contentId = query.get(\"id\");\n\n  var _useMemo = useMemo(function () {\n    return {\n      READ_CONTENT: createReadQuery(contentModel),\n      LIST_REVISIONS: createListRevisionsQuery(contentModel)\n    };\n  }, [contentModel.modelId]),\n      READ_CONTENT = _useMemo.READ_CONTENT,\n      LIST_REVISIONS = _useMemo.LIST_REVISIONS;\n\n  var _useQuery = useQuery(READ_CONTENT, {\n    variables: {\n      id: contentId\n    },\n    skip: !contentId,\n    onCompleted: function onCompleted(data) {\n      var error = _get(data, \"content.error.message\");\n\n      if (error) {\n        query.delete(\"id\");\n        history.push({\n          search: query.toString()\n        });\n        showSnackbar(error);\n      }\n    }\n  }),\n      data = _useQuery.data,\n      readQueryLoading = _useQuery.loading;\n\n  var getLocale = useCallback(function () {\n    return locale;\n  }, [locale]);\n  var getLoading = useCallback(function () {\n    return readQueryLoading || loading;\n  }, [loading, readQueryLoading]);\n  var content = _get(data, \"content.data\") || {};\n\n  var contentParent = _get(content, \"meta.parent\");\n\n  var revisionsList = useQuery(LIST_REVISIONS, {\n    skip: !contentParent,\n    variables: {\n      id: contentParent\n    }\n  });\n  return /*#__PURE__*/React.createElement(DetailsContainer, null, /*#__PURE__*/React.createElement(\"test-id\", {\n    \"data-testid\": \"cms-content-details\"\n  }, renderPlugins(\"cms-content-details\", {\n    getLocale: getLocale,\n    setLocale: setLocale,\n    setLoading: setLoading,\n    getLoading: getLoading,\n    dataList: dataList,\n    content: content,\n    contentModel: contentModel,\n    revisionsList: revisionsList,\n    state: state,\n    setState: setState\n  })));\n};\n\nexport default ContentDetails;","map":null,"metadata":{},"sourceType":"module"}