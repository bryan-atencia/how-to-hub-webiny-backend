{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { componentFactory, FoundationComponent } from '@rmwc/base';\nimport { MDCModalDrawerFoundation, MDCDismissibleDrawerFoundation } from '@material/drawer';\nimport { createFocusTrap } from '@rmwc/base';\n/** An optional header for the Drawer. */\n\nexport var DrawerHeader = componentFactory({\n  displayName: 'DrawerHeader',\n  classNames: ['mdc-drawer__header']\n});\n/** An title for the DrawerHeader. */\n\nexport var DrawerTitle = componentFactory({\n  displayName: 'DrawerTitle',\n  classNames: ['mdc-drawer__title']\n});\n/** A subtitle for the DrawerHeader. */\n\nexport var DrawerSubtitle = componentFactory({\n  displayName: 'DrawerSubtitle',\n  classNames: ['mdc-drawer__subtitle']\n});\n/** Content for Drawers. */\n\nexport var DrawerContent = componentFactory({\n  displayName: 'DrawerContent',\n  classNames: ['mdc-drawer__content']\n});\n/***************************************************************************************\n * Drawer Scrim\n ***************************************************************************************/\n\n/** Protects the app's UI from interactions while a modal drawer is open. */\n\nvar DrawerScrim = function (_a) {\n  var onClick = _a.onClick;\n  return React.createElement(\"div\", {\n    className: \"mdc-drawer-scrim\",\n    onClick: onClick\n  });\n};\n/** For the Dismissible variant only. Sibling element that is resized when the drawer opens/closes. */\n\n\nexport var DrawerAppContent = componentFactory({\n  displayName: 'DrawerAppContent',\n  classNames: ['mdc-drawer-app-content']\n});\nexport var DrawerRoot = componentFactory({\n  displayName: 'DrawerRoot',\n  tag: 'aside',\n  classNames: function (props) {\n    return ['mdc-drawer', {\n      'mdc-drawer--dismissible': props.dismissible,\n      'mdc-drawer--modal': props.modal\n    }];\n  },\n  consumeProps: ['dismissible', 'modal']\n});\n\nvar slidableDrawerFactory = function (MDCConstructor, displayName) {\n  var _a;\n\n  return _a =\n  /** @class */\n  function (_super) {\n    __extends(class_1, _super);\n\n    function class_1(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this.root = _this.createElement('root');\n      _this.previousFocus = null;\n      _this.focusTrap = null;\n      ['handleScrimClick', 'handleTransitionEnd', 'handleKeyDown'].forEach(function (k) {\n        _this[k] = _this[k].bind(_this);\n      });\n      return _this;\n    }\n\n    class_1.prototype.componentDidMount = function () {\n      _super.prototype.componentDidMount.call(this);\n\n      this.root.ref && (this.focusTrap = createFocusTrap(this.root.ref, {\n        clickOutsideDeactivates: true,\n        initialFocus: undefined,\n        escapeDeactivates: false,\n        returnFocusOnDeactivate: false\n      }));\n    };\n\n    class_1.prototype.getDefaultFoundation = function () {\n      var _this = this;\n      /** @type {!MDCDrawerAdapter} */\n\n\n      var adapter =\n      /** @type {!MDCDrawerAdapter} */\n      {\n        addClass: function (className) {\n          return _this.root.addClass(className);\n        },\n        removeClass: function (className) {\n          return _this.root.removeClass(className);\n        },\n        hasClass: function (className) {\n          return _this.root.hasClass(className);\n        },\n        elementHasClass: function (element, className) {\n          return element.classList.contains(className);\n        },\n        saveFocus: function () {\n          _this.previousFocus = document.activeElement;\n        },\n        restoreFocus: function () {\n          var previousFocus = _this.previousFocus && _this.previousFocus.focus;\n\n          if (_this.root.ref && _this.root.ref.contains(document.activeElement) && previousFocus) {\n            _this.previousFocus && _this.previousFocus.focus();\n          }\n        },\n        focusActiveNavigationItem: function () {\n          var activeNavItemEl = _this.root.ref && _this.root.ref.querySelector(\".mdc-list-item--activated\");\n\n          if (activeNavItemEl) {\n            activeNavItemEl.focus();\n          }\n        },\n        notifyClose: function () {\n          return _this.emit('onClose', {}, true\n          /* shouldBubble */\n          );\n        },\n        notifyOpen: function () {\n          return _this.emit('onOpen', {}, true\n          /* shouldBubble */\n          );\n        },\n        trapFocus: function () {\n          try {\n            _this.focusTrap && _this.focusTrap.activate();\n          } catch (err) {}\n        },\n        releaseFocus: function () {\n          try {\n            _this.focusTrap && _this.focusTrap.deactivate();\n          } catch (err) {}\n        }\n      };\n      return new MDCConstructor(adapter);\n    };\n\n    class_1.prototype.handleScrimClick = function () {\n      'handleScrimClick' in this.foundation && this.foundation.handleScrimClick();\n    };\n\n    class_1.prototype.handleKeyDown = function (evt) {\n      this.props.onKeyDown && this.props.onKeyDown(evt);\n      this.foundation.handleKeydown(evt);\n    };\n\n    class_1.prototype.handleTransitionEnd = function (evt) {\n      this.props.onTransitionEnd && this.props.onTransitionEnd(evt);\n      this.foundation.handleTransitionEnd(evt);\n    };\n\n    class_1.prototype.sync = function (props, prevProps) {\n      if (props.open !== prevProps.open) {\n        props.open ? this.foundation.open() : this.foundation.close();\n      }\n    };\n\n    class_1.prototype.render = function () {\n      var _a = this.props,\n          onOpen = _a.onOpen,\n          onClose = _a.onClose,\n          open = _a.open,\n          rest = __rest(_a, [\"onOpen\", \"onClose\", \"open\"]);\n\n      return React.createElement(React.Fragment, null, React.createElement(DrawerRoot, __assign({\n        ref: this.root.setRef\n      }, this.root.props(rest), {\n        onKeyDown: this.handleKeyDown,\n        onTransitionEnd: this.handleTransitionEnd\n      })), rest.modal && React.createElement(DrawerScrim, {\n        onClick: this.handleScrimClick\n      }));\n    };\n\n    return class_1;\n  }(FoundationComponent), _a.displayName = displayName, _a.defaultProps = {\n    open: false\n  }, _a;\n};\n\nvar ModalDrawer = slidableDrawerFactory(MDCModalDrawerFoundation, 'ModalDrawer');\nvar DismissibleDrawer = slidableDrawerFactory(MDCDismissibleDrawerFoundation, 'dismissibleDrawer');\n/** A Drawer component. */\n\nexport var Drawer = function (props) {\n  if (props.dismissible) {\n    return React.createElement(DismissibleDrawer, __assign({}, props));\n  }\n\n  if (props.modal) {\n    return React.createElement(ModalDrawer, __assign({}, props));\n  }\n\n  return React.createElement(DrawerRoot, __assign({}, props));\n};\nDrawer.displayName = 'Drawer';","map":null,"metadata":{},"sourceType":"module"}