{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _get from \"lodash/get\";\nimport React, { useCallback, useState } from \"react\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useApolloClient } from \"react-apollo\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { ReactComponent as EditIcon } from \"@svgr/webpack!@webiny/app-page-builder/admin/assets/edit.svg\";\nimport { CREATE_REVISION_FORM } from \"@webiny/app-page-builder/admin/graphql/pages\";\nimport { usePageDetails } from \"@webiny/app-page-builder/admin/hooks/usePageDetails\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\n\nvar EditRevision = function EditRevision() {\n  var _useSnackbar = useSnackbar(),\n      showSnackbar = _useSnackbar.showSnackbar;\n\n  var client = useApolloClient();\n\n  var _useRouter = useRouter(),\n      history = _useRouter.history;\n\n  var _usePageDetails = usePageDetails(),\n      page = _usePageDetails.page;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      inProgress = _useState2[0],\n      setInProgress = _useState2[1];\n\n  var unpublishedRevision = (_get(page, \"revisions\") || []).find(function (item) {\n    return !item.published && !item.locked;\n  });\n  var editRevision = useCallback(function () {\n    if (unpublishedRevision) {\n      history.push(\"/page-builder/editor/\".concat(unpublishedRevision.id));\n    }\n  }, [unpublishedRevision]);\n  var copyAndEdit = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _page$revisions, latestRevision, _yield$client$mutate, res, _res$pageBuilder$revi, data, error;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _page$revisions = _slicedToArray(page.revisions, 1), latestRevision = _page$revisions[0];\n            setInProgress(true);\n            _context.next = 4;\n            return client.mutate({\n              mutation: CREATE_REVISION_FORM,\n              variables: {\n                revision: latestRevision.id\n              },\n              refetchQueries: [\"PbListPages\"],\n              awaitRefetchQueries: true\n            });\n\n          case 4:\n            _yield$client$mutate = _context.sent;\n            res = _yield$client$mutate.data;\n            setInProgress(false);\n            _res$pageBuilder$revi = res.pageBuilder.revision, data = _res$pageBuilder$revi.data, error = _res$pageBuilder$revi.error;\n\n            if (!error) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", showSnackbar(error.message));\n\n          case 10:\n            history.push(\"/page-builder/editor/\".concat(data.id));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [page]);\n\n  if (unpublishedRevision) {\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      content: \"Edit\",\n      placement: \"top\"\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      disabled: inProgress,\n      icon: /*#__PURE__*/React.createElement(EditIcon, null),\n      onClick: editRevision,\n      \"data-testid\": \"pb-page-details-header-edit-revision\"\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    content: \"Edit\",\n    placement: \"top\"\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    disabled: inProgress,\n    icon: /*#__PURE__*/React.createElement(EditIcon, null),\n    onClick: copyAndEdit,\n    \"data-testid\": \"pb-page-details-header-edit-revision\"\n  }));\n};\n\nexport default EditRevision;","map":null,"metadata":{},"sourceType":"module"}