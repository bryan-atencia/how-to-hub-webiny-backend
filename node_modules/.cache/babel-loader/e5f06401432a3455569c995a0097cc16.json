{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { deprecationWarning } from '@rmwc/base'; // Default provider options\n\nvar providerDefaults = {\n  ripple: true,\n  tooltip: {\n    align: 'top',\n    showArrow: false,\n    activateOn: ['hover', 'focus'],\n    enterDelay: 0,\n    leaveDelay: 0\n  },\n  typography: {},\n  icon: {\n    icon: '',\n    basename: 'material-icons',\n    prefix: '',\n    strategy: 'auto',\n    render: undefined\n  }\n};\nexport var ProviderContext = React.createContext(providerDefaults);\nexport var withProviderContext = function withProviderContext() {\n  return function (Component) {\n    var wrapped = React.forwardRef(function (props, ref) {\n      return React.createElement(ProviderContext.Consumer, null, function (providerContext) {\n        return React.createElement(Component, __assign({}, props, {\n          providerContext: providerContext,\n          ref: ref\n        }));\n      });\n    });\n    return wrapped;\n  };\n};\n/** A provider for setting global options in RMWC. */\n\nexport var RMWCProvider = function RMWCProvider(_a) {\n  var children = _a.children,\n      iconClassNameBase = _a.iconClassNameBase,\n      iconClassNamePrefix = _a.iconClassNamePrefix,\n      iconStrategy = _a.iconStrategy,\n      iconRender = _a.iconRender,\n      rest = __rest(_a, [\"children\", \"iconClassNameBase\", \"iconClassNamePrefix\", \"iconStrategy\", \"iconRender\"]);\n\n  var value = __assign({}, providerDefaults);\n\n  var iconOptions = __assign({}, value.icon);\n  /* istanbul ignore if */\n\n\n  if (iconClassNameBase || iconClassNamePrefix || iconStrategy || iconRender) {\n    deprecationWarning(\"RMWCProvider component no longer accepts iconClassNameBase, iconClassNamePrefix, iconStrategy, or iconRender props. Please use the 'icon' props instead. icon={{basename: 'material-icons', strategy: 'url'}}\");\n    iconOptions.basename = iconClassNameBase || iconOptions.basename;\n    iconOptions.prefix = iconClassNamePrefix || iconOptions.prefix;\n    iconOptions.strategy = iconStrategy || iconOptions.strategy;\n    iconOptions.render = iconRender || iconOptions.render;\n  }\n\n  value.icon = iconOptions;\n  return React.createElement(ProviderContext.Provider, {\n    value: __assign({}, value, rest)\n  }, children);\n};\nRMWCProvider.displayName = 'RMWCProvider';","map":null,"metadata":{},"sourceType":"module"}