{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isEqual from \"lodash/isEqual\";\nimport * as React from \"react\";\nimport Downshift from \"downshift\";\nimport { Input } from \"@webiny/ui/Input\";\nimport classNames from \"classnames\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport keycode from \"keycode\";\nimport { autoCompleteStyle, suggestionList } from \"./styles\";\nimport { getOptionValue, getOptionText } from \"./utils\";\nimport MaterialSpinner from \"react-spinner-material\";\n\nfunction Spinner() {\n  if (process.env.REACT_APP_ENV === \"ssr\") {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(MaterialSpinner, {\n    size: 24,\n    spinnerColor: \"#fa5723\",\n    spinnerWidth: 2,\n    visible: true\n  });\n}\n\nvar AutoComplete = /*#__PURE__*/function (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  var _super = _createSuper(AutoComplete);\n\n  function AutoComplete() {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      inputValue: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"downshift\", /*#__PURE__*/React.createRef());\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          options = _this$props.options;\n      var previousValue = previousProps.value;\n\n      if (!_isEqual(value, previousValue)) {\n        var item = null;\n\n        if (value) {\n          if (typeof value === \"object\") {\n            item = value;\n          } else {\n            item = options.find(function (option) {\n              return value === getOptionValue(option, _this2.props);\n            }) || null;\n          }\n        }\n\n        var downshift = this.downshift.current;\n        downshift && downshift.selectItem(item);\n      }\n    }\n    /**\n     * Renders options - based on user's input. It will try to match input text with available options.\n     */\n\n  }, {\n    key: \"renderOptions\",\n    value: function renderOptions(_ref) {\n      var _this3 = this;\n\n      var options = _ref.options,\n          isOpen = _ref.isOpen,\n          highlightedIndex = _ref.highlightedIndex,\n          selectedItem = _ref.selectedItem,\n          getMenuProps = _ref.getMenuProps,\n          getItemProps = _ref.getItemProps;\n\n      if (!isOpen) {\n        return null;\n      }\n\n      var renderItem = this.props.renderItem;\n      var filtered = options.filter(function (item) {\n        // 2) At the end, we want to show only options that are matched by typed text.\n        if (!_this3.state.inputValue) {\n          return true;\n        }\n\n        return getOptionText(item, _this3.props).toLowerCase().includes(_this3.state.inputValue.toLowerCase());\n      });\n\n      if (!filtered.length) {\n        return /*#__PURE__*/React.createElement(Elevation, {\n          z: 1\n        }, /*#__PURE__*/React.createElement(\"ul\", getMenuProps(), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(Typography, {\n          use: \"body2\"\n        }, \"No results.\"))));\n      }\n\n      return /*#__PURE__*/React.createElement(Elevation, {\n        z: 1\n      }, /*#__PURE__*/React.createElement(\"ul\", getMenuProps(), filtered.map(function (item, index) {\n        var _itemClassNames;\n\n        var itemValue = getOptionValue(item, _this3.props); // Base classes.\n\n        var itemClassNames = (_itemClassNames = {}, _defineProperty(_itemClassNames, suggestionList, true), _defineProperty(_itemClassNames, \"highlighted\", highlightedIndex === index), _defineProperty(_itemClassNames, \"selected\", false), _itemClassNames); // Add \"selected\" class if the item is selected.\n\n        if (selectedItem && getOptionValue(selectedItem, _this3.props) === itemValue) {\n          itemClassNames.selected = true;\n        } // Render the item.\n\n\n        return /*#__PURE__*/React.createElement(\"li\", Object.assign({\n          key: itemValue\n        }, getItemProps({\n          index: index,\n          item: item,\n          className: classNames(itemClassNames)\n        })), renderItem.call(_this3, item, index));\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          options = _this$props2.options,\n          _onChange = _this$props2.onChange,\n          value = _this$props2.value,\n          valueProp = _this$props2.valueProp,\n          textProp = _this$props2.textProp,\n          onInput = _this$props2.onInput,\n          _this$props2$validati = _this$props2.validation,\n          validation = _this$props2$validati === void 0 ? {\n        isValid: null\n      } : _this$props2$validati,\n          otherInputProps = _objectWithoutProperties(_this$props2, [\"options\", \"onChange\", \"value\", \"valueProp\", \"textProp\", \"onInput\", \"validation\"]); // Downshift related props.\n\n\n      var downshiftProps = {\n        className: autoCompleteStyle,\n        itemToString: function itemToString(item) {\n          return getOptionText(item, _this4.props);\n        },\n        defaultSelectedItem: value,\n        onChange: function onChange(selection) {\n          if (!selection || !_onChange) {\n            return;\n          }\n\n          _onChange(getOptionValue(selection, _this4.props), selection);\n        }\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: autoCompleteStyle\n      }, /*#__PURE__*/React.createElement(Downshift, Object.assign({}, downshiftProps, {\n        ref: this.downshift\n      }), function (_ref2) {\n        var getInputProps = _ref2.getInputProps,\n            openMenu = _ref2.openMenu,\n            rest = _objectWithoutProperties(_ref2, [\"getInputProps\", \"openMenu\"]);\n\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Input, getInputProps(_objectSpread(_objectSpread({}, otherInputProps), {}, {\n          // @ts-ignore\n          validation: validation,\n          rawOnChange: true,\n          trailingIcon: _this4.props.loading && /*#__PURE__*/React.createElement(Spinner, null),\n          onChange: function onChange(e) {\n            return e;\n          },\n          onBlur: function onBlur(e) {\n            return e;\n          },\n          onFocus: function onFocus(e) {\n            openMenu();\n            otherInputProps.onFocus && otherInputProps.onFocus(e);\n          },\n          onKeyDown: function onKeyDown(e) {\n            // @ts-ignore\n            var keyCode = keycode(e);\n\n            if (keyCode === \"backspace\") {\n              _onChange(null);\n            }\n          },\n          onKeyUp: function onKeyUp(e) {\n            // @ts-ignore\n            var keyCode = keycode(e);\n            var target = e.target;\n            var inputValue = target.value || \"\"; // If user pressed 'esc', 'enter' or similar...\n\n            if (keyCode.length > 1) {\n              return;\n            } // If values are the same, exit, do not update current search term.\n\n\n            if (inputValue === _this4.state.inputValue) {\n              return;\n            }\n\n            _this4.setState(function (state) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                inputValue: inputValue\n              });\n            }, function () {\n              onInput && onInput(inputValue);\n            });\n          }\n        }))), _this4.renderOptions(_objectSpread(_objectSpread({}, rest), {}, {\n          options: options\n        })));\n      }));\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\n_defineProperty(AutoComplete, \"defaultProps\", {\n  valueProp: \"id\",\n  textProp: \"name\",\n  options: [],\n  renderItem: function renderItem(item) {\n    return /*#__PURE__*/React.createElement(Typography, {\n      use: \"body2\"\n    }, getOptionText(item, this.props));\n  }\n});\n\nexport { AutoComplete };","map":null,"metadata":{},"sourceType":"module"}