{"version":3,"sources":["../src/index.js"],"names":["args","Promise","resolve","i","arg","eligibleProcessor","argumentProcessors","forEach","processor","canProcess","Error","processedArgument","process","j","assetLoaders","length","assetLoader","JSON","stringify"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;;;;;0BAEe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAUA,IAAV;AAAUA,YAAAA,IAAV;AAAA;;AAAA,4CACJ,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAY,iBAAMC,OAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACKC,CADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,gCAAAA,GAFK,GAECJ,IAAI,CAACG,CAAD,CAFL;AAGPE,gCAAAA,iBAHO,GAGa,IAHb;;AAIXC,4DAAmBC,OAAnB,CAA2B,UAAAC,SAAS,EAAI;AACpC,sCAAIA,SAAS,CAACC,UAAV,CAAqBL,GAArB,CAAJ,EAA+B;AAC3BC,oCAAAA,iBAAiB,GAAGG,SAApB;AACA,2CAAO,KAAP;AACH;AACJ,iCALD;;AAJW,oCAWNH,iBAXM;AAAA;AAAA;AAAA;;AAAA,sCAYDK,KAAK,CAAC,mCAAmCN,GAApC,CAZJ;;AAAA;AAeLO,gCAAAA,iBAfK,GAeeN,iBAAiB,CAACO,OAAlB,CAA0BR,GAA1B,CAff;AAiBFS,gCAAAA,CAjBE,GAiBE,CAjBF;;AAAA;AAAA,sCAiBKA,CAAC,GAAGC,sBAAaC,MAjBtB;AAAA;AAAA;AAAA;;AAkBHC,gCAAAA,WAlBG,GAkBWF,sBAAaD,CAAb,CAlBX;;AAAA,qCAmBHG,WAAW,CAACP,UAAZ,CAAuBE,iBAAvB,CAnBG;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAoBGK,WAAW,CAACJ,OAAZ,CAAoBD,iBAApB,CApBH;;AAAA;AAAA;;AAAA;AAiB8BE,gCAAAA,CAAC,EAjB/B;AAAA;AAAA;;AAAA;AAAA,sCAyBLH,KAAK,CAAC,gCAAgCO,IAAI,CAACC,SAAL,CAAeP,iBAAf,CAAjC,CAzBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACKR,sBAAAA,CADL,GACS,CADT;;AAAA;AAAA,4BACYA,CAAC,GAAGH,IAAI,CAACe,MADrB;AAAA;AAAA;AAAA;;AAAA,2DACKZ,CADL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAC6BA,sBAAAA,CAAC,EAD9B;AAAA;AAAA;;AAAA;AA4BfD,sBAAAA,OAAO;;AA5BQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ;;AAAA;AAAA;AAAA;AAAA,cADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","sourcesContent":["// @flow\nimport argumentProcessors from \"./argumentProcessors\";\nimport assetLoaders from \"./assetLoaders\";\n\nexport default async (...args: Array<any>) => {\n    return new Promise(async resolve => {\n        outerLoop: for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            let eligibleProcessor = null;\n            argumentProcessors.forEach(processor => {\n                if (processor.canProcess(arg)) {\n                    eligibleProcessor = processor;\n                    return false;\n                }\n            });\n\n            if (!eligibleProcessor) {\n                throw Error(\"Cannot process load argument: \" + arg);\n            }\n\n            const processedArgument = eligibleProcessor.process(arg);\n\n            for (let j = 0; j < assetLoaders.length; j++) {\n                let assetLoader = assetLoaders[j];\n                if (assetLoader.canProcess(processedArgument)) {\n                    await assetLoader.process(processedArgument);\n                    continue outerLoop;\n                }\n            }\n\n            throw Error(\"Cannot load given argument \" + JSON.stringify(processedArgument));\n        }\n\n        resolve();\n    });\n};\n"],"file":"index.js"}