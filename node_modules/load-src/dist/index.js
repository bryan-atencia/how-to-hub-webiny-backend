"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _argumentProcessors = _interopRequireDefault(require("./argumentProcessors"));

var _assetLoaders = _interopRequireDefault(require("./assetLoaders"));

var _default =
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee2() {
  var _len,
      args,
      _key,
      _args3 = arguments;

  return _regenerator.default.wrap(function _callee2$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          for (_len = _args3.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = _args3[_key];
          }

          return _context3.abrupt("return", new Promise(
          /*#__PURE__*/
          function () {
            var _ref2 = (0, _asyncToGenerator2.default)(
            /*#__PURE__*/
            _regenerator.default.mark(function _callee(resolve) {
              var _loop, i, _ret;

              return _regenerator.default.wrap(function _callee$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _loop =
                      /*#__PURE__*/
                      _regenerator.default.mark(function _loop(i) {
                        var arg, eligibleProcessor, processedArgument, j, assetLoader;
                        return _regenerator.default.wrap(function _loop$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                arg = args[i];
                                eligibleProcessor = null;

                                _argumentProcessors.default.forEach(function (processor) {
                                  if (processor.canProcess(arg)) {
                                    eligibleProcessor = processor;
                                    return false;
                                  }
                                });

                                if (eligibleProcessor) {
                                  _context.next = 5;
                                  break;
                                }

                                throw Error("Cannot process load argument: " + arg);

                              case 5:
                                processedArgument = eligibleProcessor.process(arg);
                                j = 0;

                              case 7:
                                if (!(j < _assetLoaders.default.length)) {
                                  _context.next = 16;
                                  break;
                                }

                                assetLoader = _assetLoaders.default[j];

                                if (!assetLoader.canProcess(processedArgument)) {
                                  _context.next = 13;
                                  break;
                                }

                                _context.next = 12;
                                return assetLoader.process(processedArgument);

                              case 12:
                                return _context.abrupt("return", "continue|outerLoop");

                              case 13:
                                j++;
                                _context.next = 7;
                                break;

                              case 16:
                                throw Error("Cannot load given argument " + JSON.stringify(processedArgument));

                              case 17:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _loop);
                      });
                      i = 0;

                    case 2:
                      if (!(i < args.length)) {
                        _context2.next = 10;
                        break;
                      }

                      return _context2.delegateYield(_loop(i), "t0", 4);

                    case 4:
                      _ret = _context2.t0;

                      if (!(_ret === "continue|outerLoop")) {
                        _context2.next = 7;
                        break;
                      }

                      return _context2.abrupt("continue", 7);

                    case 7:
                      i++;
                      _context2.next = 2;
                      break;

                    case 10:
                      resolve();

                    case 11:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee);
            }));

            return function (_x) {
              return _ref2.apply(this, arguments);
            };
          }()));

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee2);
}));

exports.default = _default;
//# sourceMappingURL=index.js.map