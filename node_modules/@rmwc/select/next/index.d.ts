import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { MDCSelectFoundation, MDCSelectIconFoundation } from '@material/select';
import { FoundationComponent } from '@rmwc/base';
import { IconProps } from '@rmwc/icon';
import { Menu, MenuProps } from '@rmwc/menu';
export interface FormattedOption extends React.AllHTMLAttributes<any> {
    label: string;
    value?: string;
    options?: FormattedOption[];
}
/** A Select Component */
export interface SelectProps {
    /** The value for a controlled select. */
    value?: string;
    /** Adds help text to the field */
    helpText?: React.ReactNode | SelectHelperTextProps;
    /** Options accepts flat arrays, value => label maps, and more. See examples for details. */
    options?: FormattedOption[] | string[] | {
        [value: string]: string;
    };
    /** A label for the form control. */
    label?: string;
    /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */
    placeholder?: string;
    /** Makes the select outlined. */
    outlined?: boolean;
    /** Makes the Select visually invalid. This is sometimes automatically my material-components-web.  */
    invalid?: boolean;
    /** Makes the Select disabled.  */
    disabled?: boolean;
    /** Makes the Select required.  */
    required?: boolean;
    /** Renders a non native / enhanced dropdown */
    enhanced?: boolean | MenuProps;
    /** Props for the root element. By default, additional props spread to the native select element.  */
    rootProps?: Object;
    /** A reference to the native select element. Not applicable when `enhanced` is true. */
    inputRef?: (ref: HTMLSelectElement | null) => void;
    /** Add a leading icon. */
    icon?: RMWC.IconPropT;
}
export interface DeprecatedSelectProps {
    /** DEPRECATED: Changed to icon. */
    withLeadingIcon?: RMWC.IconPropT;
}
interface SelectState {
    selectedIndex: number;
    selectedTextContent: string;
    menuOpen: boolean;
}
export declare class SelectBase extends FoundationComponent<MDCSelectFoundation, SelectProps & DeprecatedSelectProps, SelectState> {
    private root;
    private lineRipple;
    private outline;
    private label;
    id: string;
    nativeControl: HTMLSelectElement | null;
    selectedText: HTMLElement | null;
    menuElement: HTMLElement | null;
    menu: Menu | null;
    hiddenInput_: HTMLInputElement | null;
    leadingIcon_: SelectIcon | null;
    trailingIcon_: HTMLElement | null;
    state: {
        selectedIndex: number;
        menuOpen: boolean;
        selectedTextContent: string;
    };
    constructor(props: SelectProps);
    componentDidMount(): void;
    getDefaultFoundation(): MDCSelectFoundation;
    getNativeSelectAdapterMethods_(): {
        getValue: () => string;
        setValue: (value: string) => string | null;
        openMenu: () => void;
        closeMenu: () => void;
        isMenuOpen: () => boolean;
        setSelectedIndex: (index: number) => void;
        setDisabled: (isDisabled: boolean) => boolean | null;
        setValid: (isValid: boolean) => void;
        checkValidity: () => boolean;
    };
    getEnhancedSelectAdapterMethods_(): {
        getValue: () => string;
        setValue: (value: string) => void;
        openMenu: () => void;
        closeMenu: () => void;
        isMenuOpen: () => boolean;
        setSelectedIndex: (index: number) => void;
        setDisabled: (isDisabled: boolean) => void;
        checkValidity: () => boolean;
        setValid: (isValid: boolean) => void;
    };
    getCommonAdapterMethods_(): {
        addClass: (className: string) => void;
        removeClass: (className: string) => void;
        hasClass: (className: string) => boolean;
        isRtl: () => boolean | null;
        setRippleCenter: (normalizedX: number) => void;
        activateBottomLine: () => void;
        deactivateBottomLine: () => void;
        notifyChange: (value: any) => void;
    };
    getOutlineAdapterMethods_(): {
        hasOutline: () => boolean;
        notchOutline: (labelWidth: number) => void;
        closeOutline: () => void;
    };
    getLabelAdapterMethods_(): {
        floatLabel: (shouldFloat: boolean) => void;
        getLabelWidth: () => number;
    };
    getFoundationMap_(): {
        leadingIcon: MDCSelectIconFoundation | undefined;
    };
    sync(props: SelectProps, prevProps: SelectProps): void;
    /**
    * @param {string} value The value to set on the select.
    */
    value: string;
    handleChange(evt: any): void;
    handleFocus(evt: any): void;
    handleBlur(evt: any): void;
    handleClick(evt: any): void;
    handleKeydown(evt: any): void;
    handleMenuSelected(evt: RMWC.CustomEventT<{
        item: HTMLElement;
        index: number;
    }>): void;
    handleMenuOpened(): void;
    handleMenuClosed(): void;
    renderIcon(iconNode: any, leadOrTrail: 'leadingIcon_' | 'trailingIcon_'): any;
    renderHelpText(): JSX.Element | null;
    render(): JSX.Element;
}
export declare class SelectIcon extends FoundationComponent<MDCSelectIconFoundation, IconProps> {
    static displayName: string;
    private root;
    getDefaultFoundation(): MDCSelectIconFoundation;
    render(): JSX.Element;
}
export interface SelectHelperTextProps {
    /** Make the help text always visible */
    persistent?: boolean;
    /** Make the help a validation message style */
    validationMsg?: boolean;
}
export declare const SelectHelperText: React.ComponentType<RMWC.MergeInterfacesT<SelectHelperTextProps, RMWC.ComponentProps>>;
/** A Select Component */
export declare const Select: {
    ({ enhanced, ...rest }: SelectProps & RMWC.ComponentProps): JSX.Element;
    displayName: string;
};
export {};
