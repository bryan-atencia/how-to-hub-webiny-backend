import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { MDCListFoundation } from '@material/list';
import { FoundationComponent } from '@rmwc/base';
export declare type ListOnActionEventT = RMWC.CustomEventT<number>;
/** A List Component */
export interface ListProps {
    /** Reduces the padding on List items. */
    dense?: boolean;
    /** Gives more space for dual lined list items. */
    twoLine?: boolean;
    /** Makes the list start detail circular for avatars. */
    avatarList?: boolean;
    /** Makes the list non interactive. In addition, you'll have to set `ripple={false}` on the individual ListItems. */
    nonInteractive?: boolean;
    /** A callback for when a list item is interacted with. evt.detail = number */
    onAction?: (evt: ListOnActionEventT) => void;
}
/** A List Component */
export declare class List extends FoundationComponent<MDCListFoundation, ListProps> {
    static readonly cssClasses: {
        LIST_ITEM_ACTIVATED_CLASS: string;
        LIST_ITEM_CLASS: string;
        LIST_ITEM_DISABLED_CLASS: string;
        LIST_ITEM_SELECTED_CLASS: string;
        ROOT: string;
    };
    private root;
    constructor(props: ListProps);
    readonly listElements: HTMLLIElement[];
    componentDidMount(): void;
    focusItemAtIndex(index: number): void;
    getDefaultFoundation(): MDCListFoundation;
    /**
     * Used to figure out which list item this event is targetting. Or returns -1 if
     * there is no list item
     */
    getListItemIndex(evt: React.FocusEvent | React.KeyboardEvent | React.MouseEvent): number;
    handleClick(evt: React.MouseEvent): void;
    handleKeydown(evt: React.KeyboardEvent<HTMLElement> & KeyboardEvent): void;
    handleFocusIn(evt: React.FocusEvent & FocusEvent): void;
    handleFocusOut(evt: React.FocusEvent & FocusEvent): void;
    render(): JSX.Element;
}
