import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { FoundationComponent } from '@rmwc/base';
import { MDCTabBarFoundation } from '@material/tab-bar';
import { MDCTabInteractionEvent } from '@material/tab';
import { TabScroller } from './tab-scroller';
import { TabBarContextT } from './tab-bar-context';
/************************************************************
 * TabBar
 ************************************************************/
export declare type TabBarOnActivateEventT = RMWC.CustomEventT<{
    index: number;
}>;
/** The TabBar component */
export interface TabBarProps {
    /** Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. evt.detail = { index: number; } */
    onActivate?: (evt: TabBarOnActivateEventT) => void;
    /** The index of the active tab. */
    activeTabIndex?: number;
    /** Specifies whether the indicator should slide or fade. Defaults to slide. */
    indicatorTransition?: 'slide' | 'fade';
}
export declare const TabBarRoot: React.ComponentType<RMWC.MergeInterfacesT<TabBarProps, RMWC.ComponentProps>>;
/** The TabBar component */
export declare class TabBar extends FoundationComponent<MDCTabBarFoundation, TabBarProps> {
    static displayName: string;
    private root;
    private currentActiveTabIndex;
    tabScroller: TabScroller | null;
    tabList: any[];
    contextApi: TabBarContextT;
    constructor(props: TabBarProps);
    componentDidMount(): void;
    activateTab(index: number): void;
    getDefaultFoundation(): MDCTabBarFoundation;
    sync(props: TabBarProps, prevProps: TabBarProps): void;
    getTabElements(): Element[] | null;
    handleTabInteraction(evt: MDCTabInteractionEvent): void;
    handleKeyDown(evt: React.KeyboardEvent | KeyboardEvent): void;
    render(): JSX.Element;
}
