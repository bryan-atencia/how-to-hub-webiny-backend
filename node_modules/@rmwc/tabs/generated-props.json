{
  "npm": {},
  "typescript": {
    "TabScroller": {
      "fileName": "src/tabs/tab-scroller.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "TabScroller",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L26",
      "extends": [
        "FoundationComponent<MDCTabScrollerFoundation, {}>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<{}>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<{}>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<{}>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<{}>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "inheritedFrom": "FoundationComponent.componentDidMount",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentDidMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "FoundationComponent.componentDidUpdate",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "FoundationPropsT<{}>"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: FoundationPropsT<{}>) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<{}>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<{}>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "inheritedFrom": "FoundationComponent.componentWillUnmount",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentWillUnmount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<{}>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<{}>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "createElement",
          "inheritedFrom": "FoundationComponent.createElement",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "createElement",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "elementName",
                  "type": "string"
                }
              ],
              "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
              "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "emit",
          "inheritedFrom": "FoundationComponent.emit",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                ],
                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                "metadata": {}
              },
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "emit",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtType",
                  "type": "string"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtData",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "shouldBubble",
                  "defaultValue": "false",
                  "type": "boolean"
                }
              ],
              "returnType": "CustomEvent<any>",
              "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getDefaultFoundation",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L41",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "getDefaultFoundation",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L41",
              "parameters": [],
              "returnType": "MDCTabScrollerFoundation",
              "type": "() => MDCTabScrollerFoundation"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getScrollContentWidth",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L84",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "getScrollContentWidth",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L84",
              "parameters": [],
              "returnType": "number",
              "type": "() => number"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getScrollPosition",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L80",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "getScrollPosition",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L80",
              "parameters": [],
              "returnType": "number",
              "type": "() => number"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<FoundationPropsT<{}>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<FoundationStateT<S>>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<FoundationPropsT<{}>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "handleInteraction",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L96",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "handleInteraction",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L96",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "handleTransitionEnd",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L100",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "handleTransitionEnd",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L100",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "TransitionEvent | TransitionEvent"
                }
              ],
              "returnType": "void",
              "type": "(evt: TransitionEvent | TransitionEvent) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "incrementScroll",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L88",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "incrementScroll",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L88",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "scrollXIncrement",
                  "type": "number"
                }
              ],
              "returnType": "void",
              "type": "(scrollXIncrement: number) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L104",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L104",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-scroller.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "scrollTo",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L92",
          "signatures": [
            {
              "fileName": "src/tabs/tab-scroller.tsx",
              "kind": "signature",
              "name": "scrollTo",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L92",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "scrollX",
                  "type": "number"
                }
              ],
              "returnType": "void",
              "type": "(scrollX: number) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<{}>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<FoundationPropsT<{}>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "sync",
          "inheritedFrom": "FoundationComponent.sync",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "sync",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "props",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(props: any, prevProps?: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "syncProp",
          "inheritedFrom": "FoundationComponent.syncProp",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "syncProp",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prop",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProp",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "() => void"
                }
              ],
              "returnType": "void",
              "type": "(prop: any, prevProp: any, callback: () => void) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "update",
          "inheritedFrom": "FoundationComponent.update",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "update",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "shouldDebounce",
          "defaultValue": "false",
          "inheritedFrom": "FoundationComponent.shouldDebounce",
          "type": "boolean"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elements",
          "inheritedFrom": "FoundationComponent.elements",
          "type": "{ [key: string]: FoundationElement<any, any> }"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "foundation",
          "inheritedFrom": "FoundationComponent.foundation",
          "type": "MDCTabScrollerFoundation"
        }
      ],
      "constructorType": {
        "fileName": "src/tabs/tab-scroller.tsx",
        "flags": {
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L32",
        "signatures": [
          {
            "fileName": "src/tabs/tab-scroller.tsx",
            "kind": "signature",
            "name": "new TabScroller",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-scroller.tsx#L32",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "{}"
              }
            ],
            "returnType": "TabScroller",
            "type": "(props: {}) => TabScroller"
          }
        ]
      }
    },
    "TabIndicator": {
      "fileName": "src/tabs/tab-indicator.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "TabIndicator",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L19",
      "extends": [
        "FoundationComponent<MDCTabIndicatorFoundation, TabIndicatorProps>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabIndicatorProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabIndicatorProps>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabIndicatorProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabIndicatorProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "activate",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L50",
          "signatures": [
            {
              "fileName": "src/tabs/tab-indicator.tsx",
              "kind": "signature",
              "name": "activate",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L50",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "previousIndicatorClientRect",
                  "type": "ClientRect"
                }
              ],
              "returnType": "void",
              "type": "(previousIndicatorClientRect?: ClientRect) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "inheritedFrom": "FoundationComponent.componentDidMount",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentDidMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "FoundationComponent.componentDidUpdate",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "FoundationPropsT<TabIndicatorProps>"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: FoundationPropsT<TabIndicatorProps>) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabIndicatorProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabIndicatorProps>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "inheritedFrom": "FoundationComponent.componentWillUnmount",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentWillUnmount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabIndicatorProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabIndicatorProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "computeContentClientRect",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L58",
          "signatures": [
            {
              "fileName": "src/tabs/tab-indicator.tsx",
              "kind": "signature",
              "name": "computeContentClientRect",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L58",
              "parameters": [],
              "returnType": "ClientRect",
              "type": "() => ClientRect"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "createElement",
          "inheritedFrom": "FoundationComponent.createElement",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "createElement",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "elementName",
                  "type": "string"
                }
              ],
              "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
              "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "deactivate",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L54",
          "signatures": [
            {
              "fileName": "src/tabs/tab-indicator.tsx",
              "kind": "signature",
              "name": "deactivate",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L54",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "emit",
          "inheritedFrom": "FoundationComponent.emit",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                ],
                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                "metadata": {}
              },
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "emit",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtType",
                  "type": "string"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtData",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "shouldBubble",
                  "defaultValue": "false",
                  "type": "boolean"
                }
              ],
              "returnType": "CustomEvent<any>",
              "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getDefaultFoundation",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L26",
          "signatures": [
            {
              "fileName": "src/tabs/tab-indicator.tsx",
              "kind": "signature",
              "name": "getDefaultFoundation",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L26",
              "parameters": [],
              "returnType": "MDCFadingTabIndicatorFoundation | MDCSlidingTabIndicatorFoundation",
              "type": "() => MDCFadingTabIndicatorFoundation | MDCSlidingTabIndicatorFoundation"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<FoundationPropsT<TabIndicatorProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<FoundationStateT<S>>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<FoundationPropsT<TabIndicatorProps>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L62",
          "signatures": [
            {
              "fileName": "src/tabs/tab-indicator.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L62",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabIndicatorProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<FoundationPropsT<TabIndicatorProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "sync",
          "inheritedFrom": "FoundationComponent.sync",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "sync",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "props",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(props: any, prevProps?: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "syncProp",
          "inheritedFrom": "FoundationComponent.syncProp",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "syncProp",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prop",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProp",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "() => void"
                }
              ],
              "returnType": "void",
              "type": "(prop: any, prevProp: any, callback: () => void) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "update",
          "inheritedFrom": "FoundationComponent.update",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "update",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "shouldDebounce",
          "defaultValue": "false",
          "inheritedFrom": "FoundationComponent.shouldDebounce",
          "type": "boolean"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elements",
          "inheritedFrom": "FoundationComponent.elements",
          "type": "{ [key: string]: FoundationElement<any, any> }"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "foundation",
          "inheritedFrom": "FoundationComponent.foundation",
          "type": "MDCTabIndicatorFoundation"
        }
      ],
      "constructorType": {
        "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
        "flags": {
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "inheritedFrom": "FoundationComponent.__constructor",
        "signatures": [
          {
            "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
            "kind": "signature",
            "name": "new TabIndicator",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "any"
              }
            ],
            "returnType": "TabIndicator",
            "type": "(props: any) => TabIndicator"
          }
        ]
      }
    },
    "TabBar": {
      "documentation": {
        "contents": [
          "<p>The TabBar component</p>\n"
        ],
        "contentsRaw": "The TabBar component",
        "metadata": {}
      },
      "fileName": "src/tabs/tab-bar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "TabBar",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L42",
      "extends": [
        "FoundationComponent<MDCTabBarFoundation, TabBarProps>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabBarProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabBarProps>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabBarProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabBarProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "activateTab",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L93",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "activateTab",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L93",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "index",
                  "type": "number"
                }
              ],
              "returnType": "void",
              "type": "(index: number) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L68",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "componentDidMount",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L68",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "FoundationComponent.componentDidUpdate",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "FoundationPropsT<TabBarProps>"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: FoundationPropsT<TabBarProps>) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabBarProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabBarProps>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "inheritedFrom": "FoundationComponent.componentWillUnmount",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentWillUnmount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabBarProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<TabBarProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "createElement",
          "inheritedFrom": "FoundationComponent.createElement",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "createElement",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "elementName",
                  "type": "string"
                }
              ],
              "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
              "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "emit",
          "inheritedFrom": "FoundationComponent.emit",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                ],
                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                "metadata": {}
              },
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "emit",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtType",
                  "type": "string"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtData",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "shouldBubble",
                  "defaultValue": "false",
                  "type": "boolean"
                }
              ],
              "returnType": "CustomEvent<any>",
              "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getDefaultFoundation",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L123",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "getDefaultFoundation",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L123",
              "parameters": [],
              "returnType": "MDCTabBarFoundation",
              "type": "() => MDCTabBarFoundation"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<FoundationPropsT<TabBarProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<FoundationStateT<S>>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<FoundationPropsT<TabBarProps>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getTabElements",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L194",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "getTabElements",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L194",
              "parameters": [],
              "returnType": "Element[] | null",
              "type": "() => Element[] | null"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "handleKeyDown",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L205",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "handleKeyDown",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L205",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "KeyboardEvent | KeyboardEvent"
                }
              ],
              "returnType": "void",
              "type": "(evt: KeyboardEvent | KeyboardEvent) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "handleTabInteraction",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L201",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "handleTabInteraction",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L201",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "MDCTabInteractionEvent"
                }
              ],
              "returnType": "void",
              "type": "(evt: MDCTabInteractionEvent) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L210",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L210",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<TabBarProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<FoundationPropsT<TabBarProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
            }
          ]
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "sync",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L183",
          "signatures": [
            {
              "fileName": "src/tabs/tab-bar.tsx",
              "kind": "signature",
              "name": "sync",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L183",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "props",
                  "type": "TabBarProps"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "TabBarProps"
                }
              ],
              "returnType": "void",
              "type": "(props: TabBarProps, prevProps: TabBarProps) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "syncProp",
          "inheritedFrom": "FoundationComponent.syncProp",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "syncProp",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prop",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProp",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "() => void"
                }
              ],
              "returnType": "void",
              "type": "(prop: any, prevProp: any, callback: () => void) => void"
            }
          ]
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "update",
          "inheritedFrom": "FoundationComponent.update",
          "signatures": [
            {
              "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "update",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "displayName",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L46",
          "defaultValue": "\"TabBar\"",
          "type": "string"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "shouldDebounce",
          "defaultValue": "false",
          "inheritedFrom": "FoundationComponent.shouldDebounce",
          "type": "boolean"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elements",
          "inheritedFrom": "FoundationComponent.elements",
          "type": "{ [key: string]: FoundationElement<any, any> }"
        },
        {
          "fileName": "src/tabs/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "foundation",
          "inheritedFrom": "FoundationComponent.foundation",
          "type": "MDCTabBarFoundation"
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tabList",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L51",
          "defaultValue": " []",
          "type": "any[]"
        },
        {
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tabScroller",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L50",
          "defaultValue": " null",
          "type": "TabScroller | null"
        }
      ],
      "constructorType": {
        "fileName": "src/tabs/tab-bar.tsx",
        "flags": {
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L59",
        "signatures": [
          {
            "fileName": "src/tabs/tab-bar.tsx",
            "kind": "signature",
            "name": "new TabBar",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L59",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "TabBarProps"
              }
            ],
            "returnType": "TabBar",
            "type": "(props: TabBarProps) => TabBar"
          }
        ]
      }
    },
    "TabIndicatorProps": {
      "fileName": "src/tabs/tab-indicator.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TabIndicatorProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L12",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Use an icon instead of an underline for the tab</p>\n"
            ],
            "contentsRaw": "Use an icon instead of an underline for the tab",
            "metadata": {}
          },
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L14",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>The transition to use</p>\n"
            ],
            "contentsRaw": "The transition to use",
            "metadata": {}
          },
          "fileName": "src/tabs/tab-indicator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transition",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-indicator.tsx#L16",
          "type": "\"slide\" | \"fade\""
        }
      ]
    },
    "TabProps": {
      "documentation": {
        "contents": [
          "<p>A Tab component</p>\n"
        ],
        "contentsRaw": "A Tab component",
        "metadata": {}
      },
      "fileName": "src/tabs/tab.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TabProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L16",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The label for the tab, passed as children.</p>\n"
            ],
            "contentsRaw": "The label for the tab, passed as children.",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L20",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>The icon to use for the tab.</p>\n"
            ],
            "contentsRaw": "The icon to use for the tab.",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L22",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Optionally use a custom icon for the active indicator, instead of the underline.</p>\n"
            ],
            "contentsRaw": "Optionally use a custom icon for the active indicator, instead of the underline.",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "iconIndicator",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L24",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>A label for the tab.</p>\n"
            ],
            "contentsRaw": "A label for the tab.",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L18",
          "type": "any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Fires when a tab has been interacted with. This is captures both keyboard and click events. evt.detail = { tabId: string }</p>\n"
            ],
            "contentsRaw": "Fires when a tab has been interacted with. This is captures both keyboard and click events. evt.detail = { tabId: string }",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onInteraction",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L30",
          "type": "undefined | (evt: TabOnInteractionEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Restricts the indicator to the content</p>\n"
            ],
            "contentsRaw": "Restricts the indicator to the content",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "restrictIndicator",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L28",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Stacks the icon on top of the text label</p>\n"
            ],
            "contentsRaw": "Stacks the icon on top of the text label",
            "metadata": {}
          },
          "fileName": "src/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stacked",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L26",
          "type": "undefined | false | true"
        }
      ]
    },
    "TabBarProps": {
      "documentation": {
        "contents": [
          "<p>The TabBar component</p>\n"
        ],
        "contentsRaw": "The TabBar component",
        "metadata": {}
      },
      "fileName": "src/tabs/tab-bar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TabBarProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L20",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The index of the active tab.</p>\n"
            ],
            "contentsRaw": "The index of the active tab.",
            "metadata": {}
          },
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeTabIndex",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L24",
          "type": "undefined | number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Specifies whether the indicator should slide or fade. Defaults to slide.</p>\n"
            ],
            "contentsRaw": "Specifies whether the indicator should slide or fade. Defaults to slide.",
            "metadata": {}
          },
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "indicatorTransition",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L26",
          "type": "\"slide\" | \"fade\""
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. evt.detail = { index: number; }</p>\n"
            ],
            "contentsRaw": "Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. evt.detail = { index: number; }",
            "metadata": {}
          },
          "fileName": "src/tabs/tab-bar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActivate",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L22",
          "type": "undefined | (evt: TabBarOnActivateEventT) => void"
        }
      ]
    },
    "TabBarContextT": {
      "fileName": "src/tabs/tab-bar-context.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "TabBarContextT",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar-context.tsx#L3",
      "type": ""
    },
    "TabOnInteractionEventT": {
      "fileName": "src/tabs/tab.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "TabOnInteractionEventT",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab.tsx#L13",
      "type": "RMWC.CustomEventT<>"
    },
    "TabBarOnActivateEventT": {
      "documentation": {
        "contents": [
          "<p>TabBar</p>\n"
        ],
        "contentsRaw": "TabBar",
        "metadata": {}
      },
      "fileName": "src/tabs/tab-bar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "TabBarOnActivateEventT",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/tabs/tab-bar.tsx#L15",
      "type": "RMWC.CustomEventT<>"
    }
  }
}
