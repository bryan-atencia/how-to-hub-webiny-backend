import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { TabBarContextT } from './tab-bar-context';
export declare type TabOnInteractionEventT = RMWC.CustomEventT<{
    tabId: string;
}>;
/** A Tab component */
export interface TabProps {
    /** A label for the tab. */
    label?: any;
    /** The label for the tab, passed as children. */
    children?: React.ReactNode;
    /** The icon to use for the tab. */
    icon?: RMWC.IconPropT;
    /** Optionally use a custom icon for the active indicator, instead of the underline. */
    iconIndicator?: RMWC.IconPropT;
    /** Stacks the icon on top of the text label */
    stacked?: boolean;
    /** Restricts the indicator to the content */
    restrictIndicator?: boolean;
    /** Fires when a tab has been interacted with. This is captures both keyboard and click events. evt.detail = { tabId: string } */
    onInteraction?: (evt: TabOnInteractionEventT) => void;
}
/** A Tab component */
export declare const Tab: React.ComponentType<TabProps & RMWC.ComponentProps & {
    contextApi?: TabBarContextT | undefined;
}>;
