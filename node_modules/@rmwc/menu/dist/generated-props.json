{
    "npm": {},
    "typescript": {
        "MenuSurface": {
            "documentation": {
                "contents": [
                    "<p>A generic menu component for displaying any type of content.</p>\n"
                ],
                "contentsRaw": "A generic menu component for displaying any type of content.",
                "metadata": {}
            },
            "fileName": "src/menu/menu-surface.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "class",
            "name": "MenuSurface",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L76",
            "extends": [
                "FoundationComponent<MDCMenuSurfaceFoundation, MenuSurfaceProps>"
            ],
            "methods": [
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillMount",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillReceiveProps",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillReceiveProps",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuSurfaceProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuSurfaceProps>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillUpdate",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuSurfaceProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuSurfaceProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidCatch",
                    "inheritedFrom": "ComponentLifecycle.componentDidCatch",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                                ],
                                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentDidCatch",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "error",
                                    "type": "Error"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "errorInfo",
                                    "type": "ErrorInfo"
                                }
                            ],
                            "returnType": "void",
                            "type": "(error: Error, errorInfo: ErrorInfo) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidMount",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L95",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "componentDidMount",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L95",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidUpdate",
                    "inheritedFrom": "FoundationComponent.componentDidUpdate",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentDidUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "FoundationPropsT<MenuSurfaceProps>"
                                }
                            ],
                            "returnType": "void",
                            "type": "(prevProps: FoundationPropsT<MenuSurfaceProps>) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillMount",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillReceiveProps",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillReceiveProps",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuSurfaceProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuSurfaceProps>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillUnmount",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L107",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "componentWillUnmount",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L107",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillUpdate",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuSurfaceProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuSurfaceProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "createElement",
                    "inheritedFrom": "FoundationComponent.createElement",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "createElement",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "elementName",
                                    "type": "string"
                                }
                            ],
                            "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
                            "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "deregisterBodyClickListener",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L327",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "deregisterBodyClickListener",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L327",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "emit",
                    "inheritedFrom": "FoundationComponent.emit",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                                ],
                                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                                "metadata": {}
                            },
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "emit",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evtType",
                                    "type": "string"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evtData",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "shouldBubble",
                                    "defaultValue": "false",
                                    "type": "boolean"
                                }
                            ],
                            "returnType": "CustomEvent<any>",
                            "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getDefaultFoundation",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L141",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "getDefaultFoundation",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L141",
                            "parameters": [],
                            "returnType": "MDCMenuSurfaceFoundation",
                            "type": "() => MDCMenuSurfaceFoundation"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getDimensionAdapterMethods",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L212",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "getDimensionAdapterMethods",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L212",
                            "parameters": [],
                            "returnType": "",
                            "type": "() => "
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getFocusAdapterMethods",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L182",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "getFocusAdapterMethods",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L182",
                            "parameters": [],
                            "returnType": "",
                            "type": "() => "
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getSnapshotBeforeUpdate",
                    "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                                ],
                                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "getSnapshotBeforeUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "Readonly<FoundationPropsT<MenuSurfaceProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                }
                            ],
                            "returnType": "SS | null",
                            "type": "(prevProps: Readonly<FoundationPropsT<MenuSurfaceProps>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "handleBodyClick",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L332",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "handleBodyClick",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L332",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evt",
                                    "type": "MouseEvent | TouchEvent"
                                }
                            ],
                            "returnType": "void",
                            "type": "(evt: MouseEvent | TouchEvent) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "handleKeydown",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L336",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "handleKeydown",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L336",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evt",
                                    "type": "KeyboardEvent & KeyboardEvent"
                                }
                            ],
                            "returnType": "void",
                            "type": "(evt: KeyboardEvent & KeyboardEvent) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "hoistMenuToBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L288",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "hoistMenuToBody",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L288",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "registerBodyClickListener",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L317",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "registerBodyClickListener",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L317",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "render",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L341",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "render",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L341",
                            "parameters": [],
                            "returnType": "Element",
                            "type": "() => Element"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "setAnchorCorner",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L313",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "setAnchorCorner",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L313",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "corner",
                                    "type": "Corner"
                                }
                            ],
                            "returnType": "void",
                            "type": "(corner: Corner) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "shouldComponentUpdate",
                    "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                                ],
                                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "shouldComponentUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuSurfaceProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "boolean",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuSurfaceProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "sync",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L258",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "sync",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L258",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "props",
                                    "type": "MenuSurfaceProps"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "MenuSurfaceProps"
                                }
                            ],
                            "returnType": "void",
                            "type": "(props: MenuSurfaceProps, prevProps: MenuSurfaceProps) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "syncProp",
                    "inheritedFrom": "FoundationComponent.syncProp",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "syncProp",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prop",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProp",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "callback",
                                    "type": "() => void"
                                }
                            ],
                            "returnType": "void",
                            "type": "(prop: any, prevProp: any, callback: () => void) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "unhoistMenuFromBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L305",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu-surface.tsx",
                            "kind": "signature",
                            "name": "unhoistMenuFromBody",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L305",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "update",
                    "inheritedFrom": "FoundationComponent.update",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "update",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                }
            ],
            "properties": [
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": true
                    },
                    "kind": "property",
                    "name": "displayName",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L80",
                    "defaultValue": "\"MenuSurface\"",
                    "type": "string"
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": true
                    },
                    "kind": "property",
                    "name": "shouldDebounce",
                    "defaultValue": "false",
                    "inheritedFrom": "FoundationComponent.shouldDebounce",
                    "type": "boolean"
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "anchorElement",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L83",
                    "defaultValue": " null",
                    "type": "HTMLElement | null"
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "elements",
                    "inheritedFrom": "FoundationComponent.elements",
                    "type": "{ [key: string]: FoundationElement<any, any> }"
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "firstFocusableElement",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L85",
                    "defaultValue": " null",
                    "type": "HTMLElement | null"
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "foundation",
                    "inheritedFrom": "FoundationComponent.foundation",
                    "type": "MDCMenuSurfaceFoundation"
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "hoisted",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L87",
                    "defaultValue": "false",
                    "type": "boolean"
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "lastFocusableElement",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L86",
                    "defaultValue": " null",
                    "type": "HTMLElement | null"
                },
                {
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "previousFocus",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L84",
                    "defaultValue": " null",
                    "type": "HTMLElement | null"
                }
            ],
            "constructorType": {
                "fileName": "src/menu/menu-surface.tsx",
                "flags": {
                    "isExported": true,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                },
                "kind": "constructor",
                "name": "constructor",
                "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L87",
                "signatures": [
                    {
                        "fileName": "src/menu/menu-surface.tsx",
                        "kind": "signature",
                        "name": "new MenuSurface",
                        "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L87",
                        "parameters": [
                            {
                                "flags": {
                                    "isExported": false,
                                    "isExternal": false,
                                    "isOptional": false,
                                    "isPrivate": false,
                                    "isProtected": false,
                                    "isPublic": false,
                                    "isRest": false,
                                    "isStatic": false
                                },
                                "kind": "parameter",
                                "name": "props",
                                "type": "MenuSurfaceProps"
                            }
                        ],
                        "returnType": "MenuSurface",
                        "type": "(props: MenuSurfaceProps) => MenuSurface"
                    }
                ]
            }
        },
        "Menu": {
            "documentation": {
                "contents": [
                    "<p>A menu component for displaying lists items.</p>\n"
                ],
                "contentsRaw": "A menu component for displaying lists items.",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "class",
            "name": "Menu",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L66",
            "extends": [
                "FoundationComponent<MDCMenuFoundation, MenuProps>"
            ],
            "methods": [
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillMount",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillReceiveProps",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillReceiveProps",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuProps>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillUpdate",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidCatch",
                    "inheritedFrom": "ComponentLifecycle.componentDidCatch",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                                ],
                                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentDidCatch",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "error",
                                    "type": "Error"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "errorInfo",
                                    "type": "ErrorInfo"
                                }
                            ],
                            "returnType": "void",
                            "type": "(error: Error, errorInfo: ErrorInfo) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidMount",
                    "inheritedFrom": "FoundationComponent.componentDidMount",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentDidMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidUpdate",
                    "inheritedFrom": "FoundationComponent.componentDidUpdate",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentDidUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "FoundationPropsT<MenuProps>"
                                }
                            ],
                            "returnType": "void",
                            "type": "(prevProps: FoundationPropsT<MenuProps>) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillMount",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillReceiveProps",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillReceiveProps",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuProps>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillUnmount",
                    "inheritedFrom": "FoundationComponent.componentWillUnmount",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentWillUnmount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillUpdate",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "createElement",
                    "inheritedFrom": "FoundationComponent.createElement",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "createElement",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "elementName",
                                    "type": "string"
                                }
                            ],
                            "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
                            "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "emit",
                    "inheritedFrom": "FoundationComponent.emit",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                                ],
                                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                                "metadata": {}
                            },
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "emit",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evtType",
                                    "type": "string"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evtData",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "shouldBubble",
                                    "defaultValue": "false",
                                    "type": "boolean"
                                }
                            ],
                            "returnType": "CustomEvent<any>",
                            "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getDefaultFoundation",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L98",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "getDefaultFoundation",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L98",
                            "parameters": [],
                            "returnType": "MDCMenuFoundation",
                            "type": "() => MDCMenuFoundation"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getSnapshotBeforeUpdate",
                    "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                                ],
                                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "getSnapshotBeforeUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "Readonly<FoundationPropsT<MenuProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                }
                            ],
                            "returnType": "SS | null",
                            "type": "(prevProps: Readonly<FoundationPropsT<MenuProps>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "handleClick",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L143",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "handleClick",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L143",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evt",
                                    "type": "MouseEvent"
                                }
                            ],
                            "returnType": "void",
                            "type": "(evt: MouseEvent) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "handleKeydown",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L150",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "handleKeydown",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L150",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evt",
                                    "type": "KeyboardEvent & KeyboardEvent"
                                }
                            ],
                            "returnType": "void",
                            "type": "(evt: KeyboardEvent & KeyboardEvent) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "handleOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L167",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "handleOpen",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L167",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evt",
                                    "type": "MenuSurfaceOnOpenEventT"
                                }
                            ],
                            "returnType": "void",
                            "type": "(evt: MenuSurfaceOnOpenEventT) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "hoistMenuToBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L86",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "hoistMenuToBody",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L86",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "render",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L180",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "render",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L180",
                            "parameters": [],
                            "returnType": "Element",
                            "type": "() => Element"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "setAnchorCorner",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L90",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "setAnchorCorner",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L90",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "corner",
                                    "type": "Corner"
                                }
                            ],
                            "returnType": "void",
                            "type": "(corner: Corner) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "setAnchorElement",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L94",
                    "signatures": [
                        {
                            "fileName": "src/menu/menu.tsx",
                            "kind": "signature",
                            "name": "setAnchorElement",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L94",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "element",
                                    "type": "HTMLElement"
                                }
                            ],
                            "returnType": "void",
                            "type": "(element: HTMLElement) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "shouldComponentUpdate",
                    "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                                ],
                                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "shouldComponentUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<MenuProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "boolean",
                            "type": "(nextProps: Readonly<FoundationPropsT<MenuProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "sync",
                    "inheritedFrom": "FoundationComponent.sync",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "sync",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "props",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": true,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(props: any, prevProps?: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "syncProp",
                    "inheritedFrom": "FoundationComponent.syncProp",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "syncProp",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prop",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProp",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "callback",
                                    "type": "() => void"
                                }
                            ],
                            "returnType": "void",
                            "type": "(prop: any, prevProp: any, callback: () => void) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "update",
                    "inheritedFrom": "FoundationComponent.update",
                    "signatures": [
                        {
                            "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "update",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                }
            ],
            "properties": [
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": true
                    },
                    "kind": "property",
                    "name": "displayName",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L67",
                    "defaultValue": "\"Menu\"",
                    "type": "string"
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": true
                    },
                    "kind": "property",
                    "name": "shouldDebounce",
                    "defaultValue": "false",
                    "inheritedFrom": "FoundationComponent.shouldDebounce",
                    "type": "boolean"
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "elements",
                    "inheritedFrom": "FoundationComponent.elements",
                    "type": "{ [key: string]: FoundationElement<any, any> }"
                },
                {
                    "fileName": "src/menu/node_modules/@rmwc/list/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "foundation",
                    "inheritedFrom": "FoundationComponent.foundation",
                    "type": "MDCMenuFoundation"
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "list",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L72",
                    "defaultValue": " null",
                    "type": "List | null"
                },
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "menuSurface",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L73",
                    "defaultValue": " null",
                    "type": "MenuSurface | null"
                }
            ],
            "constructorType": {
                "fileName": "src/menu/menu.tsx",
                "flags": {
                    "isExported": true,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                },
                "kind": "constructor",
                "name": "constructor",
                "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L73",
                "signatures": [
                    {
                        "fileName": "src/menu/menu.tsx",
                        "kind": "signature",
                        "name": "new Menu",
                        "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L73",
                        "parameters": [
                            {
                                "flags": {
                                    "isExported": false,
                                    "isExternal": false,
                                    "isOptional": false,
                                    "isPrivate": false,
                                    "isProtected": false,
                                    "isPublic": false,
                                    "isRest": false,
                                    "isStatic": false
                                },
                                "kind": "parameter",
                                "name": "props",
                                "type": "MenuProps"
                            }
                        ],
                        "returnType": "Menu",
                        "type": "(props: MenuProps) => Menu"
                    }
                ]
            }
        },
        "MenuSurfaceProps": {
            "fileName": "src/menu/menu-surface.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "MenuSurfaceProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L44",
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>Manually position the menu to one of the corners.</p>\n"
                        ],
                        "contentsRaw": "Manually position the menu to one of the corners.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "anchorCorner",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L52",
                    "type": "AnchorT"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Children to render.</p>\n"
                        ],
                        "contentsRaw": "Children to render.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "children",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L58",
                    "type": "React.ReactNode"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Make the menu position fixed.</p>\n"
                        ],
                        "contentsRaw": "Make the menu position fixed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "fixed",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L48",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.</p>\n"
                        ],
                        "contentsRaw": "Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "hoistToBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L50",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is closed.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is closed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onClose",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L56",
                    "type": "undefined | (evt: MenuSurfaceOnCloseEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is opened.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is opened.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L54",
                    "type": "undefined | (evt: MenuSurfaceOnOpenEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Opens the menu.</p>\n"
                        ],
                        "contentsRaw": "Opens the menu.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "open",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L46",
                    "type": "undefined | false | true"
                }
            ]
        },
        "MenuProps": {
            "documentation": {
                "contents": [
                    "<p>A menu component for displaying lists items.</p>\n"
                ],
                "contentsRaw": "A menu component for displaying lists items.",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "MenuProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L26",
            "extends": [
                "MenuSurfaceProps"
            ],
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>Manually position the menu to one of the corners.</p>\n"
                        ],
                        "contentsRaw": "Manually position the menu to one of the corners.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "anchorCorner",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L52",
                    "inheritedFrom": "MenuSurfaceProps.anchorCorner",
                    "type": "AnchorT"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Children to render.</p>\n"
                        ],
                        "contentsRaw": "Children to render.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "children",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L58",
                    "inheritedFrom": "MenuSurfaceProps.children",
                    "type": "React.ReactNode"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Make the menu position fixed.</p>\n"
                        ],
                        "contentsRaw": "Make the menu position fixed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "fixed",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L48",
                    "inheritedFrom": "MenuSurfaceProps.fixed",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Whether or not to focus the first list item on open. Defaults to true.</p>\n"
                        ],
                        "contentsRaw": "Whether or not to focus the first list item on open. Defaults to true.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "focusOnOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L30",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.</p>\n"
                        ],
                        "contentsRaw": "Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "hoistToBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L50",
                    "inheritedFrom": "MenuSurfaceProps.hoistToBody",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is closed.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is closed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onClose",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L56",
                    "inheritedFrom": "MenuSurfaceProps.onClose",
                    "type": "undefined | (evt: MenuSurfaceOnCloseEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is opened.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is opened.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L54",
                    "inheritedFrom": "MenuSurfaceProps.onOpen",
                    "type": "undefined | (evt: MenuSurfaceOnOpenEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback that fires when a Menu item is selected. evt.detail = { index: number; item: HTMLElement; }</p>\n"
                        ],
                        "contentsRaw": "Callback that fires when a Menu item is selected. evt.detail = { index: number; item: HTMLElement; }",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onSelect",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L28",
                    "type": "undefined | (evt: MenuOnSelectEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Opens the menu.</p>\n"
                        ],
                        "contentsRaw": "Opens the menu.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "open",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L46",
                    "inheritedFrom": "MenuSurfaceProps.open",
                    "type": "undefined | false | true"
                }
            ]
        },
        "MenuItemsProps": {
            "documentation": {
                "contents": [
                    "<p>A wrapper for menu items</p>\n"
                ],
                "contentsRaw": "A wrapper for menu items",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "MenuItemsProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L34",
            "extends": [
                "ListProps"
            ],
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>Makes the list start detail circular for avatars.</p>\n"
                        ],
                        "contentsRaw": "Makes the list start detail circular for avatars.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "avatarList",
                    "inheritedFrom": "ListProps.avatarList",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Reduces the padding on List items.</p>\n"
                        ],
                        "contentsRaw": "Reduces the padding on List items.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "dense",
                    "inheritedFrom": "ListProps.dense",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Makes the list non interactive. In addition, you&#39;ll have to set <code>ripple={false}</code> on the individual ListItems.</p>\n"
                        ],
                        "contentsRaw": "Makes the list non interactive. In addition, you'll have to set `ripple={false}` on the individual ListItems.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "nonInteractive",
                    "inheritedFrom": "ListProps.nonInteractive",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>A callback for when a list item is interacted with. evt.detail = number</p>\n"
                        ],
                        "contentsRaw": "A callback for when a list item is interacted with. evt.detail = number",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onAction",
                    "inheritedFrom": "ListProps.onAction",
                    "type": "undefined | (evt: ListOnActionEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Gives more space for dual lined list items.</p>\n"
                        ],
                        "contentsRaw": "Gives more space for dual lined list items.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "twoLine",
                    "inheritedFrom": "ListProps.twoLine",
                    "type": "undefined | false | true"
                }
            ]
        },
        "MenuItemProps": {
            "documentation": {
                "contents": [
                    "<p>This is just the ListItem component exported from the Menu module for convenience. You can use <code>ListItem</code> or <code>SimpleListItem</code> components from the List section as long as you add <code>role=&quot;menuitem&quot;</code> and <code>tabIndex=&quot;0&quot;</code> to the components for accessibility.</p>\n"
                ],
                "contentsRaw": "This is just the ListItem component exported from the Menu module for convenience. You can use `ListItem` or `SimpleListItem` components from the List section as long as you add `role=\"menuitem\"` and `tabIndex=\"0\"` to the components for accessibility.",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "MenuItemProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L47",
            "extends": [
                "ListItemProps"
            ],
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{accent: true}}</code></p>\n"
                        ],
                        "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{accent: true}}`",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/types/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "accent",
                    "inheritedFrom": "DeprecatedRippleProps.accent",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>A modifier for an active state.</p>\n"
                        ],
                        "contentsRaw": "A modifier for an active state.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list-item.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "activated",
                    "inheritedFrom": "ListItemProps.activated",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>A modifier for a disabled state.</p>\n"
                        ],
                        "contentsRaw": "A modifier for a disabled state.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list-item.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "disabled",
                    "inheritedFrom": "ListItemProps.disabled",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Adds a ripple effect to the component</p>\n"
                        ],
                        "contentsRaw": "Adds a ripple effect to the component",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/types/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "ripple",
                    "inheritedFrom": "WithRippleProps.ripple",
                    "type": "RipplePropT"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>A modifier for a selected state.</p>\n"
                        ],
                        "contentsRaw": "A modifier for a selected state.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/list/list-item.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "selected",
                    "inheritedFrom": "ListItemProps.selected",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{surface: true}}</code></p>\n"
                        ],
                        "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{surface: true}}`",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/types/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "surface",
                    "inheritedFrom": "DeprecatedRippleProps.surface",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{unbounded: true}}</code></p>\n"
                        ],
                        "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{unbounded: true}}`",
                        "metadata": {}
                    },
                    "fileName": "src/menu/node_modules/@rmwc/types/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "unbounded",
                    "inheritedFrom": "DeprecatedRippleProps.unbounded",
                    "type": "undefined | false | true"
                }
            ]
        },
        "SimpleMenuProps": {
            "documentation": {
                "contents": [
                    "<p>A Simplified menu component that allows you to pass a handle element and will automatically control the open state and add a MenuSurfaceAnchor</p>\n"
                ],
                "contentsRaw": "A Simplified menu component that allows you to pass a handle element and will automatically control the open state and add a MenuSurfaceAnchor",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "SimpleMenuProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L223",
            "extends": [
                "MenuProps"
            ],
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>Manually position the menu to one of the corners.</p>\n"
                        ],
                        "contentsRaw": "Manually position the menu to one of the corners.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "anchorCorner",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L52",
                    "inheritedFrom": "MenuSurfaceProps.anchorCorner",
                    "type": "AnchorT"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Children to render</p>\n"
                        ],
                        "contentsRaw": "Children to render",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "children",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L229",
                    "type": "React.ReactNode"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Make the menu position fixed.</p>\n"
                        ],
                        "contentsRaw": "Make the menu position fixed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "fixed",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L48",
                    "inheritedFrom": "MenuSurfaceProps.fixed",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Whether or not to focus the first list item on open. Defaults to true.</p>\n"
                        ],
                        "contentsRaw": "Whether or not to focus the first list item on open. Defaults to true.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "focusOnOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L30",
                    "inheritedFrom": "MenuProps.focusOnOpen",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>An element that will open the menu when clicked</p>\n"
                        ],
                        "contentsRaw": "An element that will open the menu when clicked",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "handle",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L225",
                    "type": "ReactElement<any>"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.</p>\n"
                        ],
                        "contentsRaw": "Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "hoistToBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L50",
                    "inheritedFrom": "MenuSurfaceProps.hoistToBody",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is closed.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is closed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onClose",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L56",
                    "inheritedFrom": "MenuSurfaceProps.onClose",
                    "type": "undefined | (evt: MenuSurfaceOnCloseEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is opened.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is opened.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L54",
                    "inheritedFrom": "MenuSurfaceProps.onOpen",
                    "type": "undefined | (evt: MenuSurfaceOnOpenEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback that fires when a Menu item is selected. evt.detail = { index: number; item: HTMLElement; }</p>\n"
                        ],
                        "contentsRaw": "Callback that fires when a Menu item is selected. evt.detail = { index: number; item: HTMLElement; }",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onSelect",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L28",
                    "inheritedFrom": "MenuProps.onSelect",
                    "type": "undefined | (evt: MenuOnSelectEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Opens the menu.</p>\n"
                        ],
                        "contentsRaw": "Opens the menu.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "open",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L46",
                    "inheritedFrom": "MenuSurfaceProps.open",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>By default, props spread to the Menu component. These will spread to the MenuSurfaceAnchor which is useful for things like overall positioning of the anchor.</p>\n"
                        ],
                        "contentsRaw": "By default, props spread to the Menu component. These will spread to the MenuSurfaceAnchor which is useful for things like overall positioning of the anchor.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "rootProps",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L227",
                    "type": "Object"
                }
            ]
        },
        "SimpleMenuSurfaceProps": {
            "documentation": {
                "contents": [
                    "<p>The same as SimpleMenu, but a generic surface.</p>\n"
                ],
                "contentsRaw": "The same as SimpleMenu, but a generic surface.",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "SimpleMenuSurfaceProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L233",
            "extends": [
                "MenuSurfaceProps"
            ],
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>Manually position the menu to one of the corners.</p>\n"
                        ],
                        "contentsRaw": "Manually position the menu to one of the corners.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "anchorCorner",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L52",
                    "inheritedFrom": "MenuSurfaceProps.anchorCorner",
                    "type": "AnchorT"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Children to render</p>\n"
                        ],
                        "contentsRaw": "Children to render",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "children",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L239",
                    "type": "React.ReactNode"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Make the menu position fixed.</p>\n"
                        ],
                        "contentsRaw": "Make the menu position fixed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "fixed",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L48",
                    "inheritedFrom": "MenuSurfaceProps.fixed",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>An element that will open the menu when clicked</p>\n"
                        ],
                        "contentsRaw": "An element that will open the menu when clicked",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "handle",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L235",
                    "type": "ReactElement<any>"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.</p>\n"
                        ],
                        "contentsRaw": "Moves the menu to the body. Useful for situations where the content might be cutoff by an overflow: hidden container.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "hoistToBody",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L50",
                    "inheritedFrom": "MenuSurfaceProps.hoistToBody",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is closed.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is closed.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onClose",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L56",
                    "inheritedFrom": "MenuSurfaceProps.onClose",
                    "type": "undefined | (evt: MenuSurfaceOnCloseEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Callback for when the menu is opened.</p>\n"
                        ],
                        "contentsRaw": "Callback for when the menu is opened.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "onOpen",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L54",
                    "inheritedFrom": "MenuSurfaceProps.onOpen",
                    "type": "undefined | (evt: MenuSurfaceOnOpenEventT) => void"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Opens the menu.</p>\n"
                        ],
                        "contentsRaw": "Opens the menu.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu-surface.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "open",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L46",
                    "inheritedFrom": "MenuSurfaceProps.open",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>By default, props spread to the Menu component. These will spread to the MenuSurfaceAnchor which is useful for things like overall positioning of the anchor.</p>\n"
                        ],
                        "contentsRaw": "By default, props spread to the Menu component. These will spread to the MenuSurfaceAnchor which is useful for things like overall positioning of the anchor.",
                        "metadata": {}
                    },
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "rootProps",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L237",
                    "type": "Object"
                }
            ]
        },
        "SimpleMenuState": {
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "SimpleMenuState",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L242",
            "methods": [],
            "properties": [
                {
                    "fileName": "src/menu/menu.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "open",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L243",
                    "type": "boolean"
                }
            ]
        },
        "AnchorT": {
            "fileName": "src/menu/menu-surface.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "type alias",
            "name": "AnchorT",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L31",
            "type": "\"bottomEnd\" | \"bottomLeft\" | \"bottomRight\" | \"bottomStart\" | \"topEnd\" | \"topLeft\" | \"topRight\" | \"topStart\""
        },
        "MenuSurfaceOnOpenEventT": {
            "fileName": "src/menu/menu-surface.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "type alias",
            "name": "MenuSurfaceOnOpenEventT",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L41",
            "type": "RMWC.CustomEventT<{}>"
        },
        "MenuSurfaceOnCloseEventT": {
            "fileName": "src/menu/menu-surface.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "type alias",
            "name": "MenuSurfaceOnCloseEventT",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu-surface.tsx#L42",
            "type": "RMWC.CustomEventT<{}>"
        },
        "MenuOnSelectEventT": {
            "documentation": {
                "contents": [
                    "<p>Menu</p>\n"
                ],
                "contentsRaw": "Menu",
                "metadata": {}
            },
            "fileName": "src/menu/menu.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "type alias",
            "name": "MenuOnSelectEventT",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/menu/menu.tsx#L20",
            "type": "RMWC.CustomEventT<>"
        }
    }
}
