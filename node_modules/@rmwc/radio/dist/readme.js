"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var _doc_utils_1 = require("@doc-utils");
var generated_props_json_1 = __importDefault(require("./generated-props.json"));
var generated_examples_json_1 = __importDefault(require("./generated-examples.json"));
var _1 = require(".");
function default_1() {
    return (react_1.default.createElement(_doc_utils_1.Docs, { title: "Radio Buttons", lead: "Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.", module: "@rmwc/radio", styles: [
            '@material/radio/dist/mdc.radio.css',
            '@material/form-field/dist/mdc.form-field.css'
        ], docsLink: "https://material.io/develop/web/components/input-controls/radio-buttons/", examples: generated_examples_json_1.default },
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Controlled Usage"),
        react_1.default.createElement(_doc_utils_1.DocsExample, null, function Example() {
            var _a = __read(react_1.default.useState('cookies'), 2), value = _a[0], setValue = _a[1];
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Radio, { value: "cookies", checked: value === 'cookies', onChange: function (evt) { return setValue(evt.currentTarget.value); } }, "Cookies"),
                react_1.default.createElement(_1.Radio, { value: "pizza", checked: value === 'pizza', onChange: function (evt) { return setValue(evt.currentTarget.value); } }, "Pizza"),
                react_1.default.createElement(_1.Radio, { value: "icecream", checked: value === 'icecream', onChange: function (evt) { return setValue(evt.currentTarget.value); } }, "Icecream")));
        }),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Uncontrolled Usage"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "You can use Radio Buttons and receive change events without having to manually set the `checked` prop. Just give the Radio components the same `name`. This example also shows using the `label` prop instead of setting the label as a child."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null,
            react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(_1.Radio, { label: "Cookies", value: "cookies", name: "myRadioGroup", onChange: function (evt) { return console.log(evt.currentTarget.value); } }),
                react_1.default.createElement(_1.Radio, { label: "Pizza", value: "pizza", name: "myRadioGroup", onChange: function (evt) { return console.log(evt.currentTarget.value); } }),
                react_1.default.createElement(_1.Radio, { label: "Icecream", value: "icecream", name: "myRadioGroup", onChange: function (evt) { return console.log(evt.currentTarget.value); } }))),
        react_1.default.createElement(_doc_utils_1.DocProps, { src: generated_props_json_1.default, components: [_1.Radio] })));
}
exports.default = default_1;
exports.galleryExample = (react_1.default.createElement(react_1.default.Fragment, null,
    react_1.default.createElement(_1.Radio, { defaultChecked: true }),
    react_1.default.createElement(_1.Radio, null)));
