/// <reference types="react" />
import * as RMWC from '@rmwc/types';
import { MDCSliderFoundation } from '@material/slider';
import { FoundationComponent } from '@rmwc/base';
export declare type SliderOnChangeEventT = RMWC.CustomEventT<{
    value: number;
}>;
export declare type SliderOnInputEventT = RMWC.CustomEventT<{
    value: number;
}>;
/** A Slider component. */
export interface SliderProps {
    /** A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value. evt.detail = { value: number;} */
    onChange?: (evt: SliderOnChangeEventT) => void;
    /** A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value. evt.detail = { value: number;} */
    onInput?: (evt: SliderOnInputEventT) => void;
    /** The value of the Slider. */
    value?: number | string;
    /** The minimum value of the Slider. */
    min?: number | string;
    /** The maximum value of the Slider. */
    max?: number | string;
    /** A step to quantize values by. */
    step?: number | string;
    /** Displays the exact value of the Slider on the knob. */
    discrete?: boolean;
    /** Displays the individual step markers on the Slider track. */
    displayMarkers?: boolean;
    /** Disables the control. */
    disabled?: boolean;
}
declare type SliderState = {
    trackMarkersCount: number;
};
/** A Slider component. */
export declare class Slider extends FoundationComponent<MDCSliderFoundation, SliderProps, SliderState> {
    state: {
        trackMarkersCount: number;
        pinContainerStyle: {};
    };
    static displayName: string;
    private root;
    private thumbContainer;
    private sliderPin;
    track: HTMLElement | null;
    componentDidMount(): void;
    /** @return {number} */
    /** @param {number} value */
    value: number;
    /** @return {number} */
    /** @param {number} min */
    min: number;
    /** @return {number} */
    /** @param {number} max */
    max: number;
    /** @return {number} */
    /** @param {number} step */
    step: number;
    /** @return {boolean} */
    /** @param {boolean} disabled */
    disabled: boolean;
    discrete: boolean;
    displayMarkers: boolean;
    layout(): void;
    sync(props: SliderProps, prevProps: SliderProps): void;
    getDefaultFoundation(): MDCSliderFoundation;
    render(): JSX.Element;
}
export {};
