import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { MDCDialogFoundation } from '@material/dialog';
import { FoundationComponent, FocusTrap } from '@rmwc/base';
import { ButtonProps } from '@rmwc/button';
/** The Dialog title. */
export interface DialogTitleProps {
}
/** The Dialog title. */
export declare const DialogTitle: React.ComponentType<RMWC.MergeInterfacesT<DialogTitleProps, RMWC.ComponentProps>>;
/** The Dialog content. */
export interface DialogContentProps {
}
/** The Dialog content. */
export declare const DialogContent: React.ComponentType<RMWC.MergeInterfacesT<DialogContentProps, RMWC.ComponentProps>>;
/** Actions container for the Dialog. */
export interface DialogActionsProps {
}
/** Actions container for the Dialog. */
export declare const DialogActions: React.ComponentType<RMWC.MergeInterfacesT<DialogActionsProps, RMWC.ComponentProps>>;
/** Action buttons for the Dialog. */
export interface DialogButtonProps extends ButtonProps {
    /** An action returned in evt.detail.action to the onClose handler. */
    action?: string;
    /** Indicates this is the default selected action when pressing enter */
    isDefaultAction?: boolean;
}
/** Action buttons for the Dialog. */
export declare class DialogButton extends React.Component<DialogButtonProps & RMWC.ComponentProps> {
    static displayName: string;
    render(): JSX.Element;
}
export declare type DialogOnOpenEventT = RMWC.CustomEventT<{}>;
export declare type DialogOnCloseEventT = RMWC.CustomEventT<{
    action?: string;
}>;
/** A Dialog component. */
export interface DialogProps {
    /** Whether or not the Dialog is showing. */
    open?: boolean;
    /** Callback for when the Dialog opens. */
    onOpen?: (evt: DialogOnOpenEventT) => void;
    /** Callback for when the Dialog closes. evt.detail = { action?: string }*/
    onClose?: (evt: DialogOnCloseEventT) => void;
    /** Callback to use if you need more direct access to the Dialog's lifecycle. */
    onStateChange?: (state: 'opening' | 'opened' | 'closing' | 'closed') => void;
    /** Prevent the dialog from closing when the scrim is clicked. */
    preventOutsideDismiss?: boolean;
}
/** A Dialog component. */
export declare class Dialog extends FoundationComponent<MDCDialogFoundation, DialogProps> {
    static displayName: string;
    private root;
    container: null | HTMLElement;
    content: null | HTMLElement;
    buttons: null | HTMLElement[];
    defaultButton: null | HTMLElement;
    focusTrap: FocusTrap | null;
    handleDocumentKeydown: (evt: KeyboardEvent) => void;
    constructor(props: DialogProps);
    open(): void;
    close(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    sync(props: DialogProps): void;
    getDefaultFoundation(): MDCDialogFoundation;
    handleClick(evt: React.MouseEvent & MouseEvent): void;
    handleKeydown(evt: React.KeyboardEvent & KeyboardEvent): void;
    render(): JSX.Element;
}
/** A SimpleDialog component for ease of use. */
export interface SimpleDialogProps extends DialogProps {
    /** A title for the default Dialog template. */
    title?: React.ReactNode;
    /** Additional Dialog header content for the default Dialog template. */
    header?: React.ReactNode;
    /** Body content for the default Dialog template, rendered before children. */
    body?: React.ReactNode;
    /** Additional footer content for the default Dialog template, rendered before any buttons. */
    footer?: React.ReactNode;
    /** Creates an accept button for the default Dialog template with a given label. You can pass `null` to remove the button.*/
    acceptLabel?: React.ReactNode;
    /** Creates an cancel button for the default Dialog with a given label. You can pass `null` to remove the button.*/
    cancelLabel?: React.ReactNode;
    /** Any children will be rendered in the body of the default Dialog template. */
    children?: React.ReactNode;
}
/** A SimpleDialog component for ease of use. */
export declare class SimpleDialog extends React.Component<RMWC.MergeInterfacesT<SimpleDialogProps, RMWC.ComponentProps>> {
    static displayName: string;
    static defaultProps: {
        title: undefined;
        header: undefined;
        body: undefined;
        footer: undefined;
        acceptLabel: string;
        cancelLabel: string;
        open: boolean;
        children: undefined;
    };
    render(): JSX.Element;
}
