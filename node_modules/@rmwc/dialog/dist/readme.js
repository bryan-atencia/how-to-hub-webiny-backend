"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var _doc_utils_1 = require("@doc-utils");
var generated_props_json_1 = __importDefault(require("./generated-props.json"));
var generated_examples_json_1 = __importDefault(require("./generated-examples.json"));
var dialog_1 = require("./dialog");
var button_1 = require("../button");
var dialog_queue_1 = require("./dialog-queue");
function default_1() {
    return (react_1.default.createElement(_doc_utils_1.Docs, { title: "Dialogs", lead: "Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.", module: "@rmwc/dialog", styles: [
            '@material/dialog/dist/mdc.dialog.css',
            '@material/button/dist/mdc.button.css'
        ], docsLink: "https://material.io/develop/web/components/dialogs/", examples: generated_examples_json_1.default },
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Standard Usage"),
        react_1.default.createElement(_doc_utils_1.DocsExample, null, function Example() {
            var _a = __read(react_1.default.useState(false), 2), open = _a[0], setOpen = _a[1];
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(dialog_1.Dialog, { open: open, onClose: function (evt) {
                        console.log(evt.detail.action);
                        setOpen(false);
                    } },
                    react_1.default.createElement(dialog_1.DialogTitle, null, "Dialog Title"),
                    react_1.default.createElement(dialog_1.DialogContent, null, "This is a standard dialog."),
                    react_1.default.createElement(dialog_1.DialogActions, null,
                        react_1.default.createElement(dialog_1.DialogButton, { action: "close" }, "Cancel"),
                        react_1.default.createElement(dialog_1.DialogButton, { action: "accept", isDefaultAction: true }, "Sweet!"))),
                react_1.default.createElement(button_1.Button, { raised: true, onClick: function () { return setOpen(true); } }, "Open standard Dialog")));
        }),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Simplified Usage"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "Material Dialogs are a complex component. RMWC contains an additional `SimpleDialog` component for ease of use that internally contains the default structure already built out. Illustrated below is both the standard and simple dialog usage."),
        react_1.default.createElement(_doc_utils_1.DocsExample, null, function Example() {
            var _a = __read(react_1.default.useState(false), 2), open = _a[0], setOpen = _a[1];
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(dialog_1.SimpleDialog, { title: "This is a simple dialog", body: "You can pass the body prop or children.", open: open, onClose: function (evt) {
                        console.log(evt.detail.action);
                        setOpen(false);
                    } }),
                react_1.default.createElement(button_1.Button, { raised: true, onClick: function () { return setOpen(true); } }, "Open Simple Dialog")));
        }),
        react_1.default.createElement(_doc_utils_1.DocsSubtitle, null, "Usage with DialogQueue"),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "Some dialog interactions are complex, but a lot of the time you just need a simple alert or confirm dialog. `DialogQueue` allows you to open dialogs from anywhere in your app and emulates the browsers built in `alert`, `confirm` and `prompt` dialogs. If you've used the `SnackbarQueue`, the `DialogQueue` is very similar."),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "Setup is nice and easy, create a queue object you can pass around in your code base, pass the queues `dialogs` to the `DialogQueue`component, and then use the `alert`, `prompt` or `confirm` api to open dialogs."),
        react_1.default.createElement(_doc_utils_1.DocsExample, { codeOnly: true }, /* jsx */ "\n        // Create a file that exports your queue\n        // myQueue.js\n        import { createDialogQueue } from '@rmwc/dialog';\n\n        export const queue = createDialogQueue();\n      "),
        react_1.default.createElement(_doc_utils_1.DocsExample, { codeOnly: true }, /* jsx */ "\n        // Somewhere at the top level of your app\n        // Render the DialogQueue\n        import React from 'react';\n        import { queue } from './myQueue';\n\n        export default function App() {\n          return (\n            <div>\n              ...\n              <DialogQueue\n                dialogs={queue.dialogs}\n                // You can also pass default options to pass to your dialogs\n                // ie, prevent all dialogs from dismissing from a click on the background scrim\n                preventOutsideDismiss\n              />\n            </div>\n          )\n        }\n        \n      "),
        react_1.default.createElement(_doc_utils_1.DocsP, null, "The `alert`, `confirm`, and `prompt` functions were designed to mimic the the built-in browser methods with a couple of small difference. First, they all return a promise. The promise will always resolve successfully with the response indicating the appropriate action. `alert` the response will be `accept` for clicking the ok button, or `close`. `confirm` will resolve `true` or `false`, and `prompt` will resolve with the value entered into the input, or `null` if the closed the dialog. Second, all methods the methods accept any valid prop for `SimpleDialog`."),
        react_1.default.createElement(_doc_utils_1.DocsExample, { codeOnly: true }, /* jsx */ "\n        // Somewhere else in your app\n        // Could be a view, your redux store, anywhere you want...\n        import { queue } from './myQueue';\n\n        queue.alert({\n          title: 'Hi there',\n          body: 'Whats going on?'\n        });\n\n        queue.confirm({\n          title: <b>Are you positive?</b>,\n          body: 'You have selected pizza instead icecream!',\n          acceptLabel: 'CONFIRM'\n        });\n\n        queue.prompt({\n          title: 'Whats your name?',\n          body: 'Anything will do',\n          acceptLabel: 'Submit',\n          cancelLabel: 'Skip',\n          // For prompts only, you can pass props to the input\n          inputProps: {\n            outlined: true\n          }\n        });\n      "),
        react_1.default.createElement(_doc_utils_1.DocsExample, { label: "Inline Example" }, function () {
            var _a = dialog_queue_1.createDialogQueue(), dialogs = _a.dialogs, alert = _a.alert, confirm = _a.confirm, prompt = _a.prompt;
            function App() {
                var _a = __read(react_1.default.useState('____________'), 2), response = _a[0], setResponse = _a[1];
                var fireAlert = function () {
                    return alert({ title: 'Hello!' }).then(function (res) { return setResponse(res); });
                };
                var fireConfirm = function () { return confirm({}).then(function (res) { return setResponse(res); }); };
                var firePrompt = function () {
                    return prompt({ inputProps: { outlined: true } }).then(function (res) {
                        return setResponse(res);
                    });
                };
                return (react_1.default.createElement("div", null,
                    react_1.default.createElement(button_1.Button, { label: "Alert", onClick: fireAlert }),
                    react_1.default.createElement(button_1.Button, { label: "Confirm", onClick: fireConfirm }),
                    react_1.default.createElement(button_1.Button, { label: "Prompt", onClick: firePrompt }),
                    react_1.default.createElement(button_1.Button, { label: "In Sequence", onClick: function () {
                            fireAlert();
                            fireConfirm();
                            firePrompt();
                        } }),
                    react_1.default.createElement("p", null,
                        "Response: ",
                        react_1.default.createElement("b", null, String(response))),
                    react_1.default.createElement(dialog_queue_1.DialogQueue, { dialogs: dialogs })));
            }
            return react_1.default.createElement(App, null);
        }),
        react_1.default.createElement(_doc_utils_1.DocProps, { src: generated_props_json_1.default, components: [
                dialog_1.Dialog,
                dialog_1.DialogTitle,
                dialog_1.DialogContent,
                dialog_1.DialogActions,
                dialog_1.DialogButton,
                dialog_1.SimpleDialog
            ] })));
}
exports.default = default_1;
exports.galleryExample = (react_1.default.createElement("div", { role: "alertdialog", "aria-modal": "true", className: "mdc-dialog--open mdc-dialog", style: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        zIndex: 0
    } },
    react_1.default.createElement("div", { className: "mdc-dialog__container", style: { transform: 'scale(0.75)' } },
        react_1.default.createElement("div", { className: "mdc-dialog__surface" },
            react_1.default.createElement("h2", { className: "mdc-dialog__title" }, "Hello!"),
            react_1.default.createElement("div", { className: "mdc-dialog__content" }, "You have been alerted!"),
            react_1.default.createElement("div", { className: "mdc-dialog__actions" },
                react_1.default.createElement("button", { "data-mdc-dialog-action": "accept", className: "mdc-dialog__button mdc-dialog__button--default mdc-ripple-upgraded mdc-dialog__button mdc-dialog__button--default mdc-button" },
                    react_1.default.createElement("span", { className: "mdc-button__label" }, "OK"))))),
    react_1.default.createElement("div", { className: "mdc-dialog__scrim", style: { position: 'absolute' } })));
