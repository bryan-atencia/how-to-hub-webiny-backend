"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var dialog_1 = require("@material/dialog");
var base_1 = require("@rmwc/base");
var button_1 = require("@rmwc/button");
var isScrollable = function (el) {
    return el.scrollHeight > el.offsetHeight;
};
var areTopsMisaligned = function (els) {
    var tops = new Set();
    [].forEach.call(els, function (el) { return tops.add(el.offsetTop); });
    return tops.size > 1;
};
var DialogRoot = base_1.componentFactory({
    displayName: 'DialogRoot',
    defaultProps: {
        role: 'alertdialog',
        'aria-modal': true
    },
    classNames: ['mdc-dialog']
});
var DialogScrim = /** @class */ (function (_super) {
    __extends(DialogScrim, _super);
    function DialogScrim() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogScrim.prototype.shouldComponentUpdate = function (nextProps) {
        return this.props.disableInteraction !== nextProps.disableInteraction;
    };
    DialogScrim.prototype.render = function () {
        var style = this.props.disableInteraction
            ? { pointerEvents: 'none' }
            : {};
        return React.createElement("div", { className: "mdc-dialog__scrim", style: style });
    };
    return DialogScrim;
}(React.Component));
/** The Dialog title. */
exports.DialogTitle = base_1.componentFactory({
    displayName: 'DialogTitle',
    tag: 'h2',
    classNames: ['mdc-dialog__title']
});
/** The Dialog content. */
exports.DialogContent = base_1.componentFactory({
    displayName: 'DialogContent',
    classNames: ['mdc-dialog__content']
});
/** Actions container for the Dialog. */
exports.DialogActions = base_1.componentFactory({
    displayName: 'DialogActions',
    classNames: ['mdc-dialog__actions']
});
/** Action buttons for the Dialog. */
var DialogButton = /** @class */ (function (_super) {
    __extends(DialogButton, _super);
    function DialogButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogButton.prototype.render = function () {
        var _a;
        var _b = this.props, _c = _b.action, action = _c === void 0 ? '' : _c, className = _b.className, isDefaultAction = _b.isDefaultAction, rest = __rest(_b, ["action", "className", "isDefaultAction"]);
        var defaultProp = !!isDefaultAction
            ? (_a = {}, _a[dialog_1.MDCDialogFoundation.strings.BUTTON_DEFAULT_ATTRIBUTE] = true, _a) : {};
        return (React.createElement(button_1.Button, __assign({}, rest, defaultProp, { "data-mdc-dialog-action": action, className: [className, 'mdc-dialog__button'].filter(Boolean).join(' ') })));
    };
    DialogButton.displayName = 'DialogButton';
    return DialogButton;
}(React.Component));
exports.DialogButton = DialogButton;
/** A Dialog component. */
var Dialog = /** @class */ (function (_super) {
    __extends(Dialog, _super);
    function Dialog(props) {
        var _this = _super.call(this, props) || this;
        _this.root = _this.createElement('root');
        _this.container = null;
        _this.content = null;
        _this.buttons = null;
        _this.defaultButton = null;
        _this.focusTrap = null;
        _this.handleDocumentKeydown = function () { };
        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleKeydown = _this.handleKeydown.bind(_this);
        return _this;
    }
    Dialog.prototype.open = function () {
        var _this = this;
        if (!this.foundation.isOpen()) {
            document.addEventListener('keydown', this.handleDocumentKeydown);
            this.foundation.open();
            // Don't like this fix
            // This corrects an issue where the default button was stealing focus
            // When something else in the dialog should have it
            setTimeout(function () {
                if (_this.defaultButton &&
                    document.activeElement !== _this.defaultButton &&
                    document.activeElement &&
                    document.activeElement.classList.contains('mdc-dialog__button')) {
                    _this.defaultButton.focus();
                }
            }, 200);
        }
    };
    Dialog.prototype.close = function () {
        if (this.foundation.isOpen()) {
            document.removeEventListener('keydown', this.handleDocumentKeydown);
            this.foundation.close();
        }
    };
    Dialog.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        this.container =
            this.root.ref &&
                this.root.ref.querySelector(dialog_1.MDCDialogFoundation.strings.CONTAINER_SELECTOR);
        this.content =
            this.root.ref &&
                this.root.ref.querySelector(dialog_1.MDCDialogFoundation.strings.CONTENT_SELECTOR);
        this.buttons =
            this.root.ref &&
                [].slice.call(this.root.ref.querySelectorAll(dialog_1.MDCDialogFoundation.strings.BUTTON_SELECTOR));
        this.defaultButton =
            this.root.ref &&
                this.root.ref.querySelector("[" + dialog_1.MDCDialogFoundation.strings.BUTTON_DEFAULT_ATTRIBUTE + "]");
        this.container &&
            (this.focusTrap = base_1.createFocusTrap(this.container, {
                initialFocus: undefined,
                escapeDeactivates: false,
                clickOutsideDeactivates: true
            }));
        this.handleDocumentKeydown = this.foundation.handleDocumentKeydown.bind(this.foundation);
        document.addEventListener('keydown', this.handleDocumentKeydown);
    };
    Dialog.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        document.removeEventListener('keydown', this.handleDocumentKeydown);
    };
    Dialog.prototype.sync = function (props) {
        if (this.props.open) {
            this.open();
        }
        else {
            this.close();
        }
    };
    Dialog.prototype.getDefaultFoundation = function () {
        var _this = this;
        return new dialog_1.MDCDialogFoundation({
            addClass: function (className) { return _this.root.addClass(className); },
            removeClass: function (className) { return _this.root.removeClass(className); },
            hasClass: function (className) { return _this.root.hasClass(className); },
            addBodyClass: function (className) {
                return document.body && document.body.classList.add(className);
            },
            removeBodyClass: function (className) {
                return document.body && document.body.classList.remove(className);
            },
            eventTargetMatches: function (target, selector) {
                return base_1.matches(target, selector);
            },
            trapFocus: function () {
                try {
                    // we dont always have an item to focus
                    // so we try catch it
                    _this.focusTrap && _this.focusTrap.activate();
                }
                catch (err) { }
            },
            releaseFocus: function () { return _this.focusTrap && _this.focusTrap.deactivate(); },
            isContentScrollable: function () { return !!_this.content && isScrollable(_this.content); },
            areButtonsStacked: function () { return areTopsMisaligned(_this.buttons); },
            getActionFromEvent: function (evt) {
                var element = base_1.closest(evt.target, "[" + dialog_1.MDCDialogFoundation.strings.ACTION_ATTRIBUTE + "]");
                return (element &&
                    element.getAttribute(dialog_1.MDCDialogFoundation.strings.ACTION_ATTRIBUTE));
            },
            clickDefaultButton: function () {
                if (_this.defaultButton) {
                    _this.defaultButton.click();
                }
            },
            reverseButtons: function () {
                _this.buttons && _this.buttons.reverse();
                _this.buttons &&
                    _this.buttons.forEach(function (button) {
                        return button.parentElement && button.parentElement.appendChild(button);
                    });
            },
            notifyOpening: function () {
                _this.emit('onOpen', {});
                _this.props.onStateChange && _this.props.onStateChange('opening');
            },
            notifyOpened: function () {
                _this.emit('onOpened', {});
                _this.props.onStateChange && _this.props.onStateChange('opened');
            },
            notifyClosing: function (action) {
                _this.emit('onClose', action ? { action: action } : {});
                _this.props.onStateChange && _this.props.onStateChange('closing');
            },
            notifyClosed: function (action) {
                _this.emit('onClosed', action ? { action: action } : {});
                _this.props.onStateChange && _this.props.onStateChange('closed');
            },
            getInitialFocusEl: function () {
                return document.querySelector("[" + dialog_1.MDCDialogFoundation.strings.INITIAL_FOCUS_ATTRIBUTE + "]");
            }
        });
    };
    Dialog.prototype.handleClick = function (evt) {
        this.props.onClick && this.props.onClick(evt);
        return this.foundation.handleClick(evt);
    };
    Dialog.prototype.handleKeydown = function (evt) {
        this.props.onKeyDown && this.props.onKeyDown(evt);
        return this.foundation.handleKeydown(evt);
    };
    Dialog.prototype.render = function () {
        var _a = this.props, children = _a.children, open = _a.open, onOpen = _a.onOpen, onClose = _a.onClose, onStateChange = _a.onStateChange, preventOutsideDismiss = _a.preventOutsideDismiss, rest = __rest(_a, ["children", "open", "onOpen", "onClose", "onStateChange", "preventOutsideDismiss"]);
        return (React.createElement(DialogRoot, __assign({}, this.root.props(rest), { ref: this.root.setRef, onClick: this.handleClick, onKeyDown: this.handleKeydown }),
            React.createElement("div", { className: "mdc-dialog__container" },
                React.createElement("div", { className: "mdc-dialog__surface" }, children)),
            React.createElement(DialogScrim, { disableInteraction: preventOutsideDismiss })));
    };
    Dialog.displayName = 'Dialog';
    return Dialog;
}(base_1.FoundationComponent));
exports.Dialog = Dialog;
/** A SimpleDialog component for ease of use. */
var SimpleDialog = /** @class */ (function (_super) {
    __extends(SimpleDialog, _super);
    function SimpleDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleDialog.prototype.render = function () {
        var _a = this.props, title = _a.title, header = _a.header, body = _a.body, footer = _a.footer, acceptLabel = _a.acceptLabel, cancelLabel = _a.cancelLabel, children = _a.children, open = _a.open, rest = __rest(_a, ["title", "header", "body", "footer", "acceptLabel", "cancelLabel", "children", "open"]);
        return (React.createElement(Dialog, __assign({ open: open }, rest),
            (!!title || !!header) && (React.createElement(exports.DialogTitle, null,
                !!title && title,
                !!header && header)),
            (!!body || children) && (React.createElement(exports.DialogContent, null,
                body,
                children)),
            (!!cancelLabel || !!acceptLabel || !!footer) && (React.createElement(exports.DialogActions, null,
                !!footer && footer,
                !!cancelLabel && (React.createElement(DialogButton, { action: "close" }, cancelLabel)),
                !!acceptLabel && (React.createElement(DialogButton, { action: "accept", isDefaultAction: true }, acceptLabel))))));
    };
    SimpleDialog.displayName = 'SimpleDialog';
    SimpleDialog.defaultProps = {
        title: undefined,
        header: undefined,
        body: undefined,
        footer: undefined,
        acceptLabel: 'Accept',
        cancelLabel: 'Cancel',
        open: false,
        children: undefined
    };
    return SimpleDialog;
}(React.Component));
exports.SimpleDialog = SimpleDialog;
