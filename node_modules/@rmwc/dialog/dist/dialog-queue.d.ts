import * as React from 'react';
import { SimpleDialogProps, DialogOnCloseEventT } from './dialog';
import { ArrayEmitter } from '@rmwc/base';
import { TextFieldProps } from '@rmwc/textfield';
import { ComponentProps, MergeInterfacesT } from '@rmwc/types';
interface DialogQueueInputBase extends SimpleDialogProps {
    id?: string;
    /** Props for the input when using the prompt dialog. Only applies to prompt. */
    inputProps?: MergeInterfacesT<TextFieldProps, ComponentProps>;
}
export interface DialogQueueInput extends MergeInterfacesT<DialogQueueInputBase, ComponentProps> {
}
interface DialogQueueSpec extends DialogQueueInput {
    id: string;
    resolve: (response: any) => void;
    reject: (reason: any) => void;
}
/** A snackbar queue for rendering messages */
export interface DialogQueueProps extends SimpleDialogProps {
    dialogs: ArrayEmitter<DialogQueueSpec>;
}
interface DialogQueueState {
    closingDialogs: {
        [id: string]: true;
    };
}
/** A snackbar queue for rendering messages */
export declare class DialogQueue extends React.Component<MergeInterfacesT<DialogQueueProps, ComponentProps>, DialogQueueState> {
    static displayName: string;
    state: DialogQueueState;
    constructor(props: DialogQueueProps);
    componentWillUnmount(): void;
    removeDialog(evt: DialogOnCloseEventT, dialog: DialogQueueSpec): void;
    render(): JSX.Element[];
}
/** Creates a snackbar queue */
export declare const createDialogQueue: () => {
    dialogs: ArrayEmitter<DialogQueueSpec>;
    alert: (dialog: DialogQueueInput) => Promise<any>;
    confirm: (dialog: DialogQueueInput) => Promise<any>;
    prompt: (dialog: DialogQueueInput) => Promise<any>;
};
export {};
