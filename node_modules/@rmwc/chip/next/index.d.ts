import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { MDCChipFoundation } from '@material/chips';
import { FoundationComponent } from '@rmwc/base';
import { IconProps } from '@rmwc/icon';
export declare type ChipOnInteractionEventT = RMWC.CustomEventT<{
    chipId: string;
}>;
export declare type ChipOnTrailingIconInteractionEventT = RMWC.CustomEventT<{
    chipId: string;
}>;
export declare type ChipOnRemoveEventT = RMWC.CustomEventT<{
    chipId: string;
}>;
/** A Chip component. */
export interface ChipProps {
    /** Text for your Chip. */
    label?: React.ReactNode;
    /** makes the Chip appear selected. */
    selected?: boolean;
    /** Instance of an Icon Component. */
    icon?: RMWC.IconPropT;
    /** Instance of an Icon Component. */
    trailingIcon?: RMWC.IconPropT;
    /** An optional chip ID that will be included in callback evt.detail. If this is not passed, RMWC will attempt to use the "key" prop if present.  */
    id?: string;
    /** Includes an optional checkmark for the chips selected state. */
    checkmark?: boolean;
    /** Additional children will be rendered in the text area. */
    children?: React.ReactNode;
    /** A callback for click or enter key. This should be used over onClick for accessibility reasons. evt.detail = { chipId: string }  */
    onInteraction?: (evt: ChipOnInteractionEventT) => void;
    /** A callback for click or enter key for the trailing icon. material-components-web always treats this as an intent to remove the chip. evt.detail = { chipId: string } */
    onTrailingIconInteraction?: (evt: ChipOnTrailingIconInteractionEventT) => void;
    /** A callback that is fired once the chip is in an exited state from removing it. evt.detail = { chipId: string } */
    onRemove?: (evt: ChipOnRemoveEventT) => void;
}
export interface DeprecatedChipProps {
    /** Deprecated, use label instead */
    text?: React.ReactNode;
}
/** A Chip component. */
export declare class Chip extends FoundationComponent<MDCChipFoundation, ChipProps & DeprecatedChipProps> {
    static displayName: string;
    private root;
    id: string;
    checkmarkEl: HTMLDivElement | null;
    _reactInternalFiber: any;
    constructor(props: ChipProps);
    componentDidMount(): void;
    getDefaultFoundation(): MDCChipFoundation;
    handleInteraction(evt: React.MouseEvent & React.KeyboardEvent & MouseEvent & KeyboardEvent): void;
    handleTransitionEnd(evt: React.TransitionEvent & TransitionEvent): void;
    handleTrailingIconInteraction(evt: any): void;
    render(): JSX.Element;
}
export interface ChipIconProps extends IconProps {
    /** Make it a leading icon */
    leading?: boolean;
    /** Make it a trailing icon */
    trailing?: boolean;
}
export declare const ChipIcon: {
    (props: ChipIconProps & RMWC.ComponentProps): JSX.Element;
    displayName: string;
};
/** A container for multiple chips. */
export interface ChipSetProps {
    /** Creates a choice chipset */
    choice?: boolean;
    /** Creates a filter chipset */
    filter?: boolean;
}
/** A container for multiple chips. */
export declare const ChipSet: React.ComponentType<RMWC.MergeInterfacesT<ChipSetProps, RMWC.ComponentProps>>;
