import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    {\n        mailchimp {\n            getSettings {\n                data {\n                    enabled\n                    apiKey\n                }\n            }\n            listLists {\n                data {\n                    id\n                    name\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useState } from "react";
import { useApolloClient } from "react-apollo";
import { Query } from "react-apollo";
import gql from "graphql-tag";
import { css } from "emotion";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import { getPlugins } from "@webiny/plugins";
import { Form } from "@webiny/form";
import { Input } from "@webiny/ui/Input";
import { ButtonPrimary } from "@webiny/ui/Button";
import { CircularProgress } from "@webiny/ui/Progress";
import MailchimpElement from "./MailchimpElement";
import settingsGql from "./graphql";
import { validation } from "@webiny/validation";
var formPreview = /*#__PURE__*/css({
  padding: 25,
  border: "1px solid var(--mdc-theme-background)",
  overflow: "scroll"
}, "label:formPreview;");
var saveApiKeyButtonWrapper = /*#__PURE__*/css({
  textAlign: "right",
  marginTop: 10
}, "label:saveApiKeyButtonWrapper;");
var enableMailchimpLink = /*#__PURE__*/css({
  cursor: "pointer"
}, "label:enableMailchimpLink;");
var MAILCHIMP_SETTINGS = gql(_templateObject());

var MailchimpElementAdvancedSettings = function MailchimpElementAdvancedSettings(_ref) {
  var Bind = _ref.Bind;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();
  var submitApiKeyForm = useHandler({}, function () {
    return /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
        var _ref2$data, data, settingsLists, response, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref2$data = _ref2.data, data = _ref2$data === void 0 ? {} : _ref2$data, settingsLists = _ref2.settingsLists;
                setLoading(true);
                _context.next = 4;
                return client.mutate({
                  mutation: settingsGql.mutation,
                  variables: {
                    data: _objectSpread(_objectSpread({}, data), {}, {
                      enabled: true
                    })
                  }
                });

              case 4:
                response = _context.sent;
                setLoading(false);
                error = _get(response, "data.mailchimp.updateSettings.error");

                if (error) {
                  showSnackbar(error.message);
                } else {
                  showSnackbar("Settings updated successfully.");
                  settingsLists.refetch();
                }

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }();
  });
  return /*#__PURE__*/React.createElement(Query, {
    query: MAILCHIMP_SETTINGS
  }, function (settingsLists) {
    var _ref4 = _get(settingsLists.data, "mailchimp.getSettings.data") || {},
        apiKey = _ref4.apiKey,
        enabled = _ref4.enabled;

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, (loading || settingsLists.loading) && /*#__PURE__*/React.createElement(CircularProgress, null), apiKey && enabled ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settings.list",
      validators: validation.create("required")
    }, function (_ref5) {
      var id = _ref5.value,
          onChange = _ref5.onChange,
          rest = _objectWithoutProperties(_ref5, ["value", "onChange"]);

      var options = (_get(settingsLists.data, "mailchimp.listLists.data") || []).map(function (_ref6) {
        var id = _ref6.id,
            name = _ref6.name;
        return {
          id: id,
          name: name
        };
      });
      var value = options.find(function (item) {
        return item.id === id;
      });
      return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({
        disabled: !apiKey,
        options: options,
        value: value,
        onChange: onChange,
        label: "Mailchimp list"
      }, rest));
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settings.component",
      validators: validation.create("required")
    }, function (_ref7) {
      var onChange = _ref7.onChange,
          name = _ref7.value,
          rest = _objectWithoutProperties(_ref7, ["onChange", "value"]);

      var options = getPlugins("pb-page-element-mailchimp-component").map(function (_ref8) {
        var componentName = _ref8.componentName,
            title = _ref8.title;
        return {
          name: componentName,
          title: title
        };
      });
      var value = options.find(function (item) {
        return item.name === name;
      });
      return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({
        disabled: !apiKey,
        value: value,
        options: options,
        onChange: onChange,
        textProp: "title",
        valueProp: "name",
        label: "Mailchimp component",
        description: "Select a component that renders the signup form."
      }, rest));
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 12,
      className: formPreview
    }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, "Form preview")), /*#__PURE__*/React.createElement(Bind, {
      name: "settings"
    }, function (_ref9) {
      var value = _ref9.value;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MailchimpElement, {
        element: {
          settings: value
        }
      }));
    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, !apiKey ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, "Before continuing, please enter a", " ", /*#__PURE__*/React.createElement("a", {
      target: "_blank",
      rel: "noopener noreferrer",
      href: "https://mailchimp.com/help/about-api-keys/"
    }, "Mailchimp API key"), "."), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Form, {
      onSubmit: function onSubmit(data) {
        return submitApiKeyForm({
          data: data,
          settingsLists: settingsLists
        });
      }
    }, function (_ref10) {
      var Bind = _ref10.Bind,
          submit = _ref10.submit;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        validators: validation.create("required"),
        name: "apiKey"
      }, /*#__PURE__*/React.createElement(Input, {
        label: "API key"
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 12,
        className: saveApiKeyButtonWrapper
      }, /*#__PURE__*/React.createElement(ButtonPrimary, {
        onClick: submit
      }, "Save API key")));
    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, "Before continuing, please", " ", /*#__PURE__*/React.createElement("a", {
      className: enableMailchimpLink,
      onClick: function onClick() {
        return submitApiKeyForm({
          settingsLists: settingsLists
        });
      }
    }, "enable"), " ", "the Mailchimp integration.")))));
  });
};

export default MailchimpElementAdvancedSettings;
//# sourceMappingURL=MailchimpElementAdvancedSettings.js.map