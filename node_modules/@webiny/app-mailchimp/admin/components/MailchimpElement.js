import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _get from "lodash/get";
import * as React from "react";
import { ElementRoot } from "@webiny/app-page-builder/render/components/ElementRoot";
import { Form } from "@webiny/form";
import { getPlugins } from "@webiny/plugins";
var MailchimpElement = /*#__PURE__*/React.memo(function (_ref) {
  var element = _ref.element;

  var selected = _get(element, "data.settings.component", _get(element, "settings.component"));

  var component = getPlugins("pb-page-element-mailchimp-component").find(function (cmp) {
    return cmp.componentName === selected;
  });
  var render = /*#__PURE__*/React.createElement("span", null, "You must configure your embed in the settings!");

  if (component) {
    var Component = component.component;
    render = /*#__PURE__*/React.createElement(Form, {
      key: component.name
    }, function (_ref2) {
      var form = _ref2.form;
      return /*#__PURE__*/React.createElement(Component, Object.assign({
        processing: false // It will suffice for editor preview needs.

      }, form, {
        submit: /*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {
            var onSuccess;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    onSuccess = _ref3.onSuccess;
                    _context.next = 3;
                    return form.validate();

                  case 3:
                    if (!_context.sent) {
                      _context.next = 6;
                      break;
                    }

                    form.submit();
                    onSuccess && onSuccess();

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref4.apply(this, arguments);
          };
        }()
      }));
    });
  }

  return /*#__PURE__*/React.createElement(ElementRoot, {
    key: component ? component.name : "no-component",
    element: element,
    className: "webiny-pb-page-element-mailchimp"
  }, render);
});
MailchimpElement.displayName = "MailchimpElement";
export default MailchimpElement;
//# sourceMappingURL=MailchimpElement.js.map