import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { css } from "emotion";
import { validation } from "@webiny/validation";
var style = /*#__PURE__*/css({
  ".webiny-pb-page-element-mailchimp-form__wrapper": {
    position: "relative",
    ".webiny-pb-page-element-mailchimp-form__subscribe_btn": {
      position: "absolute",
      top: 5,
      right: 5
    },
    ".webiny-pb-page-element-mailchimp-form__subscribe_input": {
      padding: 15
    }
  }
}, "label:style;");

var MailchimpDefaultForm = /*#__PURE__*/function (_React$Component) {
  _inherits(MailchimpDefaultForm, _React$Component);

  var _super = _createSuper(MailchimpDefaultForm);

  function MailchimpDefaultForm() {
    var _this;

    _classCallCheck(this, MailchimpDefaultForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      error: null,
      success: false
    });

    return _this;
  }

  _createClass(MailchimpDefaultForm, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          Bind = _this$props.Bind,
          submit = _this$props.submit,
          processing = _this$props.processing;
      return /*#__PURE__*/React.createElement("div", {
        className: "webiny-pb-page-element-mailchimp-form " + style
      }, /*#__PURE__*/React.createElement("div", {
        className: "webiny-pb-page-element-mailchimp-form__wrapper"
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "email",
        validators: validation.create("required,email")
      }, function (_ref) {
        var value = _ref.value,
            _onChange = _ref.onChange,
            validation = _ref.validation;
        return /*#__PURE__*/React.createElement("div", {
          className: "webiny-pb-page-element-input"
        }, /*#__PURE__*/React.createElement("input", {
          onChange: function onChange(e) {
            return _onChange(e.target.value);
          },
          disabled: processing,
          className: "webiny-pb-page-element-mailchimp-form__subscribe_input webiny-pb-page-element-input__field",
          value: value,
          placeholder: "Your e-mail"
        }), /*#__PURE__*/React.createElement("div", {
          className: "webiny-pb-page-element-mailchimp-form__msg webiny-pb-page-element-input__helper-text"
        }, validation.isValid === false && validation.message), _this2.state.error && /*#__PURE__*/React.createElement("div", {
          className: "webiny-pb-page-element-mailchimp-form__msg webiny-pb-page-element-input__helper-text"
        }, "Error: ", _this2.state.error), _this2.state.success && /*#__PURE__*/React.createElement("div", {
          className: "webiny-pb-page-element-mailchimp-form__msg webiny-pb-page-element-input__helper-text"
        }, "You are on the list. Thank you!"));
      }), /*#__PURE__*/React.createElement("button", {
        className: "webiny-pb-page-element-mailchimp-form__subscribe_btn webiny-pb-page-element-button webiny-pb-page-element-button--primary",
        disabled: processing,
        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this2.setState({
                    success: false,
                    error: null
                  });

                  _context.next = 3;
                  return submit({
                    onSuccess: function onSuccess() {
                      _this2.setState({
                        success: true
                      });
                    },
                    onError: function onError(error) {
                      _this2.setState({
                        error: error
                      });
                    }
                  });

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))
      }, "Subscribe")));
    }
  }]);

  return MailchimpDefaultForm;
}(React.Component);

export default MailchimpDefaultForm;
//# sourceMappingURL=MailchimpDefaultForm.js.map