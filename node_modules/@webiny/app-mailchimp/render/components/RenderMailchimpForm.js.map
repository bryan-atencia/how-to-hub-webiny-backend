{"version":3,"sources":["../../../src/render/components/RenderMailchimpForm.tsx"],"names":["gql","Form","Mutation","React","getPlugins","mutation","RenderMailchimpForm","processing","element","props","selected","component","find","cmp","componentName","Component","style","width","update","name","form","data","state","onError","onSuccess","validate","isValid","setState","variables","list","settings","response","error","message","email"],"mappings":"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","sourcesContent":["import { get } from \"lodash\";\nimport gql from \"graphql-tag\";\nimport { Form } from \"@webiny/form\";\nimport { Mutation } from \"react-apollo\";\nimport React from \"react\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { PbPageElementMailchimpComponentPlugin } from \"../../types\";\n\nconst mutation = gql`\n    mutation addToList($email: String!, $list: String!) {\n        mailchimp {\n            addToList(email: $email, list: $list) {\n                error {\n                    message\n                }\n            }\n        }\n    }\n`;\n\nexport class RenderMailchimpForm extends React.Component<any, { processing: boolean }> {\n    state = { processing: false };\n\n    render() {\n        const { element } = this.props;\n        const selected = get(element, \"data.settings.component\") || \"\";\n        const component = getPlugins<PbPageElementMailchimpComponentPlugin>(\n            \"pb-page-element-mailchimp-component\"\n        ).find(cmp => cmp.componentName === selected);\n\n        if (component) {\n            const Component = component.component;\n            const style = { width: \"100%\", ...get(this.props, \"element.data.settings.style\") };\n            return (\n                <div style={style} className={\"webiny-pb-page-element-mailchimp\"}>\n                    <Mutation mutation={mutation}>\n                        {update => (\n                            <Form key={component.name}>\n                                {({ form, data }) => {\n                                    return (\n                                        <Component\n                                            {...form}\n                                            processing={this.state.processing}\n                                            submit={async ({\n                                                onError,\n                                                onSuccess\n                                            }: {\n                                                onError?: (error: string) => void;\n                                                onSuccess?: () => void;\n                                            }) => {\n                                                const isValid = await form.validate();\n                                                if (!isValid) {\n                                                    return;\n                                                }\n\n                                                this.setState({ processing: true });\n                                                const response = await update({\n                                                    variables: {\n                                                        ...data,\n                                                        list: element.data.settings.list\n                                                    }\n                                                });\n\n                                                this.setState({ processing: false }, () => {\n                                                    const error = get(\n                                                        response,\n                                                        \"data.mailchimp.addToList.error\"\n                                                    );\n\n                                                    if (error) {\n                                                        onError && onError(error.message);\n                                                    } else {\n                                                        form.setState(state => {\n                                                            state.data.email = \"\";\n                                                            return state;\n                                                        });\n                                                        onSuccess && onSuccess();\n                                                    }\n                                                });\n                                            }}\n                                        />\n                                    );\n                                }}\n                            </Form>\n                        )}\n                    </Mutation>\n                </div>\n            );\n        }\n\n        return null;\n    }\n}"],"file":"RenderMailchimpForm.js"}