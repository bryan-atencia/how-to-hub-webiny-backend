import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    mutation addToList($email: String!, $list: String!) {\n        mailchimp {\n            addToList(email: $email, list: $list) {\n                error {\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import gql from "graphql-tag";
import { Form } from "@webiny/form";
import { Mutation } from "react-apollo";
import React from "react";
import { getPlugins } from "@webiny/plugins";
var mutation = gql(_templateObject());
export var RenderMailchimpForm = /*#__PURE__*/function (_React$Component) {
  _inherits(RenderMailchimpForm, _React$Component);

  var _super = _createSuper(RenderMailchimpForm);

  function RenderMailchimpForm() {
    var _this;

    _classCallCheck(this, RenderMailchimpForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      processing: false
    });

    return _this;
  }

  _createClass(RenderMailchimpForm, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var element = this.props.element;
      var selected = _get(element, "data.settings.component") || "";
      var component = getPlugins("pb-page-element-mailchimp-component").find(function (cmp) {
        return cmp.componentName === selected;
      });

      if (component) {
        var Component = component.component;

        var style = _objectSpread({
          width: "100%"
        }, _get(this.props, "element.data.settings.style"));

        return /*#__PURE__*/React.createElement("div", {
          style: style,
          className: "webiny-pb-page-element-mailchimp"
        }, /*#__PURE__*/React.createElement(Mutation, {
          mutation: mutation
        }, function (update) {
          return /*#__PURE__*/React.createElement(Form, {
            key: component.name
          }, function (_ref) {
            var form = _ref.form,
                data = _ref.data;
            return /*#__PURE__*/React.createElement(Component, Object.assign({}, form, {
              processing: _this2.state.processing,
              submit: /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
                  var onError, onSuccess, isValid, response;
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          onError = _ref2.onError, onSuccess = _ref2.onSuccess;
                          _context.next = 3;
                          return form.validate();

                        case 3:
                          isValid = _context.sent;

                          if (isValid) {
                            _context.next = 6;
                            break;
                          }

                          return _context.abrupt("return");

                        case 6:
                          _this2.setState({
                            processing: true
                          });

                          _context.next = 9;
                          return update({
                            variables: _objectSpread(_objectSpread({}, data), {}, {
                              list: element.data.settings.list
                            })
                          });

                        case 9:
                          response = _context.sent;

                          _this2.setState({
                            processing: false
                          }, function () {
                            var error = _get(response, "data.mailchimp.addToList.error");

                            if (error) {
                              onError && onError(error.message);
                            } else {
                              form.setState(function (state) {
                                state.data.email = "";
                                return state;
                              });
                              onSuccess && onSuccess();
                            }
                          });

                        case 11:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x) {
                  return _ref3.apply(this, arguments);
                };
              }()
            }));
          });
        }));
      }

      return null;
    }
  }]);

  return RenderMailchimpForm;
}(React.Component);
//# sourceMappingURL=RenderMailchimpForm.js.map