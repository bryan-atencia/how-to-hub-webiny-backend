{"version":3,"sources":["../src/index.ts"],"names":["plugins","PluginsContainer","registerPlugins","args","register","getPlugins","type","byType","getPlugin","name","byName","unregisterPlugin","unregister"],"mappings":";;;;;;;;;;;;;AACA;;AAEA,MAAMA,OAAO,GAAG,IAAIC,kCAAJ,EAAhB;;;AAEA,MAAMC,eAAe,GAAG,CAAC,GAAGC,IAAJ,KAAwB;AAC5CH,EAAAA,OAAO,CAACI,QAAR,CAAiB,GAAGD,IAApB;AACH,CAFD;;;;AAIA,MAAME,UAAU,GAA+BC,IAA5B,IAA8C;AAC7D,SAAON,OAAO,CAACO,MAAR,CAAkBD,IAAlB,CAAP;AACH,CAFD;;;;AAIA,MAAME,SAAS,GAA+BC,IAA5B,IAA6C;AAC3D,SAAOT,OAAO,CAACU,MAAR,CAAkBD,IAAlB,CAAP;AACH,CAFD;;;;AAIA,MAAME,gBAAgB,GAAIF,IAAD,IAAwB;AAC7C,SAAOT,OAAO,CAACY,UAAR,CAAmBH,IAAnB,CAAP;AACH,CAFD","sourcesContent":["import { Plugin } from \"./types\";\nimport { PluginsContainer } from \"./PluginsContainer\";\n\nconst plugins = new PluginsContainer();\n\nconst registerPlugins = (...args: any): void => {\n    plugins.register(...args);\n};\n\nconst getPlugins = <T extends Plugin = Plugin>(type?: string) => {\n    return plugins.byType<T>(type);\n};\n\nconst getPlugin = <T extends Plugin = Plugin>(name: string) => {\n    return plugins.byName<T>(name);\n};\n\nconst unregisterPlugin = (name: string): void => {\n    return plugins.unregister(name);\n};\n\nexport { PluginsContainer, plugins, registerPlugins, getPlugins, getPlugin, unregisterPlugin };\n"],"file":"index.js"}