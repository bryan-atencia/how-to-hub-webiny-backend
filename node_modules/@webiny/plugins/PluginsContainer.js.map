{"version":3,"sources":["../src/PluginsContainer.ts"],"names":["assign","plugins","target","i","length","plugin","Array","isArray","name","_name","Error","init","PluginsContainer","constructor","byName","byType","type","Object","values","filter","pl","register","unregister"],"mappings":";;;;;;;;;;;AAEA,MAAMA,MAAM,GAAG,CAACC,OAAD,EAAeC,MAAf,KAAwC;AACnD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAME,MAAM,GAAGJ,OAAO,CAACE,CAAD,CAAtB;;AACA,QAAIG,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACvBL,MAAAA,MAAM,CAACK,MAAD,EAASH,MAAT,CAAN;AACA;AACH;;AAED,UAAMM,IAAI,GAAGH,MAAM,CAACI,KAAP,IAAgBJ,MAAM,CAACG,IAApC;;AACA,QAAI,CAACA,IAAL,EAAW;AACP,YAAME,KAAK,CAAE,2CAAF,CAAX;AACH;;AAEDR,IAAAA,MAAM,CAACM,IAAD,CAAN,GAAeH,MAAf;AACAA,IAAAA,MAAM,CAACM,IAAP,IAAeN,MAAM,CAACM,IAAP,EAAf;AACH;AACJ,CAhBD;;AAkBO,MAAMC,gBAAN,CAAuB;AAG1BC,EAAAA,WAAW,CAACZ,OAAY,GAAG,EAAhB,EAAoB;AAAA,mDAFG,EAEH;AAC3BD,IAAAA,MAAM,CAACC,OAAD,EAAU,KAAKA,OAAf,CAAN;AACH;;AAEDa,EAAAA,MAAM,CAA4BN,IAA5B,EAA6C;AAC/C,WAAO,KAAKP,OAAL,CAAaO,IAAb,CAAP;AACH;;AAEDO,EAAAA,MAAM,CAAmBC,IAAnB,EAAuC;AACzC,QAAI,CAACA,IAAL,EAAW;AACP,aAAOC,MAAM,CAACC,MAAP,CAAc,KAAKjB,OAAnB,CAAP;AACH;;AAED,WAAOgB,MAAM,CAACC,MAAP,CAAc,KAAKjB,OAAnB,EAA4BkB,MAA5B,CAAoCC,EAAD,IAAgBA,EAAE,CAACJ,IAAH,KAAYA,IAA/D,CAAP;AACH;;AAEDK,EAAAA,QAAQ,CAAC,GAAGpB,OAAJ,EAAwB;AAC5BD,IAAAA,MAAM,CAACC,OAAD,EAAU,KAAKA,OAAf,CAAN;AACH;;AAEDqB,EAAAA,UAAU,CAACd,IAAD,EAAqB;AAC3B,WAAO,KAAKP,OAAL,CAAaO,IAAb,CAAP;AACH;;AAzByB","sourcesContent":["import { Plugin } from \"./types\";\n\nconst assign = (plugins: any, target: Object): void => {\n    for (let i = 0; i < plugins.length; i++) {\n        const plugin = plugins[i];\n        if (Array.isArray(plugin)) {\n            assign(plugin, target);\n            continue;\n        }\n\n        const name = plugin._name || plugin.name;\n        if (!name) {\n            throw Error(`Plugin must have a \"name\" or \"_name\" key.`);\n        }\n\n        target[name] = plugin;\n        plugin.init && plugin.init();\n    }\n};\n\nexport class PluginsContainer {\n    plugins: Record<string, Plugin> = {};\n\n    constructor(plugins: any = []) {\n        assign(plugins, this.plugins);\n    }\n\n    byName<T extends Plugin = Plugin>(name: string): T {\n        return this.plugins[name] as T;\n    }\n\n    byType<T extends Plugin>(type?: string): T[] {\n        if (!type) {\n            return Object.values(this.plugins) as T[];\n        }\n\n        return Object.values(this.plugins).filter((pl: Plugin) => pl.type === type) as T[];\n    }\n\n    register(...plugins: any): void {\n        assign(plugins, this.plugins);\n    }\n\n    unregister(name: string): void {\n        delete this.plugins[name];\n    }\n}\n"],"file":"PluginsContainer.js"}