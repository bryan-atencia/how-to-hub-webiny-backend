{"version":3,"sources":["../../src/plugins/fileUploaderPlugin.ts"],"names":["gql","get","UPLOAD_FILE","type","name","upload","file","apolloClient","mutate","mutation","variables","data","size","presignedPostPayload","error","console","log","message","Promise","resolve","reject","formData","window","FormData","Object","keys","fields","forEach","key","append","xhr","XMLHttpRequest","open","url","send","onload","status","responseText"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,IAAMC,WAAW,GAAGF,GAAH,mBAAjB;AAqBA,gBAAe;AAAA,SAAO;AAClBG,IAAAA,IAAI,EAAE,eADY;AAElBC,IAAAA,IAAI,EAAE,eAFY;AAGlBC,IAAAA,MAAM;AAAA,6EAAE,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqBC,gBAAAA,YAArB,QAAqBA,YAArB;AAAA;AAAA,uBAC6BA,YAAY,CAACC,MAAb,CAAoB;AACjDC,kBAAAA,QAAQ,EAAEP,WADuC;AAEjDQ,kBAAAA,SAAS,EAAE;AACPC,oBAAAA,IAAI,EAAE;AAAEC,sBAAAA,IAAI,EAAEN,IAAI,CAACM,IAAb;AAAmBR,sBAAAA,IAAI,EAAEE,IAAI,CAACF,IAA9B;AAAoCD,sBAAAA,IAAI,EAAEG,IAAI,CAACH;AAA/C;AADC;AAFsC,iBAApB,CAD7B;;AAAA;AACAU,gBAAAA,oBADA;AAQJA,gBAAAA,oBAAoB,GAAGZ,GAAG,CAACY,oBAAD,EAAuB,uBAAvB,CAA1B;;AARI,qBASAA,oBAAoB,CAACC,KATrB;AAAA;AAAA;AAAA;;AAUAC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACC,KAArB,CAA2BG,OAAvC,EAVA,CAUiD;;AAVjD;;AAAA;AAAA;AAAA,uBAcS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C,sBAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,QAAX,EAAjB;AACAC,kBAAAA,MAAM,CAACC,IAAP,CAAYZ,oBAAoB,CAACF,IAArB,CAA0BA,IAA1B,CAA+Be,MAA3C,EAAmDC,OAAnD,CAA2D,UAAAC,GAAG,EAAI;AAC9DP,oBAAAA,QAAQ,CAACQ,MAAT,CAAgBD,GAAhB,EAAqBf,oBAAoB,CAACF,IAArB,CAA0BA,IAA1B,CAA+Be,MAA/B,CAAsCE,GAAtC,CAArB;AACH,mBAFD;AAIAP,kBAAAA,QAAQ,CAACQ,MAAT,CAAgB,MAAhB,EAAwBvB,IAAxB;AAEA,sBAAMwB,GAAG,GAAG,IAAIR,MAAM,CAACS,cAAX,EAAZ,CAR0C,CAQD;;AACzCD,kBAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiBnB,oBAAoB,CAACF,IAArB,CAA0BA,IAA1B,CAA+BsB,GAAhD,EAAqD,IAArD;AACAH,kBAAAA,GAAG,CAACI,IAAJ,CAASb,QAAT;;AACAS,kBAAAA,GAAG,CAACK,MAAJ,GAAa,YAAW;AACpB,wBAAI,KAAKC,MAAL,KAAgB,GAApB,EAAyB;AACrBjB,sBAAAA,OAAO,CAACN,oBAAoB,CAACF,IAArB,CAA0BL,IAA3B,CAAP;AACA;AACH;;AAEDc,oBAAAA,MAAM,CAAC,KAAKiB,YAAN,CAAN;AACH,mBAPD;AAQH,iBAnBY,CAdT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHY,GAAP;AAAA,CAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport get from \"lodash.get\";\n\nconst UPLOAD_FILE = gql`\n    mutation UploadFile($data: UploadFileInput!) {\n        files {\n            uploadFile(data: $data) {\n                data {\n                    data\n                    file {\n                        type\n                        name\n                        size\n                        key\n                    }\n                }\n                error {\n                    message\n                }\n            }\n        }\n    }\n`;\n\nexport default () => ({\n    type: \"file-uploader\",\n    name: \"file-uploader\",\n    upload: async (file: File, { apolloClient }) => {\n        let presignedPostPayload = await apolloClient.mutate({\n            mutation: UPLOAD_FILE,\n            variables: {\n                data: { size: file.size, name: file.name, type: file.type }\n            }\n        });\n\n        presignedPostPayload = get(presignedPostPayload, \"data.files.uploadFile\");\n        if (presignedPostPayload.error) {\n            console.log(presignedPostPayload.error.message); // eslint-disable-line\n            return;\n        }\n\n        return await new Promise((resolve, reject) => {\n            const formData = new window.FormData();\n            Object.keys(presignedPostPayload.data.data.fields).forEach(key => {\n                formData.append(key, presignedPostPayload.data.data.fields[key]);\n            });\n\n            formData.append(\"file\", file);\n\n            const xhr = new window.XMLHttpRequest(); // eslint-disable-line\n            xhr.open(\"POST\", presignedPostPayload.data.data.url, true);\n            xhr.send(formData);\n            xhr.onload = function() {\n                if (this.status === 204) {\n                    resolve(presignedPostPayload.data.file);\n                    return;\n                }\n\n                reject(this.responseText);\n            };\n        });\n    }\n});\n"],"file":"fileUploaderPlugin.js"}