{"version":3,"sources":["../../src/plugins/index.tsx"],"names":["React","warning","getPlugin","getPlugins","fileUploadPlugin","imagePlugin","PluginComponent","props","children","PluginsComponent","renderPlugin","name","params","options","wrapper","fn","plugin","content","cloneElement","key","renderPlugins","type","filter","v","map"],"mappings":"AAAA,OAAOA,KAAP,MAA2D,OAA3D;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,iBAAtC;AAEA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASD,gBAAT,EAA2BC,WAA3B;;AAoBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SACpBA,KAAK,CAACC,QADc;AAAA,CAAxB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,KAAD;AAAA,SACrBA,KAAK,CAACC,QADe;AAAA,CAAzB;;AAGA,OAAO,IAAME,YAA0B,GAAG,SAA7BA,YAA6B,CAACC,IAAD,EAAqC;AAAA,MAA9BC,MAA8B,uEAArB,EAAqB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAAA,yBACjCA,OADiC,CACnEC,OADmE;AAAA,MACnEA,OADmE,iCACzD,IADyD;AAAA,oBACjCD,OADiC,CACnDE,EADmD;AAAA,MACnDA,EADmD,4BAC9C,QAD8C;AAG3E,MAAMC,MAAM,GAAGd,SAAS,CAACS,IAAD,CAAxB;AACAV,EAAAA,OAAO,CAACe,MAAD,6BAA4BL,IAA5B,QAAP;;AAEA,MAAI,CAACK,MAAL,EAAa;AACT,WAAO,IAAP;AACH;;AAED,MAAMC,OAAO,GAAGD,MAAM,CAACD,EAAD,CAAN,CAAWH,MAAX,CAAhB;;AACA,MAAIK,OAAJ,EAAa;AACT,WAAOH,OAAO,gBACV,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAEE,MAAM,CAACL,IAA7B;AAAmC,MAAA,IAAI,EAAEA,IAAzC;AAA+C,MAAA,MAAM,EAAEC,MAAvD;AAA+D,MAAA,EAAE,EAAEG;AAAnE,OACKE,OADL,CADU,gBAKVjB,KAAK,CAACkB,YAAN,CAAmBD,OAAnB,EAA4B;AAAEE,MAAAA,GAAG,EAAEH,MAAM,CAACL;AAAd,KAA5B,CALJ;AAOH;;AACD,SAAO,IAAP;AACH,CArBM;AAuBP,OAAO,IAAMS,aAA4B,GAAG,SAA/BA,aAA+B,CAACC,IAAD,EAAqC;AAAA,MAA9BT,MAA8B,uEAArB,EAAqB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAAA,0BAClBA,OADkB,CACrEC,OADqE;AAAA,MACrEA,OADqE,kCAC3D,IAD2D;AAAA,qBAClBD,OADkB,CACrDE,EADqD;AAAA,MACrDA,EADqD,6BAChD,QADgD;AAAA,wBAClBF,OADkB,CACtCS,MADsC;AAAA,MACtCA,MADsC,gCAC7B,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAD4B;AAG7E,MAAMN,OAAO,GAAGd,UAAU,CAACkB,IAAD,CAAV,CACXC,MADW,CACJA,MADI,EAEXE,GAFW,CAEP,UAAAR,MAAM;AAAA,WAAIN,YAAY,CAACM,MAAM,CAACL,IAAR,EAAcC,MAAd,EAAsB;AAAEE,MAAAA,OAAO,EAAPA,OAAF;AAAWC,MAAAA,EAAE,EAAFA;AAAX,KAAtB,CAAhB;AAAA,GAFC,CAAhB;AAIA,SAAOD,OAAO,gBACV,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAEO,IAAxB;AAA8B,IAAA,MAAM,EAAET,MAAtC;AAA8C,IAAA,EAAE,EAAEG;AAAlD,KACKE,OADL,CADU,GAKVA,OALJ;AAOH,CAdM;AAgBP,eAAe,CAACZ,WAAD,EAAcD,gBAAd,CAAf","sourcesContent":["import React, { ReactNode, FunctionComponentElement } from \"react\";\nimport warning from \"warning\";\nimport { getPlugin, getPlugins } from \"@webiny/plugins\";\nimport { Plugin } from \"@webiny/plugins/types\";\nimport fileUploadPlugin from \"./fileUploaderPlugin\";\nimport imagePlugin from \"./imagePlugin\";\n\nexport { fileUploadPlugin, imagePlugin };\n\ntype RenderPluginOptions<T> = {\n    wrapper?: boolean;\n    fn?: string;\n    filter?: (value: T, index: number, array: T[]) => boolean;\n};\n\ninterface RenderPlugin {\n    <T extends Plugin = Plugin>(name: string, params?: any, options?: RenderPluginOptions<T>):\n        | ReactNode\n        | ReactNode[];\n}\n\ninterface RenderPlugins {\n    <T extends Plugin = Plugin>(type: string, params?: any, options?: RenderPluginOptions<T>):\n        | ReactNode\n        | ReactNode[];\n}\n\nconst PluginComponent = (props: { [key: string]: any }): FunctionComponentElement<{}> =>\n    props.children;\nconst PluginsComponent = (props: { [key: string]: any }): FunctionComponentElement<{}> =>\n    props.children;\n\nexport const renderPlugin: RenderPlugin = (name, params = {}, options = {}) => {\n    const { wrapper = true, fn = \"render\" } = options;\n\n    const plugin = getPlugin(name);\n    warning(plugin, `No such plugin \"${name}\"`);\n\n    if (!plugin) {\n        return null;\n    }\n\n    const content = plugin[fn](params);\n    if (content) {\n        return wrapper ? (\n            <PluginComponent key={plugin.name} name={name} params={params} fn={fn}>\n                {content}\n            </PluginComponent>\n        ) : (\n            React.cloneElement(content, { key: plugin.name })\n        );\n    }\n    return null;\n};\n\nexport const renderPlugins: RenderPlugins = (type, params = {}, options = {}) => {\n    const { wrapper = true, fn = \"render\", filter = v => v } = options;\n\n    const content = getPlugins(type)\n        .filter(filter)\n        .map(plugin => renderPlugin(plugin.name, params, { wrapper, fn }));\n\n    return wrapper ? (\n        <PluginsComponent type={type} params={params} fn={fn}>\n            {content}\n        </PluginsComponent>\n    ) : (\n        content\n    );\n};\n\nexport default [imagePlugin, fileUploadPlugin];\n"],"file":"index.js"}