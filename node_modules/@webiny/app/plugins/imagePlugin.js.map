{"version":3,"sources":["../../src/plugins/imagePlugin.tsx"],"names":["React","Image","SUPPORTED_IMAGE_RESIZE_WIDTHS","getSupportedImageResizeWidth","width","output","i","length","sanitizeTransformArgs","args","parseInt","isFixedImageWidth","Number","isFinite","endsWith","getSrcSetAutoSizes","max","maxWidth","filter","supportedWidth","convertTransformToQueryParams","transform","Object","keys","map","key","join","imagePlugin","name","type","presets","avatar","getImageSrc","props","src","startsWith","params","render","srcSetInitial","srcSet","imageProps","forcedWidth","style","srcSetAutoWidths","forEach"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Image } from \"@webiny/ui/Image\";\nimport { ImageComponentPlugin } from \"../types\";\n\nconst SUPPORTED_IMAGE_RESIZE_WIDTHS = [100, 300, 500, 750, 1000, 1500, 2500];\n\n/**\n * Width of the image should not be just any random number. For optimization reasons,\n * we only allow the ones listed in SUPPORTED_IMAGE_RESIZE_WIDTHS list (Webiny Cloud supports only these).\n */\nconst getSupportedImageResizeWidth = width => {\n    let output = SUPPORTED_IMAGE_RESIZE_WIDTHS[0];\n    let i = SUPPORTED_IMAGE_RESIZE_WIDTHS.length;\n    while (i >= 0) {\n        if (width === SUPPORTED_IMAGE_RESIZE_WIDTHS[i]) {\n            output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i];\n            break;\n        }\n\n        if (width > SUPPORTED_IMAGE_RESIZE_WIDTHS[i]) {\n            // Use next larger width. If there isn't any, use current.\n            output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i + 1];\n            if (!output) {\n                output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i];\n            }\n            break;\n        }\n\n        i--;\n    }\n\n    return output;\n};\n\n/**\n * Currently we only allow \"width\" as a transform option.\n * @param args\n */\nconst sanitizeTransformArgs = (args: { [key: string]: any }): Object => {\n    const output: { [key: string]: any } = {};\n    if (args) {\n        const width = parseInt(args.width);\n        if (width > 0) {\n            output.width = getSupportedImageResizeWidth(width);\n        }\n    }\n\n    return output;\n};\n\nconst isFixedImageWidth = width => {\n    if (Number.isFinite(width)) {\n        return true;\n    }\n\n    if (typeof width === \"string\" && width.endsWith(\"px\")) {\n        return true;\n    }\n    return false;\n};\n\nconst getSrcSetAutoSizes = (max: number | undefined) => {\n    max = isFixedImageWidth(max) ? parseInt(\"\" + max) : 2500;\n    const maxWidth = getSupportedImageResizeWidth(max);\n    return SUPPORTED_IMAGE_RESIZE_WIDTHS.filter((supportedWidth: number) => {\n        return supportedWidth <= maxWidth;\n    });\n};\n\nconst convertTransformToQueryParams = (transform: Object): string => {\n    return Object.keys(transform)\n        .map(key => `${key}=${transform[key]}`)\n        .join(\"&\");\n};\n\nexport default () => {\n    const imagePlugin: ImageComponentPlugin = {\n        name: \"image-component\",\n        type: \"image-component\",\n        presets: {\n            avatar: { width: 300 }\n        },\n        getImageSrc: (props: { [key: string]: any }) => {\n            if (!props) {\n                return \"\";\n            }\n\n            const { src, transform } = props;\n            if (!transform) {\n                return src;\n            }\n\n            if (!src || src.startsWith(\"data:\") || src.endsWith(\"svg\")) {\n                return src;\n            }\n\n            let params = sanitizeTransformArgs(transform);\n            params = convertTransformToQueryParams(params);\n            return src + \"?\" + params;\n        },\n        render(props: { [key: string]: any }) {\n            const { transform, srcSet: srcSetInitial, ...imageProps } = props;\n            let srcSet = srcSetInitial;\n            const src = imageProps.src;\n            if (srcSet && srcSet === \"auto\") {\n                srcSet = {};\n\n                // Check if image width was forced, and additionally if width was set as pixels, with \"px\" in the value.\n                const forcedWidth = props.width || (props.style && props.style.width);\n                const srcSetAutoWidths = getSrcSetAutoSizes(forcedWidth);\n                srcSetAutoWidths.forEach(width => {\n                    srcSet[width + \"w\"] = imagePlugin.getImageSrc({\n                        src,\n                        transform: { ...transform, width }\n                    });\n                });\n            }\n\n            return <Image {...imageProps} srcSet={srcSet} src={src} />;\n        }\n    };\n\n    return imagePlugin;\n};\n"],"file":"imagePlugin.js"}