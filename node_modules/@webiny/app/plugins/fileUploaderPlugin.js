import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    mutation UploadFile($data: UploadFileInput!) {\n        files {\n            uploadFile(data: $data) {\n                data {\n                    data\n                    file {\n                        type\n                        name\n                        size\n                        key\n                    }\n                }\n                error {\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import gql from "graphql-tag";
import get from "lodash.get";
var UPLOAD_FILE = gql(_templateObject());
export default (function () {
  return {
    type: "file-uploader",
    name: "file-uploader",
    upload: function () {
      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, _ref) {
        var apolloClient, presignedPostPayload;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                apolloClient = _ref.apolloClient;
                _context.next = 3;
                return apolloClient.mutate({
                  mutation: UPLOAD_FILE,
                  variables: {
                    data: {
                      size: file.size,
                      name: file.name,
                      type: file.type
                    }
                  }
                });

              case 3:
                presignedPostPayload = _context.sent;
                presignedPostPayload = get(presignedPostPayload, "data.files.uploadFile");

                if (!presignedPostPayload.error) {
                  _context.next = 8;
                  break;
                }

                console.log(presignedPostPayload.error.message); // eslint-disable-line

                return _context.abrupt("return");

              case 8:
                _context.next = 10;
                return new Promise(function (resolve, reject) {
                  var formData = new window.FormData();
                  Object.keys(presignedPostPayload.data.data.fields).forEach(function (key) {
                    formData.append(key, presignedPostPayload.data.data.fields[key]);
                  });
                  formData.append("file", file);
                  var xhr = new window.XMLHttpRequest(); // eslint-disable-line

                  xhr.open("POST", presignedPostPayload.data.data.url, true);
                  xhr.send(formData);

                  xhr.onload = function () {
                    if (this.status === 204) {
                      resolve(presignedPostPayload.data.file);
                      return;
                    }

                    reject(this.responseText);
                  };
                });

              case 10:
                return _context.abrupt("return", _context.sent);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function upload(_x, _x2) {
        return _upload.apply(this, arguments);
      }

      return upload;
    }()
  };
});
//# sourceMappingURL=fileUploaderPlugin.js.map