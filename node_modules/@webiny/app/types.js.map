{"version":3,"sources":["../src/types.ts"],"names":["Plugin"],"mappings":"AACA,SAASA,MAAT,QAAuB,uBAAvB;AAmBA,SAASA,MAAT","sourcesContent":["import * as React from \"react\";\nimport { Plugin } from \"@webiny/plugins/types\";\nimport { ApolloClient } from \"apollo-client\";\nimport { CSSProperties } from \"react\";\n\nexport type WebinyInitPlugin = Plugin & {\n    type: \"webiny-init\";\n    init(): void;\n};\n\nexport type UploadOptions = {\n    apolloClient: ApolloClient<object>;\n};\n\nexport type FileUploaderPlugin = Plugin & {\n    type: \"file-uploader\";\n    // TODO: @adrian define type for the returned object\n    upload(file: File, options: UploadOptions): Promise<any>;\n};\n\nexport { Plugin };\n\nexport type ImageProps = {\n    src: string;\n    preset?: string;\n    transform?: { [key: string]: any };\n    // \"auto\" is a special keyword - if present, plugins insert their own srcSet.\n    srcSet?: { [key: string]: any } | \"auto\";\n    className?: string;\n    title?: string;\n    alt?: string;\n    style?: CSSProperties;\n};\n\n/**\n * \"getImageSrc\" has to be defined as a separate property, so its functionality can be reused outside of\n * the Image component. This is ideal in cases where manual creation of image src is needed.\n */\nexport type ImageComponentPlugin = Plugin & {\n    type: \"image-component\";\n    render: (props: ImageProps) => React.ReactElement;\n    getImageSrc: (props?: Object) => string;\n    presets: { [key: string]: any };\n};\n\n/**\n * Enables registering new routes.\n * @see https://docs.webiny.com/docs/webiny-apps/admin/development/plugins-reference/app#route\n */\nexport type RoutePlugin = Plugin & {\n    type: \"route\";\n    route: React.ReactElement;\n};\n"],"file":"types.js"}