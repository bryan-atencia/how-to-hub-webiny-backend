import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _isEqual from "lodash/isEqual";
import _get from "lodash/get";
import { useState, useEffect, useRef, useCallback } from "react";
import { useQuery } from "react-apollo";
import { useRouter } from "@webiny/react-router";
import { prepareLoadListParams } from "./utils";
import { getData, getError, getMeta } from "./functions";

var useDataList = function useDataList(params) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      multiSelectedItems = _useState2[0],
      _multiSelect = _useState2[1];

  var history = null;
  var location = null;
  var routerHook = useRouter();

  if (params.useRouter !== false) {
    history = routerHook.history;
    location = routerHook.location;
  }

  var getQueryOptions = useCallback(function () {
    var variables = params.variables;

    if (typeof variables === "function") {
      variables = variables(params);
    }

    return {
      client: params.client,
      variables: _objectSpread(_objectSpread({}, variables), prepareLoadListParams(location))
    };
  }, undefined);
  var queryData = useQuery(params.query, getQueryOptions());
  var prevLoadParamsRef = useRef({});
  var dataListProps = {
    data: _get(params, "getData", getData)(queryData.data),
    meta: _get(params, "getMeta", getMeta)(queryData.data),
    error: _get(params, "getError", getError)(queryData.data),
    loading: queryData.loading,
    init: function init() {
      this.refresh();
    },
    refresh: function refresh() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      // Refresh multi select first.
      _multiSelect([]);

      if (!params) {
        queryData.refetch(dataListProps.__loadParams);
        return;
      } // if (history) {
      //     redirectToRouteWithQueryParams(params, { history, location });
      //     return;
      // }


      queryData.refetch(params);
    },
    setPerPage: function setPerPage(perPage) {
      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {
        limit: parseInt("" + perPage),
        after: undefined,
        before: undefined
      });

      this.refresh(preparedParams);
    },
    setNextPage: function setNextPage(cursor) {
      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {
        after: cursor,
        before: undefined
      });

      this.refresh(preparedParams);
    },
    setPreviousPage: function setPreviousPage(cursor) {
      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {
        after: undefined,
        before: cursor
      });

      this.refresh(preparedParams);
    },
    setSearch: function setSearch(search) {
      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {
        search: search,
        after: undefined,
        before: undefined
      });

      this.refresh(preparedParams);
    },
    setWhere: function setWhere(where) {
      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {
        where: where,
        after: undefined,
        before: undefined
      });

      this.refresh(preparedParams);
    },
    setSorters: function setSorters(sort) {
      var preparedParams = _objectSpread(_objectSpread({}, dataListProps.__loadParams), {}, {
        sort: sort,
        after: undefined,
        before: undefined
      });

      this.refresh(preparedParams);
    },
    multiSelect: function multiSelect(items, value) {
      if (!Array.isArray(items)) {
        items = [items];
      }

      var returnItems = _toConsumableArray(multiSelectedItems);

      items.forEach(function (item) {
        if (value === undefined) {
          returnItems.includes(item) ? returnItems.splice(returnItems.indexOf(item), 1) : returnItems.push(item);
        } else {
          if (value === true) {
            !returnItems.includes(item) && returnItems.push(item);
          } else {
            returnItems.includes(item) && returnItems.splice(returnItems.indexOf(item), 1);
          }
        }
      });

      _multiSelect(returnItems);
    },
    isSelected: function isSelected(item) {
      var query = new URLSearchParams(location.search);
      return query.get("id") === item.id;
    },
    select: function select(item) {
      var query = new URLSearchParams(location.search);
      query.set("id", item.id);
      history.push({
        search: query.toString()
      });
    },
    isMultiSelected: function isMultiSelected(item) {
      if (!Array.isArray(multiSelectedItems)) {
        return false;
      }

      return multiSelectedItems.includes(item);
    },
    isNoneMultiSelected: function isNoneMultiSelected() {
      return multiSelectedItems.length === 0;
    },
    getMultiSelected: function getMultiSelected() {
      return multiSelectedItems;
    },
    multiSelectAll: function multiSelectAll(value) {
      var data = dataListProps.data;

      if (Array.isArray(data)) {
        dataListProps.multiSelect(data, value);
      } else {
        dataListProps.multiSelect([], value);
      }
    },
    isAllMultiSelected: function isAllMultiSelected() {
      var data = dataListProps.data;
      return Array.isArray(data) && multiSelectedItems.length === data.length;
    },
    __loadParams: prepareLoadListParams(location)
  };
  useEffect(function () {
    var params = {
      prev: prevLoadParamsRef.current,
      current: dataListProps.__loadParams
    };

    if (!_isEqual(params.prev, params.current)) {
      dataListProps.init();
    }

    prevLoadParamsRef.current = params.current;
  });
  return dataListProps;
};

export { useDataList };
//# sourceMappingURL=useDataList.js.map