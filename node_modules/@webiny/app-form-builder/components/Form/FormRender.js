import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _get from "lodash/get";
import _cloneDeep from "lodash/cloneDeep";
import { I18NValue } from "@webiny/app-i18n/components";
import { getPlugins } from "@webiny/plugins";
import React, { useEffect, useRef, useMemo } from "react";
import { useApolloClient } from "react-apollo";
import { createReCaptchaComponent, createTermsOfServiceComponent } from "./components";
import { createFormSubmission, handleFormTriggers, onFormMounted, reCaptchaEnabled, termsOfServiceEnabled } from "./functions";

var FormRender = function FormRender(props) {
  var theme = useMemo(function () {
    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(getPlugins("pb-theme").map(function (pl) {
      return pl.theme;
    }))));
  }, []);
  var client = useApolloClient();
  var data = props.data || {};
  useEffect(function () {
    if (data.id) {
      onFormMounted(_objectSpread(_objectSpread({}, props), {}, {
        client: client
      }));
    }
  }, [data.id]);
  var reCaptchaResponseToken = useRef("");
  var termsOfServiceAccepted = useRef(false);

  if (!data.id) {
    return null;
  }

  var formData = _cloneDeep(data);

  var layout = formData.layout,
      fields = formData.fields,
      settings = formData.settings;

  var getFieldById = function getFieldById(id) {
    return fields.find(function (field) {
      return field._id === id;
    });
  };

  var getFieldByFieldId = function getFieldByFieldId(id) {
    return fields.find(function (field) {
      return field.fieldId === id;
    });
  };

  var getFields = function getFields() {
    var fields = _cloneDeep(layout);

    var validatorPlugins = getPlugins("form-field-validator");
    fields.forEach(function (row) {
      row.forEach(function (id, idIndex) {
        row[idIndex] = getFieldById(id);
        row[idIndex].validators = row[idIndex].validation.map(function (item) {
          var validatorPlugin = validatorPlugins.find(function (plugin) {
            return plugin.validator.name === item.name;
          });

          if (!validatorPlugin || typeof validatorPlugin.validator.validate !== "function") {
            return;
          }

          return /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
              var isInvalid, result;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      isInvalid = true;
                      _context.prev = 1;
                      _context.next = 4;
                      return validatorPlugin.validator.validate(value, item);

                    case 4:
                      result = _context.sent;
                      isInvalid = result === false;
                      _context.next = 11;
                      break;

                    case 8:
                      _context.prev = 8;
                      _context.t0 = _context["catch"](1);
                      isInvalid = true;

                    case 11:
                      if (!isInvalid) {
                        _context.next = 13;
                        break;
                      }

                      throw new Error(I18NValue({
                        value: item.message
                      }) || "Invalid value.");

                    case 13:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, null, [[1, 8]]);
            }));

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }();
        }).filter(Boolean);
      });
    });
    return fields;
  };

  var getDefaultValues = function getDefaultValues() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var values = {};
    fields.forEach(function (field) {
      var fieldId = field.fieldId;

      if (fieldId && "defaultValue" in field.settings && typeof field.settings.defaultValue !== "undefined") {
        values[fieldId] = field.settings.defaultValue;
      }
    });
    return _objectSpread(_objectSpread({}, values), overrides);
  };

  var submit = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {
      var formSubmission;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(reCaptchaEnabled(formData) && !reCaptchaResponseToken.current)) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", {
                data: null,
                preview: Boolean(props.preview),
                error: {
                  code: "RECAPTCHA_NOT_PASSED",
                  message: settings.reCaptcha.errorMessage
                }
              });

            case 2:
              if (!(termsOfServiceEnabled(formData) && !termsOfServiceAccepted.current)) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return", {
                data: null,
                preview: Boolean(props.preview),
                error: {
                  code: "TOS_NOT_ACCEPTED",
                  message: settings.termsOfServiceMessage.errorMessage
                }
              });

            case 4:
              _context2.next = 6;
              return createFormSubmission({
                client: client,
                props: props,
                data: data,
                reCaptchaResponseToken: reCaptchaResponseToken.current
              });

            case 6:
              formSubmission = _context2.sent;
              _context2.next = 9;
              return handleFormTriggers({
                props: props,
                data: data,
                formSubmission: formSubmission
              });

            case 9:
              return _context2.abrupt("return", formSubmission);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function submit(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var layouts = React.useMemo(function () {
    return [].concat(_toConsumableArray(_get(theme, "forms.layouts") || []), _toConsumableArray(getPlugins("form-layout").map(function (pl) {
      return pl.layout;
    }))).reduce(function (acc, item) {
      if (!acc.find(function (l) {
        return l.name === item.name;
      })) {
        acc.push(item);
      }

      return acc;
    }, []);
  }, []); // Get form layout, defined in theme.

  var LayoutRenderComponent = layouts.find(function (item) {
    return item.name === settings.layout.renderer;
  });

  if (!LayoutRenderComponent) {
    return /*#__PURE__*/React.createElement("span", null, "Cannot render form, layout missing.");
  }

  LayoutRenderComponent = LayoutRenderComponent.component;
  var ReCaptcha = createReCaptchaComponent({
    props: props,
    formData: formData,
    setResponseToken: function setResponseToken(value) {
      return reCaptchaResponseToken.current = value;
    }
  });
  var TermsOfService = createTermsOfServiceComponent({
    props: props,
    formData: formData,
    setTermsOfServiceAccepted: function setTermsOfServiceAccepted(value) {
      return termsOfServiceAccepted.current = value;
    }
  });
  var layoutProps = {
    getFieldById: getFieldById,
    getFieldByFieldId: getFieldByFieldId,
    getDefaultValues: getDefaultValues,
    getFields: getFields,
    submit: submit,
    formData: formData,
    ReCaptcha: ReCaptcha,
    TermsOfService: TermsOfService
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("ssr-cache", {
    "data-class": "fb-form",
    "data-id": data.parent
  }), /*#__PURE__*/React.createElement(LayoutRenderComponent, layoutProps));
};

export default FormRender;
//# sourceMappingURL=FormRender.js.map