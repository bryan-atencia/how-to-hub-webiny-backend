import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _get from "lodash/get";
import { CREATE_FORM_SUBMISSION } from "./graphql";
import getClientIp from "./getClientIp";
export default /*#__PURE__*/(function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var client, _ref$props, form, preview, rawData, reCaptchaResponseToken, data, response;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            client = _ref.client, _ref$props = _ref.props, form = _ref$props.data, preview = _ref$props.preview, rawData = _ref.data, reCaptchaResponseToken = _ref.reCaptchaResponseToken;

            if (!preview) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", {
              preview: true,
              error: null,
              data: null
            });

          case 3:
            data = {};

            if (form) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", {
              error: {
                message: "Form data is missing.",
                code: "FORM_DATA_MISSING"
              },
              data: null,
              preview: false
            });

          case 6:
            form.fields.forEach(function (field) {
              if (field.fieldId in rawData) {
                data[field.fieldId] = rawData[field.fieldId];
              }
            });
            _context.t0 = client;
            _context.t1 = CREATE_FORM_SUBMISSION;
            _context.t2 = form.id;
            _context.t3 = reCaptchaResponseToken;
            _context.t4 = data;
            _context.next = 14;
            return getClientIp();

          case 14:
            _context.t5 = _context.sent;
            _context.t6 = {
              ip: _context.t5
            };
            _context.t7 = {
              id: _context.t2,
              reCaptchaResponseToken: _context.t3,
              data: _context.t4,
              meta: _context.t6
            };
            _context.t8 = {
              mutation: _context.t1,
              variables: _context.t7
            };
            _context.next = 20;
            return _context.t0.mutate.call(_context.t0, _context.t8);

          case 20:
            response = _context.sent;
            response = _get(response, "data.forms.createFormSubmission");
            return _context.abrupt("return", {
              preview: false,
              data: null,
              error: response.error
            });

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=createFormSubmission.js.map