{"version":3,"sources":["../../../../../src/editor/plugins/formSettings/components/ReCaptchaSettings.tsx"],"names":["React","useState","useCallback","Grid","Cell","Switch","Query","GET_RECAPTCHA_SETTINGS","ReCaptchaSettingsDialog","Alert","I18NInput","ReCaptchaSettings","Bind","formData","dialogOpened","setDialogOpened","openDialog","closeDialog","settingsLoaded","setSettingsLoaded","data","refetch","settings","reCaptchaEnabledInSettings","enabled","siteKey","secretKey","reCaptchaEnabled","onChange","rest","value"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { Query } from \"react-apollo\";\nimport { get } from \"lodash\";\nimport { GET_RECAPTCHA_SETTINGS } from \"./graphql\";\nimport ReCaptchaSettingsDialog from \"./ReCaptchaSettingsDialog\";\nimport { Alert } from \"@webiny/ui/Alert\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\n\nconst ReCaptchaSettings = ({ Bind, formData }) => {\n    const [dialogOpened, setDialogOpened] = useState(false);\n    const openDialog = useCallback(() => setDialogOpened(true), []);\n    const closeDialog = useCallback(() => setDialogOpened(false), []);\n\n    const [settingsLoaded, setSettingsLoaded] = useState(false);\n\n    return (\n        <Query query={GET_RECAPTCHA_SETTINGS} onCompleted={() => setSettingsLoaded(true)}>\n            {({ data, refetch }) => {\n                const settings = get(data, \"forms.getSettings.data.reCaptcha\") || {};\n                const reCaptchaEnabledInSettings =\n                    settings.enabled && settings.siteKey && settings.secretKey;\n                const reCaptchaEnabled = get(formData, \"reCaptcha.enabled\");\n\n                return (\n                    <Bind name={\"reCaptcha.enabled\"}>\n                        {({ onChange, ...rest }) => (\n                            <Grid>\n                                <Cell span={12}>\n                                    <Switch\n                                        onChange={value => {\n                                            if (value && !reCaptchaEnabledInSettings) {\n                                                openDialog();\n                                                return;\n                                            }\n\n                                            onChange(value);\n                                        }}\n                                        {...rest}\n                                        label={\"Enabled\"}\n                                        description={`Will require users to \"confirm they are human\" by clicking on a special checkbox.`}\n                                    />\n                                </Cell>\n                                <Cell span={12}>\n                                    <Bind name={\"reCaptcha.errorMessage\"}>\n                                        <I18NInput\n                                            disabled={!reCaptchaEnabled}\n                                            label={\"Error message\"}\n                                        />\n                                    </Bind>\n                                </Cell>\n\n                                {settingsLoaded && !reCaptchaEnabledInSettings && (\n                                    <Cell span={12}>\n                                        <Alert type=\"danger\" title=\"Google reCAPTCHA not enabled.\">\n                                            Click{\" \"}\n                                            <a href=\"#\" onClick={openDialog}>\n                                                here\n                                            </a>{\" \"}\n                                            to update your Google reCAPTCHA settings.\n                                        </Alert>\n                                    </Cell>\n                                )}\n                                <ReCaptchaSettingsDialog\n                                    reCaptchaSettings={settings}\n                                    open={dialogOpened}\n                                    onClose={closeDialog}\n                                    onSubmit={() => {\n                                        refetch();\n                                        onChange(true);\n                                        closeDialog();\n                                    }}\n                                />\n                            </Grid>\n                        )}\n                    </Bind>\n                );\n            }}\n        </Query>\n    );\n};\n\nexport default ReCaptchaSettings;\n"],"file":"ReCaptchaSettings.js"}