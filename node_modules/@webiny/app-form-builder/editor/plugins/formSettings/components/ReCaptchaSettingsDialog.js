import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Enable Google reCAPTCHA"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Edit Google reCAPTCHA settings"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { Mutation } from "react-apollo";
import { Form } from "@webiny/form";
import { Input } from "@webiny/ui/Input";
import get from "lodash.get";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CircularProgress } from "@webiny/ui/Progress";
import { Grid, Cell } from "@webiny/ui/Grid";
import { UPDATE_FORMS_SETTINGS } from "./graphql";
import { useFormEditor } from "@webiny/app-form-builder/admin/components/FormEditor/Context";
import { validation } from "@webiny/validation";
import { i18n } from "@webiny/app/i18n";
var t = i18n.namespace("Forms.ReCaptchaSettingsDialog");
import { Dialog, DialogTitle, DialogContent, DialogActions } from "@webiny/ui/Dialog";
import { ButtonDefault } from "@webiny/ui/Button";

var ReCaptchaSettingsDialog = function ReCaptchaSettingsDialog(_ref) {
  var open = _ref.open,
      onClose = _ref.onClose,
      reCaptchaSettings = _ref.reCaptchaSettings,
      onSubmit = _ref.onSubmit;

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  var _useFormEditor = useFormEditor(),
      setData = _useFormEditor.setData;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: onClose
  }, /*#__PURE__*/React.createElement(Mutation, {
    mutation: UPDATE_FORMS_SETTINGS
  }, function (update) {
    return /*#__PURE__*/React.createElement(Form, {
      data: reCaptchaSettings,
      onSubmit: /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
          var siteKey, secretKey, response;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  siteKey = _ref2.siteKey, secretKey = _ref2.secretKey;
                  setLoading(true);
                  _context.t0 = get;
                  _context.next = 5;
                  return update({
                    variables: {
                      data: {
                        reCaptcha: {
                          enabled: true,
                          siteKey: siteKey,
                          secretKey: secretKey
                        }
                      }
                    }
                  });

                case 5:
                  _context.t1 = _context.sent;
                  response = (0, _context.t0)(_context.t1, "data.forms.updateSettings");
                  setData(function (data) {
                    data.settings.reCaptcha.settings = {
                      enabled: true,
                      siteKey: siteKey,
                      secretKey: secretKey
                    };
                    return data;
                  });
                  setLoading(false);

                  if (!response.error) {
                    _context.next = 11;
                    break;
                  }

                  return _context.abrupt("return", showSnackbar(response.error.message));

                case 11:
                  onSubmit();

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }()
    }, function (_ref4) {
      var Bind = _ref4.Bind,
          submit = _ref4.submit;
      return /*#__PURE__*/React.createElement(React.Fragment, null, loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(DialogTitle, null, t(_templateObject())), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "siteKey",
        validators: validation.create("required")
      }, /*#__PURE__*/React.createElement(Input, {
        label: "Site key",
        description: /*#__PURE__*/React.createElement(React.Fragment, null, "A v2 Tickbox site key.", " ", /*#__PURE__*/React.createElement("a", {
          href: "https://www.google.com/recaptcha/admin",
          target: "_blank",
          rel: "noopener noreferrer"
        }, "Don't have a site key?"))
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "secretKey",
        validators: validation.create("required")
      }, /*#__PURE__*/React.createElement(Input, {
        label: "Secret key",
        description: /*#__PURE__*/React.createElement(React.Fragment, null, "A v2 Tickbox secret key.", " ", /*#__PURE__*/React.createElement("a", {
          href: "https://www.google.com/recaptcha/admin",
          target: "_blank",
          rel: "noopener noreferrer"
        }, "Don't have a site key?"))
      }))))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(ButtonDefault, {
        onClick: submit
      }, t(_templateObject2()))));
    });
  }));
};

export default ReCaptchaSettingsDialog;
//# sourceMappingURL=ReCaptchaSettingsDialog.js.map