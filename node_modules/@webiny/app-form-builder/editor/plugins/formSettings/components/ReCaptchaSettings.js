import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import React, { useState, useCallback } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Switch } from "@webiny/ui/Switch";
import { Query } from "react-apollo";
import { GET_RECAPTCHA_SETTINGS } from "./graphql";
import ReCaptchaSettingsDialog from "./ReCaptchaSettingsDialog";
import { Alert } from "@webiny/ui/Alert";
import { I18NInput } from "@webiny/app-i18n/admin/components";

var ReCaptchaSettings = function ReCaptchaSettings(_ref) {
  var Bind = _ref.Bind,
      formData = _ref.formData;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      dialogOpened = _useState2[0],
      setDialogOpened = _useState2[1];

  var openDialog = useCallback(function () {
    return setDialogOpened(true);
  }, []);
  var closeDialog = useCallback(function () {
    return setDialogOpened(false);
  }, []);

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      settingsLoaded = _useState4[0],
      setSettingsLoaded = _useState4[1];

  return /*#__PURE__*/React.createElement(Query, {
    query: GET_RECAPTCHA_SETTINGS,
    onCompleted: function onCompleted() {
      return setSettingsLoaded(true);
    }
  }, function (_ref2) {
    var data = _ref2.data,
        refetch = _ref2.refetch;
    var settings = _get(data, "forms.getSettings.data.reCaptcha") || {};
    var reCaptchaEnabledInSettings = settings.enabled && settings.siteKey && settings.secretKey;

    var reCaptchaEnabled = _get(formData, "reCaptcha.enabled");

    return /*#__PURE__*/React.createElement(Bind, {
      name: "reCaptcha.enabled"
    }, function (_ref3) {
      var _onChange = _ref3.onChange,
          rest = _objectWithoutProperties(_ref3, ["onChange"]);

      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Switch, Object.assign({
        onChange: function onChange(value) {
          if (value && !reCaptchaEnabledInSettings) {
            openDialog();
            return;
          }

          _onChange(value);
        }
      }, rest, {
        label: "Enabled",
        description: "Will require users to \"confirm they are human\" by clicking on a special checkbox."
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "reCaptcha.errorMessage"
      }, /*#__PURE__*/React.createElement(I18NInput, {
        disabled: !reCaptchaEnabled,
        label: "Error message"
      }))), settingsLoaded && !reCaptchaEnabledInSettings && /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Alert, {
        type: "danger",
        title: "Google reCAPTCHA not enabled."
      }, "Click", " ", /*#__PURE__*/React.createElement("a", {
        href: "#",
        onClick: openDialog
      }, "here"), " ", "to update your Google reCAPTCHA settings.")), /*#__PURE__*/React.createElement(ReCaptchaSettingsDialog, {
        reCaptchaSettings: settings,
        open: dialogOpened,
        onClose: closeDialog,
        onSubmit: function onSubmit() {
          refetch();

          _onChange(true);

          closeDialog();
        }
      }));
    });
  });
};

export default ReCaptchaSettings;
//# sourceMappingURL=ReCaptchaSettings.js.map