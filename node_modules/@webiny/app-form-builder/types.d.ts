import * as React from "react";
import { Plugin } from "@webiny/plugins/types";
import { ReCaptchaComponent } from "@webiny/app-form-builder/components/Form/components/createReCaptchaComponent";
import { TermsOfServiceComponent } from "@webiny/app-form-builder/components/Form/components/createTermsOfServiceComponent";
import { I18NStringValue } from "@webiny/app-i18n/types";
import { BindComponent, FormChildrenFunctionParams, Form, FormChildrenFunctionParamsSubmit } from "@webiny/form";
import { ApolloClient } from "apollo-client";
export declare type FbBuilderFieldValidator = {
    name: string;
    message: I18NStringValue;
    settings: any;
};
export declare type FbBuilderFormFieldValidatorPlugin = Plugin & {
    type: "form-editor-field-validator";
    validator: {
        name: string;
        label: string;
        description: string;
        defaultMessage: string;
        renderSettings?: (props: {
            Bind: BindComponent;
            setValue: (name: string, value: any) => void;
            setMessage: (message: string) => void;
            data: FbBuilderFieldValidator;
        }) => React.ReactElement;
    };
};
export declare type FbFormFieldPatternValidatorPlugin = Plugin & {
    type: "form-editor-field-validator-pattern";
    pattern: {
        name: string;
        message: string;
        label: string;
    };
};
export declare type FbFormFieldValidator = {
    name: string;
    message: any;
    settings: any;
};
export declare type FbFormFieldValidatorPlugin = Plugin & {
    type: "form-field-validator";
    validator: {
        name: string;
        validate: (value: any, validator: FbFormFieldValidator) => Promise<any>;
    };
};
export declare type FieldIdType = string;
export declare type FbFormModelFieldsLayout = FieldIdType[][];
export declare type FieldLayoutPositionType = {
    row: number;
    index: number;
};
export declare type FbBuilderFieldPlugin = Plugin & {
    type: "form-editor-field-type";
    field: {
        group?: string;
        unique?: boolean;
        type: string;
        name: string;
        label: string;
        validators?: string[];
        description: string;
        icon: React.ReactNode;
        createField: ({ i18n: any }: {
            i18n: any;
        }) => FbFormModelField;
        renderSettings?: (params: {
            form: FormChildrenFunctionParams;
            afterChangeLabel: (value: string) => void;
            uniqueFieldIdValidator: (fieldId: string) => void;
        }) => React.ReactNode;
    };
};
export declare type FbFormDetailsPluginRenderParams = {
    refreshForms: () => Promise<void>;
    form: FbFormModel;
    loading: boolean;
};
export declare type FbFormDetailsPluginType = Plugin & {
    type: "forms-form-details-revision-content";
    render: (props: FbFormDetailsPluginRenderParams) => React.ReactNode;
};
export declare type FbFormDetailsSubmissionsPlugin = Plugin & {
    type: "forms-form-details-submissions";
    render: (props: {
        form: FbFormModel;
    }) => React.ReactNode;
};
export declare type FbFormModel = {
    id: FieldIdType;
    version: number;
    parent: string;
    layout: FbFormModelFieldsLayout;
    fields: FbFormModelField[];
    name: string;
    settings: any;
    status: string;
    savedOn: string;
    revisions: any[];
    overallStats: {
        submissions: number;
        views: number;
        conversionRate: number;
    };
};
export declare type FbFormModelField = {
    _id?: string;
    type: string;
    name: string;
    fieldId?: FieldIdType;
    label?: I18NStringValue;
    helpText?: I18NStringValue;
    placeholderText?: I18NStringValue;
    validation?: FbBuilderFieldValidator[];
    options?: Array<{
        value: string;
        label: I18NStringValue;
    }>;
    settings: {
        [key: string]: any;
    };
};
export declare type FbFormSubmissionData = {
    data: any;
    form: {
        revision: FbFormModel;
    };
};
export declare type FbFormTriggerHandlerPlugin = Plugin & {
    type: "form-trigger-handler";
    trigger: {
        id: string;
        handle: (params: {
            trigger: any;
            data: any;
            form: FbFormModel;
        }) => void;
    };
};
export declare type FbEditorFormSettingsPlugin = Plugin & {
    type: "form-editor-form-settings";
    title: string;
    description: string;
    icon: React.ReactElement<any>;
    render(props: {
        Bind: BindComponent;
        form: Form;
        formData: any;
    }): React.ReactNode;
    renderHeaderActions?(props: {
        Bind: BindComponent;
        form: Form;
        formData: any;
    }): React.ReactNode;
};
export declare type FbEditorFieldGroup = Plugin & {
    type: "form-editor-field-group";
    group: {
        title: string;
    };
};
export declare type FbFormLayoutPlugin = Plugin & {
    type: "form-layout";
    layout: {
        name: string;
        title: string;
        component: React.ComponentType<any>;
    };
};
export declare type FbEditorTrigger = Plugin & {
    type: "form-editor-trigger";
    trigger: {
        id: string;
        title: string;
        description: string;
        icon: React.ReactElement<any>;
        renderSettings(params: {
            Bind: BindComponent;
            submit: FormChildrenFunctionParamsSubmit;
            form: FbFormModel;
        }): React.ReactElement<any>;
    };
};
export declare type FormRenderFbFormModelField = FbFormModelField & {
    validators: Array<(value: any) => boolean>;
};
export declare type FormRenderPropsType = {
    getFieldById: Function;
    getFieldByFieldId: Function;
    getFields: () => Array<Array<FormRenderFbFormModelField>>;
    getDefaultValues: () => {
        [key: string]: any;
    };
    ReCaptcha: ReCaptchaComponent;
    TermsOfService: TermsOfServiceComponent;
    submit: (data: Object) => Promise<FormSubmitResponseType>;
    formData: FbFormModel;
};
export declare type FormLayoutComponent = (props: FormRenderPropsType) => React.ReactNode;
export declare type FormComponentPropsType = {
    preview?: boolean;
    data?: any;
    revisionId?: string;
    parentId?: string;
    slug?: string;
};
export declare type FbFormRenderComponentProps = {
    preview?: boolean;
    data?: FbFormModel;
};
export declare type FormSubmitResponseType = {
    data: any;
    preview: boolean;
    error: {
        message: string;
        code: string;
    };
};
export declare type FormLoadComponentPropsType = {
    preview?: boolean;
    revisionId?: string;
    parentId?: string;
    slug?: string;
    version?: number;
};
export declare type UseFormEditorReducerStateType = {
    apolloClient: ApolloClient<any>;
    id: string;
    defaultLayoutRenderer: string;
};
export declare type FormSettingsPluginType = Plugin & {
    title: string;
    description: string;
    icon: React.ReactNode;
    render: FormSettingsPluginRenderFunctionType;
};
export declare type FormSettingsPluginRenderFunctionType = (props: {
    Bind: BindComponent;
    formData: any;
    form: any;
}) => React.ReactElement<any>;
