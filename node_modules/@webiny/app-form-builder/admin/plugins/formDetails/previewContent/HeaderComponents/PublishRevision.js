import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from "react";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as PublishIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/publish.svg";
import { ReactComponent as UnpublishIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/unpublish.svg";
import { PUBLISH_REVISION, UNPUBLISH_REVISION } from "@webiny/app-form-builder/admin/viewsGraphql";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { useApolloClient } from "react-apollo";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";

var PublishRevision = function PublishRevision(_ref) {
  var revision = _ref.revision;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();
  return /*#__PURE__*/React.createElement(React.Fragment, null, revision.status !== "published" ? /*#__PURE__*/React.createElement(Tooltip, {
    content: "Publish",
    placement: "top"
  }, /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Publish form",
    message: "You are about to publish this form, are you sure want to continue?"
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(PublishIcon, null),
      onClick: function onClick() {
        return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _yield$client$mutate, res, error;

          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return client.mutate({
                    mutation: PUBLISH_REVISION,
                    variables: {
                      id: revision.id
                    }
                  });

                case 2:
                  _yield$client$mutate = _context.sent;
                  res = _yield$client$mutate.data;
                  error = res.forms.publishRevision.error;

                  if (!error) {
                    _context.next = 7;
                    break;
                  }

                  return _context.abrupt("return", showSnackbar(error.message));

                case 7:
                  showSnackbar( /*#__PURE__*/React.createElement("span", null, "Successfully published revision", " ", /*#__PURE__*/React.createElement("strong", null, "#", revision.version), "!"));

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    });
  })) : /*#__PURE__*/React.createElement(Tooltip, {
    content: "Unpublish",
    placement: "top"
  }, /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Un-publish form",
    message: "You are about to unpublish this form, are you sure want to continue?"
  }, function (_ref4) {
    var showConfirmation = _ref4.showConfirmation;
    return /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(UnpublishIcon, null),
      onClick: function onClick() {
        return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          var _yield$client$mutate2, res, error;

          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return client.mutate({
                    mutation: UNPUBLISH_REVISION,
                    variables: {
                      id: revision.id
                    }
                  });

                case 2:
                  _yield$client$mutate2 = _context2.sent;
                  res = _yield$client$mutate2.data;
                  error = res.forms.unpublishRevision.error;

                  if (!error) {
                    _context2.next = 7;
                    break;
                  }

                  return _context2.abrupt("return", showSnackbar(error.message));

                case 7:
                  showSnackbar( /*#__PURE__*/React.createElement("span", null, "Successfully unpublished revision", " ", /*#__PURE__*/React.createElement("strong", null, "#", revision.version), "!"));

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        })));
      }
    });
  })));
};

export default PublishRevision;
//# sourceMappingURL=PublishRevision.js.map