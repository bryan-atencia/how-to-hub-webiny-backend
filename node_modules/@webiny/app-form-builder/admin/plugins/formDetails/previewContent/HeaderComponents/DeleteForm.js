import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _get from "lodash/get";
import _cloneDeep from "lodash/cloneDeep";
import React from "react";
import { useApolloClient } from "react-apollo";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/delete.svg";
import { GET_FORM, DELETE_FORM } from "@webiny/app-form-builder/admin/viewsGraphql";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";

var DeleteForm = function DeleteForm(_ref) {
  var form = _ref.form,
      revision = _ref.revision,
      selectRevision = _ref.selectRevision;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var parentRevision = revision.parent === revision.id;
  var message = "You are about to delete this form revision, are you sure want to continue?";

  if (parentRevision) {
    message = "You are about to delete this form and all of its revisions. Are you sure want to continue?";
  }

  return /*#__PURE__*/React.createElement(Tooltip, {
    content: "Delete",
    placement: "top"
  }, /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Delete form",
    message: message
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
      onClick: function onClick() {
        return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return client.mutate({
                    mutation: DELETE_FORM,
                    variables: {
                      id: revision.id
                    },
                    refetchQueries: ["FormsListForms"],
                    update: function update(cache, updated) {
                      var error = _get(updated, "data.forms.deleteRevision.error");

                      if (error) {
                        return showSnackbar(error.message);
                      }

                      showSnackbar("Form was deleted successfully!"); // If the parent was deleted, there's nothing to see here anymore, so
                      // we redirect back to the list of all forms.

                      if (revision.id === revision.parent) {
                        return history.push("/forms");
                      }

                      var gqlParams = {
                        query: GET_FORM,
                        variables: {
                          id: form.id
                        }
                      };

                      var data = _cloneDeep(cache.readQuery(gqlParams));

                      var indexOfDeleted = data.forms.form.data.revisions.findIndex(function (item) {
                        return item.id === revision.id;
                      });
                      data.forms.form.data.revisions.splice(indexOfDeleted, 1);
                      cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
                        data: data
                      })); // If currently selected revision (from left list of forms) was deleted,
                      // we redirect to the first revision in the list of all form revision.

                      var firstRevision = data.forms.form.data.revisions[0];
                      selectRevision(firstRevision);

                      if (revision.id === form.id) {
                        return history.push("/forms?id=" + firstRevision.id);
                      }
                    }
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    });
  }));
};

export default DeleteForm;
//# sourceMappingURL=DeleteForm.js.map