import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _get from "lodash/get";
import _cloneDeep from "lodash/cloneDeep";
import React from "react";
import { useRouter } from "@webiny/react-router";
import { useApolloClient } from "react-apollo";
import { useHandlers } from "@webiny/app/hooks/useHandlers";
import { GET_FORM, CREATE_REVISION_FROM, DELETE_REVISION, PUBLISH_REVISION, UNPUBLISH_REVISION } from "@webiny/app-form-builder/admin/viewsGraphql";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
export var useRevision = function useRevision(_ref) {
  var revision = _ref.revision,
      form = _ref.form;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useHandlers = useHandlers(null, {
    createRevision: function createRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$client$mutate, res, _res$forms$revision, data, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return client.mutate({
                  mutation: CREATE_REVISION_FROM,
                  variables: {
                    revision: revision.id
                  },
                  refetchQueries: ["FormsListForms"]
                });

              case 2:
                _yield$client$mutate = _context.sent;
                res = _yield$client$mutate.data;
                _res$forms$revision = res.forms.revision, data = _res$forms$revision.data, error = _res$forms$revision.error;

                if (!error) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", showSnackbar(error.message));

              case 7:
                history.push("/forms/".concat(data.id));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    },
    editRevision: function editRevision() {
      return function () {
        history.push("/forms/".concat(revision.id));
      };
    },
    deleteRevision: function deleteRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return client.mutate({
                  mutation: DELETE_REVISION,
                  variables: {
                    id: revision.id
                  },
                  refetchQueries: ["FormsListForms"],
                  update: function update(cache, updated) {
                    var error = _get(updated, "data.forms.deleteRevision.error");

                    if (error) {
                      return showSnackbar(error.message);
                    } // Should we redirect to list (remove "?id=XYZ" from URL?):
                    // If parent was deleted, that means all revisions were deleted, and we can redirect.


                    if (revision.parent === revision.id) {
                      return history.push("/forms");
                    }

                    var gqlParams = {
                      query: GET_FORM,
                      variables: {
                        id: form.id
                      }
                    };

                    var data = _cloneDeep(cache.readQuery(gqlParams));

                    var indexOfDeleted = data.forms.form.data.revisions.findIndex(function (item) {
                      return item.id === revision.id;
                    });
                    data.forms.form.data.revisions.splice(indexOfDeleted, 1);
                    cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
                      data: data
                    })); // If currently selected revision (from left list of forms) was deleted.

                    if (revision.id === form.id) {
                      return history.push("/forms");
                    }
                  }
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    },
    publishRevision: function publishRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _yield$client$mutate2, res, error;

        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return client.mutate({
                  mutation: PUBLISH_REVISION,
                  variables: {
                    id: revision.id
                  },
                  refetchQueries: ["FormsListForms"]
                });

              case 2:
                _yield$client$mutate2 = _context3.sent;
                res = _yield$client$mutate2.data;
                error = res.forms.publishRevision.error;

                if (!error) {
                  _context3.next = 7;
                  break;
                }

                return _context3.abrupt("return", showSnackbar(error.message));

              case 7:
                showSnackbar( /*#__PURE__*/React.createElement("span", null, "Successfully published revision ", /*#__PURE__*/React.createElement("strong", null, "#", revision.version), "!"));

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
    },
    unpublishRevision: function unpublishRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return client.mutate({
                  mutation: UNPUBLISH_REVISION,
                  variables: {
                    id: revision.id
                  },
                  refetchQueries: ["FormsListForms"]
                });

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
    }
  }),
      createRevision = _useHandlers.createRevision,
      editRevision = _useHandlers.editRevision,
      deleteRevision = _useHandlers.deleteRevision,
      publishRevision = _useHandlers.publishRevision,
      unpublishRevision = _useHandlers.unpublishRevision;

  return {
    createRevision: createRevision,
    editRevision: editRevision,
    deleteRevision: deleteRevision,
    publishRevision: publishRevision,
    unpublishRevision: unpublishRevision
  };
};
//# sourceMappingURL=useRevision.js.map