import React from "react";
import { css } from "emotion";
import TimeAgo from "timeago-react";
import { ListItem, ListItemText, ListItemTextPrimary, ListItemTextSecondary, ListItemGraphic, ListItemMeta } from "@webiny/ui/List";
import { IconButton } from "@webiny/ui/Button";
import { Icon } from "@webiny/ui/Icon";
import { MenuItem, Menu, MenuDivider } from "@webiny/ui/Menu";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/add.svg";
import { ReactComponent as BeenHereIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/beenhere.svg";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/delete.svg";
import { ReactComponent as EditIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/edit.svg";
import { ReactComponent as GestureIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/gesture.svg";
import { ReactComponent as LockIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/lock.svg";
import { ReactComponent as MoreVerticalIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/more_vert.svg";
import { ReactComponent as PublishIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/publish.svg";
import { ReactComponent as UnpublishIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/unpublish.svg";
import { useRevision } from "./useRevision";
var primaryColor = /*#__PURE__*/css({
  color: "var(--mdc-theme-primary)"
}, "label:primaryColor;");
var revisionsMenu = /*#__PURE__*/css({
  width: 250,
  right: -105,
  left: "auto !important"
}, "label:revisionsMenu;");

var getIcon = function getIcon(rev) {
  switch (rev.status) {
    case "locked":
      return {
        icon: /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(LockIcon, null)
        }),
        text: "This revision is locked (it has already been published)"
      };

    case "published":
      return {
        icon: /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(BeenHereIcon, null),
          className: primaryColor
        }),
        text: "This revision is currently published!"
      };

    default:
      return {
        icon: /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(GestureIcon, null)
        }),
        text: "This is a draft"
      };
  }
};

var Revision = function Revision(props) {
  var rev = props.revision,
      form = props.form;

  var _getIcon = getIcon(rev),
      icon = _getIcon.icon,
      tooltipText = _getIcon.text;

  var _useRevision = useRevision({
    revision: rev,
    form: form
  }),
      publishRevision = _useRevision.publishRevision,
      createRevision = _useRevision.createRevision,
      deleteRevision = _useRevision.deleteRevision,
      editRevision = _useRevision.editRevision,
      unpublishRevision = _useRevision.unpublishRevision;

  return /*#__PURE__*/React.createElement(ListItem, null, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltipText,
    placement: "bottom"
  }, icon)), /*#__PURE__*/React.createElement(ListItemText, null, /*#__PURE__*/React.createElement(ListItemTextPrimary, null, rev.name), /*#__PURE__*/React.createElement(ListItemTextSecondary, null, "Last modified ", /*#__PURE__*/React.createElement(TimeAgo, {
    datetime: rev.savedOn
  }), " (#", rev.version, ")")), /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(Menu, {
    handle: /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(MoreVerticalIcon, null)
    }),
    className: revisionsMenu
  }, /*#__PURE__*/React.createElement(MenuItem, {
    onClick: createRevision
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(AddIcon, null)
  })), "New from current"), rev.status === "draft" && /*#__PURE__*/React.createElement(MenuItem, {
    onClick: editRevision
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(EditIcon, null)
  })), "Edit"), rev.status !== "published" && /*#__PURE__*/React.createElement(MenuItem, {
    onClick: function onClick() {
      return publishRevision(rev);
    }
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(PublishIcon, null)
  })), "Publish"), rev.status === "published" && /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Confirmation required!",
    message: /*#__PURE__*/React.createElement("span", null, "Are you sure you want to unpublish this revision?")
  }, function (_ref) {
    var showConfirmation = _ref.showConfirmation;
    return /*#__PURE__*/React.createElement(MenuItem, {
      onClick: function onClick() {
        return showConfirmation(function () {
          return unpublishRevision(rev);
        });
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(UnpublishIcon, null)
    })), "Unpublish");
  }), /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Confirmation required!",
    message: /*#__PURE__*/React.createElement("span", null, "Are you sure you want to delete this revision?")
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(MenuItem, {
      onClick: function onClick() {
        return showConfirmation(deleteRevision);
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(DeleteIcon, null)
    })), "Delete");
  }))));
};

export default Revision;
//# sourceMappingURL=Revision.js.map