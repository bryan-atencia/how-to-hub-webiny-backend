import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _get from "lodash/get";
import React from "react";
import { Query, Mutation } from "react-apollo";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { ButtonPrimary } from "@webiny/ui/Button";
import { Input } from "@webiny/ui/Input";
import { Switch } from "@webiny/ui/Switch";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CircularProgress } from "@webiny/ui/Progress";
import graphql from "./graphql";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";

var FormsSettings = function FormsSettings() {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(Query, {
    query: graphql.query
  }, function (_ref) {
    var data = _ref.data,
        queryInProgress = _ref.loading;
    var settings = _get(data, "forms.getSettings.data") || {};
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: graphql.mutation
    }, function (update, _ref2) {
      var mutationInProgress = _ref2.loading;
      return /*#__PURE__*/React.createElement(Form, {
        data: settings,
        onSubmit: /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return update({
                      variables: {
                        data: data
                      }
                    });

                  case 2:
                    showSnackbar("Settings updated successfully.");

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref3.apply(this, arguments);
          };
        }()
      }, function (_ref4) {
        var Bind = _ref4.Bind,
            form = _ref4.form,
            formData = _ref4.data;

        var reCaptchaEnabled = _get(formData, "reCaptcha.enabled");

        return /*#__PURE__*/React.createElement(SimpleForm, null, (queryInProgress || mutationInProgress) && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
          title: "reCAPTCHA settings"
        }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "domain"
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Domain",
          description: "E.g. https://www.mysite.com"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "reCaptcha.enabled"
        }, /*#__PURE__*/React.createElement(Switch, {
          label: "Enable Google reCAPTCHA"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "reCaptcha.siteKey"
        }, /*#__PURE__*/React.createElement(Input, {
          disabled: !reCaptchaEnabled,
          label: "Google reCAPTCHA site key",
          description: /*#__PURE__*/React.createElement(React.Fragment, null, "A v2 Tickbox site key.", " ", /*#__PURE__*/React.createElement("a", {
            href: "https://www.google.com/recaptcha/admin",
            target: "_blank",
            rel: "noopener noreferrer"
          }, "Don't have a site key?"))
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "reCaptcha.secretKey"
        }, /*#__PURE__*/React.createElement(Input, {
          disabled: !reCaptchaEnabled,
          label: "Google reCAPTCHA secret key",
          description: /*#__PURE__*/React.createElement(React.Fragment, null, "A v2 Tickbox secret key.", " ", /*#__PURE__*/React.createElement("a", {
            href: "https://www.google.com/recaptcha/admin",
            target: "_blank",
            rel: "noopener noreferrer"
          }, "Don't have a site key?"))
        }))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
          onClick: form.submit
        }, "Save")));
      });
    });
  });
};

export default FormsSettings;
//# sourceMappingURL=FormsSettings.js.map