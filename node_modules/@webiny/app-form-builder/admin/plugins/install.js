import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["Form Builder app"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Something went wrong"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Installing Form Builder..."]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    mutation InstallFormBuilder($domain: String) {\n        forms {\n            install(domain: $domain) {\n                data\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    {\n        forms {\n            isInstalled {\n                data\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useState, useEffect } from "react";
import gql from "graphql-tag";
import { useApolloClient } from "react-apollo";
import { i18n } from "@webiny/app/i18n";
import { Alert } from "@webiny/ui/Alert";
import { CircularProgress } from "@webiny/ui/Progress";
import { SimpleForm, SimpleFormContent } from "@webiny/app-admin/components/SimpleForm";
import styled from "@emotion/styled";
var SimpleFormPlaceholder = /*#__PURE__*/styled("div", {
  target: "ept2c4f0",
  label: "SimpleFormPlaceholder"
})({
  minHeight: 300,
  minWidth: 400
});
var t = i18n.ns("app-forms/admin/installation");
var IS_INSTALLED = gql(_templateObject());
var INSTALL = gql(_templateObject2());

var FBInstaller = function FBInstaller(_ref) {
  var onInstalled = _ref.onInstalled;
  var client = useApolloClient();

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      error = _useState2[0],
      setError = _useState2[1];

  useEffect(function () {
    client.mutate({
      mutation: INSTALL,
      variables: {
        domain: window.location.origin
      }
    }).then(function (_ref2) {
      var data = _ref2.data;
      var error = data.forms.install.error;

      if (error) {
        setError(error.message);
        return;
      } // Just so the user sees the actual message.


      setTimeout(onInstalled, 3000);
    });
  }, []);
  return /*#__PURE__*/React.createElement(SimpleForm, null, /*#__PURE__*/React.createElement(CircularProgress, {
    label: t(_templateObject3())
  }), error && /*#__PURE__*/React.createElement(Alert, {
    title: t(_templateObject4()),
    type: "danger"
  }, error), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(SimpleFormPlaceholder, null)));
};

var plugin = {
  name: "installation-fb",
  type: "admin-installation",
  title: t(_templateObject5()),
  dependencies: ["installation-security"],
  secure: true,
  isInstalled: function isInstalled(_ref3) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var client, _yield$client$query, data;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              client = _ref3.client;
              _context.next = 3;
              return client.query({
                query: IS_INSTALLED
              });

            case 3:
              _yield$client$query = _context.sent;
              data = _yield$client$query.data;
              return _context.abrupt("return", data.forms.isInstalled.data);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  render: function render(_ref4) {
    var onInstalled = _ref4.onInstalled;
    return /*#__PURE__*/React.createElement(FBInstaller, {
      onInstalled: onInstalled
    });
  }
};
export default plugin;
//# sourceMappingURL=install.js.map