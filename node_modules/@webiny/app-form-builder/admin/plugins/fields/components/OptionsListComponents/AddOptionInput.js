import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _trim from "lodash/trim";
import React from "react";
import { Input } from "@webiny/ui/Input";
import { Form } from "@webiny/form";
import { Hotkeys } from "react-hotkeyz";
export default function AddOptionInput(_ref) {
  var options = _ref.options,
      onAdd = _ref.onAdd,
      optionsValidation = _ref.validation;
  return /*#__PURE__*/React.createElement(Form, null, function (_ref2) {
    var Bind = _ref2.Bind;
    return /*#__PURE__*/React.createElement(Bind, {
      name: "newOption",
      validators: function validators(value) {
        if (!Array.isArray(options)) {
          return true;
        }

        if (options.find(function (item) {
          return item.value === value;
        })) {
          throw new Error("Option with value \"".concat(value, "\" already exists."));
        }
      }
    }, function (_ref3) {
      var value = _ref3.value,
          onChange = _ref3.onChange,
          validate = _ref3.validate,
          inputValidation = _ref3.validation;
      var validation = inputValidation && inputValidation.message ? inputValidation : optionsValidation;
      return /*#__PURE__*/React.createElement(Hotkeys, {
        zIndex: 110,
        keys: {
          enter: function enter() {
            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              var result;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!value) {
                        _context.next = 5;
                        break;
                      }

                      _context.next = 3;
                      return validate();

                    case 3:
                      result = _context.sent;

                      if (result !== false) {
                        onChange("");
                        onAdd(_trim(value));
                      }

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))();
          }
        }
      }, /*#__PURE__*/React.createElement(Input, {
        validation: validation,
        value: value,
        onChange: onChange,
        placeholder: "Enter an option and press enter"
      }));
    });
  });
}
//# sourceMappingURL=AddOptionInput.js.map