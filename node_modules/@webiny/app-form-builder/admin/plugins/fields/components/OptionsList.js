import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _cloneDeep from "lodash/cloneDeep";
import _camelCase from "lodash/camelCase";
import React, { useState } from "react";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { css } from "emotion";
import styled from "@emotion/styled";
import { OptionsListItem, AddOptionInput, EditFieldOptionDialog } from "./OptionsListComponents"; // @ts-ignore

import { sortableContainer, sortableElement, sortableHandle } from "react-sortable-hoc";
import { Icon } from "@webiny/ui/Icon";
import { ReactComponent as HandleIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/round-drag_indicator-24px.svg";
import { validation } from "@webiny/validation";
var OptionList = /*#__PURE__*/styled("ul", {
  target: "en72itt0",
  label: "OptionList"
})({
  padding: 25,
  border: "1px solid var(--mdc-theme-on-background)"
});
var OptionListItem = /*#__PURE__*/styled("li", {
  target: "en72itt1",
  label: "OptionListItem"
})({
  zIndex: 10,
  display: "flex",
  justifyContent: "space-between",
  borderBottom: "1px solid var(--mdc-theme-background)",
  background: "var(--mdc-theme-surface)",
  "&:hover": {
    background: "var(--mdc-theme-background)"
  },
  "&:last-child": {
    border: "none"
  }
});
var sortableList = /*#__PURE__*/css({
  zIndex: 20
}, "label:sortableList;");
var DragHandle = sortableHandle(function () {
  return /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(HandleIcon, {
      style: {
        cursor: "pointer"
      }
    })
  });
});
var SortableContainer = sortableContainer(function (_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement(OptionList, null, children);
});
var SortableItem = sortableElement(function (_ref2) {
  var setOptionsValue = _ref2.setOptionsValue,
      setEditOption = _ref2.setEditOption,
      option = _ref2.option,
      options = _ref2.optionsValue,
      Bind = _ref2.Bind,
      multiple = _ref2.multiple,
      optionIndex = _ref2.optionIndex;
  return /*#__PURE__*/React.createElement(OptionListItem, null, /*#__PURE__*/React.createElement(OptionsListItem, {
    dragHandle: /*#__PURE__*/React.createElement(DragHandle, null),
    key: option.value,
    Bind: Bind,
    multiple: multiple,
    option: option,
    deleteOption: function deleteOption() {
      var newValue = _toConsumableArray(options);

      newValue.splice(optionIndex, 1);
      setOptionsValue(newValue);
    },
    editOption: function editOption() {
      return setEditOption({
        index: optionIndex,
        data: _cloneDeep(option)
      });
    },
    setOptionTranslations: function setOptionTranslations(label) {
      var newValue = _toConsumableArray(options);

      newValue.splice(optionIndex, 1, {
        value: option.value,
        label: label
      });
      setOptionsValue(newValue);
    }
  }));
});

var OptionsList = function OptionsList(_ref3) {
  var form = _ref3.form,
      multiple = _ref3.multiple;
  var Bind = form.Bind;

  var _useI18N = useI18N(),
      getDefaultLocale = _useI18N.getDefaultLocale;

  var _useState = useState({
    data: null,
    index: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      editOption = _useState2[0],
      setEditOption = _useState2[1];

  var clearEditOption = function clearEditOption() {
    return setEditOption({
      data: null,
      index: null
    });
  };

  return /*#__PURE__*/React.createElement(Bind, {
    name: "options",
    validators: validation.create("required,minLength:1")
  }, function (_ref4) {
    var optionsValidation = _ref4.validation,
        optionsValue = _ref4.value,
        setOptionsValue = _ref4.onChange;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, "Options"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(AddOptionInput, {
      options: optionsValue,
      validation: optionsValidation,
      onAdd: function onAdd(label) {
        var newValue = Array.isArray(optionsValue) ? _toConsumableArray(optionsValue) : [];
        newValue.push({
          value: _camelCase(label),
          label: {
            values: [{
              locale: getDefaultLocale().id,
              value: label
            }]
          }
        });
        setOptionsValue(newValue);
      }
    })), /*#__PURE__*/React.createElement("div", {
      style: {
        position: "relative"
      }
    }, Array.isArray(optionsValue) && optionsValue.length > 0 ? /*#__PURE__*/React.createElement(SortableContainer, {
      helperClass: sortableList,
      useDragHandle: true,
      transitionDuration: 0,
      onSortEnd: function onSortEnd(_ref5) {
        var oldIndex = _ref5.oldIndex,
            newIndex = _ref5.newIndex;

        var newValue = _toConsumableArray(optionsValue);

        var _newValue$splice = newValue.splice(oldIndex, 1),
            _newValue$splice2 = _slicedToArray(_newValue$splice, 1),
            movedItem = _newValue$splice2[0];

        newValue.splice(newIndex, 0, movedItem);
        setOptionsValue(newValue);
      }
    }, optionsValue.map(function (item, index) {
      return /*#__PURE__*/React.createElement(SortableItem, {
        key: "item-".concat(index),
        Bind: Bind,
        multiple: multiple,
        setEditOption: setEditOption,
        setOptionsValue: setOptionsValue,
        option: item,
        optionsValue: optionsValue,
        optionIndex: index,
        index: index
      });
    })) : /*#__PURE__*/React.createElement("div", {
      style: {
        padding: 40,
        textAlign: "center"
      }
    }, "No options added.")), /*#__PURE__*/React.createElement(EditFieldOptionDialog, {
      onClose: clearEditOption,
      open: editOption.data,
      options: optionsValue,
      option: editOption.data,
      optionIndex: editOption.index,
      onSubmit: function onSubmit(data) {
        var newValue = _toConsumableArray(optionsValue);

        newValue.splice(editOption.index, 1, data);
        setOptionsValue(newValue);
        clearEditOption();
      }
    }));
  });
};

export default OptionsList;
//# sourceMappingURL=OptionsList.js.map