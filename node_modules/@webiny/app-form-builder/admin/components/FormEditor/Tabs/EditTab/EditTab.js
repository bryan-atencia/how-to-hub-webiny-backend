import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _cloneDeep from "lodash/cloneDeep";
import _get from "lodash/get";

function _templateObject() {
  var data = _taggedTemplateLiteral(["Drop your first field here"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useCallback, useState } from "react";
import { Icon } from "@webiny/ui/Icon";
import { Center, Vertical, Horizontal } from "../../DropZone";
import Draggable from "../../Draggable";
import EditFieldDialog from "./EditFieldDialog";
import Field from "./Field";
import { ReactComponent as HandleIcon } from "@svgr/webpack!@webiny/app-form-builder/admin/icons/round-drag_indicator-24px.svg";
import { rowHandle, EditContainer, fieldHandle, fieldContainer, Row, RowContainer } from "./Styled";
import { useFormEditor } from "@webiny/app-form-builder/admin/components/FormEditor/Context";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { i18n } from "@webiny/app/i18n";
var t = i18n.namespace("FormsApp.Editor.EditTab");
export var EditTab = function EditTab() {
  var _useFormEditor = useFormEditor(),
      getFields = _useFormEditor.getFields,
      insertField = _useFormEditor.insertField,
      updateField = _useFormEditor.updateField,
      deleteField = _useFormEditor.deleteField,
      data = _useFormEditor.data,
      moveField = _useFormEditor.moveField,
      moveRow = _useFormEditor.moveRow,
      getFieldPlugin = _useFormEditor.getFieldPlugin;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      editingField = _useState2[0],
      setEditingField = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      dropTarget = _useState4[0],
      setDropTarget = _useState4[1];

  var editField = useCallback(function (field) {
    setEditingField(_cloneDeep(field));
  }, undefined);
  var i18n = useI18N();
  var handleDropField = useCallback(function (source, dropTarget) {
    var pos = source.pos,
        name = source.name,
        ui = source.ui;

    if (name === "custom") {
      editField({});
      setDropTarget(dropTarget);
      return;
    }

    if (ui === "row") {
      // Reorder rows.
      // Reorder logic is different depending on the source and target position.
      return moveRow(pos.row, dropTarget.row);
    } // If source pos is set, we are moving an existing field.


    if (pos) {
      var fieldId = data.layout[pos.row][pos.index];
      return moveField({
        field: fieldId,
        position: dropTarget
      });
    } // Find field plugin which handles the dropped field type "name".


    var plugin = getFieldPlugin({
      name: name
    });
    insertField(plugin.field.createField({
      i18n: i18n
    }), dropTarget);
  }, undefined);
  var fields = getFields(true);
  return /*#__PURE__*/React.createElement(EditContainer, null, fields.length === 0 && /*#__PURE__*/React.createElement(Center, {
    onDrop: function onDrop(item) {
      return handleDropField(item, {
        row: 0,
        index: 0
      });
    }
  }, t(_templateObject())), fields.map(function (row, index) {
    return /*#__PURE__*/React.createElement(Draggable, {
      beginDrag: {
        ui: "row",
        pos: {
          row: index
        }
      },
      key: index
    }, function (_ref
    /* RowContainer start - includes drag handle, drop zones and the Row itself. */
    ) {
      var drag = _ref.drag,
          isDragging = _ref.isDragging;
      return (
        /*#__PURE__*/
        React.createElement(RowContainer, {
          style: {
            opacity: isDragging ? 0.3 : 1
          }
        }, /*#__PURE__*/React.createElement("div", {
          className: rowHandle,
          ref: drag
        }, /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(HandleIcon, null)
        })), /*#__PURE__*/React.createElement(Horizontal, {
          onDrop: function onDrop(item) {
            return handleDropField(item, {
              row: index,
              index: null
            });
          }
        }), /*#__PURE__*/React.createElement(Row, null, row.map(function (field, fieldIndex) {
          return /*#__PURE__*/React.createElement(Draggable, {
            key: fieldIndex,
            beginDrag: {
              ui: "field",
              name: field.name,
              pos: {
                row: index,
                index: fieldIndex
              }
            }
          }, function (_ref2) {
            var drag = _ref2.drag;
            return /*#__PURE__*/React.createElement("div", {
              className: fieldContainer,
              ref: drag
            }, /*#__PURE__*/React.createElement(Vertical, {
              onDrop: function onDrop(item) {
                return handleDropField(item, {
                  row: index,
                  index: fieldIndex
                });
              },
              isVisible: function isVisible(item) {
                return item.ui === "field" && (row.length < 4 || _get(item, "pos.row") === index);
              }
            }), /*#__PURE__*/React.createElement("div", {
              className: fieldHandle
            }, /*#__PURE__*/React.createElement(Field, {
              field: field,
              onEdit: editField,
              onDelete: deleteField
            })), fieldIndex === row.length - 1 && /*#__PURE__*/React.createElement(Vertical, {
              last: true,
              isVisible: function isVisible(item) {
                return item.ui === "field" && (row.length < 4 || _get(item, "pos.row") === index);
              },
              onDrop: function onDrop(item) {
                return handleDropField(item, {
                  row: index,
                  index: fieldIndex + 1
                });
              }
            }));
          });
        })), index === fields.length - 1 && /*#__PURE__*/React.createElement(Horizontal, {
          last: true,
          onDrop: function onDrop(item) {
            return handleDropField(item, {
              row: index + 1,
              index: null
            });
          }
        }))
      );
    });
  }), /*#__PURE__*/React.createElement(EditFieldDialog, {
    field: editingField,
    onClose: editField,
    onSubmit: function onSubmit(data) {
      if (data._id) {
        updateField(data);
      } else {
        insertField(data, dropTarget);
      }

      editField(null);
    }
  }));
};
//# sourceMappingURL=EditTab.js.map