{"version":3,"sources":["../../../../../../src/admin/components/FormEditor/Tabs/EditTab/EditFieldDialog.tsx"],"names":["React","useState","useEffect","useCallback","css","styled","Dialog","DialogContent","DialogTitle","DialogCancel","DialogActions","DialogButton","Form","getPlugins","Tabs","Tab","GeneralTab","ValidatorsTab","FieldTypeSelector","i18n","t","namespace","useFormEditor","useI18N","dialogBody","width","height","FbFormModelFieldList","display","justifyContent","alignItems","flexWrap","paddingTop","backgroundColor","EditFieldDialog","field","onSubmit","props","current","setCurrent","isNewField","setIsNewField","screen","setScreen","getFieldPlugin","_id","type","onClose","undefined","render","headerTitle","fieldPlugin","name","fieldTypeLabel","label","form","Array","isArray","validators","length","submit","filter","pl","group","map","newCurrent","createField","fieldId","helpText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { cloneDeep } from \"lodash\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    DialogCancel,\n    DialogActions,\n    DialogButton\n} from \"@webiny/ui/Dialog\";\nimport { Form } from \"@webiny/form\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport GeneralTab from \"./EditFieldDialog/GeneralTab\";\nimport ValidatorsTab from \"./EditFieldDialog/ValidatorsTab\";\nimport FieldTypeSelector from \"./EditFieldDialog/FieldTypeSelector\";\nimport { i18n } from \"@webiny/app/i18n\";\nconst t = i18n.namespace(\"FormEditor.EditFieldDialog\");\nimport { useFormEditor } from \"@webiny/app-form-builder/admin/components/FormEditor/Context\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { FbBuilderFieldPlugin, FbFormModelField } from \"@webiny/app-form-builder/types\";\n\nconst dialogBody = css({\n    \"&.webiny-ui-dialog__content\": {\n        width: 875,\n        height: 450\n    }\n});\n\nconst FbFormModelFieldList = styled(\"div\")({\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    paddingTop: 25,\n    backgroundColor: \"var(--mdc-theme-background) !important\"\n});\n\ntype EditFieldDialogProps = {\n    field: FbFormModelField;\n    onClose: Function;\n    onSubmit: (data: any) => void;\n};\n\nconst EditFieldDialog = ({ field, onSubmit, ...props }: EditFieldDialogProps) => {\n    const [current, setCurrent] = useState(null);\n    const [isNewField, setIsNewField] = useState(false);\n    const [screen, setScreen] = useState();\n\n    const { getFieldPlugin } = useFormEditor();\n    const i18n = useI18N();\n\n    useEffect(() => {\n        setCurrent(cloneDeep(field));\n        if (field) {\n            setIsNewField(!field._id);\n            setScreen(field.type ? \"fieldOptions\" : \"fieldType\");\n        }\n    }, [field]);\n\n    const onClose = useCallback(() => {\n        setCurrent(null);\n        props.onClose();\n    }, undefined);\n\n    let render = null;\n    let headerTitle = t`Field Settings`;\n\n    if (current) {\n        const fieldPlugin = getFieldPlugin({ name: current.name });\n        if (fieldPlugin) {\n            headerTitle = t`Field Settings - {fieldTypeLabel}`({\n                fieldTypeLabel: fieldPlugin.field.label\n            });\n        }\n\n        switch (screen) {\n            case \"fieldOptions\": {\n                render = (\n                    <Form data={current} onSubmit={onSubmit}>\n                        {form => (\n                            <>\n                                <DialogContent className={dialogBody}>\n                                    <Tabs>\n                                        <Tab label={t`General`}>\n                                            <GeneralTab form={form} field={current} />\n                                        </Tab>\n                                        {Array.isArray(fieldPlugin.field.validators) &&\n                                            fieldPlugin.field.validators.length > 0 && (\n                                                <Tab label={\"Validators\"}>\n                                                    <ValidatorsTab form={form} field={current} />\n                                                </Tab>\n                                            )}\n                                    </Tabs>\n                                </DialogContent>\n                                <DialogActions\n                                    style={{\n                                        justifyContent: isNewField ? \"space-between\" : \"flex-end\"\n                                    }}\n                                >\n                                    {isNewField && (\n                                        <DialogButton onClick={() => setScreen(\"fieldType\")}>\n                                            {t`Go back`}\n                                        </DialogButton>\n                                    )}\n                                    <div>\n                                        <DialogButton onClick={onClose}>{t`Cancel`}</DialogButton>\n                                        <DialogButton onClick={form.submit}>{t`Save`}</DialogButton>\n                                    </div>\n                                </DialogActions>\n                            </>\n                        )}\n                    </Form>\n                );\n                break;\n            }\n            default:\n                render = (\n                    <>\n                        <DialogContent className={dialogBody}>\n                            <FbFormModelFieldList>\n                                {getPlugins<FbBuilderFieldPlugin>(\"form-editor-field-type\")\n                                    .filter(pl => !pl.field.group)\n                                    .map(pl => (\n                                        <FieldTypeSelector\n                                            key={pl.name}\n                                            fieldType={pl.field}\n                                            onClick={() => {\n                                                const newCurrent: any = pl.field.createField({\n                                                    i18n\n                                                });\n                                                if (current) {\n                                                    // User edited existing field, that's why we still want to\n                                                    // keep a couple of previous values.\n                                                    const {\n                                                        _id,\n                                                        label,\n                                                        fieldId,\n                                                        helpText\n                                                    } = current;\n                                                    newCurrent._id = _id;\n                                                    newCurrent.label = label;\n                                                    newCurrent.fieldId = fieldId;\n                                                    newCurrent.helpText = helpText;\n                                                }\n                                                setCurrent(newCurrent);\n                                                setScreen(\"fieldOptions\");\n                                            }}\n                                        />\n                                    ))}\n                            </FbFormModelFieldList>\n                        </DialogContent>\n                        <DialogActions>\n                            <DialogCancel onClick={onClose}>{t`Cancel`}</DialogCancel>\n                        </DialogActions>\n                    </>\n                );\n        }\n    }\n\n    return (\n        <Dialog preventOutsideDismiss={true} open={!!current} onClose={onClose}>\n            <DialogTitle>{headerTitle}</DialogTitle>\n            {render}\n        </Dialog>\n    );\n};\n\nexport default EditFieldDialog;\n"],"file":"EditFieldDialog.js"}