import _camelCase from "lodash/camelCase";
import React, { useEffect, useCallback, useRef } from "react";
import { Input } from "@webiny/ui/Input";
import { Grid, Cell } from "@webiny/ui/Grid";
import { useFormEditor } from "@webiny/app-form-builder/admin/components/FormEditor/Context";
import { I18NInput } from "@webiny/app-i18n/admin/components";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { validation } from "@webiny/validation";

var GeneralTab = function GeneralTab(_ref) {
  var field = _ref.field,
      form = _ref.form;
  var Bind = form.Bind,
      setValue = form.setValue;
  var inputRef = useRef(null);

  var _useFormEditor = useFormEditor(),
      getField = _useFormEditor.getField,
      getFieldPlugin = _useFormEditor.getFieldPlugin;

  var _useI18N = useI18N(),
      getValue = _useI18N.getValue;

  var setRef = useCallback(function (ref) {
    return inputRef.current = ref;
  }, []);
  useEffect(function () {
    inputRef.current && inputRef.current.focus();
  }, []);
  var afterChangeLabel = useCallback(function (value) {
    setValue("fieldId", _camelCase(getValue(value)));
  }, []);
  var uniqueFieldIdValidator = useCallback(function (fieldId) {
    var existingField = getField({
      fieldId: fieldId
    });

    if (!existingField) {
      return;
    }

    if (existingField._id === field._id) {
      return true;
    }

    throw new Error("Please enter a unique Field ID");
  }, undefined);
  var fieldPlugin = getFieldPlugin({
    name: field.name
  });
  var additionalSettings = null;

  if (typeof fieldPlugin.field.renderSettings === "function") {
    additionalSettings = fieldPlugin.field.renderSettings({
      form: form,
      afterChangeLabel: afterChangeLabel,
      uniqueFieldIdValidator: uniqueFieldIdValidator
    });
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "label",
    validators: validation.create("required"),
    afterChange: afterChangeLabel
  }, /*#__PURE__*/React.createElement(I18NInput, {
    label: "Label",
    inputRef: setRef
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "fieldId",
    validators: [validation.create("required"), uniqueFieldIdValidator]
  }, /*#__PURE__*/React.createElement(Input, {
    label: "Field ID"
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "helpText"
  }, /*#__PURE__*/React.createElement(I18NInput, {
    label: "Help text",
    description: "Help text (optional)"
  })))), additionalSettings);
};

export default GeneralTab;
//# sourceMappingURL=GeneralTab.js.map