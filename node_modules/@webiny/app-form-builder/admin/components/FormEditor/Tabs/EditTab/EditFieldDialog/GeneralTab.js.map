{"version":3,"sources":["../../../../../../../src/admin/components/FormEditor/Tabs/EditTab/EditFieldDialog/GeneralTab.tsx"],"names":["React","useEffect","useCallback","useRef","Input","Grid","Cell","useFormEditor","I18NInput","useI18N","validation","GeneralTab","field","form","Bind","setValue","inputRef","getField","getFieldPlugin","getValue","setRef","ref","current","focus","afterChangeLabel","value","uniqueFieldIdValidator","fieldId","existingField","_id","Error","undefined","fieldPlugin","name","additionalSettings","renderSettings","create"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { camelCase } from \"lodash\";\nimport { useFormEditor } from \"@webiny/app-form-builder/admin/components/FormEditor/Context\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { validation } from \"@webiny/validation\";\nimport { FbFormModelField } from \"@webiny/app-form-builder/types\";\nimport {FormChildrenFunctionParams} from \"@webiny/form/Form\";\n\ntype GeneralTabProps = {\n    field: FbFormModelField;\n    form: FormChildrenFunctionParams;\n};\n\nconst GeneralTab = ({ field, form }: GeneralTabProps) => {\n    const { Bind, setValue } = form;\n    const inputRef = useRef(null);\n    const { getField, getFieldPlugin } = useFormEditor();\n    const { getValue } = useI18N();\n\n    const setRef = useCallback(ref => (inputRef.current = ref), []);\n\n    useEffect(() => {\n        inputRef.current && inputRef.current.focus();\n    }, []);\n\n    const afterChangeLabel = useCallback(value => {\n        setValue(\"fieldId\", camelCase(getValue(value)));\n    }, []);\n\n    const uniqueFieldIdValidator = useCallback(fieldId => {\n        const existingField = getField({ fieldId });\n        if (!existingField) {\n            return;\n        }\n\n        if (existingField._id === field._id) {\n            return true;\n        }\n        throw new Error(\"Please enter a unique Field ID\");\n    }, undefined);\n\n    const fieldPlugin = getFieldPlugin({ name: field.name });\n\n    let additionalSettings = null;\n    if (typeof fieldPlugin.field.renderSettings === \"function\") {\n        additionalSettings = fieldPlugin.field.renderSettings({\n            form,\n            afterChangeLabel,\n            uniqueFieldIdValidator\n        });\n    }\n\n    return (\n        <>\n            <Grid>\n                <Cell span={6}>\n                    <Bind\n                        name={\"label\"}\n                        validators={validation.create(\"required\")}\n                        afterChange={afterChangeLabel}\n                    >\n                        <I18NInput label={\"Label\"} inputRef={setRef} />\n                    </Bind>\n                </Cell>\n                <Cell span={6}>\n                    <Bind\n                        name={\"fieldId\"}\n                        validators={[validation.create(\"required\"), uniqueFieldIdValidator]}\n                    >\n                        <Input label={\"Field ID\"} />\n                    </Bind>\n                </Cell>\n                <Cell span={12}>\n                    <Bind name={\"helpText\"}>\n                        <I18NInput label={\"Help text\"} description={\"Help text (optional)\"} />\n                    </Bind>\n                </Cell>\n            </Grid>\n            {additionalSettings}\n        </>\n    );\n};\n\nexport default GeneralTab;\n"],"file":"GeneralTab.js"}