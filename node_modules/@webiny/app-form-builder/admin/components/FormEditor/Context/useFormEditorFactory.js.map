{"version":3,"sources":["../../../../../src/admin/components/FormEditor/Context/useFormEditorFactory.ts"],"names":["React","shortid","GET_FORM","UPDATE_REVISION","getFieldPosition","moveField","moveRow","deleteField","getPlugins","FormEditorContext","context","useContext","Error","state","dispatch","self","apollo","data","getForm","id","query","variables","response","error","setData","form","settings","layout","renderer","defaultLayoutRenderer","saveForm","mutate","mutation","setter","type","getFields","fields","forEach","row","rowIndex","fieldId","fieldIndex","getField","_id","getFieldPlugin","find","field","key","insertField","position","generate","name","fieldPlugin","Array","isArray","push","source","destination","updateField","fieldData","i","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\nimport { get, cloneDeep, pick } from \"lodash\";\nimport { GET_FORM, UPDATE_REVISION } from \"./graphql\";\nimport { getFieldPosition, moveField, moveRow, deleteField } from \"./functions\";\nimport { getPlugins } from \"@webiny/plugins\";\n\nimport {\n    FbFormModelFieldsLayout,\n    FbFormModelField,\n    FieldIdType,\n    FieldLayoutPositionType,\n    FbBuilderFieldPlugin\n} from \"@webiny/app-form-builder/types\";\n\nexport default FormEditorContext => {\n    return () => {\n        // TODO: @ts-adrian add proper type\n        const context = React.useContext<any>(FormEditorContext);\n        if (!context) {\n            throw new Error(\"useFormEditor must be used within a FormEditorProvider\");\n        }\n\n        const { state, dispatch } = context;\n\n        const self = {\n            apollo: state.apollo,\n            data: state.data,\n            state,\n            async getForm(id: string) {\n                const response = await self.apollo.query({ query: GET_FORM, variables: { id } });\n                const { data, error } = get(response, \"data.forms.getForm\");\n                if (error) {\n                    throw new Error(error);\n                }\n\n                self.setData(() => {\n                    const form = cloneDeep(data);\n                    if (!form.settings.layout.renderer) {\n                        form.settings.layout.renderer = state.defaultLayoutRenderer;\n                    }\n                    return form;\n                }, false);\n\n                return response;\n            },\n            saveForm: async data => {\n                data = data || state.data;\n                const response = await self.apollo.mutate({\n                    mutation: UPDATE_REVISION,\n                    variables: {\n                        id: data.id,\n                        data: pick(data, [\"layout\", \"fields\", \"name\", \"settings\", \"triggers\"])\n                    }\n                });\n\n                return get(response, \"data.forms.updateRevision\");\n            },\n            /**\n             * Set form data by providing a callback, which receives a fresh copy of data on which you can work on.\n             * Return new data once finished.\n             * @param setter\n             * @param saveForm\n             */\n            setData(setter: Function, saveForm = true) {\n                const data = setter(cloneDeep(self.data));\n                dispatch({ type: \"data\", data });\n                saveForm !== false && self.saveForm(data);\n            },\n\n            /**\n             * Returns fields list or complete layout with fields data in it (not just field IDs).\n             * @param layout\n             * @returns {*}\n             */\n            getFields(layout = false): FbFormModelField[] | FbFormModelFieldsLayout {\n                if (!layout) {\n                    return state.data.fields;\n                }\n\n                // Replace every field ID with actual field object.\n                const fields = cloneDeep(state.data.layout);\n                fields.forEach((row, rowIndex) => {\n                    row.forEach((fieldId, fieldIndex) => {\n                        fields[rowIndex][fieldIndex] = self.getField({ _id: fieldId });\n                    });\n                });\n                return fields;\n            },\n\n            /**\n             * Return field plugin.\n             * @param query\n             * @returns {void|?FbFormModelField}\n             */\n            getFieldPlugin(query: object): FbBuilderFieldPlugin {\n                return getPlugins<FbBuilderFieldPlugin>(\"form-editor-field-type\").find(\n                    ({ field }) => {\n                        for (const key in query) {\n                            if (!(key in field)) {\n                                return null;\n                            }\n\n                            if (field[key] !== query[key]) {\n                                return null;\n                            }\n                        }\n\n                        return true;\n                    }\n                );\n            },\n\n            /**\n             * Checks if field of given type already exists in the list of fields.\n             * @param query\n             * @returns {boolean}\n             */\n            getField(query: object): FbFormModelField {\n                return state.data.fields.find(field => {\n                    for (const key in query) {\n                        if (!(key in field)) {\n                            return null;\n                        }\n\n                        if (field[key] !== query[key]) {\n                            return null;\n                        }\n                    }\n\n                    return true;\n                });\n            },\n\n            /**\n             * Inserts a new field into the target position.\n             * @param data\n             * @param position\n             */\n            insertField(data: FbFormModelField, position: FieldLayoutPositionType) {\n                const field = cloneDeep(data);\n                if (!field._id) {\n                    field._id = shortid.generate();\n                }\n\n                if (!data.name) {\n                    throw new Error(`Field \"name\" missing.`);\n                }\n\n                const fieldPlugin = self.getFieldPlugin({ name: data.name });\n                if (!fieldPlugin) {\n                    throw new Error(`Invalid field \"name\".`);\n                }\n\n                data.type = fieldPlugin.field.type;\n\n                self.setData(data => {\n                    if (!Array.isArray(data.fields)) {\n                        data.fields = [];\n                    }\n                    data.fields.push(field);\n\n                    moveField({ field, position, data });\n\n                    // We are dropping a new field at the specified index.\n                    return data;\n                });\n            },\n\n            /**\n             * Moves field to the given target position.\n             * @param field\n             * @param position\n             * @param data\n             */\n            moveField({\n                field,\n                position\n            }: {\n                field: FieldIdType | FbFormModelField;\n                position: FieldLayoutPositionType;\n            }) {\n                self.setData(data => {\n                    moveField({ field, position, data });\n                    return data;\n                });\n            },\n\n            /**\n             * Moves row to a destination row.\n             * @param source\n             * @param destination\n             */\n            moveRow(source: number, destination: number) {\n                self.setData(data => {\n                    moveRow({ data, source, destination });\n                    return data;\n                });\n            },\n\n            /**\n             * Updates field.\n             * @param fieldData\n             */\n            updateField(fieldData) {\n                const field = cloneDeep(fieldData);\n                self.setData(data => {\n                    for (let i = 0; i < data.fields.length; i++) {\n                        if (data.fields[i]._id === field._id) {\n                            data.fields[i] = field;\n                            break;\n                        }\n                    }\n                    return data;\n                });\n            },\n\n            /**\n             * Deletes a field (both from the list of field and the layout).\n             * @param field\n             */\n            deleteField(field: FbFormModelField) {\n                self.setData(data => {\n                    deleteField({ field, data });\n                    return data;\n                });\n            },\n\n            /**\n             * Returns row / index position for given field.\n             * @param field\n             * @returns {{index: number, row: number}|{index: null, row: null}}\n             */\n            getFieldPosition(field: FieldIdType | FbFormModelField) {\n                return getFieldPosition({ field, data: self.data });\n            }\n        };\n\n        return self;\n    };\n};\n"],"file":"useFormEditorFactory.js"}