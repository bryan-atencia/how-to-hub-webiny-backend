import _get from "lodash/get";
import * as React from "react";
import { Query } from "react-apollo";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Alert } from "@webiny/ui/Alert";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import styled from "@emotion/styled";
import { validation } from "@webiny/validation";
import { LIST_FORMS } from "./graphql";
var FormOptionsWrapper = /*#__PURE__*/styled("div", {
  target: "e105qjdh0",
  label: "FormOptionsWrapper"
})({
  minHeight: 250
});

var getOptions = function getOptions(_ref) {
  var gqlResponse = _ref.gqlResponse,
      data = _ref.data;
  var output = {
    parents: {
      options: [],
      value: null
    },
    publishedRevisions: {
      options: [],
      value: null
    }
  };
  var selected = {
    parent: _get(data, "settings.form.parent"),
    revision: _get(data, "settings.form.revision")
  };
  var parentsList = _get(gqlResponse, "data.forms.listForms.data") || [];
  output.parents.options = parentsList.map(function (_ref2) {
    var parent = _ref2.parent,
        name = _ref2.name;
    return {
      id: parent,
      name: name
    };
  });
  output.parents.value = output.parents.options.find(function (item) {
    return item.id === selected.parent;
  }) || null;
  var parent = parentsList.find(function (item) {
    return item.parent === selected.parent;
  });

  if (parent) {
    output.publishedRevisions.options = parent.publishedRevisions.map(function (item) {
      return {
        id: item.id,
        name: "".concat(item.name, " (version ").concat(item.version, ")")
      };
    });

    if (output.publishedRevisions.options.length > 0) {
      output.publishedRevisions.options.unshift({
        id: "latest",
        name: "Latest published revision"
      });
    }

    output.publishedRevisions.value = output.publishedRevisions.options.find(function (item) {
      return item.id === selected.revision;
    }) || null;
  }

  return output;
};

var FormElementAdvancedSettings = function FormElementAdvancedSettings(_ref3) {
  var Bind = _ref3.Bind,
      data = _ref3.data;
  return /*#__PURE__*/React.createElement(FormOptionsWrapper, null, /*#__PURE__*/React.createElement(Query, {
    query: LIST_FORMS,
    fetchPolicy: "network-only"
  }, function (gqlResponse) {
    var options = getOptions({
      gqlResponse: gqlResponse,
      data: data
    });
    return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settings.form.parent",
      validators: validation.create("required")
    }, function (_ref4) {
      var onChange = _ref4.onChange;
      return /*#__PURE__*/React.createElement(AutoComplete, {
        options: options.parents.options,
        value: options.parents.value,
        onChange: onChange,
        label: "Form"
      });
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settings.form.revision",
      validators: validation.create("required")
    }, function (_ref5) {
      var onChange = _ref5.onChange;
      var parentSelected = !!options.parents.value;
      var noPublished = options.publishedRevisions.options.length === 0;
      var description = "Choose a published revision.";

      if (parentSelected && noPublished) {
        return /*#__PURE__*/React.createElement(Alert, {
          type: "danger",
          title: "Form not published"
        }, "Please publish the form and then you can insert it into your page.");
      } else {
        return /*#__PURE__*/React.createElement(AutoComplete, {
          label: "Revision",
          description: description,
          disabled: !parentSelected || noPublished,
          options: options.publishedRevisions.options,
          value: options.publishedRevisions.value,
          onChange: onChange
        });
      }
    })));
  }));
};

export default FormElementAdvancedSettings;
//# sourceMappingURL=FormElementAdvancedSettings.js.map