{"version":3,"sources":["../../../src/contexts/I18N/I18NContext.tsx"],"names":["React","useQuery","gql","get","getI18NInformation","I18NContext","createContext","defState","initializing","currentLocale","locales","I18NProvider","props","children","loader","loading","data","refetch","value","refetchLocales","state"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAsC,cAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,kBAAkB,GAAGF,GAAH,mBAAxB;AAkBP,OAAO,IAAMG,WAAW,GAAGL,KAAK,CAACM,aAAN,CAAoB,IAApB,CAApB;AACP,IAAMC,QAAQ,GAAG;AAAEC,EAAAA,YAAY,EAAE,KAAhB;AAAuBC,EAAAA,aAAa,EAAE,IAAtC;AAA4CC,EAAAA,OAAO,EAAE;AAArD,CAAjB;AAmBA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA8B;AAAA,MAC9CC,QAD8C,GACzBD,KADyB,CAC9CC,QAD8C;AAAA,MACpCC,MADoC,GACzBF,KADyB,CACpCE,MADoC;;AAAA,kBAEnBb,QAAQ,CAACG,kBAAD,CAFW;AAAA,MAE9CW,OAF8C,aAE9CA,OAF8C;AAAA,MAErCC,IAFqC,aAErCA,IAFqC;AAAA,MAE/BC,OAF+B,aAE/BA,OAF+B;;AAItD,MAAIF,OAAO,IAAID,MAAf,EAAuB;AACnB,WAAOA,MAAP;AACH;;AANqD,aAQnBX,GAAG,CAACa,IAAD,EAAO,yBAAP,EAAkC,EAAlC,CARgB;AAAA,MAQ9CP,aAR8C,QAQ9CA,aAR8C;AAAA,MAQ/BC,OAR+B,QAQ/BA,OAR+B;;AAUtD,MAAMQ,KAAK,GAAG;AACVC,IAAAA,cAAc,EAAEF,OADN;AAEVG,IAAAA,KAAK,kCACEb,QADF;AAEDE,MAAAA,aAAa,EAAbA,aAFC;AAGDC,MAAAA,OAAO,EAAPA;AAHC;AAFK,GAAd;AASA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEQ;AAA7B,KAAqCL,QAArC,CAAP;AACH,CApBM","sourcesContent":["import React from \"react\";\nimport { useQuery, QueryResult } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport get from \"lodash.get\";\n\nexport const getI18NInformation = gql`\n    query GetI18NInformation {\n        i18n {\n            getI18NInformation {\n                currentLocale {\n                    id\n                    code\n                }\n                locales {\n                    id\n                    code\n                    default\n                }\n            }\n        }\n    }\n`;\n\nexport const I18NContext = React.createContext(null);\nconst defState = { initializing: false, currentLocale: null, locales: [] };\n\nexport type I18NContextValue = {\n    refetchLocales(variables?: { [key: string]: any }): Promise<QueryResult>;\n    state: {\n        initializing: boolean;\n        currentLocale?: {\n            id: string;\n            code: string;\n        };\n        locales: Array<{ id: string; code: string; default: boolean }>;\n    };\n};\n\nexport type I18NProviderProps = {\n    children?: React.ReactNode;\n    loader?: React.ReactElement;\n};\n\nexport const I18NProvider = (props: I18NProviderProps) => {\n    const { children, loader } = props;\n    const { loading, data, refetch } = useQuery(getI18NInformation);\n\n    if (loading && loader) {\n        return loader;\n    }\n\n    const { currentLocale, locales } = get(data, \"i18n.getI18NInformation\", {});\n\n    const value = {\n        refetchLocales: refetch,\n        state: {\n            ...defState,\n            currentLocale,\n            locales\n        }\n    };\n\n    return <I18NContext.Provider value={value}>{children}</I18NContext.Provider>;\n};\n"],"file":"I18NContext.js"}