import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    query GetI18NInformation {\n        i18n {\n            getI18NInformation {\n                currentLocale {\n                    id\n                    code\n                }\n                locales {\n                    id\n                    code\n                    default\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { useQuery } from "react-apollo";
import gql from "graphql-tag";
import get from "lodash.get";
export var getI18NInformation = gql(_templateObject());
export var I18NContext = React.createContext(null);
var defState = {
  initializing: false,
  currentLocale: null,
  locales: []
};
export var I18NProvider = function I18NProvider(props) {
  var children = props.children,
      loader = props.loader;

  var _useQuery = useQuery(getI18NInformation),
      loading = _useQuery.loading,
      data = _useQuery.data,
      refetch = _useQuery.refetch;

  if (loading && loader) {
    return loader;
  }

  var _get = get(data, "i18n.getI18NInformation", {}),
      currentLocale = _get.currentLocale,
      locales = _get.locales;

  var value = {
    refetchLocales: refetch,
    state: _objectSpread(_objectSpread({}, defState), {}, {
      currentLocale: currentLocale,
      locales: locales
    })
  };
  return /*#__PURE__*/React.createElement(I18NContext.Provider, {
    value: value
  }, children);
};
//# sourceMappingURL=I18NContext.js.map