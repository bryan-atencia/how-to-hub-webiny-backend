import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { useState, useCallback, useMemo } from "react";
import { Icon } from "@webiny/ui/Icon";
import { Input } from "@webiny/ui/Input";
import I18NInputLocalesOverlay from "./I18NInputLocalesOverlay";
import { ReactComponent as I18NIcon } from "@svgr/webpack!./icons/round-translate-24px.svg";
import { css } from "emotion";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { Tooltip } from "@webiny/ui/Tooltip";
import classNames from "classnames";
import cloneDeep from "lodash.clonedeep";
import I18NRichTextEditor from "./I18NRichTextEditor";
var style = {
  i18nDialogIconButton: /*#__PURE__*/css({
    ".webiny-ui-tooltip": {
      display: "block"
    },
    ".webiny-ui-icon": {
      pointerEvents: "all",
      cursor: "pointer",
      zIndex: 1
    }
  }, "label:i18nDialogIconButton;"),
  i18nRichEditorDialogIconButton: /*#__PURE__*/css({
    position: "absolute",
    right: 10
  }, "label:i18nRichEditorDialogIconButton;")
};

var prepareII8NValues = function prepareII8NValues(_ref) {
  var locales = _ref.locales,
      values = _ref.values;
  var output = [];

  var _loop = function _loop(i) {
    var item = values.find(function (item) {
      return item.locale === locales[i].id;
    });

    if (item) {
      output.push(_objectSpread({}, item));
    } else {
      output.push({
        locale: locales[i].id,
        value: ""
      });
    }
  };

  for (var i = 0; i < locales.length; i++) {
    _loop(i);
  }

  return output;
};

export var I18NInput = function I18NInput(_ref2) {
  var richText = _ref2.richText,
      value = _ref2.value,
      onChange = _ref2.onChange,
      children = _ref2.children,
      showTranslateIcon = _ref2.showTranslateIcon,
      inputProps = _objectWithoutProperties(_ref2, ["richText", "value", "onChange", "children", "showTranslateIcon"]);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      values = _useState2[0],
      setValues = _useState2[1];

  var _useI18N = useI18N(),
      getLocale = _useI18N.getLocale,
      getLocales = _useI18N.getLocales;

  var openDialog = useCallback(function () {
    var newValues = prepareII8NValues({
      locales: getLocales(),
      values: value && Array.isArray(value.values) ? value.values : []
    });
    setValues(newValues);
  }, []);
  var closeDialog = useCallback(function () {
    setValues(null);
  }, []);
  var submitDialog = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = typeof onChange === "function";

              if (!_context.t0) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return onChange(_objectSpread(_objectSpread({}, value), {}, {
                values: values.filter(function (item) {
                  return !!item.value;
                })
              }));

            case 4:
              closeDialog();

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var inputValue = "";

  if (value && Array.isArray(value.values)) {
    var foundValue = value.values.find(function (item) {
      return item.locale === getLocale().id;
    });

    if (foundValue) {
      inputValue = foundValue.value;
    }
  }

  var inputOnChange = function inputOnChange(inputValue) {
    var newValue = cloneDeep(_objectSpread({
      values: []
    }, value));
    var index = value ? value.values.findIndex(function (item) {
      return item.locale === getLocale().id;
    }) : -1;

    if (index >= 0) {
      newValue.values[index].value = inputValue;
    } else {
      newValue.values.push({
        locale: getLocale().id,
        value: inputValue
      });
    } // Filter out redundant empty values.


    newValue.values = newValue.values.filter(function (item) {
      return !!item.value;
    });
    typeof onChange === 'function' && onChange(newValue);
  };

  var translateMenuItem = useMemo(function () {
    if (showTranslateIcon === false) {
      return null;
    }

    return {
      name: "i18NInputLocalesOverlay",
      menu: {
        render: function render(_ref4) {
          var MenuButton = _ref4.MenuButton;
          return /*#__PURE__*/React.createElement(MenuButton, {
            right: true,
            onClick: openDialog,
            className: style.i18nRichEditorDialogIconButton
          }, /*#__PURE__*/React.createElement(I18NIcon, null));
        }
      }
    };
  }, []);
  var localesOverlay = /*#__PURE__*/React.createElement(I18NInputLocalesOverlay, {
    richText: richText,
    values: values,
    open: !!values,
    onClose: closeDialog,
    onSubmit: submitDialog
  });

  if (typeof children === "function") {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children({
      openDialog: openDialog
    }), localesOverlay);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, richText ? /*#__PURE__*/React.createElement(I18NRichTextEditor, Object.assign({}, inputProps, {
    value: inputValue,
    onChange: inputOnChange,
    plugins: showTranslateIcon !== false ? [translateMenuItem] : []
  })) : /*#__PURE__*/React.createElement(Input, Object.assign({}, inputProps, {
    value: inputValue,
    onChange: inputOnChange,
    className: classNames(inputProps.className, style.i18nDialogIconButton),
    trailingIcon: showTranslateIcon !== false && /*#__PURE__*/React.createElement(Tooltip, {
      content: /*#__PURE__*/React.createElement("span", null, "Set locale values"),
      placement: "top"
    }, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(I18NIcon, null),
      onClick: openDialog
    }))
  })), localesOverlay);
};
//# sourceMappingURL=I18NInput.js.map