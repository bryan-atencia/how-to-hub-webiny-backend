import React from "react";
import styled from "@emotion/styled";
import { css } from "emotion";
import { useSlate } from "slate-react";
import classNames from "classnames";
var MenuContainer = /*#__PURE__*/styled("div", {
  target: "e1xuru6m0",
  label: "MenuContainer"
})({
  position: "relative",
  padding: "10px 0 20px 1px",
  borderBottom: "2px solid var(--mdc-theme-on-background)",
  display: "flex",
  alignItems: "center",
  "& > *": {
    display: "inline-block"
  },
  "& > * + *": {
    marginLeft: 10
  },
  span: {
    display: "flex",
    alignContent: "center",
    ">svg": {
      height: 18
    }
  }
});
export var MenuButton = function MenuButton(_ref) {
  var className = _ref.className,
      onClick = _ref.onClick,
      active = _ref.active,
      children = _ref.children,
      _ref$onMouseDown = _ref.onMouseDown,
      onMouseDown = _ref$onMouseDown === void 0 ? function (e) {
    return e.preventDefault();
  } : _ref$onMouseDown;
  var buttonStyle = /*#__PURE__*/css({
    cursor: "pointer",
    color: active ? "var(--mdc-theme-primary)" : "var(--mdc-theme-text-secondary-on-background)",
    "&:hover": {
      color: "var(--mdc-theme-primary)"
    }
  }, "label:buttonStyle;");
  return /*#__PURE__*/React.createElement("span", {
    onClick: onClick,
    className: classNames(className, buttonStyle),
    onMouseDown: onMouseDown
  }, children);
};
export var Menu = function Menu(props) {
  var editor = useSlate();
  var activePlugin = props.activePlugin,
      activatePlugin = props.activatePlugin,
      deactivatePlugin = props.deactivatePlugin,
      plugins = props.plugins;
  return /*#__PURE__*/React.createElement(MenuContainer, null, plugins.filter(function (pl) {
    return pl.menu;
  }).map(function (item) {
    return /*#__PURE__*/React.cloneElement(item.menu.render({
      MenuButton: MenuButton,
      editor: editor,
      activatePlugin: activatePlugin
    }), {
      key: item.name
    });
  }), plugins.filter(function (pl) {
    return pl.menu && typeof pl.menu.renderDialog === "function";
  }).map(function (pl) {
    var props = {
      editor: editor,
      open: activePlugin ? activePlugin.plugin === pl.name : false,
      closeDialog: deactivatePlugin,
      activePlugin: activePlugin,
      activatePlugin: activatePlugin
    };
    return /*#__PURE__*/React.cloneElement(pl.menu.renderDialog(props), {
      key: pl.name
    });
  }));
};
//# sourceMappingURL=Menu.js.map