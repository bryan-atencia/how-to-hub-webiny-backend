{"version":3,"sources":["../../../../src/admin/components/RichTextEditor/RichTextEditor.tsx"],"names":["React","Editable","withReact","Slate","Editor","SlateEditor","createEditor","withHistory","styled","css","classNames","FormElementMessage","Menu","pluginsToProps","EditorWrapper","border","borderRadius","boxSizing","padding","EditorContent","height","minHeight","overflow","resize","maxHeight","color","classes","label","marginBottom","disable","opacity","pointerEvents","initialValue","type","children","text","withUtils","editor","isInline","hasMark","mark","marks","toggleMark","isActive","removeMark","addMark","element","RichTextEditor","props","value","setState","state","onChange","plugin","activePlugin","selection","fragment","getFragment","showMenu","readOnly","editorProps","plugins","activatePlugin","disabled","description","validation","placeholder","renderEditor","deactivatePlugin","isValid","message","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Editable, withReact, Slate } from \"slate-react\";\nimport { Editor as SlateEditor, createEditor } from \"slate\";\nimport { withHistory } from \"slate-history\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { MenuButton } from \"./index\";\nimport { Menu } from \"./Menu\";\nimport { FormComponentProps } from \"@webiny/ui/types\";\nimport { pluginsToProps } from \"./pluginsToProps\";\n\nconst EditorWrapper = styled(\"div\")({\n    border: \"1px solid var(--mdc-theme-on-background)\",\n    borderRadius: 2,\n    boxSizing: \"border-box\",\n    padding: 10\n});\n\nconst EditorContent = styled(\"div\")({\n    height: \"45vh\",\n    minHeight: 200,\n    overflow: \"auto\",\n    resize: \"vertical\",\n    padding: \"0px 8px\",\n\n    \"> div > div\": {\n        boxSizing: \"border-box\",\n        padding: 10,\n        maxHeight: 500,\n        minHeight: 200,\n        overflow: \"scroll\",\n        color: \"var(--mdc-theme-on-surface)\"\n    }\n});\n\nconst classes = {\n    label: css({\n        marginBottom: \"10px !important\"\n    }),\n    disable: css({\n        opacity: 0.7,\n        pointerEvents: \"none\"\n    })\n};\n\nexport type Editor = SlateEditor & {\n    hasMark?(mark: string): boolean;\n    toggleMark?(mark: string): void;\n};\n\nexport type EditorPlugin = { [key: string]: any };\n\ninterface MenuPluginRender {\n    MenuButton: typeof MenuButton;\n    editor: Editor;\n    activatePlugin(name: string): void;\n}\n\nexport type MenuPlugin = {\n    render: (params: MenuPluginRender) => React.ReactNode;\n    renderDialog?: (params: any) => React.ReactNode;\n};\n\nexport type RichTextEditorPlugin = {\n    name: string;\n    editor?: EditorPlugin;\n    menu?: MenuPlugin;\n};\n\nexport type RichTextEditorProps = FormComponentProps & {\n    disabled?: boolean;\n    readOnly?: boolean;\n    description?: string;\n    placeholder?: string;\n    label?: string;\n    plugins?: RichTextEditorPlugin[];\n};\n\ntype State = {\n    showMenu: boolean;\n    value: any;\n    readOnly: boolean;\n    activePlugin?: { [key: string]: any };\n};\n\nconst initialValue = [{ type: \"paragraph\", children: [{ text: \"\" }] }];\n\nconst withUtils = (editor: Editor) => {\n    const { isInline } = editor;\n\n    editor.hasMark = mark => {\n        const marks = SlateEditor.marks(editor);\n        return marks ? marks[mark] === true : false;\n    };\n\n    editor.toggleMark = mark => {\n        const isActive = editor.hasMark(mark);\n\n        if (isActive) {\n            SlateEditor.removeMark(editor, mark);\n        } else {\n            SlateEditor.addMark(editor, mark, true);\n        }\n    };\n\n    // TODO: add `enhanceEditor` method to editor plugins and move this to `link` plugin\n    editor.isInline = element => {\n        return element.type === \"link\" ? true : isInline(element);\n    };\n\n    return editor;\n};\n\nexport class RichTextEditor extends React.Component<RichTextEditorProps, State> {\n    static defaultProps = {\n        validation: { isValid: null }\n    };\n\n    plugins: { editor: Object[]; menu: Object[] };\n    editor?: Editor;\n    editorProps: any;\n\n    constructor(props: RichTextEditorProps) {\n        super(props);\n\n        this.state = {\n            showMenu: false,\n            value: props.value || initialValue,\n            readOnly: !props.onChange,\n            activePlugin: null\n        };\n\n        this.editor = withUtils(withHistory(withReact(createEditor())));\n        this.editorProps = pluginsToProps(props.plugins, {\n            editor: this.editor,\n            activatePlugin: this.activatePlugin\n        });\n    }\n\n    static getDerivedStateFromProps(props: RichTextEditorProps) {\n        if (!props.readOnly) {\n            // Got new editor value through props.\n            return {\n                value: props.value ? props.value : initialValue\n            };\n        }\n\n        return null;\n    }\n\n    onChange = (value: any) => {\n        this.setState(state => ({\n            ...state,\n            value\n        }));\n\n        const { onChange } = this.props;\n        typeof onChange === \"function\" && onChange(value);\n    };\n\n    activatePlugin = (plugin: string) => {\n        this.setState({\n            activePlugin: {\n                plugin,\n                selection: this.editor.selection,\n                fragment: this.editor.getFragment()\n            }\n        });\n    };\n\n    deactivatePlugin = () => {\n        this.setState({ activePlugin: null });\n    };\n\n    render() {\n        const { plugins, label, disabled, description, validation, placeholder } = this.props;\n        const { renderEditor, ...editorProps } = this.editorProps;\n\n        return (\n            <div className={classNames({ [classes.disable]: disabled })}>\n                {label && (\n                    <div\n                        className={classNames(\n                            \"mdc-text-field-helper-text mdc-text-field-helper-text--persistent\",\n                            classes.label\n                        )}\n                    >\n                        {label}\n                    </div>\n                )}\n                <EditorWrapper>\n                    <Slate\n                        editor={this.editor as any}\n                        value={this.state.value}\n                        onChange={this.onChange}\n                    >\n                        <Menu\n                            plugins={plugins}\n                            activePlugin={this.state.activePlugin}\n                            activatePlugin={this.activatePlugin}\n                            deactivatePlugin={this.deactivatePlugin}\n                        />\n                        <EditorContent>\n                            {renderEditor(\n                                <Editable\n                                    readOnly={disabled}\n                                    placeholder={placeholder}\n                                    spellCheck\n                                    autoFocus\n                                    {...editorProps}\n                                />\n                            )}\n                        </EditorContent>\n                    </Slate>\n                </EditorWrapper>\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </div>\n        );\n    }\n}\n\n/*<EditorContent>\n    {React.createElement<any>(SlateEditor, {\n        onBlur: this.onBlur,\n        ref: this.setEditorRef,\n        autoCorrect: false,\n        spellCheck: false,\n        plugins: this.plugins.editor,\n        placeholder: placeholder || \"Enter some text...\",\n        value: this.state.value,\n        onChange: this.onChange,\n        activatePlugin: this.activatePlugin,\n        activePlugin: this.state.activePlugin,\n        deactivatePlugin: this.deactivatePlugin\n    })}\n</EditorContent>*/\n\n/*<Menu\n    plugins={plugins}\n    value={this.state.value}\n    onChange={this.onChange}\n    activePlugin={this.state.activePlugin}\n    activatePlugin={this.activatePlugin}\n    deactivatePlugin={this.deactivatePlugin}\n/>*/\n"],"file":"RichTextEditor.js"}