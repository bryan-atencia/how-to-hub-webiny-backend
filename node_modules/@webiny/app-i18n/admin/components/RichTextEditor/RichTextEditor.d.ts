import * as React from "react";
import { Editor as SlateEditor } from "slate";
import { MenuButton } from "./index";
import { FormComponentProps } from "@webiny/ui/types";
export declare type Editor = SlateEditor & {
    hasMark?(mark: string): boolean;
    toggleMark?(mark: string): void;
};
export declare type EditorPlugin = {
    [key: string]: any;
};
interface MenuPluginRender {
    MenuButton: typeof MenuButton;
    editor: Editor;
    activatePlugin(name: string): void;
}
export declare type MenuPlugin = {
    render: (params: MenuPluginRender) => React.ReactNode;
    renderDialog?: (params: any) => React.ReactNode;
};
export declare type RichTextEditorPlugin = {
    name: string;
    editor?: EditorPlugin;
    menu?: MenuPlugin;
};
export declare type RichTextEditorProps = FormComponentProps & {
    disabled?: boolean;
    readOnly?: boolean;
    description?: string;
    placeholder?: string;
    label?: string;
    plugins?: RichTextEditorPlugin[];
};
declare type State = {
    showMenu: boolean;
    value: any;
    readOnly: boolean;
    activePlugin?: {
        [key: string]: any;
    };
};
export declare class RichTextEditor extends React.Component<RichTextEditorProps, State> {
    static defaultProps: {
        validation: {
            isValid: any;
        };
    };
    plugins: {
        editor: Object[];
        menu: Object[];
    };
    editor?: Editor;
    editorProps: any;
    constructor(props: RichTextEditorProps);
    static getDerivedStateFromProps(props: RichTextEditorProps): {
        value: any;
    };
    onChange: (value: any) => void;
    activatePlugin: (plugin: string) => void;
    deactivatePlugin: () => void;
    render(): JSX.Element;
}
export {};
