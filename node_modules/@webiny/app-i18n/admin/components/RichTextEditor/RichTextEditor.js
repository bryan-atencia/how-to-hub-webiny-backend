import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { Editable, withReact, Slate } from "slate-react";
import { Editor as SlateEditor, createEditor } from "slate";
import { withHistory } from "slate-history";
import styled from "@emotion/styled";
import { css } from "emotion";
import classNames from "classnames";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import { Menu } from "./Menu";
import { pluginsToProps } from "./pluginsToProps";
var EditorWrapper = /*#__PURE__*/styled("div", {
  target: "e16g08480",
  label: "EditorWrapper"
})({
  border: "1px solid var(--mdc-theme-on-background)",
  borderRadius: 2,
  boxSizing: "border-box",
  padding: 10
});
var EditorContent = /*#__PURE__*/styled("div", {
  target: "e16g08481",
  label: "EditorContent"
})({
  height: "45vh",
  minHeight: 200,
  overflow: "auto",
  resize: "vertical",
  padding: "0px 8px",
  "> div > div": {
    boxSizing: "border-box",
    padding: 10,
    maxHeight: 500,
    minHeight: 200,
    overflow: "scroll",
    color: "var(--mdc-theme-on-surface)"
  }
});
var classes = {
  label: /*#__PURE__*/css({
    marginBottom: "10px !important"
  }, "label:label;"),
  disable: /*#__PURE__*/css({
    opacity: 0.7,
    pointerEvents: "none"
  }, "label:disable;")
};
var initialValue = [{
  type: "paragraph",
  children: [{
    text: ""
  }]
}];

var withUtils = function withUtils(editor) {
  var isInline = editor.isInline;

  editor.hasMark = function (mark) {
    var marks = SlateEditor.marks(editor);
    return marks ? marks[mark] === true : false;
  };

  editor.toggleMark = function (mark) {
    var isActive = editor.hasMark(mark);

    if (isActive) {
      SlateEditor.removeMark(editor, mark);
    } else {
      SlateEditor.addMark(editor, mark, true);
    }
  }; // TODO: add `enhanceEditor` method to editor plugins and move this to `link` plugin


  editor.isInline = function (element) {
    return element.type === "link" ? true : isInline(element);
  };

  return editor;
};

export var RichTextEditor = /*#__PURE__*/function (_React$Component) {
  _inherits(RichTextEditor, _React$Component);

  var _super = _createSuper(RichTextEditor);

  function RichTextEditor(props) {
    var _this;

    _classCallCheck(this, RichTextEditor);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "plugins", void 0);

    _defineProperty(_assertThisInitialized(_this), "editor", void 0);

    _defineProperty(_assertThisInitialized(_this), "editorProps", void 0);

    _defineProperty(_assertThisInitialized(_this), "onChange", function (value) {
      _this.setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          value: value
        });
      });

      var onChange = _this.props.onChange;
      typeof onChange === "function" && onChange(value);
    });

    _defineProperty(_assertThisInitialized(_this), "activatePlugin", function (plugin) {
      _this.setState({
        activePlugin: {
          plugin: plugin,
          selection: _this.editor.selection,
          fragment: _this.editor.getFragment()
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "deactivatePlugin", function () {
      _this.setState({
        activePlugin: null
      });
    });

    _this.state = {
      showMenu: false,
      value: props.value || initialValue,
      readOnly: !props.onChange,
      activePlugin: null
    };
    _this.editor = withUtils(withHistory(withReact(createEditor())));
    _this.editorProps = pluginsToProps(props.plugins, {
      editor: _this.editor,
      activatePlugin: _this.activatePlugin
    });
    return _this;
  }

  _createClass(RichTextEditor, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          plugins = _this$props.plugins,
          label = _this$props.label,
          disabled = _this$props.disabled,
          description = _this$props.description,
          validation = _this$props.validation,
          placeholder = _this$props.placeholder;

      var _this$editorProps = this.editorProps,
          renderEditor = _this$editorProps.renderEditor,
          editorProps = _objectWithoutProperties(_this$editorProps, ["renderEditor"]);

      return /*#__PURE__*/React.createElement("div", {
        className: classNames(_defineProperty({}, classes.disable, disabled))
      }, label && /*#__PURE__*/React.createElement("div", {
        className: classNames("mdc-text-field-helper-text mdc-text-field-helper-text--persistent", classes.label)
      }, label), /*#__PURE__*/React.createElement(EditorWrapper, null, /*#__PURE__*/React.createElement(Slate, {
        editor: this.editor,
        value: this.state.value,
        onChange: this.onChange
      }, /*#__PURE__*/React.createElement(Menu, {
        plugins: plugins,
        activePlugin: this.state.activePlugin,
        activatePlugin: this.activatePlugin,
        deactivatePlugin: this.deactivatePlugin
      }), /*#__PURE__*/React.createElement(EditorContent, null, renderEditor( /*#__PURE__*/React.createElement(Editable, Object.assign({
        readOnly: disabled,
        placeholder: placeholder,
        spellCheck: true,
        autoFocus: true
      }, editorProps)))))), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props) {
      if (!props.readOnly) {
        // Got new editor value through props.
        return {
          value: props.value ? props.value : initialValue
        };
      }

      return null;
    }
  }]);

  return RichTextEditor;
}(React.Component);
/*<EditorContent>
    {React.createElement<any>(SlateEditor, {
        onBlur: this.onBlur,
        ref: this.setEditorRef,
        autoCorrect: false,
        spellCheck: false,
        plugins: this.plugins.editor,
        placeholder: placeholder || "Enter some text...",
        value: this.state.value,
        onChange: this.onChange,
        activatePlugin: this.activatePlugin,
        activePlugin: this.state.activePlugin,
        deactivatePlugin: this.deactivatePlugin
    })}
</EditorContent>*/

/*<Menu
    plugins={plugins}
    value={this.state.value}
    onChange={this.onChange}
    activePlugin={this.state.activePlugin}
    activatePlugin={this.activatePlugin}
    deactivatePlugin={this.deactivatePlugin}
/>*/

_defineProperty(RichTextEditor, "defaultProps", {
  validation: {
    isValid: null
  }
});
//# sourceMappingURL=RichTextEditor.js.map