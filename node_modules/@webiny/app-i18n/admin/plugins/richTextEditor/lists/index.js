import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import * as React from "react";
import { isKeyHotkey } from "is-hotkey";
import { Editor, Transforms } from "slate";
import { ReactComponent as FormatUnOrderedListIcon } from "@svgr/webpack!@webiny/app-i18n/admin/assets/icons/format_list_bulleted.svg";
import { ReactComponent as FormatOrderedListIcon } from "@svgr/webpack!@webiny/app-i18n/admin/assets/icons/format_list_numbered.svg";
var isListHotkey = isKeyHotkey("mod+l");
var LIST_TYPES = ["ordered-list", "unordered-list"];

var isBlockActive = function isBlockActive(editor, format) {
  var _Editor$nodes = Editor.nodes(editor, {
    match: function match(n) {
      return n.type === format;
    }
  }),
      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),
      match = _Editor$nodes2[0];

  return !!match;
};

var toggleBlock = function toggleBlock(editor, format) {
  var isActive = isBlockActive(editor, format);
  var isList = LIST_TYPES.includes(format);
  Transforms.unwrapNodes(editor, {
    match: function match(n) {
      return LIST_TYPES.includes(n.type);
    },
    split: true
  });
  Transforms.setNodes(editor, {
    type: isActive ? "paragraph" : isList ? "list-item" : format
  });

  if (!isActive && isList) {
    var block = {
      type: format,
      children: []
    };
    Transforms.wrapNodes(editor, block);
  }
};

var plugins = [{
  name: "i18n-input-rich-text-editor-unordered-list",
  type: "i18n-input-rich-text-editor",
  plugin: {
    name: "unordered-list",
    menu: {
      render: function render(_ref) {
        var MenuButton = _ref.MenuButton,
            editor = _ref.editor;
        var isActive = isBlockActive(editor, "unordered-list");
        return /*#__PURE__*/React.createElement(MenuButton, {
          onClick: function onClick() {
            return toggleBlock(editor, "unordered-list");
          },
          active: isActive
        }, /*#__PURE__*/React.createElement(FormatUnOrderedListIcon, null));
      }
    },
    editor: {
      onKeyDown: function onKeyDown(_ref2, next) {
        var event = _ref2.event,
            editor = _ref2.editor;

        if (isListHotkey(event)) {
          event.preventDefault();
          return toggleBlock(editor, "unordered-list");
        }

        return next();
      },
      renderElement: function renderElement(_ref3, next) {
        var attributes = _ref3.attributes,
            children = _ref3.children,
            element = _ref3.element;

        switch (element.type) {
          case "unordered-list":
            return /*#__PURE__*/React.createElement("ul", Object.assign({
              className: "webiny-rich-typography-unordered-list"
            }, attributes), children);

          case "list-item":
            return /*#__PURE__*/React.createElement("li", attributes, children);

          default:
            return next();
        }
      }
    }
  }
}, {
  name: "i18n-input-rich-text-editor-ordered-list",
  type: "i18n-input-rich-text-editor",
  plugin: {
    name: "ordered-list",
    menu: {
      render: function render(_ref4) {
        var MenuButton = _ref4.MenuButton,
            editor = _ref4.editor;
        var isActive = isBlockActive(editor, "ordered-list");
        return /*#__PURE__*/React.createElement(MenuButton, {
          onClick: function onClick() {
            return toggleBlock(editor, "ordered-list");
          },
          active: isActive
        }, /*#__PURE__*/React.createElement(FormatOrderedListIcon, null));
      }
    },
    editor: {
      onKeyDown: function onKeyDown(_ref5, next) {
        var event = _ref5.event,
            editor = _ref5.editor;

        if (isListHotkey(event)) {
          event.preventDefault();
          return toggleBlock(editor, "ordered-list");
        }

        return next();
      },
      renderElement: function renderElement(_ref6, next) {
        var attributes = _ref6.attributes,
            children = _ref6.children,
            element = _ref6.element;

        switch (element.type) {
          case "ordered-list":
            return /*#__PURE__*/React.createElement("ol", Object.assign({
              className: "webiny-rich-typography-ordered-list"
            }, attributes), children);

          case "list-item":
            return /*#__PURE__*/React.createElement("li", attributes, children);

          default:
            return next();
        }
      }
    }
  }
}];
export default plugins;
//# sourceMappingURL=index.js.map