{"version":3,"sources":["../../../../../src/admin/plugins/richTextEditor/heading/TypographySelector.tsx"],"names":["React","useState","useEffect","useRef","useCallback","Downshift","Elevation","useHandler","Item","Button","List","dropDownDialog","iconStyle","theme","Editor","Transforms","TypographySelector","props","showMenu","setShowMenu","dropdown","domRect","current","getBoundingClientRect","right","window","innerWidth","style","left","setBlock","editor","type","setNodes","onStateChange","isOpen","nodes","match","n","isBlock","blockType","typography","paragraph","getToggleButtonProps","getItemProps","selectedItem","label","Object","keys","map","name","item","isSelected","createElement","component"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback, RefObject } from \"react\";\nimport Downshift from \"downshift\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { ReactComponent as FormatHeadingIcon } from \"@webiny/app-i18n/admin/assets/icons/format_size.svg\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { Item, Button, List, dropDownDialog, iconStyle } from \"./Styled\";\nimport theme from \"./theme\";\nimport { Editor, Transforms } from \"slate\";\n\nconst TypographySelector = props => {\n    const [showMenu, setShowMenu] = useState(false);\n    const dropdown: RefObject<any> = useRef();\n\n    useEffect(() => {\n        if (showMenu) {\n            const domRect = dropdown.current.getBoundingClientRect();\n            if (domRect.right > window.innerWidth) {\n                dropdown.current.style.left = window.innerWidth - domRect.right + \"px\";\n            }\n        }\n    });\n\n    const setBlock = useHandler(props, ({ editor }) => type => {\n        Transforms.setNodes(editor, { type });\n    });\n\n    const onStateChange = useCallback(({ isOpen }) => setShowMenu(isOpen), []);\n\n    const { editor } = props;\n\n    const [match] = Editor.nodes(editor, {\n        match: n => Editor.isBlock(editor, n)\n    });\n\n    const blockType: string = match ? (match[0].type as string) : \"paragraph\";\n\n    const style = theme.typography[blockType] || theme.typography.paragraph;\n\n    return (\n        <Downshift selectedItem={blockType} onChange={setBlock} onStateChange={onStateChange}>\n            {({ isOpen, getToggleButtonProps, getItemProps, selectedItem }) => (\n                <div>\n                    <Button {...getToggleButtonProps()}>\n                        <FormatHeadingIcon className={iconStyle} />\n                        {style.label}\n                    </Button>\n                    {isOpen && (\n                        <Elevation z={2} className={dropDownDialog}>\n                            <div ref={dropdown}>\n                                <List>\n                                    {Object.keys(theme.typography).map(name => {\n                                        const style = theme.typography[name];\n\n                                        return (\n                                            <Item\n                                                {...getItemProps({\n                                                    item: name,\n                                                    isSelected: selectedItem === name\n                                                })}\n                                                key={name}\n                                            >\n                                                {React.createElement(\n                                                    style.component || \"span\",\n                                                    {},\n                                                    style.label\n                                                )}\n                                            </Item>\n                                        );\n                                    })}\n                                </List>\n                            </div>\n                        </Elevation>\n                    )}\n                </div>\n            )}\n        </Downshift>\n    );\n};\n\nexport default TypographySelector;\n"],"file":"TypographySelector.js"}