import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useEffect, useRef, useCallback } from "react";
import Downshift from "downshift";
import { Elevation } from "@webiny/ui/Elevation";
import { ReactComponent as FormatHeadingIcon } from "@svgr/webpack!@webiny/app-i18n/admin/assets/icons/format_size.svg";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { Item, Button, List, dropDownDialog, iconStyle } from "./Styled";
import theme from "./theme";
import { Editor, Transforms } from "slate";

var TypographySelector = function TypographySelector(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showMenu = _useState2[0],
      setShowMenu = _useState2[1];

  var dropdown = useRef();
  useEffect(function () {
    if (showMenu) {
      var domRect = dropdown.current.getBoundingClientRect();

      if (domRect.right > window.innerWidth) {
        dropdown.current.style.left = window.innerWidth - domRect.right + "px";
      }
    }
  });
  var setBlock = useHandler(props, function (_ref) {
    var editor = _ref.editor;
    return function (type) {
      Transforms.setNodes(editor, {
        type: type
      });
    };
  });
  var onStateChange = useCallback(function (_ref2) {
    var isOpen = _ref2.isOpen;
    return setShowMenu(isOpen);
  }, []);
  var editor = props.editor;

  var _Editor$nodes = Editor.nodes(editor, {
    match: function match(n) {
      return Editor.isBlock(editor, n);
    }
  }),
      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),
      match = _Editor$nodes2[0];

  var blockType = match ? match[0].type : "paragraph";
  var style = theme.typography[blockType] || theme.typography.paragraph;
  return /*#__PURE__*/React.createElement(Downshift, {
    selectedItem: blockType,
    onChange: setBlock,
    onStateChange: onStateChange
  }, function (_ref3) {
    var isOpen = _ref3.isOpen,
        getToggleButtonProps = _ref3.getToggleButtonProps,
        getItemProps = _ref3.getItemProps,
        selectedItem = _ref3.selectedItem;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, getToggleButtonProps(), /*#__PURE__*/React.createElement(FormatHeadingIcon, {
      className: iconStyle
    }), style.label), isOpen && /*#__PURE__*/React.createElement(Elevation, {
      z: 2,
      className: dropDownDialog
    }, /*#__PURE__*/React.createElement("div", {
      ref: dropdown
    }, /*#__PURE__*/React.createElement(List, null, Object.keys(theme.typography).map(function (name) {
      var style = theme.typography[name];
      return /*#__PURE__*/React.createElement(Item, Object.assign({}, getItemProps({
        item: name,
        isSelected: selectedItem === name
      }), {
        key: name
      }), /*#__PURE__*/React.createElement(style.component || "span", {}, style.label));
    })))));
  });
};

export default TypographySelector;
//# sourceMappingURL=TypographySelector.js.map