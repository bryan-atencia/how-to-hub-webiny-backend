{"version":3,"sources":["../../../../../src/admin/plugins/richTextEditor/heading/index.tsx"],"names":["React","TypographySelector","theme","plugin","name","type","menu","render","MenuButton","props","editor","renderElement","next","attributes","children","element","typography","hasOwnProperty","component","Component","className","nodeProps"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAMC,MAAqC,GAAG;AAC1CC,EAAAA,IAAI,EAAE,wCADoC;AAE1CC,EAAAA,IAAI,EAAE,6BAFoC;AAG1CF,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE,YADF;AAEJE,IAAAA,IAAI,EAAE;AACFC,MAAAA,MADE,wBAC+B;AAAA,YAAxBC,UAAwB,QAAxBA,UAAwB;AAAA,YAATC,KAAS;;AAC7B,4BACI,oBAAC,UAAD,qBACI,oBAAC,kBAAD,EAAwBA,KAAxB,CADJ,CADJ;AAKH;AAPC,KAFF;AAWJC,IAAAA,MAAM,EAAE;AACJC,MAAAA,aADI,yBACUF,KADV,EACiBG,IADjB,EACuB;AAAA,YACfC,UADe,GACmBJ,KADnB,CACfI,UADe;AAAA,YACHC,QADG,GACmBL,KADnB,CACHK,QADG;AAAA,YACOC,OADP,GACmBN,KADnB,CACOM,OADP,EAEvB;;AAFuB,YAGfV,IAHe,GAGNU,OAHM,CAGfV,IAHe,EAKvB;;AALuB,YAMfW,UANe,GAMAd,KANA,CAMfc,UANe;;AAQvB,YAAIA,UAAU,CAACC,cAAX,CAA0BZ,IAA1B,KAAmCW,UAAU,CAACX,IAAD,CAAV,CAAiBa,SAAxD,EAAmE;AAAA,iCACZF,UAAU,CAACX,IAAD,CADE;AAAA,cAC5Cc,SAD4C,oBACvDD,SADuD;AAAA,uDACjCE,SADiC;AAAA,cACjCA,SADiC,sCACrB,IADqB;;AAG/D,cAAIC,SAAc,mCACXR,UADW;AAEdO,YAAAA,SAAS,EAATA;AAFc,YAAlB;;AAKA,cAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AAC/BE,YAAAA,SAAS,GAAGZ,KAAZ;AACH;;AAED,8BAAO,oBAAC,SAAD,EAAeY,SAAf,EAA2BP,QAA3B,CAAP;AACH;;AAED,eAAOF,IAAI,EAAX;AACH;AAzBG;AAXJ;AAHkC,CAA9C;AA4CA,eAAeT,MAAf","sourcesContent":["import * as React from \"react\";\nimport { I18NInputRichTextEditorPlugin } from \"@webiny/app-i18n/types\";\nimport TypographySelector from \"./TypographySelector\";\nimport theme from \"./theme\";\n\nconst plugin: I18NInputRichTextEditorPlugin = {\n    name: \"i18n-input-rich-text-editor-typography\",\n    type: \"i18n-input-rich-text-editor\",\n    plugin: {\n        name: \"typography\",\n        menu: {\n            render({ MenuButton, ...props }) {\n                return (\n                    <MenuButton>\n                        <TypographySelector {...props} />\n                    </MenuButton>\n                );\n            }\n        },\n        editor: {\n            renderElement(props, next) {\n                const { attributes, children, element } = props;\n                // @ts-ignore\n                const { type } = element;\n\n                // @ts-ignore\n                const { typography } = theme;\n\n                if (typography.hasOwnProperty(type) && typography[type].component) {\n                    const { component: Component, className = null } = typography[type];\n\n                    let nodeProps: any = {\n                        ...attributes,\n                        className\n                    };\n\n                    if (typeof Component !== \"string\") {\n                        nodeProps = props;\n                    }\n\n                    return <Component {...nodeProps}>{children}</Component>;\n                }\n\n                return next();\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"index.js"}