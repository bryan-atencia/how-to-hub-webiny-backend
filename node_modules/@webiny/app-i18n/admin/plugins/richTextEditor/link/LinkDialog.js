import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { Fragment } from "react";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { Form } from "@webiny/form";
import { Input } from "@webiny/ui/Input";
import { Switch } from "@webiny/ui/Switch";
import { Cell, Grid } from "@webiny/ui/Grid";
import { Dialog, DialogContent, DialogTitle, DialogCancel, DialogActions, DialogButton } from "@webiny/ui/Dialog";
import { validation } from "@webiny/validation";
import { Editor, Transforms, Range } from "slate";
import { ReactEditor } from "slate-react";

var getLink = function getLink(editor) {
  var _Editor$nodes = Editor.nodes(editor, {
    match: function match(n) {
      return n.type === "link";
    }
  }),
      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),
      item = _Editor$nodes2[0];

  return item;
};

var createLink = function createLink(data, children) {
  return _objectSpread(_objectSpread({
    type: "link"
  }, data), {}, {
    children: children
  });
};

export var LinkDialog = function LinkDialog(props) {
  var editor = props.editor,
      open = props.open,
      closeDialog = props.closeDialog,
      activePlugin = props.activePlugin;
  var linkData = null;

  if (activePlugin) {
    Transforms.select(editor, activePlugin.selection);
    var item = getLink(editor);

    var _ref = Array.isArray(item) ? [item[0], item[1]] : [null, null],
        _ref2 = _slicedToArray(_ref, 2),
        link = _ref2[0],
        path = _ref2[1];

    var selectedText = "";

    if (link) {
      activePlugin.selection = {
        anchor: Editor.start(editor, path),
        focus: Editor.end(editor, path)
      };
    }

    if (link) {
      selectedText = link.children[0].text;
    } else {
      var _activePlugin$fragmen = _slicedToArray(activePlugin.fragment, 1),
          fragment = _activePlugin$fragmen[0];

      selectedText = fragment ? fragment.children[0].text : "";
    }

    linkData = _objectSpread(_objectSpread({}, link), {}, {
      text: selectedText
    });
  }

  var updateLink = useHandler(props, function (_ref3) {
    var closeDialog = _ref3.closeDialog,
        activePlugin = _ref3.activePlugin,
        editor = _ref3.editor;
    return function (_ref4) {
      var text = _ref4.text,
          data = _objectWithoutProperties(_ref4, ["text"]);

      var selection = activePlugin.selection;
      Transforms.select(editor, selection);
      var isCollapsed = selection && Range.isCollapsed(selection);
      var existingLink = getLink(editor);

      if (existingLink) {
        var _path = ReactEditor.findPath(editor, existingLink[0]);

        Transforms.setNodes(editor, createLink(data, [{
          text: text
        }]), {
          at: _path
        });
        Transforms.insertText(editor, text, {
          at: _path
        });
      } else if (isCollapsed) {
        Transforms.insertNodes(editor, createLink(data, [{
          text: text
        }]));
      } else {
        Transforms.wrapNodes(editor, createLink(data, []), {
          split: true,
          at: selection
        });
        Transforms.collapse(editor, {
          edge: "end"
        });
      }

      Transforms.deselect(editor);
      closeDialog();
    };
  }); // eslint-disable-next-line @typescript-eslint/no-unused-vars

  var _ref5 = linkData || {},
      children = _ref5.children,
      type = _ref5.type,
      formData = _objectWithoutProperties(_ref5, ["children", "type"]);

  return /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: closeDialog,
    style: {
      zIndex: 11000
    }
  }, /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onSubmit: updateLink
  }, function (_ref6) {
    var Bind = _ref6.Bind,
        submit = _ref6.submit;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, null, "Edit Link"), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "text",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "Text to display"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "href",
      validators: validation.create("required,url:allowRelative")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "URL"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "newTab"
    }, /*#__PURE__*/React.createElement(Switch, {
      onChange: function onChange() {
        return submit();
      },
      label: "Open in new window"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "noFollow"
    }, /*#__PURE__*/React.createElement(Switch, {
      onChange: function onChange() {
        return submit();
      },
      label: "Add \"rel=nofollow\""
    }))))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, {
      onClick: closeDialog
    }, "Cancel"), /*#__PURE__*/React.createElement(DialogButton, {
      onClick: submit
    }, "OK")));
  }));
};
//# sourceMappingURL=LinkDialog.js.map