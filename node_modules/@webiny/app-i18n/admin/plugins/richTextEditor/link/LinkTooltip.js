import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useRef, useEffect } from "react";
import ReactDOM from "react-dom";
import styled from "@emotion/styled";
import { css } from "emotion";
import { Elevation } from "@webiny/ui/Elevation";
import { useFocused, useSlate } from "slate-react";
import { Editor, Transforms } from "slate";
var Tooltip = /*#__PURE__*/styled("span", {
  target: "enrzte50",
  label: "Tooltip"
})({
  display: "flex",
  flexDirection: "row",
  position: "fixed",
  top: 20,
  left: 0,
  zIndex: 100,
  width: "auto",
  maxWidth: 520,
  "> span:not(:first-of-type)": {
    marginLeft: 10
  }
});
var tooltipInner = /*#__PURE__*/css({
  padding: "5px 10px",
  borderRadius: 2,
  fontSize: "0.8rem",
  a: {
    cursor: "pointer"
  }
}, "label:tooltipInner;");

var compressLink = function compressLink(href) {
  var start = href.substr(0, 24);
  var end = href.substr(24).substr(-24);
  return [start, "...", end].join("");
};

var getSelectionRect = function getSelectionRect() {
  var native = window.getSelection();

  if (native.type === "None") {
    return {
      top: 0,
      left: 0,
      width: 0,
      height: 0
    };
  }

  var range = native.getRangeAt(0);
  return range.getBoundingClientRect();
};

export var Portal = function Portal(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/ReactDOM.createPortal(children, document.body);
};
export var LinkTooltip = function LinkTooltip(_ref2) {
  var activatePlugin = _ref2.activatePlugin;
  var editor = useSlate();
  var focused = useFocused();
  var menuRef = useRef(null);
  var menu = menuRef.current;

  var _ref3 = Editor.nodes(editor, {
    match: function match(n) {
      return n.type === "link";
    }
  }),
      _ref4 = _slicedToArray(_ref3, 1),
      inline = _ref4[0];

  var link = !!inline ? inline[0] : null;
  useEffect(function () {
    if (!link && focused || !focused) {
      if (menu) {
        menu.style.display = "none";
      }

      return;
    } // Calculate position


    if (menu) {
      menu.style.display = "flex";
      var editorRect = menu.parentNode.getBoundingClientRect();
      var menuRect = menu.getBoundingClientRect();

      var _getSelectionRect = getSelectionRect(),
          top = _getSelectionRect.top,
          left = _getSelectionRect.left,
          height = _getSelectionRect.height;

      var menuRight = left + menuRect.width;
      var diff = editorRect.right - menuRight; // Position menu

      var position = {
        top: top + height,
        left: diff < 0 ? left + diff - 30 : left
      };
      menu.style.top = position.top + "px";
      menu.style.left = position.left + "px";
    }
  });
  var activateLink = useCallback(function () {
    activatePlugin("link");
  }, []);
  var removeLink = useCallback(function () {
    Transforms.unwrapNodes(editor, {
      match: function match(n) {
        return n.type === "link";
      }
    });
  }, []);
  var href = link ? link.href : "";
  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Tooltip, {
    ref: menuRef,
    style: {
      display: "none"
    }
  }, /*#__PURE__*/React.createElement(Elevation, {
    className: tooltipInner,
    z: 1
  }, /*#__PURE__*/React.createElement("span", null, "Link: ", /*#__PURE__*/React.createElement("a", {
    href: href,
    target: "_blank"
  }, href.length > 50 ? compressLink(href) : href)), " ", "| ", /*#__PURE__*/React.createElement("a", {
    onMouseDown: activateLink
  }, "Change"), " |", " ", /*#__PURE__*/React.createElement("a", {
    onMouseDown: removeLink
  }, "Remove"))));
};
//# sourceMappingURL=LinkTooltip.js.map