{"version":3,"sources":["../../src/hooks/useI18N.ts"],"names":["useContext","I18NContext","useI18N","context","state","refetchLocales","self","getDefaultLocale","locales","find","item","default","getLocale","id","getLocales","currentLocale","getValue","valueObject","Array","isArray","values","output","locale","value"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA8C,kBAA9C;AAOA,OAAO,SAASC,OAAT,GAAmB;AACtB,MAAMC,OAAO,GAAGH,UAAU,CAACC,WAAD,CAA1B;;AACA,MAAI,CAACE,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AAJqB,MAMdC,KANc,GAMYD,OANZ,CAMdC,KANc;AAAA,MAMPC,cANO,GAMYF,OANZ,CAMPE,cANO;AAOtB,MAAMC,IAAI,GAAG;AACTD,IAAAA,cAAc,EAAdA,cADS;AAETE,IAAAA,gBAFS,8BAEU;AACf,aAAOH,KAAK,CAACI,OAAN,CAAcC,IAAd,CAAmB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,OAAL,KAAiB,IAArB;AAAA,OAAvB,CAAP;AACH,KAJQ;AAKTC,IAAAA,SALS,qBAKCC,EALD,EAKc;AACnB,UAAIA,EAAJ,EAAQ;AACJ,eAAOP,IAAI,CAACQ,UAAL,GAAkBL,IAAlB,CAAuB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB;AAAA,SAA3B,CAAP;AACH;;AAED,aAAOT,KAAK,CAACW,aAAb;AACH,KAXQ;AAYTD,IAAAA,UAZS,wBAYI;AACT,aAAOV,KAAK,CAACI,OAAb;AACH,KAdQ;AAeTQ,IAAAA,QAfS,oBAeAC,WAfA,EAeuC;AAC5C,UAAI,CAACA,WAAL,EAAkB;AACd,eAAO,EAAP;AACH;;AAED,UAAIC,KAAK,CAACC,OAAN,CAAcF,WAAW,CAACG,MAA1B,CAAJ,EAAuC;AACnC,YAAMC,MAAM,GAAGJ,WAAW,CAACG,MAAZ,CAAmBX,IAAnB,CAAwB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACY,MAAL,KAAgBhB,IAAI,CAACM,SAAL,GAAiBC,EAArC;AAAA,SAA5B,CAAf;AACA,eAAOQ,MAAM,GAAGA,MAAM,CAACE,KAAV,GAAkB,EAA/B;AACH;;AAED,aAAON,WAAW,CAACM,KAAZ,IAAqB,EAA5B;AACH,KA1BQ;AA2BTnB,IAAAA,KAAK,EAALA;AA3BS,GAAb;AA8BA,SAAOE,IAAP;AACH","sourcesContent":["import { useContext } from \"react\";\nimport { I18NContext, I18NContextValue } from \"../contexts/I18N\";\n\ntype I18NValueObject = {\n    value?: string;\n    values?: Array<{ value: string; locale: string }>;\n};\n\nexport function useI18N() {\n    const context = useContext(I18NContext) as I18NContextValue;\n    if (!context) {\n        return null;\n    }\n\n    const { state, refetchLocales } = context;\n    const self = {\n        refetchLocales,\n        getDefaultLocale() {\n            return state.locales.find(item => item.default === true);\n        },\n        getLocale(id?: string) {\n            if (id) {\n                return self.getLocales().find(item => item.id === id);\n            }\n\n            return state.currentLocale;\n        },\n        getLocales() {\n            return state.locales;\n        },\n        getValue(valueObject?: I18NValueObject): string {\n            if (!valueObject) {\n                return \"\";\n            }\n\n            if (Array.isArray(valueObject.values)) {\n                const output = valueObject.values.find(item => item.locale === self.getLocale().id);\n                return output ? output.value : \"\";\n            }\n\n            return valueObject.value || \"\";\n        },\n        state\n    };\n\n    return self;\n}\n"],"file":"useI18N.js"}