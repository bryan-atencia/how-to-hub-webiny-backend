{"version":3,"sources":["../../src/processors/default.ts"],"names":["processTextPart","part","values","modifiers","parts","split","variable","modifier","output","value","parameters","name","shift","execute","processor","canExecute","data","key","Date","translation","reduce","carry","i18n"],"mappings":";;;;;;;;;;;;;;;AAGA,MAAMA,eAAe,GAAG,CAACC,IAAD,EAAeC,MAAf,EAA+BC,SAA/B,KAAqD;AACzE,MAAI,CAAC,0BAAaF,IAAb,EAAmB,GAAnB,CAAL,EAA8B;AAC1B,WAAOA,IAAP;AACH;;AAED,QAAMG,KAAK,GAAG,oBAAOH,IAAP,EAAa,IAAb,EAAmBI,KAAnB,CAAyB,GAAzB,CAAd;AAEA,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBH,KAA7B;;AAEA,MAAI,CAAC,mBAAMF,MAAN,EAAcI,QAAd,CAAL,EAA8B;AAC1B,WAAQ,IAAGA,QAAS,GAApB;AACH;;AAED,QAAME,MAAM,GAAG;AAAEC,IAAAA,KAAK,EAAEP,MAAM,CAACI,QAAD;AAAf,GAAf;;AAEA,MAAIC,QAAJ,EAAc;AACV,UAAMG,UAAU,GAAGH,QAAQ,CAACF,KAAT,CAAe,GAAf,CAAnB;AACA,UAAMM,IAAI,GAAGD,UAAU,CAACE,KAAX,EAAb;;AACA,QAAIT,SAAS,CAACQ,IAAD,CAAb,EAAqB;AACjB,YAAMJ,QAAQ,GAAGJ,SAAS,CAACQ,IAAD,CAA1B;AACAH,MAAAA,MAAM,CAACC,KAAP,GAAeF,QAAQ,CAACM,OAAT,CAAiBL,MAAM,CAACC,KAAxB,EAA+BC,UAA/B,CAAf;AACH;AACJ;;AAED,SAAOF,MAAM,CAACC,KAAd;AACH,CAzBD;;AA2BA,MAAMK,SAAoB,GAAG;AACzBH,EAAAA,IAAI,EAAE,SADmB;;AAEzBI,EAAAA,UAAU,CAACC,IAAD,EAAmB;AACzB,SAAK,MAAMC,GAAX,IAAkBD,IAAI,CAACd,MAAvB,EAA+B;AAC3B,YAAMO,KAAK,GAAGO,IAAI,CAACd,MAAL,CAAYe,GAAZ,CAAd;;AACA,UACI,OAAOR,KAAP,KAAiB,QAAjB,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEAA,KAAK,KAAK,IAFV,IAGAA,KAAK,YAAYS,IAJrB,EAKE;AACE;AACH;;AACD,aAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH,GAjBwB;;AAkBzBL,EAAAA,OAAO,CAACG,IAAD,EAAO;AACV,UAAMZ,KAAK,GAAGY,IAAI,CAACG,WAAL,CAAiBd,KAAjB,CAAuB,SAAvB,CAAd;AACA,WAAOD,KAAK,CAACgB,MAAN,CACH,CAACC,KAAD,EAAQpB,IAAR,KAAiBoB,KAAK,GAAGrB,eAAe,CAACC,IAAD,EAAOe,IAAI,CAACd,MAAZ,EAAoBc,IAAI,CAACM,IAAL,CAAUnB,SAA9B,CADrC,EAEH,EAFG,CAAP;AAIH;;AAxBwB,CAA7B;eA2BeW,S","sourcesContent":["import _ from \"lodash\";\nimport { Processor } from \"../types\";\n\nconst processTextPart = (part: string, values: Object, modifiers): string => {\n    if (!_.startsWith(part, \"{\")) {\n        return part;\n    }\n\n    const parts = _.trim(part, \"{}\").split(\"|\");\n\n    const [variable, modifier] = parts;\n\n    if (!_.has(values, variable)) {\n        return `{${variable}}`;\n    }\n\n    const output = { value: values[variable] };\n\n    if (modifier) {\n        const parameters = modifier.split(\":\");\n        const name = parameters.shift();\n        if (modifiers[name]) {\n            const modifier = modifiers[name];\n            output.value = modifier.execute(output.value, parameters);\n        }\n    }\n\n    return output.value;\n};\n\nconst processor: Processor = {\n    name: \"default\",\n    canExecute(data: { values }) {\n        for (const key in data.values) {\n            const value = data.values[key];\n            if (\n                typeof value === \"string\" ||\n                typeof value === \"number\" ||\n                value === null ||\n                value instanceof Date\n            ) {\n                continue;\n            }\n            return false;\n        }\n\n        return true;\n    },\n    execute(data) {\n        const parts = data.translation.split(/({.*?})/);\n        return parts.reduce(\n            (carry, part) => carry + processTextPart(part, data.values, data.i18n.modifiers),\n            \"\"\n        );\n    }\n};\n\nexport default processor;\n"],"file":"default.js"}