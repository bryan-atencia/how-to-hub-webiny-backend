{"version":3,"sources":["../src/I18n.ts"],"names":["I18N","constructor","locale","defaultFormats","getDefaultFormats","translations","modifiers","processors","translate","base","namespace","Error","translation","getTranslation","hasVariables","includes","values","data","i18n","key","canExecute","execute","ns","date","value","outputFormat","inputFormat","getDateFormat","parsedValue","fecha","parse","format","time","getTimeFormat","dateTime","getDateTimeFormat","price","getPriceFormat","replace","accounting","formatMoney","symbol","precision","thousand","decimal","number","getNumberFormat","formatNumber","getTranslations","hasTranslation","setTranslation","setTranslations","clearTranslations","mergeTranslations","getLocale","setLocale","registerModifier","modifier","name","registerModifiers","forEach","unregisterModifier","registerProcessor","processor","registerProcessors","unregisterProcessor","datetime"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport hash from \"short-hash\";\nimport * as fecha from \"fecha\";\nimport accounting from \"accounting\";\n\nimport {\n    Formats,\n    I18NData,\n    Modifier,\n    NumberFormat,\n    PriceFormat,\n    Processor,\n    Translations,\n    Translator\n} from \"./types\";\n\n/**\n * Main class used for all I18n needs.\n */\nexport default class I18N {\n    locale?: string;\n    defaultFormats: Formats;\n    translations: Translations;\n    modifiers: { [name: string]: Modifier };\n    processors: { [name: string]: Processor };\n\n    constructor() {\n        this.locale = null;\n\n        /**\n         * If we fail to fetch formats for currently selected locale, these default formats will be used.\n         * @type {{date: string, time: string, datetime: string, number: string}}\n         */\n        this.defaultFormats = this.getDefaultFormats();\n\n        /**\n         * All currently-loaded translations, for easier (synchronous) access.\n         * @type {{}}\n         */\n        this.translations = {};\n\n        /**\n         * All registered modifiers.\n         * @type {{}}\n         */\n        this.modifiers = {};\n\n        /**\n         * All registered processors.\n         * Default built-in processors are registered immediately below.\n         * @type {{}}\n         */\n        this.processors = {};\n    }\n\n    translate(base: string, namespace?: string): any {\n        // Returns full translation for given base text in given namespace (optional).\n        // If translation isn't found, base text will be returned.\n        // We create a key out of given namespace and base text.\n\n        if (!namespace) {\n            throw Error(\"I18N text namespace not defined.\");\n        }\n\n        base = _.get(base, \"raw.0\", base);\n\n        let translation = this.getTranslation(namespace + \".\" + hash(base));\n\n        if (!translation) {\n            translation = base;\n        }\n\n        const hasVariables = base.includes(\"{\") && base.includes(\"}\");\n        if (hasVariables) {\n            // @ts-ignore\n            return values => {\n                const data = { translation, base, namespace, values, i18n: this };\n                for (const key in this.processors) {\n                    if (this.processors[key].canExecute(data)) {\n                        return this.processors[key].execute(data);\n                    }\n                }\n                return null;\n            };\n        }\n\n        const data: I18NData = { translation, base, namespace, values: {}, i18n: this };\n        for (const key in this.processors) {\n            if (this.processors[key].canExecute(data)) {\n                return this.processors[key].execute(data);\n            }\n        }\n        return null;\n    }\n\n    namespace(namespace: string): Translator {\n        return base => {\n            return this.translate(base as string, namespace);\n        };\n    }\n\n    ns(namespace: string): Translator {\n        return this.namespace(namespace);\n    }\n\n    /**\n     * Formats and outputs date.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    date(\n        value: Date | string | number,\n        outputFormat?: string,\n        inputFormat?: \"YYYY-MM-DDTHH:mm:ss.SSSZ\"\n    ): string {\n        if (!outputFormat) {\n            outputFormat = this.getDateFormat();\n        }\n\n        let parsedValue: number | Date;\n\n        if (typeof value === \"string\") {\n            parsedValue = fecha.parse(value, inputFormat) as Date;\n        }\n\n        return fecha.format(parsedValue, outputFormat);\n    }\n\n    /**\n     * Formats and outputs time.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    time(\n        value: Date | string | number,\n        outputFormat: string = null,\n        inputFormat = \"YYYY-MM-DDTHH:mm:ss.SSSZ\"\n    ): string {\n        if (!outputFormat) {\n            outputFormat = this.getTimeFormat();\n        }\n\n        let parsedValue: number | Date;\n\n        if (typeof value === \"string\") {\n            parsedValue = fecha.parse(value, inputFormat) as Date;\n        }\n\n        return fecha.format(parsedValue, outputFormat);\n    }\n\n    /**\n     * Formats and outputs date/time.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    dateTime(\n        value: Date | string | number,\n        outputFormat: string = null,\n        inputFormat = \"YYYY-MM-DDTHH:mm:ss.SSSZ\"\n    ): string {\n        if (!outputFormat) {\n            outputFormat = this.getDateTimeFormat();\n        }\n\n        let parsedValue: number | Date;\n\n        if (typeof value === \"string\") {\n            parsedValue = fecha.parse(value, inputFormat) as Date;\n        }\n\n        return fecha.format(parsedValue, outputFormat);\n    }\n\n    /**\n     * Outputs formatted number as amount of price.\n     * @param value\n     * @param outputFormat\n     */\n    price(value: string | number, outputFormat?: any): string {\n        if (!outputFormat) {\n            outputFormat = this.getPriceFormat();\n        } else {\n            outputFormat = _.assign({}, this.defaultFormats.price, outputFormat);\n        }\n\n        // Convert placeholders to accounting's placeholders.\n        let format = outputFormat.format;\n        format = format.replace(\"{symbol}\", \"%s\");\n        format = format.replace(\"{amount}\", \"%v\");\n\n        return accounting.formatMoney(\n            value,\n            outputFormat.symbol,\n            outputFormat.precision,\n            outputFormat.thousand,\n            outputFormat.decimal,\n            format\n        );\n    }\n\n    /**\n     * Outputs formatted number.\n     * @param value\n     * @param outputFormat\n     */\n    number(value: string | number, outputFormat?: NumberFormat): string {\n        if (!outputFormat) {\n            outputFormat = this.getNumberFormat();\n        } else {\n            outputFormat = _.assign({}, this.defaultFormats.number, outputFormat);\n        }\n        return accounting.formatNumber(\n            value,\n            outputFormat.precision,\n            outputFormat.thousand,\n            outputFormat.decimal\n        );\n    }\n\n    /**\n     * Returns translation for given text key.\n     * @param key\n     * @returns {*|string}\n     */\n    getTranslation(key?: string) {\n        return this.translations[key];\n    }\n\n    /**\n     * Returns all translations for current locale.\n     * @returns {*|{}}\n     */\n    getTranslations() {\n        return this.translations;\n    }\n\n    /**\n     * Returns true if given key has a translation for currently set locale.\n     * @param key\n     */\n    hasTranslation(key: string): boolean {\n        return key in this.translations;\n    }\n\n    /**\n     * Sets translation for given text key.\n     * @param key\n     * @param translation\n     * @returns {I18N}\n     */\n    setTranslation(key: string, translation: string): I18N {\n        this.translations[key] = translation;\n        return this;\n    }\n\n    /**\n     * Sets translations that will be used.\n     * @returns {*|{}}\n     */\n    setTranslations(translations: Translations): I18N {\n        this.translations = translations;\n        return this;\n    }\n\n    /**\n     * Clears all translations.\n     * @returns {*|{}}\n     */\n    clearTranslations(): I18N {\n        this.setTranslations({});\n        return this;\n    }\n\n    /**\n     * Merges given translations object with already existing.\n     * @returns {*|{}}\n     */\n\n    mergeTranslations(translations: Translations) {\n        return _.assign(this.translations, translations);\n    }\n\n    /**\n     * Returns currently selected locale (locale's key).\n     */\n    getLocale(): null | string {\n        return this.locale;\n    }\n\n    /**\n     * Sets current locale.\n     */\n    setLocale(locale: string): I18N {\n        this.locale = locale;\n        return this;\n    }\n\n    /**\n     * Registers single modifier.\n     * @returns {I18N}\n     */\n    registerModifier(modifier: Modifier): I18N {\n        this.modifiers[modifier.name] = modifier;\n        return this;\n    }\n\n    /**\n     * Registers all modifiers in given array.\n     * @param modifiers\n     * @returns {I18N}\n     */\n    registerModifiers(modifiers: Array<Modifier>): I18N {\n        modifiers.forEach(modifier => this.registerModifier(modifier));\n        return this;\n    }\n\n    /**\n     * Unregisters given modifier.\n     * @param name\n     * @returns {I18N}\n     */\n    unregisterModifier(name: string): I18N {\n        delete this.modifiers[name];\n        return this;\n    }\n\n    /**\n     * Registers single processor.\n     * @returns {I18N}\n     */\n    registerProcessor(processor: Processor): I18N {\n        this.processors[processor.name] = processor;\n        return this;\n    }\n\n    /**\n     * Registers all processors in given array.\n     * @param processors\n     * @returns {I18N}\n     */\n    registerProcessors(processors: Array<Processor>): I18N {\n        processors.forEach(processor => this.registerProcessor(processor));\n        return this;\n    }\n\n    /**\n     * Unregisters given processor.\n     * @param name\n     * @returns {I18N}\n     */\n    unregisterProcessor(name: string): I18N {\n        delete this.processors[name];\n        return this;\n    }\n\n    /**\n     * Returns default formats\n     * @returns {{date: string, time: string, datetime: string, number: string}}\n     */\n    getDefaultFormats(): Formats {\n        return {\n            date: \"DD/MM/YYYY\",\n            time: \"HH:mm\",\n            datetime: \"DD/MM/YYYY HH:mm\",\n            price: {\n                symbol: \"\",\n                format: \"{symbol}{amount}\",\n                decimal: \".\",\n                thousand: \",\",\n                precision: 2\n            },\n            number: {\n                decimal: \".\",\n                thousand: \",\",\n                precision: 2\n            }\n        };\n    }\n\n    /**\n     * Returns current format to be used when outputting dates.\n     */\n    getDateFormat(): string {\n        return _.get(this.locale, \"formats.date\", this.defaultFormats.date);\n    }\n\n    /**\n     * Returns current format to be used when outputting time.\n     */\n    getTimeFormat(): string {\n        return _.get(this.locale, \"formats.time\", this.defaultFormats.time);\n    }\n\n    /**\n     * Returns current format to be used when outputting date/time.\n     */\n    getDateTimeFormat(): string {\n        return _.get(this.locale, \"formats.datetime\", this.defaultFormats.datetime);\n    }\n\n    /**\n     * Returns current format to be used when outputting prices.\n     */\n    getPriceFormat(): PriceFormat {\n        return _.assign({}, this.defaultFormats.price, _.get(this.locale, \"formats.price\", {}));\n    }\n\n    /**\n     * Returns current format to be used when outputting numbers.\n     */\n    getNumberFormat(): NumberFormat {\n        return _.assign({}, this.defaultFormats.number, _.get(this.locale, \"formats.number\", {}));\n    }\n}"],"file":"I18n.js"}