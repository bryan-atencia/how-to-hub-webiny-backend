{"version":3,"sources":["../../src/extractor/extract.ts"],"names":["getNamespaces","source","regex","m","results","exec","index","lastIndex","allDeclaredNamespaces","variable","RegExp","matchedText","key"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;AAMA,MAAMA,aAAa,GAAGC,MAAM,IAAI;AAC5B,QAAMC,KAAK,GAAG,qEAAd;AACA,MAAIC,CAAJ;AAEA,QAAMC,OAAO,GAAG,EAAhB;;AAEA,SAAO,CAACD,CAAC,GAAGD,KAAK,CAACG,IAAN,CAAWJ,MAAX,CAAL,MAA6B,IAApC,EAA0C;AACtC,QAAIE,CAAC,CAACG,KAAF,KAAYJ,KAAK,CAACK,SAAtB,EAAiC;AAC7BL,MAAAA,KAAK,CAACK,SAAN;AACH;;AAEDH,IAAAA,OAAO,CAACD,CAAC,CAAC,CAAD,CAAF,CAAP,GAAgBA,CAAC,CAAC,CAAD,CAAjB;AACH;;AAED,SAAOC,OAAP;AACH,CAfD;;eAiBgBH,MAAD,IAAoB;AAC/B,QAAMG,OAAO,GAAG,EAAhB;AACA,QAAMI,qBAAqB,GAAGR,aAAa,CAACC,MAAD,CAA3C;;AAEA,OAAK,MAAMQ,QAAX,IAAuBD,qBAAvB,EAA8C;AAC1C,UAAMN,KAAK,GAAG,IAAIQ,MAAJ,CAAWD,QAAQ,GAAG,SAAtB,EAAiC,GAAjC,CAAd;AAEA,QAAIN,CAAJ;;AACA,WAAO,CAACA,CAAC,GAAGD,KAAK,CAACG,IAAN,CAAWJ,MAAX,CAAL,MAA6B,IAApC,EAA0C;AACtC,UAAIE,CAAC,CAACG,KAAF,KAAYJ,KAAK,CAACK,SAAtB,EAAiC;AAC7BL,QAAAA,KAAK,CAACK,SAAN;AACH,OAHqC,CAKtC;;;AACA,YAAMI,WAAW,GAAGR,CAAC,CAAC,CAAD,CAArB;AACA,YAAMS,GAAG,GAAGJ,qBAAqB,CAACC,QAAD,CAArB,GAAkC,GAAlC,GAAwC,wBAAKE,WAAL,CAApD;AACAP,MAAAA,OAAO,CAACQ,GAAD,CAAP,GAAeD,WAAf;AACH;AACJ;;AAED,SAAOP,OAAP;AACH,C","sourcesContent":["import hash from \"short-hash\";\n\n/**\n * Searches for all declared namespaces.\n * Result contains an object with identifiers as keys, and namespaces they represent as values, for example:\n * {ns1: 'Webiny.Ns1', ns2: 'Webiny.Ns2', i18n: 'NewNamespace', t: 'Some.Other.Namespace'}\n * @param source\n */\nconst getNamespaces = source => {\n    const regex = /([a-zA-Z0-9]+)[ ]+=[ ]+i18n.namespace\\(['\"`]([a-zA-Z0-9.]+)['\"`]\\)/g;\n    let m;\n\n    const results = {};\n\n    while ((m = regex.exec(source)) !== null) {\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n\n        results[m[1]] = m[2];\n    }\n\n    return results;\n};\n\nexport default (source: string) => {\n    const results = {};\n    const allDeclaredNamespaces = getNamespaces(source);\n\n    for (const variable in allDeclaredNamespaces) {\n        const regex = new RegExp(variable + \"`(.*?)`\", \"g\");\n\n        let m;\n        while ((m = regex.exec(source)) !== null) {\n            if (m.index === regex.lastIndex) {\n                regex.lastIndex++;\n            }\n\n            // This is the key - namespace + hash of matched label.\n            const matchedText = m[1];\n            const key = allDeclaredNamespaces[variable] + \".\" + hash(matchedText);\n            results[key] = matchedText;\n        }\n    }\n\n    return results;\n};\n"],"file":"extract.js"}