import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _has from "lodash/has";
import _trim from "lodash/trim";
import _startsWith from "lodash/startsWith";
import React from "react";

var processTextPart = function processTextPart(part, values, modifiers) {
  if (!_startsWith(part, "{")) {
    return part;
  }

  part = _trim(part, "{}");
  var parts = part.split("|");

  var _parts = _slicedToArray(parts, 2),
      variable = _parts[0],
      modifier = _parts[1];

  if (!_has(values, variable)) {
    return variable;
  }

  var value = values[variable];

  if (modifier) {
    var parameters = modifier.split(":");
    var name = parameters.shift();

    if (modifiers[name]) {
      var _modifier = modifiers[name];
      value = _modifier.execute(value, parameters);
    }
  }

  return value;
};

export default {
  name: "react",
  canExecute: function canExecute(data) {
    for (var key in data.values) {
      var value = data.values[key];

      if ( /*#__PURE__*/React.isValidElement(value)) {
        return true;
      }
    }

    return false;
  },
  execute: function execute(data) {
    var parts = data.translation.split(/({.*?})/); // @ts-ignore

    return /*#__PURE__*/React.createElement("i18n-text", null, parts.map(function (part, index) {
      return /*#__PURE__*/React.createElement("i18n-text-part", {
        key: index
      }, processTextPart(part, data.values, data.i18n.modifiers));
    }));
  }
};
//# sourceMappingURL=index.js.map