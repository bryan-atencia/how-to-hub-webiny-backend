{"version":3,"sources":["../../src/validators/creditCard.ts"],"names":["value","length","ValidationError","test","nCheck","nDigit","bEven","replace","n","cDigit","charAt","parseInt"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;eAagBA,KAAD,IAAsB;AACjC,MAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDA,EAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AAEA,MAAIA,KAAK,CAACC,MAAN,GAAe,EAAnB,EAAuB;AACnB,UAAM,IAAIC,wBAAJ,CAAoB,+BAApB,CAAN;AACH;;AAED,MAAI,aAAaC,IAAb,CAAkBH,KAAlB,CAAJ,EAA8B;AAC1B,UAAM,IAAIE,wBAAJ,CAAoB,6BAApB,CAAN;AACH;;AAED,MAAIE,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,KAAK,GAAG,KAAZ;AAEAN,EAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAR;AACAP,EAAAA,KAAK,GAAGA,KAAK,CAACO,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;;AAEA,OAAK,IAAIC,CAAC,GAAGR,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+BO,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,UAAMC,MAAM,GAAGT,KAAK,CAACU,MAAN,CAAaF,CAAb,CAAf;AACAH,IAAAA,MAAM,GAAGM,QAAQ,CAACF,MAAD,CAAjB;;AAEA,QAAIH,KAAJ,EAAW;AACPD,MAAAA,MAAM,IAAI,CAAV;;AACA,UAAIA,MAAM,GAAG,CAAb,EAAgB;AACZA,QAAAA,MAAM,IAAI,CAAV;AACH;AACJ;;AAEDD,IAAAA,MAAM,IAAIC,MAAV;AACAC,IAAAA,KAAK,GAAG,CAACA,KAAT;AACH;;AAED,MAAIF,MAAM,GAAG,EAAT,KAAgB,CAApB,EAAuB;AACnB;AACH;;AAED,QAAM,IAAIF,wBAAJ,CAAoB,6BAApB,CAAN;AACH,C","sourcesContent":["import ValidationError from \"./../validationError\";\n\n/**\n * @name creditCard\n * @description Credit card validator. This validator will check if the given value is a credit card number.\n * @param {any} value This is the value that will be validated.\n * @throws {ValidationError}\n * @example\n * import { validation } from '@webiny/validation';\n * validation.validate('notACreditCard', 'creditCard').then(() => {\n *  // Valid\n * }).catch(e => {\n *  // Invalid\n * });\n */\nexport default (value: any): void => {\n    if (!value) {\n        return;\n    }\n    value = value + \"\";\n\n    if (value.length < 12) {\n        throw new ValidationError(\"Credit card number too short.\");\n    }\n\n    if (/[^0-9-\\s]+/.test(value)) {\n        throw new ValidationError(\"Credit card number invalid.\");\n    }\n\n    let nCheck = 0;\n    let nDigit = 0;\n    let bEven = false;\n\n    value = value.replace(/ /g, \"\");\n    value = value.replace(/\\D/g, \"\");\n\n    for (let n = value.length - 1; n >= 0; n--) {\n        const cDigit = value.charAt(n);\n        nDigit = parseInt(cDigit);\n\n        if (bEven) {\n            nDigit *= 2;\n            if (nDigit > 9) {\n                nDigit -= 9;\n            }\n        }\n\n        nCheck += nDigit;\n        bEven = !bEven;\n    }\n\n    if (nCheck % 10 === 0) {\n        return;\n    }\n\n    throw new ValidationError(\"Credit card number invalid.\");\n};\n"],"file":"creditCard.js"}