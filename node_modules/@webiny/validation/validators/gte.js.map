{"version":3,"sources":["../../src/validators/gte.ts"],"names":["value","params","parseFloat","ValidationError"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;eAce,CAACA,KAAD,EAAaC,MAAb,KAAuC;AAClD,MAAI,CAACD,KAAL,EAAY;AACR;AACH;;AAED,MAAIE,UAAU,CAACF,KAAD,CAAV,IAAqBE,UAAU,CAACD,MAAM,CAAC,CAAD,CAAP,CAAnC,EAAgD;AAC5C;AACH;;AACD,QAAM,IAAIE,wBAAJ,CAAoB,gDAAgDF,MAAM,CAAC,CAAD,CAAtD,GAA4D,GAAhF,CAAN;AACH,C","sourcesContent":["import ValidationError from \"./../validationError\";\n\n/**\n * @name gte\n * @description \"Greater than or equals\" validator. This validator checks if the given values is greater than or equal to the `min` value.\n * @param {any} value This is the value that will be validated.\n * @param {any} min This is the value to validate against. It is passed as a validator parameter: `gte:valueToCompareAgainst`\n * @throws {ValidationError}\n * @example\n * import { validation } from '@webiny/validation';\n * validation.validate(10, 'gte:100').then(() => {\n *  // Valid\n * }).catch(e => {\n *  // Invalid\n * });\n */\nexport default (value: any, params: Array<string>) => {\n    if (!value) {\n        return;\n    }\n\n    if (parseFloat(value) >= parseFloat(params[0])) {\n        return;\n    }\n    throw new ValidationError(\"Value needs to be greater than or equal to \" + params[0] + \".\");\n};\n"],"file":"gte.js"}