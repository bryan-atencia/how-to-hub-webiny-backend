import ValidationError from "./validationError";
import { Validator, ValidateOptions, ParsedValidators } from "./types";
/**
 * Main class of Validation library.
 * Exported as a singleton instance, it offers methods for sync/async data validation and overwriting or adding new validators.
 *
 * @class Validation
 * @example
 * import { validation } from '@webiny/validation';
 *
 * // `validation` is a preconfigured instance of Validation class.
 * // From here you can either add new validators or use it as-is.
 */
declare class Validation {
    /**
     * Contains a list of all set validators.
     * @private
     */
    __validators: {
        [key: string]: Validator;
    };
    constructor();
    /**
     * Add new validator.
     * @param name Validator name.
     * @param callable Validator function which throws a ValidationError if validation fails.
     * @returns {Validation}
     */
    setValidator(name: string, callable: Validator): this;
    /**
     * Get validator function by name.
     * @param name Validator name.
     * @returns {Validator} A validator function.
     */
    getValidator(name: string): Validator;
    /**
     * Asynchronously validates value.
     * @param value Value to validate.
     * @param validators A list of comma-separated validators (eg. required,number,gt:20).
     * @param [options] Validation options.
     * @returns {Promise<boolean | ValidationError>}
     */
    validate(value: any, validators: string, options?: ValidateOptions): Promise<boolean | ValidationError>;
    /**
     * Synchronously validates value.
     * @param value Value to validate.
     * @param validators A list of comma-separated validators (eg. required,number,gt:20).
     * @param [options] Validation options.
     * @returns {Promise<boolean | ValidationError>}
     */
    validateSync(value: any, validators: string, options?: ValidateOptions): boolean | ValidationError;
    create(validators: string): any;
    createSync(validators: string): any;
    /**
     * Parses a string of validators with parameters.
     * @param validators A list of comma-separated validators (eg. required,number,gt:20).
     * @returns {ParsedValidators}
     * @private
     */
    __parseValidateProperty(validators: string): ParsedValidators;
}
export default Validation;
