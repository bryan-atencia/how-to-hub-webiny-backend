import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import * as React from "react";
import get from "lodash.get";
import { Query, Mutation } from "react-apollo";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Switch } from "@webiny/ui/Switch";
import { Input } from "@webiny/ui/Input";
import { ColorPicker } from "@webiny/ui/ColorPicker";
import { ButtonSecondary, ButtonPrimary } from "@webiny/ui/Button";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { RadioGroup, Radio } from "@webiny/ui/Radio";
import { CircularProgress } from "@webiny/ui/Progress";
import graphql from "./graphql";
import showCookiePolicy from "./../../utils/showCookiePolicy";
import getDefaultCookiePolicySettings from "./getDefaultCookiePolicySettings";
import { validation } from "@webiny/validation";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";
var positionOptions = [{
  id: "bottom",
  name: "Bottom"
}, {
  id: "top",
  name: "Top"
}, {
  id: "bottom-left",
  name: "Floating left"
}, {
  id: "bottom-right",
  name: "Floating right"
}];

var getFormData = function getFormData(settings) {
  var defaults = getDefaultCookiePolicySettings();

  var data = _objectSpread({}, settings);

  if (!data.palette) {
    data.palette = defaults.palette;
  }

  if (!data.content) {
    data.content = defaults.content;
  }

  if (!data.position) {
    data.position = defaults.position;
  }

  return data;
};

var CookiePolicySettings = function CookiePolicySettings() {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(Query, {
    query: graphql.query
  }, function (_ref) {
    var data = _ref.data,
        queryInProgress = _ref.loading;
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: graphql.mutation
    }, function (update, _ref2) {
      var mutationInProgress = _ref2.loading;
      var settings = get(data, "cookiePolicy.getSettings.data") || {};
      return /*#__PURE__*/React.createElement(Form, {
        data: getFormData(settings),
        onSubmit: /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return update({
                      variables: {
                        data: data
                      }
                    });

                  case 2:
                    showSnackbar("Settings updated successfully.");

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref3.apply(this, arguments);
          };
        }()
      }, function (_ref4) {
        var Bind = _ref4.Bind,
            form = _ref4.form,
            data = _ref4.data;
        return /*#__PURE__*/React.createElement(SimpleForm, null, (queryInProgress || mutationInProgress) && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
          title: "Cookie Policy Settings"
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "enabled",
          afterChange: function afterChange(enabled) {
            if (!enabled) {
              form.submit();
            }
          }
        }, /*#__PURE__*/React.createElement(Switch, {
          label: "Enabled"
        }))), data.enabled ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 3
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "palette.popup.background"
        }, /*#__PURE__*/React.createElement(ColorPicker, {
          label: "Banner background color"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 3
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "palette.popup.text"
        }, /*#__PURE__*/React.createElement(ColorPicker, {
          label: "Banner text color"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 3
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "palette.button.background"
        }, /*#__PURE__*/React.createElement(ColorPicker, {
          label: "Button background color"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 3
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "palette.button.text"
        }, /*#__PURE__*/React.createElement(ColorPicker, {
          label: "Button text color"
        })))))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "position"
        }, /*#__PURE__*/React.createElement(RadioGroup, {
          label: "Position"
        }, function (_ref5) {
          var onChange = _ref5.onChange,
              getValue = _ref5.getValue;
          return /*#__PURE__*/React.createElement(React.Fragment, null, positionOptions.map(function (_ref6) {
            var id = _ref6.id,
                name = _ref6.name;
            return /*#__PURE__*/React.createElement(Radio, {
              key: id,
              label: name,
              value: getValue(id),
              onChange: onChange(id)
            });
          }));
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "content.message"
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Message",
          description: "Link to your own policy\n"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "content.dismiss"
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Dismiss button text",
          description: "Link to your own policy\n"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "content.href",
          validators: validation.create("url")
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Policy link"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "content.link"
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Policy link title"
        }))))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonSecondary, {
          onClick: function onClick() {
            showCookiePolicy(_objectSpread(_objectSpread({}, data), {}, {
              // Official bug fix.
              messagelink: '<span id="cookieconsent:desc" class="cc-message">{{message}} <a aria-label="learn more about cookies" tabindex="0" class="cc-link" href="{{href}}" target="_blank">{{link}}</a></span>',
              dismissOnTimeout: 5000,
              cookie: {
                expiryDays: 0.00000001
              }
            }), true);
          }
        }, "Preview"), "\xA0", /*#__PURE__*/React.createElement(ButtonPrimary, {
          onClick: form.submit
        }, "Save"))) : null);
      });
    });
  });
};

export default CookiePolicySettings;
//# sourceMappingURL=CookiePolicySettings.js.map