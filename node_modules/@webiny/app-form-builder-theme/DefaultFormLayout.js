import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from "react";
import Input from "./fields/Input";
import Select from "./fields/Select";
import Radio from "./fields/Radio";
import Checkbox from "./fields/Checkbox";
import Textarea from "./fields/Textarea";
import { Form } from "@webiny/form";
import { I18NValue } from "@webiny/app-i18n/components";
import HelperMessage from "./components/HelperMessage";
import { validation } from "@webiny/validation";
/**
 * This is the default form layout component, in which we render all the form fields. We also render terms of service
 * and reCAPTCHA (if enabled in form settings), and at the bottom, the submit button. Note that we also utilized
 * the "webiny-form" package, which makes working with forms and form fields a walk in the park. Also, as labels for
 * various parts of the form can be translated to different languages via the Form Editor (eg. submit button's label,
 * terms of service message...), we use the I18NValue component, which is a part of the "webiny-app-i18n" package.
 *
 * Feel free to use this component as your starting point for your own form layouts. Add or remove things as you like!
 */

var DefaultFormLayout = function DefaultFormLayout(_ref) {
  var getFields = _ref.getFields,
      getDefaultValues = _ref.getDefaultValues,
      submit = _ref.submit,
      formData = _ref.formData,
      ReCaptcha = _ref.ReCaptcha,
      TermsOfService = _ref.TermsOfService;

  // Is the form in loading (submitting) state?
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1]; // Is the form successfully submitted?


  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      formSuccess = _useState4[0],
      setFormSuccess = _useState4[1]; // All form fields - an array of rows where each row is an array that contain fields.


  var fields = getFields();
  /**
   * Once the data is successfully submitted, we show a success message.
   */

  var submitForm = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var result;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _context.next = 3;
              return submit(data);

            case 3:
              result = _context.sent;
              setLoading(false);

              if (result.error === null) {
                setFormSuccess(true);
              }

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function submitForm(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Renders a field cell with a field element inside.
   */


  var renderFieldCell = function renderFieldCell(field, Bind) {
    return /*#__PURE__*/React.createElement("div", {
      key: field._id,
      className: "webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column"
    }, /*#__PURE__*/React.createElement(Bind, {
      name: field.fieldId,
      validators: field.validators
    }, function (bind) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, renderFieldElement({
        field: field,
        bind: bind
      }));
    }));
  };
  /**
   * Renders hidden fields.
   */


  var renderHiddenField = function renderHiddenField(field, Bind) {
    return /*#__PURE__*/React.createElement(Bind, {
      name: field.fieldId,
      validators: field.validators
    }, function (bind) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, renderFieldElement({
        field: field,
        bind: bind
      }));
    });
  };
  /**
   * Renders a single form field. You can add additional handling of other field types if needed.
   * All of these components are located in the "./fields" folder.
   */


  var renderFieldElement = function renderFieldElement(props) {
    switch (props.field.type) {
      case "text":
        return /*#__PURE__*/React.createElement(Input, props);

      case "textarea":
        return /*#__PURE__*/React.createElement(Textarea, props);

      case "number":
        return /*#__PURE__*/React.createElement(Input, Object.assign({}, props, {
          type: "number"
        }));

      case "select":
        return /*#__PURE__*/React.createElement(Select, props);

      case "radio":
        return /*#__PURE__*/React.createElement(Radio, props);

      case "checkbox":
        return /*#__PURE__*/React.createElement(Checkbox, props);

      case "hidden":
        return /*#__PURE__*/React.createElement("input", {
          type: "hidden",
          value: props.bind.value
        });

      default:
        return /*#__PURE__*/React.createElement("span", null, "Cannot render field.");
    }
  };
  /**
   * Renders Google reCAPTCHA field (checkbox) - to protect us from spam and bots.
   * For this we use the provided ReCaptcha component, which is a render prop component and a regular component
   * at the same time, depending if the function was passed as its children. If no children are present, then
   * it will render the actual Google reCAPTCHA field.
   * Note that you don't have to worry if the reCAPTCHA was actually enabled via the Form Editor - the component
   * does necessary checks internally and will not render anything if it isn't supposed to.
   */


  var renderReCaptcha = function renderReCaptcha(Bind) {
    return /*#__PURE__*/React.createElement(ReCaptcha, null, function (_ref3) {
      var errorMessage = _ref3.errorMessage;
      return /*#__PURE__*/React.createElement("div", {
        className: "webiny-fb-form-recaptcha"
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "reCaptcha",
        validators: validation.create("required")
      }, function (_ref4) {
        var onChange = _ref4.onChange,
            validation = _ref4.validation;
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReCaptcha, {
          onChange: onChange
        }), /*#__PURE__*/React.createElement(HelperMessage, {
          isValid: validation.isValid,
          errorMessage: /*#__PURE__*/React.createElement(I18NValue, {
            value: errorMessage
          })
        }));
      }));
    });
  };
  /**
   * Renders the Terms of Service checkbox - which forces the user to agree to our Terms of Service
   * before actually submitting the form.
   * For this we use the provided TermsOfService component, which is a simple render prop component.
   * Note that you don't have to worry if the terms of service option was actually enabled via the Form Editor -
   * the component does necessary checks internally and will not render anything if it isn't supposed to.
   */


  var renderTermsOfService = function renderTermsOfService(Bind) {
    return /*#__PURE__*/React.createElement(TermsOfService, null, function (_ref5) {
      var message = _ref5.message,
          errorMessage = _ref5.errorMessage,
          onChange = _ref5.onChange;
      return /*#__PURE__*/React.createElement("div", {
        className: "webiny-fb-form-tos"
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "tosAccepted",
        validators: validation.create("required"),
        afterChange: onChange
      }, function (_ref6) {
        var _onChange = _ref6.onChange,
            value = _ref6.value,
            validation = _ref6.validation;
        return /*#__PURE__*/React.createElement("div", {
          className: "webiny-fb-form-field webiny-fb-form-field--checkbox"
        }, /*#__PURE__*/React.createElement("div", {
          className: "webiny-fb-form-field__checkbox-group"
        }, /*#__PURE__*/React.createElement("div", {
          className: "webiny-fb-form-field__checkbox"
        }, /*#__PURE__*/React.createElement("input", {
          className: "webiny-fb-form-field__checkbox-input",
          type: "checkbox",
          name: "webiny-tos-checkbox",
          id: "webiny-tos-checkbox",
          checked: Boolean(value),
          onChange: function onChange() {
            return _onChange(!value);
          }
        }), /*#__PURE__*/React.createElement("label", {
          htmlFor: "webiny-tos-checkbox",
          className: "webiny-fb-form-field__checkbox-label"
        }, /*#__PURE__*/React.createElement(I18NValue, {
          value: message
        })))), /*#__PURE__*/React.createElement(HelperMessage, {
          isValid: validation.isValid,
          errorMessage: /*#__PURE__*/React.createElement(I18NValue, {
            value: errorMessage
          })
        }));
      }));
    });
  };
  /**
   * Renders the success message.
   */


  var renderSuccessMessage = function renderSuccessMessage() {
    return /*#__PURE__*/React.createElement("div", {
      className: "webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row"
    }, /*#__PURE__*/React.createElement("div", {
      className: "webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column"
    }, /*#__PURE__*/React.createElement("div", {
      className: "webiny-fb-form-form__success-message"
    }, /*#__PURE__*/React.createElement("div", {
      className: "webiny-fb-form-field__label webiny-pb-typography-h3"
    }, /*#__PURE__*/React.createElement(I18NValue, {
      value: formData.settings.successMessage,
      default: "Thanks!"
    })))));
  };
  /**
   * Renders the form submit button. We disable the button if the form is in the loading state.
   */


  var renderSubmitButton = function renderSubmitButton(submit, loading, tosAccepted, buttonLabel) {
    return /*#__PURE__*/React.createElement("div", {
      className: "webiny-fb-form-submit-button"
    }, /*#__PURE__*/React.createElement("button", {
      className: "webiny-fb-form-page-element-button webiny-pb-page-element-button webiny-pb-page-element-button--primary" + (loading ? " webiny-pb-element-button--loading" : ""),
      onClick: submit,
      disabled: loading
    }, /*#__PURE__*/React.createElement(I18NValue, {
      value: buttonLabel,
      default: "Submit"
    })));
  };

  return (
    /*#__PURE__*/

    /* "onSubmit" callback gets triggered once all of the fields are valid. */

    /* We also pass the default values for all fields via the getDefaultValues callback. */
    React.createElement(Form, {
      onSubmit: submitForm,
      data: getDefaultValues()
    }, function (_ref7) {
      var submit = _ref7.submit,
          Bind = _ref7.Bind,
          data = _ref7.data;
      return /*#__PURE__*/React.createElement("div", {
        className: "webiny-fb-form"
      }, formSuccess ? renderSuccessMessage() : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, fields.map(function (row, rowIndex) {
        return /*#__PURE__*/React.createElement("div", {
          key: rowIndex,
          className: "webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row"
        }, row.map(function (field) {
          return field.type !== "hidden" ? renderFieldCell(field, Bind) : renderHiddenField(field, Bind);
        }));
      })), renderTermsOfService(Bind), renderReCaptcha(Bind), renderSubmitButton(submit, loading, data.tosAccepted, formData.settings.submitButtonLabel)));
    })
  );
};

export default DefaultFormLayout;
//# sourceMappingURL=DefaultFormLayout.js.map