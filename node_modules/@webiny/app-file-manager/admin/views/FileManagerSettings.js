import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import * as React from "react";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { ButtonPrimary } from "@webiny/ui/Button";
import { Query, Mutation } from "react-apollo";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Input } from "@webiny/ui/Input";
import graphql from "../graphql";
import { CircularProgress } from "@webiny/ui/Progress";
import get from "lodash.get";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";

var FileManagerSettings = function FileManagerSettings() {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(Query, {
    query: graphql.GET_SETTINGS
  }, function (_ref) {
    var data = _ref.data,
        queryInProgress = _ref.loading;
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: graphql.UPDATE_SETTINGS
    }, function (update, _ref2) {
      var mutationInProgress = _ref2.loading;
      var settings = get(data, "files.getSettings.data") || {};
      return /*#__PURE__*/React.createElement(Form, {
        data: settings,
        onSubmit: /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return update({
                      variables: {
                        data: {
                          uploadMinFileSize: parseFloat(data.uploadMinFileSize),
                          uploadMaxFileSize: parseFloat(data.uploadMaxFileSize)
                        }
                      }
                    });

                  case 2:
                    showSnackbar("Settings updated successfully.");

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref3.apply(this, arguments);
          };
        }()
      }, function (_ref4) {
        var Bind = _ref4.Bind,
            form = _ref4.form,
            data = _ref4.data;
        return /*#__PURE__*/React.createElement(SimpleForm, null, (queryInProgress || mutationInProgress) && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
          title: "General File Manager Settings"
        }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "uploadMinFileSize"
        }, /*#__PURE__*/React.createElement(Input, {
          type: "number",
          label: "Minimum file upload size",
          description: "In bytes"
        }))))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "uploadMaxFileSize"
        }, /*#__PURE__*/React.createElement(Input, {
          type: "number",
          label: "Maximum file upload size",
          description: "In bytes"
        }))))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
          onClick: form.submit
        }, "Save")));
      });
    });
  });
};

export default FileManagerSettings;
//# sourceMappingURL=FileManagerSettings.js.map