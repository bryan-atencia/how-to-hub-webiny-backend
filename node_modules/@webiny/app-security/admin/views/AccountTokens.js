import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject12() {
  var data = _taggedTemplateLiteral(["Create Token"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["Tokens"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["Close"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["Make sure to copy your new personal access token now. You won't be able to see it again!"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["Please copy the token"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["Your Personal Access Token"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["OK"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["Cancel"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Token name"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Create new Personal Access Token"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Token created successfully!"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Close"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import { useApolloClient } from "react-apollo";
import { ButtonDefault, CopyButton } from "@webiny/ui/Button";
import { Form } from "@webiny/form";
import React, { useState } from "react";
import { Typography } from "@webiny/ui/Typography";
import styled from "@emotion/styled";
import { Input } from "@webiny/ui/Input";
import { Dialog, DialogCancel, DialogAccept, DialogTitle, DialogContent, DialogActions, DialogButton } from "@webiny/ui/Dialog";
import { Alert } from "@webiny/ui/Alert";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-security/admin/roles/data-list");
import TokenList from "./PersonalAccessTokens/TokenList";
import { CREATE_PAT } from "./AccountGraphql";
import { validation } from "@webiny/validation";
var Header = /*#__PURE__*/styled("div", {
  target: "efambvh0",
  label: "Header"
})({
  display: "flex",
  justifyContent: "space-between",
  marginBottom: 15
});
var PatContainer = /*#__PURE__*/styled("div", {
  target: "efambvh1",
  label: "PatContainer"
})({
  paddingLeft: "12px",
  paddingRight: "12px",
  background: "var(--mdc-theme-on-background)"
});

var TokensElement = function TokensElement(_ref) {
  var setFormIsLoading = _ref.setFormIsLoading,
      data = _ref.data,
      setValue = _ref.setValue;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showCreatePATDialog = _useState2[0],
      setShowCreatePATDialog = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showPATHashDialog = _useState4[0],
      setShowPATHashDialog = _useState4[1];

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      tokenHash = _useState6[0],
      setTokenHash = _useState6[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var generateToken = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {
      var queryResponse, error, _queryResponse$data$s, token, personalAccessToken, newPATs;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setShowCreatePATDialog(false);
              setFormIsLoading(true);
              _context.next = 4;
              return client.mutate({
                mutation: CREATE_PAT,
                variables: {
                  name: formData.createTokenName,
                  userId: data.id
                }
              });

            case 4:
              queryResponse = _context.sent;
              setFormIsLoading(false);
              error = queryResponse.data.security.createPAT.error;

              if (!error) {
                _context.next = 9;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message, {
                action: t(_templateObject())
              }));

            case 9:
              _queryResponse$data$s = queryResponse.data.security.createPAT.data, token = _queryResponse$data$s.token, personalAccessToken = _queryResponse$data$s.pat;

              if (!data.personalAccessTokens) {
                newPATs = [personalAccessToken];
              } else {
                newPATs = [personalAccessToken].concat(_toConsumableArray(data.personalAccessTokens));
              }

              setValue("personalAccessTokens", newPATs);
              setTokenHash(token);
              setShowPATHashDialog(true);
              showSnackbar(t(_templateObject2()));

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function generateToken(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {
    onSubmit: generateToken,
    submitOnEnter: true
  }, function (_ref3) {
    var Bind = _ref3.Bind,
        form = _ref3.form;
    return /*#__PURE__*/React.createElement(Dialog, {
      open: showCreatePATDialog,
      onClose: function onClose() {
        return setShowCreatePATDialog(false);
      },
      "data-testid": "account-tokens-dialog"
    }, /*#__PURE__*/React.createElement(DialogTitle, null, t(_templateObject3())), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Bind, {
      name: "createTokenName",
      validators: validation.create("required,maxLength:100")
    }, /*#__PURE__*/React.createElement(Input, {
      label: t(_templateObject4())
    }))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, null, t(_templateObject5())), /*#__PURE__*/React.createElement(DialogButton, {
      "data-testid": "accept-generate-token",
      onClick: form.submit
    }, t(_templateObject6()))));
  }), /*#__PURE__*/React.createElement(Dialog, {
    open: showPATHashDialog,
    onClose: function onClose() {
      return setShowPATHashDialog(false);
    },
    "data-testid": "created-token-dialog"
  }, /*#__PURE__*/React.createElement(DialogTitle, null, t(_templateObject7())), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Alert, {
    title: t(_templateObject8()),
    type: "info"
  }, t(_templateObject9())), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      alignItems: "center"
    }
  }, /*#__PURE__*/React.createElement(PatContainer, null, /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, tokenHash)), /*#__PURE__*/React.createElement(CopyButton, {
    value: tokenHash
  })))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogAccept, null, t(_templateObject10())))), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Typography, {
    style: {
      lineHeight: "2.4rem"
    },
    use: "overline"
  }, t(_templateObject11())), /*#__PURE__*/React.createElement(ButtonDefault, {
    onClick: function onClick() {
      return setShowCreatePATDialog(true);
    }
  }, t(_templateObject12()))), /*#__PURE__*/React.createElement("div", {
    "data-testid": "pat-tokens-list"
  }, /*#__PURE__*/React.createElement(TokenList, {
    setFormIsLoading: setFormIsLoading,
    data: data,
    setValue: setValue
  })));
};

export default TokensElement;
//# sourceMappingURL=AccountTokens.js.map