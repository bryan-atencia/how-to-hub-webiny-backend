{"version":3,"sources":["../../../src/admin/views/Account.tsx"],"names":["React","useReducer","useEffect","gql","get","useApolloClient","useHandler","i18n","Form","getPlugin","Input","ButtonPrimary","useSnackbar","CircularProgress","AvatarImage","validation","useSecurity","AccuntTokens","SimpleForm","SimpleFormHeader","SimpleFormFooter","SimpleFormContent","Cell","Grid","t","ns","GET_CURRENT_USER","UPDATE_CURRENT_USER","UserAccountForm","auth","Error","prev","next","loading","user","data","setState","setIsLoading","client","showSnackbar","security","onSubmit","formData","mutate","mutation","variables","response","error","updateCurrentUser","message","action","refreshUser","query","then","form","Bind","setValue","marginBottom","zIndex","createElement","view","fields","firstName","create","lastName","email","personalAccessTokens","submit"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { omit } from \"lodash\";\nimport { get } from \"dot-prop-immutable\";\nimport { useApolloClient } from \"react-apollo\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Form } from \"@webiny/form\";\nimport { getPlugin } from \"@webiny/plugins\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport AvatarImage from \"./Components/AvatarImage\";\nimport { validation } from \"@webiny/validation\";\nimport { useSecurity } from \"@webiny/app-security/hooks/useSecurity\";\nimport AccuntTokens from \"./AccountTokens\";\n\nimport {\n    SimpleForm,\n    SimpleFormHeader,\n    SimpleFormFooter,\n    SimpleFormContent\n} from \"@webiny/app-admin/components/SimpleForm\";\n\nimport { SecurityViewUserAccountFormPlugin } from \"@webiny/app-security/types\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\n\nconst t = i18n.ns(\"app-security/admin/account-form\");\n\nconst GET_CURRENT_USER = gql`\n    {\n        security {\n            getCurrentUser {\n                data {\n                    id\n                    email\n                    firstName\n                    lastName\n                    avatar {\n                        id\n                        src\n                    }\n                    personalAccessTokens {\n                        id\n                        name\n                        token\n                    }\n                }\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n`;\n\nconst UPDATE_CURRENT_USER = gql`\n    mutation updateMe($data: SecurityCurrentUserInput!) {\n        security {\n            updateCurrentUser(data: $data) {\n                data {\n                    id\n                    email\n                    avatar {\n                        id\n                        src\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst UserAccountForm = () => {\n    const auth = getPlugin<SecurityViewUserAccountFormPlugin>(\"security-view-user-account-form\");\n\n    if (!auth) {\n        throw Error(\n            `You must register a \"security-view-user-account-form\" plugin to render Account form!`\n        );\n    }\n\n    const [{ loading, user }, setState] = useReducer((prev, next) => ({ ...prev, ...next }), {\n        loading: true,\n        user: { data: {} }\n    });\n    const setIsLoading = loading => setState({ loading });\n\n    const client = useApolloClient();\n    const { showSnackbar } = useSnackbar();\n    const security = useSecurity();\n\n    const onSubmit = useHandler(null, () => async formData => {\n        setState({ loading: true });\n        const { data: response } = await client.mutate({\n            mutation: UPDATE_CURRENT_USER,\n            variables: { data: omit(formData, [\"id\", \"personalAccessTokens\"]) }\n        });\n        const { error } = response.security.updateCurrentUser;\n        setState({ loading: false });\n        if (error) {\n            return showSnackbar(error.message, {\n                action: \"Close\"\n            });\n        }\n\n        security.refreshUser();\n        showSnackbar(\"Account saved successfully!\");\n    });\n\n    useEffect(() => {\n        client.query({ query: GET_CURRENT_USER }).then(({ data }) => {\n            setState({ loading: false, user: get(data, \"security.getCurrentUser\") });\n        });\n    }, []);\n\n    return (\n        <Grid>\n            <Cell span={3} />\n            <Cell span={6}>\n                <Form data={user.data} onSubmit={onSubmit}>\n                    {({ data, form, Bind, setValue }) => (\n                        <>\n                            <div style={{ marginBottom: \"32px\" }}>\n                                <Bind name=\"avatar\">\n                                    <AvatarImage round />\n                                </Bind>\n                            </div>\n                            <SimpleForm>\n                                {loading && <CircularProgress style={{ zIndex: 3 }} />}\n                                <SimpleFormHeader title={\"Account\"} />\n                                <SimpleFormContent>\n                                    {React.createElement(auth.view, {\n                                        Bind,\n                                        data,\n                                        fields: {\n                                            firstName: (\n                                                <Bind\n                                                    name=\"firstName\"\n                                                    validators={validation.create(\"required\")}\n                                                >\n                                                    <Input label={t`First Name`} />\n                                                </Bind>\n                                            ),\n                                            lastName: (\n                                                <Bind\n                                                    name=\"lastName\"\n                                                    validators={validation.create(\"required\")}\n                                                >\n                                                    <Input label={t`Last Name`} />\n                                                </Bind>\n                                            ),\n                                            email: (\n                                                <Bind\n                                                    name=\"email\"\n                                                    validators={validation.create(\"required\")}\n                                                >\n                                                    <Input label={t`E-mail`} />\n                                                </Bind>\n                                            ),\n                                            personalAccessTokens: (\n                                                <Bind name=\"personalAccessTokens\">\n                                                    <AccuntTokens\n                                                        data={data}\n                                                        setValue={setValue}\n                                                        setFormIsLoading={setIsLoading}\n                                                    />\n                                                </Bind>\n                                            )\n                                        }\n                                    })}\n                                </SimpleFormContent>\n                                <SimpleFormFooter>\n                                    <ButtonPrimary\n                                        onClick={form.submit}\n                                    >{t`Update account`}</ButtonPrimary>\n                                </SimpleFormFooter>\n                            </SimpleForm>\n                        </>\n                    )}\n                </Form>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default UserAccountForm;\n"],"file":"Account.js"}