import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject9() {
  var data = _taggedTemplateLiteral(["Are you sure you want to delete this token?"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["Delete Token"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["OK"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["Token name"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["Update Token"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Token updated successfully!"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Close"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Token deleted successfully!"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Close"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useState } from "react";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useApolloClient } from "react-apollo";
import { DELETE_PAT, UPDATE_PAT } from "@webiny/app-security/admin/views/AccountGraphql";
import { Dialog, DialogAccept, DialogActions, DialogCancel, DialogContent, DialogTitle } from "@webiny/ui/Dialog";
import { Input } from "@webiny/ui/Input";
import { ListItemMeta, SimpleListItem } from "@webiny/ui/List";
import { IconButton } from "@webiny/ui/Button";
import { ReactComponent as EditIcon } from "@svgr/webpack!@webiny/app-security/admin/assets/icons/edit-24px.svg";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!@webiny/app-security/admin/assets/icons/delete-24px.svg";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-security/admin/roles/data-list");

var TokenListItem = function TokenListItem(_ref) {
  var setFormIsLoading = _ref.setFormIsLoading,
      data = _ref.data,
      setValue = _ref.setValue,
      PAT = _ref.PAT;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showEditDialog = _useState2[0],
      setShowEditDialog = _useState2[1];

  var _useState3 = useState(PAT.name),
      _useState4 = _slicedToArray(_useState3, 2),
      tokenName = _useState4[0],
      setTokenName = _useState4[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var deleteToken = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var queryResponse, error, newPATs;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setFormIsLoading(true);
              _context.next = 3;
              return client.mutate({
                mutation: DELETE_PAT,
                variables: {
                  id: PAT.id
                }
              });

            case 3:
              queryResponse = _context.sent;
              setFormIsLoading(false);
              error = queryResponse.data.security.deletePAT.error;

              if (!error) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message, {
                action: t(_templateObject())
              }));

            case 8:
              newPATs = data.personalAccessTokens.filter(function (crtPAT) {
                return crtPAT.id != PAT.id;
              });
              setValue("personalAccessTokens", newPATs);
              showSnackbar(t(_templateObject2()));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function deleteToken() {
      return _ref2.apply(this, arguments);
    };
  }();

  var updateToken = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var queryResponse, error, newPATs;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              setFormIsLoading(true);
              _context2.next = 3;
              return client.mutate({
                mutation: UPDATE_PAT,
                variables: {
                  id: PAT.id,
                  data: {
                    name: tokenName
                  }
                }
              });

            case 3:
              queryResponse = _context2.sent;
              setFormIsLoading(false);
              error = queryResponse.data.security.updatePAT.error;

              if (!error) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt("return", showSnackbar(error.message, {
                action: t(_templateObject3())
              }));

            case 8:
              newPATs = data.personalAccessTokens.map(function (crtPAT) {
                return crtPAT !== PAT ? crtPAT : _objectSpread(_objectSpread({}, crtPAT), {}, {
                  name: tokenName
                });
              });
              setValue("personalAccessTokens", newPATs);
              showSnackbar(t(_templateObject4()));

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function updateToken() {
      return _ref3.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dialog, {
    open: showEditDialog,
    onClose: function onClose() {
      return setShowEditDialog(false);
    },
    "data-testid": "update-personal-account-token-dialog"
  }, /*#__PURE__*/React.createElement(DialogTitle, null, t(_templateObject5())), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Input, {
    label: t(_templateObject6()),
    value: tokenName,
    onChange: function onChange(newName) {
      return setTokenName(newName.slice(0, 100));
    }
  })), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, null, "Cancel"), /*#__PURE__*/React.createElement(DialogAccept, {
    "data-testid": "AcceptUpdateToken-".concat(PAT.id),
    onClick: function onClick() {
      return updateToken();
    }
  }, t(_templateObject7())))), /*#__PURE__*/React.createElement(SimpleListItem, {
    "data-testid": "pat-tokens-list-item",
    key: PAT.id,
    text: /*#__PURE__*/React.createElement("div", {
      style: {
        paddingLeft: "16px"
      }
    }, PAT.name)
  }, /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(IconButton, {
    "data-testid": "update-personal-access-token",
    onClick: function onClick() {
      return setShowEditDialog(true);
    },
    icon: /*#__PURE__*/React.createElement(EditIcon, null)
  }), /*#__PURE__*/React.createElement(ConfirmationDialog, {
    "data-testid": "delete-personal-access-token-dialog",
    title: t(_templateObject8()),
    message: t(_templateObject9())
  }, function (_ref4) {
    var showConfirmation = _ref4.showConfirmation;
    return /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "delete-personal-access-token",
      onClick: function onClick() {
        return showConfirmation(function () {
          return deleteToken();
        });
      },
      icon: /*#__PURE__*/React.createElement(DeleteIcon, null)
    });
  }))));
};

export default TokenListItem;
//# sourceMappingURL=TokenListItem.js.map