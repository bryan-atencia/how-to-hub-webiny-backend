import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _omit from "lodash/omit";

function _templateObject6() {
  var data = _taggedTemplateLiteral(["Update account"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["E-mail"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Last Name"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["First Name"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    mutation updateMe($data: SecurityCurrentUserInput!) {\n        security {\n            updateCurrentUser(data: $data) {\n                data {\n                    id\n                    email\n                    avatar {\n                        id\n                        src\n                    }\n                }\n            }\n        }\n    }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    {\n        security {\n            getCurrentUser {\n                data {\n                    id\n                    email\n                    firstName\n                    lastName\n                    avatar {\n                        id\n                        src\n                    }\n                    personalAccessTokens {\n                        id\n                        name\n                        token\n                    }\n                }\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useReducer, useEffect } from "react";
import gql from "graphql-tag";
import { get } from "dot-prop-immutable";
import { useApolloClient } from "react-apollo";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { i18n } from "@webiny/app/i18n";
import { Form } from "@webiny/form";
import { getPlugin } from "@webiny/plugins";
import { Input } from "@webiny/ui/Input";
import { ButtonPrimary } from "@webiny/ui/Button";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CircularProgress } from "@webiny/ui/Progress";
import AvatarImage from "./Components/AvatarImage";
import { validation } from "@webiny/validation";
import { useSecurity } from "@webiny/app-security/hooks/useSecurity";
import AccuntTokens from "./AccountTokens";
import { SimpleForm, SimpleFormHeader, SimpleFormFooter, SimpleFormContent } from "@webiny/app-admin/components/SimpleForm";
import { Cell, Grid } from "@webiny/ui/Grid";
var t = i18n.ns("app-security/admin/account-form");
var GET_CURRENT_USER = gql(_templateObject());
var UPDATE_CURRENT_USER = gql(_templateObject2());

var UserAccountForm = function UserAccountForm() {
  var auth = getPlugin("security-view-user-account-form");

  if (!auth) {
    throw Error("You must register a \"security-view-user-account-form\" plugin to render Account form!");
  }

  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {
    loading: true,
    user: {
      data: {}
    }
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      loading = _useReducer2$.loading,
      user = _useReducer2$.user,
      setState = _useReducer2[1];

  var setIsLoading = function setIsLoading(loading) {
    return setState({
      loading: loading
    });
  };

  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var security = useSecurity();
  var onSubmit = useHandler(null, function () {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {
        var _yield$client$mutate, response, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setState({
                  loading: true
                });
                _context.next = 3;
                return client.mutate({
                  mutation: UPDATE_CURRENT_USER,
                  variables: {
                    data: _omit(formData, ["id", "personalAccessTokens"])
                  }
                });

              case 3:
                _yield$client$mutate = _context.sent;
                response = _yield$client$mutate.data;
                error = response.security.updateCurrentUser.error;
                setState({
                  loading: false
                });

                if (!error) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt("return", showSnackbar(error.message, {
                  action: "Close"
                }));

              case 9:
                security.refreshUser();
                showSnackbar("Account saved successfully!");

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  });
  useEffect(function () {
    client.query({
      query: GET_CURRENT_USER
    }).then(function (_ref2) {
      var data = _ref2.data;
      setState({
        loading: false,
        user: get(data, "security.getCurrentUser")
      });
    });
  }, []);
  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 3
  }), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Form, {
    data: user.data,
    onSubmit: onSubmit
  }, function (_ref3) {
    var data = _ref3.data,
        form = _ref3.form,
        Bind = _ref3.Bind,
        setValue = _ref3.setValue;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      style: {
        marginBottom: "32px"
      }
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "avatar"
    }, /*#__PURE__*/React.createElement(AvatarImage, {
      round: true
    }))), /*#__PURE__*/React.createElement(SimpleForm, null, loading && /*#__PURE__*/React.createElement(CircularProgress, {
      style: {
        zIndex: 3
      }
    }), /*#__PURE__*/React.createElement(SimpleFormHeader, {
      title: "Account"
    }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(auth.view, {
      Bind: Bind,
      data: data,
      fields: {
        firstName: /*#__PURE__*/React.createElement(Bind, {
          name: "firstName",
          validators: validation.create("required")
        }, /*#__PURE__*/React.createElement(Input, {
          label: t(_templateObject3())
        })),
        lastName: /*#__PURE__*/React.createElement(Bind, {
          name: "lastName",
          validators: validation.create("required")
        }, /*#__PURE__*/React.createElement(Input, {
          label: t(_templateObject4())
        })),
        email: /*#__PURE__*/React.createElement(Bind, {
          name: "email",
          validators: validation.create("required")
        }, /*#__PURE__*/React.createElement(Input, {
          label: t(_templateObject5())
        })),
        personalAccessTokens: /*#__PURE__*/React.createElement(Bind, {
          name: "personalAccessTokens"
        }, /*#__PURE__*/React.createElement(AccuntTokens, {
          data: data,
          setValue: setValue,
          setFormIsLoading: setIsLoading
        }))
      }
    })), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: form.submit
    }, t(_templateObject6())))));
  })));
};

export default UserAccountForm;
//# sourceMappingURL=Account.js.map