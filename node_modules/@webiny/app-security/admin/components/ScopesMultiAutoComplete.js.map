{"version":3,"sources":["../../../src/admin/components/ScopesMultiAutoComplete.tsx"],"names":["React","useEffect","useState","i18n","MultiAutoComplete","getPlugins","Typography","css","t","ns","styles","wrapper","maxHeight","ScopesMultiAutoComplete","props","scopesList","setScopesList","getScopesList","plugins","scopes","i","length","plugin","Error","name","pluginScopes","push","map","scope","item","find","current","title","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { MultiAutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { SecurityScopesListPlugin } from \"@webiny/app-security/types\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { css } from \"emotion\";\n\nconst t = i18n.ns(\"app-security/admin/roles/form\");\n\nconst styles = {\n    wrapper: css({\n        \".mdc-elevation--z1\": {\n            maxHeight: 275\n        }\n    })\n};\n\nconst ScopesMultiAutoComplete = props => {\n    const [scopesList, setScopesList] = useState([]);\n\n    useEffect(() => {\n        const getScopesList = async () => {\n            const plugins = getPlugins<SecurityScopesListPlugin>(\"security-scopes-list\");\n            const scopes = [];\n            for (let i = 0; i < plugins.length; i++) {\n                const plugin = plugins[i];\n                if (!plugin.scopes) {\n                    throw new Error(\n                        `Missing \"scopes\" key in registered \"security-scopes-list\" plugin. The name of the plugin is \"${plugin.name ||\n                            \"undefined\"}\"`\n                    );\n                }\n\n                let pluginScopes = plugin.scopes;\n\n                if (typeof pluginScopes === \"function\") {\n                    pluginScopes = await pluginScopes();\n                }\n\n                scopes.push(...pluginScopes);\n            }\n\n            setScopesList(scopes);\n        };\n\n        getScopesList();\n    }, []);\n\n    return (\n        <span className={styles.wrapper}>\n            <MultiAutoComplete\n                useSimpleValues\n                options={scopesList.map(({ scope }) => scope)}\n                label={t`Scopes`}\n                description={t`Choose one or more scopes.`}\n                unique\n                renderItem={item => {\n                    const scope = scopesList.find(current => current.scope === item);\n\n                    return (\n                        <>\n                            <div>\n                                <strong>\n                                    <Typography use={\"subtitle1\"}>\n                                        <strong>{scope.title}</strong>\n                                    </Typography>\n                                </strong>\n                            </div>\n                            <div>\n                                <Typography use={\"subtitle2\"}>{scope.description}</Typography>\n                            </div>\n                            <div>\n                                <Typography use={\"caption\"}>{scope.scope}</Typography>\n                            </div>\n                        </>\n                    );\n                }}\n                {...props}\n            />\n        </span>\n    );\n};\n\nexport default ScopesMultiAutoComplete;\n"],"file":"ScopesMultiAutoComplete.js"}