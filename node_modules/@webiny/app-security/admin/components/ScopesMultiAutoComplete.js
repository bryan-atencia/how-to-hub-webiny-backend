import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Choose one or more scopes."]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Scopes"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useEffect, useState } from "react";
import { i18n } from "@webiny/app/i18n";
import { MultiAutoComplete } from "@webiny/ui/AutoComplete";
import { getPlugins } from "@webiny/plugins";
import { Typography } from "@webiny/ui/Typography";
import { css } from "emotion";
var t = i18n.ns("app-security/admin/roles/form");
var styles = {
  wrapper: /*#__PURE__*/css({
    ".mdc-elevation--z1": {
      maxHeight: 275
    }
  }, "label:wrapper;")
};

var ScopesMultiAutoComplete = function ScopesMultiAutoComplete(props) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      scopesList = _useState2[0],
      setScopesList = _useState2[1];

  useEffect(function () {
    var getScopesList = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var plugins, scopes, i, plugin, pluginScopes;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                plugins = getPlugins("security-scopes-list");
                scopes = [];
                i = 0;

              case 3:
                if (!(i < plugins.length)) {
                  _context.next = 16;
                  break;
                }

                plugin = plugins[i];

                if (plugin.scopes) {
                  _context.next = 7;
                  break;
                }

                throw new Error("Missing \"scopes\" key in registered \"security-scopes-list\" plugin. The name of the plugin is \"".concat(plugin.name || "undefined", "\""));

              case 7:
                pluginScopes = plugin.scopes;

                if (!(typeof pluginScopes === "function")) {
                  _context.next = 12;
                  break;
                }

                _context.next = 11;
                return pluginScopes();

              case 11:
                pluginScopes = _context.sent;

              case 12:
                scopes.push.apply(scopes, _toConsumableArray(pluginScopes));

              case 13:
                i++;
                _context.next = 3;
                break;

              case 16:
                setScopesList(scopes);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function getScopesList() {
        return _ref.apply(this, arguments);
      };
    }();

    getScopesList();
  }, []);
  return /*#__PURE__*/React.createElement("span", {
    className: styles.wrapper
  }, /*#__PURE__*/React.createElement(MultiAutoComplete, Object.assign({
    useSimpleValues: true,
    options: scopesList.map(function (_ref2) {
      var scope = _ref2.scope;
      return scope;
    }),
    label: t(_templateObject()),
    description: t(_templateObject2()),
    unique: true,
    renderItem: function renderItem(item) {
      var scope = scopesList.find(function (current) {
        return current.scope === item;
      });
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("strong", null, /*#__PURE__*/React.createElement(Typography, {
        use: "subtitle1"
      }, /*#__PURE__*/React.createElement("strong", null, scope.title)))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, {
        use: "subtitle2"
      }, scope.description)), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, {
        use: "caption"
      }, scope.scope)));
    }
  }, props)));
};

export default ScopesMultiAutoComplete;
//# sourceMappingURL=ScopesMultiAutoComplete.js.map