{"version":3,"sources":["../../../src/admin/plugins/installation.tsx"],"names":["gql","React","useState","useCallback","useApolloClient","Form","i18n","ButtonPrimary","Input","Checkbox","Alert","Typography","Grid","Cell","CircularProgress","validation","getPlugin","SimpleForm","SimpleFormHeader","SimpleFormFooter","SimpleFormContent","t","ns","IS_INSTALLED","INSTALL","Install","onInstalled","auth","Error","client","loading","setLoading","authUserMessage","setAuthUserMessage","error","setError","onSubmit","subscribed","form","data","mutate","mutation","variables","res","security","install","authUser","fetch","encodeURIComponent","email","method","headers","privacyPolicyLink","Bind","submit","createElement","view","fields","firstName","create","lastName","name","type","secure","title","isInstalled","query","render"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\nimport React, { useState, useCallback } from \"react\";\nimport { useApolloClient } from \"react-apollo\";\nimport { Form } from \"@webiny/form\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Checkbox } from \"@webiny/ui/Checkbox\";\nimport { Alert } from \"@webiny/ui/Alert\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { validation } from \"@webiny/validation\";\nimport { getPlugin } from \"@webiny/plugins\";\nimport {\n    SimpleForm,\n    SimpleFormHeader,\n    SimpleFormFooter,\n    SimpleFormContent\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport { SecurityViewInstallationFormPlugin } from \"@webiny/app-security/types\";\n\nconst t = i18n.ns(\"app-security/admin/installation\");\n\nconst IS_INSTALLED = gql`\n    {\n        security {\n            isInstalled {\n                data\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n`;\n\nconst INSTALL = gql`\n    mutation InstallSecurity($data: SecurityInstallInput!) {\n        security {\n            install(data: $data) {\n                data {\n                    user\n                    authUser\n                }\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n`;\n\nconst Install = ({ onInstalled }) => {\n    const auth = getPlugin<SecurityViewInstallationFormPlugin>(\"security-view-install-form\");\n\n    if (!auth) {\n        throw Error(\n            `You must register a \"security-view-install-form\" plugin to render installation form!`\n        );\n    }\n\n    const client = useApolloClient();\n    const [loading, setLoading] = useState(false);\n    const [authUserMessage, setAuthUserMessage] = useState(null);\n    const [error, setError] = useState(null);\n\n    const onSubmit = useCallback(async ({ subscribed, ...form }) => {\n        setLoading(true);\n        setError(null);\n        if (typeof auth.onSubmit === \"function\") {\n            try {\n                await auth.onSubmit({ data: form });\n            } catch (err) {\n                setLoading(false);\n                setError(err);\n                return;\n            }\n        }\n\n        const { data: res } = await client.mutate({ mutation: INSTALL, variables: { data: form } });\n        setLoading(false);\n        const { error, data } = res.security.install;\n        if (error) {\n            setError(error);\n            return;\n        }\n\n        if (!data.authUser) {\n            setAuthUserMessage(true);\n            return;\n        }\n\n        if (subscribed) {\n            try {\n                await fetch(\n                    \"https://app.mailerlite.com/webforms/submit/g9f1i1?fields%5Bemail%5D=\" +\n                        encodeURIComponent(form.email) +\n                        \"&ml-submit=1&ajax=1\",\n                    {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/x-www-form-urlencoded\"\n                        }\n                    }\n                );\n            } catch (err) {\n                setError(\"Unable to subscribe you to the newsletter \" + err);\n            }\n        }\n\n        onInstalled();\n    }, []);\n\n    const privacyPolicyLink = <a href=\"https://www.webiny.com/privacy-policy\">privacy policy</a>;\n\n    return (\n        <Form onSubmit={onSubmit} submitOnEnter>\n            {({ data, Bind, submit }) => (\n                <SimpleForm>\n                    {loading && <CircularProgress />}\n                    <SimpleFormHeader title={\"Install Security\"} />\n                    <SimpleFormContent>\n                        {authUserMessage && (\n                            <Grid>\n                                <Cell span={12}>\n                                    <Alert type={\"success\"} title={\"Success\"}>\n                                        Admin user created successfully!\n                                    </Alert>\n                                </Cell>\n                                <Cell span={12}>\n                                    <Typography use={\"body1\"}>\n                                        However, there already is a user with the same email address\n                                        on your authentication provider. For security reasons, the\n                                        password you provided was not applied.\n                                    </Typography>\n                                </Cell>\n                                <Cell span={12}>\n                                    <Typography use={\"body1\"}>\n                                        If you are the owner of that account, simply use your\n                                        credentials to login, when prompted.\n                                    </Typography>\n                                </Cell>\n                            </Grid>\n                        )}\n                        {!authUserMessage &&\n                            React.createElement(auth.view, {\n                                Bind,\n                                data,\n                                error,\n                                fields: {\n                                    firstName: (\n                                        <Bind\n                                            name=\"firstName\"\n                                            validators={validation.create(\"required\")}\n                                        >\n                                            <Input label={t`First Name`} />\n                                        </Bind>\n                                    ),\n                                    lastName: (\n                                        <Bind\n                                            name=\"lastName\"\n                                            validators={validation.create(\"required\")}\n                                        >\n                                            <Input label={t`Last Name`} />\n                                        </Bind>\n                                    ),\n                                    email: (\n                                        <Bind\n                                            name=\"email\"\n                                            validators={validation.create(\"required,email\")}\n                                        >\n                                            <Input label={t`E-mail`} />\n                                        </Bind>\n                                    )\n                                }\n                            })}\n                        {!authUserMessage && (\n                            <Grid>\n                                <Cell span={12}>\n                                    <Bind name=\"subscribed\">\n                                        <Checkbox\n                                            label={\n                                                <span>\n                                                    I want to receive updates on product\n                                                    improvements and new features. Doing so I accept\n                                                    Webiny's {privacyPolicyLink}.\n                                                </span>\n                                            }\n                                        />\n                                    </Bind>\n                                </Cell>\n                            </Grid>\n                        )}\n                    </SimpleFormContent>\n                    <SimpleFormFooter>\n                        {!authUserMessage && (\n                            <ButtonPrimary data-testid=\"install-security-button\" onClick={submit}>\n                                Install security\n                            </ButtonPrimary>\n                        )}\n                        {authUserMessage && (\n                            <ButtonPrimary onClick={onInstalled}>\n                                OK, finish installation!\n                            </ButtonPrimary>\n                        )}\n                    </SimpleFormFooter>\n                </SimpleForm>\n            )}\n        </Form>\n    );\n};\n\nexport default [\n    {\n        name: \"installation-security\",\n        type: \"admin-installation\",\n        secure: false,\n        title: \"Security app\",\n        async isInstalled({ client }) {\n            const { data } = await client.query({ query: IS_INSTALLED });\n            return data.security.isInstalled.data;\n        },\n        render({ onInstalled }) {\n            return <Install onInstalled={onInstalled} />;\n        }\n    }\n];\n"],"file":"installation.js"}