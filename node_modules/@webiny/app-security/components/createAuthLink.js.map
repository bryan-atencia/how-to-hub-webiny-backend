{"version":3,"sources":["../../src/components/createAuthLink.ts"],"names":["ApolloLink","Observable","localStorage","token","operation","forward","tokenValue","get","setContext","headers","Authorization","observable","unsetTokenCodes","observer","subscription","subscribe","next","data","errors","forEach","error","code","includes","remove","bind","complete","unsubscribe"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,aAAvC;AACA,OAAOC,YAAP,MAAyB,OAAzB;AAGA,gBAAe,YAA2C;AAAA,iFAA9B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA8B;AAAA,MAAxCA,KAAwC,QAAxCA,KAAwC;;AACtD,SAAO,IAAIH,UAAJ,CAAe,UAACI,SAAD,EAAYC,OAAZ,EAAwB;AAC1C,QAAMC,UAAU,GAAGJ,YAAY,CAACK,GAAb,CAAiBJ,KAAjB,CAAnB;;AACA,QAAIG,UAAJ,EAAgB;AACZF,MAAAA,SAAS,CAACI,UAAV,CAAqB;AACjBC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAEJ;AADV;AADQ,OAArB;AAKH;;AAED,QAAMK,UAAU,GAAGN,OAAO,CAACD,SAAD,CAA1B;AAEA,QAAMQ,eAAe,GAAG,CAAC,eAAD,EAAkB,eAAlB,CAAxB;AAEA,WAAO,IAAIX,UAAJ,CAAe,UAAAY,QAAQ,EAAI;AAC9B,UAAMC,YAAY,GAAGH,UAAU,CAACI,SAAX,CAAqB;AACtCC,QAAAA,IAAI,EAAE,cAAAC,IAAI,EAAI;AACV,cAAIA,IAAI,CAACC,MAAT,EAAiB;AACbD,YAAAA,IAAI,CAACC,MAAL,CAAYC,OAAZ,CAAoB,UAACC,KAAD,EAAgB;AAChC,kBAAMC,IAAI,GAAG,KAAID,KAAJ,EAAW,2BAAX,EAAwCA,KAAK,CAACC,IAA9C,CAAb;;AACA,kBAAIT,eAAe,CAACU,QAAhB,CAAyBD,IAAzB,CAAJ,EAAoC;AAChCnB,gBAAAA,YAAY,CAACqB,MAAb,CAAoBpB,KAApB;AACH;AACJ,aALD;AAMH;;AACD,iBAAOU,QAAQ,CAACG,IAAT,CAAcQ,IAAd,CAAmBX,QAAnB,EAA6BI,IAA7B,CAAP;AACH,SAXqC;AAYtCG,QAAAA,KAAK,EAAEP,QAAQ,CAACO,KAAT,CAAeI,IAAf,CAAoBX,QAApB,CAZ+B;AAatCY,QAAAA,QAAQ,EAAEZ,QAAQ,CAACY,QAAT,CAAkBD,IAAlB,CAAuBX,QAAvB;AAb4B,OAArB,CAArB;AAgBA,aAAO,YAAM;AACTC,QAAAA,YAAY,CAACY,WAAb;AACH,OAFD;AAGH,KApBM,CAAP;AAqBH,GAnCM,CAAP;AAoCH,CArCD","sourcesContent":["import { ApolloLink, Observable } from \"apollo-link\";\nimport localStorage from \"store\";\nimport { get } from \"lodash\";\n\nexport default ({ token } = { token: \"webiny-token\" }) => {\n    return new ApolloLink((operation, forward) => {\n        const tokenValue = localStorage.get(token);\n        if (tokenValue) {\n            operation.setContext({\n                headers: {\n                    Authorization: tokenValue\n                }\n            });\n        }\n\n        const observable = forward(operation);\n\n        const unsetTokenCodes = [\"TOKEN_EXPIRED\", \"TOKEN_INVALID\"];\n\n        return new Observable(observer => {\n            const subscription = observable.subscribe({\n                next: data => {\n                    if (data.errors) {\n                        data.errors.forEach((error: any) => {\n                            const code = get(error, \"extensions.exception.code\", error.code);\n                            if (unsetTokenCodes.includes(code)) {\n                                localStorage.remove(token);\n                            }\n                        });\n                    }\n                    return observer.next.bind(observer)(data);\n                },\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n            });\n\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n    });\n};\n"],"file":"createAuthLink.js"}