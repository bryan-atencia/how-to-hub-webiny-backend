import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _upperFirst from "lodash/upperFirst";
import _get from "lodash/get";

var Identity = /*#__PURE__*/function () {
  function Identity(data) {
    _classCallCheck(this, Identity);

    _defineProperty(this, "data", null);

    this.data = data;
  }

  _createClass(Identity, [{
    key: "isLoggedIn",
    value: function isLoggedIn() {
      return !!this.data;
    }
  }, {
    key: "hasFullAccess",
    value: function hasFullAccess() {
      return !!_get(this.data, "access.fullAccess");
    }
  }, {
    key: "getScopes",
    value: function getScopes() {
      return _get(this.data, "access.scopes") || [];
    }
  }, {
    key: "hasScope",
    value: function hasScope(scope) {
      return this.getScopes().includes(scope);
    }
  }, {
    key: "hasScopes",
    value: function hasScopes(scopes, options) {
      return this.__hasResources({
        type: "scope",
        resources: scopes,
        options: options
      });
    }
  }, {
    key: "__hasResources",
    value: function __hasResources(_ref) {
      var type = _ref.type,
          resources = _ref.resources,
          _ref$options = _ref.options,
          options = _ref$options === void 0 ? {} : _ref$options;
      // "hasScope" or "hasRole".
      var hasResourceMethod = "has".concat(_upperFirst(type));

      if (Array.isArray(resources)) {
        if (!this.isLoggedIn()) {
          return false;
        }

        if (this.hasFullAccess()) {
          return true;
        }

        for (var i = 0; i < resources.length; i++) {
          if (!this[hasResourceMethod](resources[i])) {
            return false;
          }
        }

        return true;
      }

      var result = {};

      if (!this.isLoggedIn()) {
        if (options.forceBoolean) {
          return false;
        }

        for (var _key in resources) {
          result[_key] = false;
        }

        return result;
      }

      if (this.hasFullAccess()) {
        if (options.forceBoolean) {
          return true;
        }

        for (var _key2 in resources) {
          result[_key2] = true;
        }

        return result;
      }

      for (var _key3 in resources) {
        result[_key3] = true;
        var resourcesToCheck = resources[_key3];

        for (var _i = 0; _i < resourcesToCheck.length; _i++) {
          var resourceToCheck = resourcesToCheck[_i];

          if (!this[hasResourceMethod](resourceToCheck)) {
            if (options.forceBoolean) {
              return false;
            }

            result[_key3] = false;
            break;
          }
        }
      }

      if (options.forceBoolean) {
        return true;
      }

      return result;
    }
  }]);

  return Identity;
}();

var identity = new Identity();
export var getIdentity = function getIdentity() {
  return identity;
};
export var setIdentity = function setIdentity(data) {
  identity = new Identity(data);
};
//# sourceMappingURL=identity.js.map