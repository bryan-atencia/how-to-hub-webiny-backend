import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import store from "store";
import observe from "store/plugins/observe";
store.addPlugin(observe);
var LOCAL_STORAGE_KEY = "webiny_dark_mode";
export var ThemeContext = React.createContext(null);
export var ThemeProvider = /*#__PURE__*/function (_React$Component) {
  _inherits(ThemeProvider, _React$Component);

  var _super = _createSuper(ThemeProvider);

  function ThemeProvider() {
    var _this;

    _classCallCheck(this, ThemeProvider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      dark: false
    });

    _defineProperty(_assertThisInitialized(_this), "enableDarkMode", function () {
      store.set(LOCAL_STORAGE_KEY, 1);
    });

    _defineProperty(_assertThisInitialized(_this), "disableDarkMode", function () {
      store.remove(LOCAL_STORAGE_KEY);
    });

    _defineProperty(_assertThisInitialized(_this), "toggleDarkMode", function () {
      if (store.get(LOCAL_STORAGE_KEY)) {
        store.remove(LOCAL_STORAGE_KEY);
      } else {
        store.set(LOCAL_STORAGE_KEY, 1);
      }
    });

    return _this;
  }

  _createClass(ThemeProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      store.observe(LOCAL_STORAGE_KEY, function (theme) {
        _this2.setState({
          dark: Boolean(theme)
        });
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.dark === prevState.dark) {
        return;
      }

      if (!this.state.dark) {
        window.document.body.classList.remove("dark-theme");
      } else {
        window.document.body.classList.add("dark-theme");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var theme = {
        enableDarkMode: this.enableDarkMode,
        disableDarkMode: this.disableDarkMode,
        toggleDarkMode: this.toggleDarkMode,
        theme: {
          dark: this.state.dark
        }
      };
      return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
        value: theme
      }, this.props.children);
    }
  }]);

  return ThemeProvider;
}(React.Component);
//# sourceMappingURL=index.js.map