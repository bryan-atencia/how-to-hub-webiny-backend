{"version":3,"sources":["../../../src/plugins/GlobalSearch/SearchBar.tsx"],"names":["React","set","useRouter","Downshift","getPlugins","classnames","Hotkeys","Icon","Elevation","SearchBarDropdown","SearchBarWrapper","SearchBarInputWrapper","SearchShortcut","searchBarInput","icon","searchWrapper","SearchBar","props","active","searchTerm","previous","current","plugins","list","hotKeys","undefined","createRef","e","i","state","length","hotKey","preventOpen","preventDefault","input","focus","plugin","setState","newState","query","URLSearchParams","search","JSON","stringify","history","push","pathname","route","toString","find","p","location","parse","get","downshift","item","label","downshiftProps","isOpen","openMenu","closeMenu","getInputProps","width","esc","document","activeElement","blur","handleOpenHotkey","cancelSearchTerm","enter","setTimeout","selectedItem","submitSearchTerm","placeholder","className","ref","value","onClick","onBlur","onFocus","onChange","target","Component","SearchBarContainer","routerProps"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { set } from \"dot-prop-immutable\";\nimport { useRouter, UseRouter } from \"@webiny/react-router\";\nimport Downshift from \"downshift\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport {\n    AdminGlobalSearchPlugin,\n    AdminGlobalSearchPreventHotkeyPlugin\n} from \"@webiny/app-admin/types\";\nimport classnames from \"classnames\";\nimport { Hotkeys } from \"react-hotkeyz\";\n\n// UI components\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport SearchBarDropdown from \"./SearchBarDropdown\";\n\n// Icons\nimport { ReactComponent as SearchIcon } from \"./icons/round-search-24px.svg\";\n\n// Local components\nimport {\n    SearchBarWrapper,\n    SearchBarInputWrapper,\n    SearchShortcut,\n    searchBarInput,\n    icon,\n    searchWrapper\n} from \"./styled\";\n\ntype SearchBarProps = UseRouter;\n\ntype SearchBarState = {\n    active: boolean;\n    searchTerm: { previous: string; current: string };\n    plugins: {\n        list: Array<AdminGlobalSearchPlugin>;\n        hotKeys: Array<AdminGlobalSearchPreventHotkeyPlugin>;\n        current?: AdminGlobalSearchPlugin;\n    };\n};\n\nclass SearchBar extends React.Component<SearchBarProps, SearchBarState> {\n    state = {\n        active: false,\n        searchTerm: {\n            previous: \"\",\n            current: \"\"\n        },\n        plugins: {\n            // List of all registered \"admin-global-search\" plugins.\n            get list() {\n                return getPlugins<AdminGlobalSearchPlugin>(\"admin-global-search\");\n            },\n            hotKeys: getPlugins<AdminGlobalSearchPreventHotkeyPlugin>(\n                \"admin-global-search-prevent-hotkey\"\n            ),\n            // Current plugin - set by examining current route and its query params (on construct).\n            current: undefined\n        }\n    };\n\n    /**\n     * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.\n     */\n    downshift: any = React.createRef();\n\n    /**\n     * At some point we must programmatically focus the input.\n     */\n    input: any = React.createRef();\n\n    /**\n     * Let's check if current route is defined in one of the registered plugins.\n     * If so, then check current route query for search term and set it as default value of search input.\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.state.plugins.current = this.state.plugins.list.find(\n            p => p.route === props.location.pathname\n        );\n\n        if (this.state.plugins.current) {\n            let search;\n            const query = new URLSearchParams(props.location.search);\n            try {\n                search = JSON.parse(query.get(\"search\") || \"\").query;\n            } catch (e) {\n                search = query.get(\"search\");\n            }\n\n            this.state.searchTerm.current = search || \"\";\n            this.state.searchTerm.previous = this.state.searchTerm.current;\n        }\n    }\n\n    handleOpenHotkey = e => {\n        for (let i = 0; i < this.state.plugins.hotKeys.length; i++) {\n            const hotKey = this.state.plugins.hotKeys[i];\n            if (hotKey.preventOpen(e)) {\n                return;\n            }\n        }\n\n        e.preventDefault();\n        this.input.current.focus();\n    };\n\n    /**\n     * Re-routes to given route (provided by the plugin) with needed search query params.\n     * It also manages previous and current search terms and automatically highlighted item in dropdown.\n     * @param plugin\n     */\n    submitSearchTerm = plugin => {\n        this.setState(\n            state => {\n                const newState = set(state, \"searchTerm.previous\", state.searchTerm.current);\n                return set(newState, \"plugins.current\", plugin);\n            },\n            () => {\n                const query = new URLSearchParams();\n\n                if (this.state.searchTerm.current) {\n                    // If \"search\" key in the plugin was defined, it means SearchInput values were set. Otherwise,\n                    // we need to send the plain string into the \"search\" query param. This behavior was needed\n                    // eg. for pages, since Page entity doesn't use regular SearchInput type, but plain string.\n                    if (plugin.search) {\n                        query.set(\n                            \"search\",\n                            JSON.stringify({\n                                query: this.state.searchTerm.current,\n                                ...plugin.search\n                            })\n                        );\n                    } else {\n                        query.set(\"search\", this.state.searchTerm.current);\n                    }\n                }\n\n                this.props.history.push({\n                    pathname: plugin.route,\n                    search: query.toString()\n                });\n            }\n        );\n    };\n\n    cancelSearchTerm = () => {\n        this.setState(state => {\n            state.searchTerm.current = state.searchTerm.previous;\n            return state;\n        });\n    };\n\n    render() {\n        return (\n            <Downshift ref={this.downshift} itemToString={item => item && item.label}>\n                {downshiftProps => {\n                    const { isOpen, openMenu, closeMenu, getInputProps } = downshiftProps;\n\n                    return (\n                        <div style={{ width: \"100%\" }}>\n                            <Hotkeys\n                                zIndex={10}\n                                keys={{\n                                    // @ts-ignore\n                                    esc: () => document.activeElement.blur(),\n                                    \"/\": this.handleOpenHotkey\n                                }}\n                            />\n\n                            <Hotkeys\n                                zIndex={11}\n                                disabled={!isOpen}\n                                keys={{\n                                    esc: () => {\n                                        this.cancelSearchTerm();\n                                        closeMenu();\n                                    },\n                                    enter: () =>\n                                        setTimeout(() => {\n                                            const { selectedItem } = this.downshift.current.state;\n                                            if (selectedItem) {\n                                                closeMenu();\n                                                this.submitSearchTerm(selectedItem);\n                                            }\n                                        })\n                                }}\n                            />\n\n                            <Elevation\n                                className={classnames(searchWrapper, { active: this.state.active })}\n                                z={0}\n                            >\n                                <SearchBarWrapper>\n                                    <SearchBarInputWrapper>\n                                        <Icon className={icon} icon={<SearchIcon />} />\n\n                                        <React.Fragment>\n                                            <input\n                                                {...getInputProps({\n                                                    placeholder: \"Search...\",\n                                                    className: classnames(\n                                                        \"mdc-text-field__input\",\n                                                        searchBarInput\n                                                    ),\n                                                    ref: this.input,\n                                                    value: this.state.searchTerm.current,\n                                                    // @ts-ignore\n                                                    onClick: openMenu,\n                                                    onBlur: () => {\n                                                        this.cancelSearchTerm();\n                                                        this.setState({ active: false });\n                                                    },\n                                                    onFocus: () => {\n                                                        this.setState({ active: true });\n                                                        openMenu();\n                                                    },\n                                                    onChange: (\n                                                        e: React.ChangeEvent<HTMLInputElement>\n                                                    ) => {\n                                                        const value = e.target.value || \"\";\n                                                        this.setState(state => {\n                                                            state.searchTerm.current = value;\n                                                            return state;\n                                                        });\n                                                    }\n                                                })}\n                                            />\n                                        </React.Fragment>\n\n                                        <SearchShortcut>/</SearchShortcut>\n                                    </SearchBarInputWrapper>\n                                </SearchBarWrapper>\n                                {isOpen && <SearchBarDropdown context={this} />}\n                            </Elevation>\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n}\n\nconst SearchBarContainer = () => {\n    const routerProps = useRouter();\n\n    return <SearchBar {...routerProps} />;\n};\n\nexport default SearchBarContainer;\n"],"file":"SearchBar.js"}