import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import * as React from "react";
import { Hotkeys } from "react-hotkeyz";
import dataURLtoBlob from "dataurl-to-blob";
import { ImageEditorDialog } from "@webiny/ui/ImageUpload";
import { Tooltip } from "@webiny/ui/Tooltip";
import { IconButton } from "@webiny/ui/Button";
import outputFileSelectionError from "@webiny/app-admin/components/FileManager/outputFileSelectionError";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { ReactComponent as EditIcon } from "@svgr/webpack!./../icons/edit.svg";

function toDataUrl(url) {
  return new Promise(function (resolve) {
    var xhr = new window.XMLHttpRequest();

    xhr.onload = function () {
      var reader = new window.FileReader();

      reader.onloadend = function () {
        resolve(reader.result);
      };

      reader.readAsDataURL(xhr.response);
    };

    xhr.open("GET", url);
    xhr.responseType = "blob";
    xhr.send();
  });
}

var initialState = {
  showImageEditor: false,
  dataUrl: null
};

var reducer = function reducer(state, action) {
  var next = _objectSpread({}, state);

  switch (action.type) {
    case "setDataUrl":
      next.dataUrl = action.dataUrl;
      next.showImageEditor = true;
      break;

    case "hideImageEditor":
      next.dataUrl = null;
      next.showImageEditor = false;
      break;
  }

  return next;
}; // TODO: @adrian


var EditAction = function EditAction(props) {
  var file = props.file,
      uploadFile = props.uploadFile,
      validateFiles = props.validateFiles;

  var _React$useReducer = React.useReducer(reducer, initialState),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      state = _React$useReducer2[0],
      dispatch = _React$useReducer2[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement("span", null, "Edit image"),
    placement: "bottom"
  }, /*#__PURE__*/React.createElement(IconButton, {
    icon: /*#__PURE__*/React.createElement(EditIcon, {
      style: {
        margin: "0 8px 0 0"
      }
    }),
    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = dispatch;
              _context.next = 3;
              return toDataUrl(file.src);

            case 3:
              _context.t1 = _context.sent;
              _context.t2 = {
                type: "setDataUrl",
                dataUrl: _context.t1
              };
              (0, _context.t0)(_context.t2);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))
  })), /*#__PURE__*/React.createElement(Hotkeys, {
    zIndex: 60,
    disabled: !state.dataUrl
  }, /*#__PURE__*/React.createElement(ImageEditorDialog, {
    dialogZIndex: 10,
    open: state.showImageEditor,
    src: state.dataUrl,
    onClose: function onClose() {
      return dispatch({
        type: "hideImageEditor"
      });
    },
    onAccept: function onAccept(src) {
      var blob = dataURLtoBlob(src);
      var errors = validateFiles([blob]);

      if (errors.length) {
        showSnackbar(outputFileSelectionError(errors));
      } else {
        blob.name = file.name;
        uploadFile(blob);
      }

      dispatch({
        type: "hideImageEditor"
      });
    }
  })));
};

export default EditAction;
//# sourceMappingURL=EditAction.js.map