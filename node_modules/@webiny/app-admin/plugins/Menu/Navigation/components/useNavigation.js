import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _get from "lodash/get";
import { useUi } from "@webiny/app/hooks/useUi";
import { default as localStorage } from "store";
import { set } from "dot-prop-immutable";
var LOCAL_STORAGE_KEY = "webiny_apps_menu_sections";

var modifyExpandedSections = function modifyExpandedSections(expandedSections, names, action) {
  var returnNames = _toConsumableArray(expandedSections);

  names.forEach(function (id) {
    if (action === "expand") {
      !returnNames.includes(id) && returnNames.push(id);
    } else {
      returnNames.includes(id) && returnNames.splice(returnNames.indexOf(id), 1);
    }
  });
  return returnNames;
};

var expandAppsMenuSection = function expandAppsMenuSection(names, expandedSections) {
  if (!Array.isArray(names)) {
    names = [names];
  }

  return modifyExpandedSections(expandedSections, names, "expand");
};

export default (function () {
  var ui = useUi();
  var hook = {
    showMenu: function showMenu() {
      ui.setState(function (ui) {
        return set(ui, "appsMenu.show", true);
      });
    },
    hideMenu: function hideMenu() {
      ui.setState(function (ui) {
        return set(ui, "appsMenu.show", false);
      });
    },
    menuIsShown: function menuIsShown() {
      return _get(ui, "appsMenu.show", false);
    },
    expandSection: function expandSection(name) {
      var sections = _get(ui, "appsMenu.expandedSections", []);

      sections = modifyExpandedSections(sections, [name], "expand");
      localStorage.set(LOCAL_STORAGE_KEY, sections.join(","));
      ui.setState(function (ui) {
        return set(ui, "appsMenu.expandedSections", sections);
      });
    },
    collapseSection: function collapseSection(name) {
      var sections = _get(ui, "appsMenu.expandedSections", []);

      sections = modifyExpandedSections(sections, [name], "collapse");
      localStorage.set(LOCAL_STORAGE_KEY, sections.join(","));
      ui.setState(function (ui) {
        return set(ui, "appsMenu.expandedSections", sections);
      });
    },
    toggleSection: function toggleSection(name) {
      if (hook.sectionIsExpanded(name)) {
        return hook.collapseSection(name);
      }

      return hook.expandSection(name);
    },
    sectionIsExpanded: function sectionIsExpanded(name) {
      return _get(ui, "appsMenu.expandedSections", []).includes(name);
    },
    initSections: function initSections() {
      if (!localStorage.get(LOCAL_STORAGE_KEY)) {
        return;
      }

      var sections = expandAppsMenuSection(localStorage.get(LOCAL_STORAGE_KEY).split(","), _get(ui, "appsMenu.expandedSections", []));
      localStorage.set(LOCAL_STORAGE_KEY, sections.join(","));
      ui.setState(function (ui) {
        return set(ui, "appsMenu.expandedSections", sections);
      });
    }
  };
  return hook;
});
//# sourceMappingURL=useNavigation.js.map