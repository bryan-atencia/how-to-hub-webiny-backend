import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { Image } from "@webiny/app/components/Image";
import * as Ui from "@webiny/ui/ImageUpload";
import { FileManager } from "./FileManager";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import styled from "@emotion/styled";
var ImageUploadWrapper = /*#__PURE__*/styled("div", {
  target: "ek1tjbh0",
  label: "ImageUploadWrapper"
})({
  position: "relative",
  ".disabled": {
    opacity: 0.75,
    pointerEvents: "none"
  },
  ".mdc-floating-label--float-above": {
    transform: "scale(0.75)",
    top: 10,
    left: 10,
    color: "var(--mdc-theme-text-secondary-on-background)"
  },
  ".mdc-text-field-helper-text": {
    color: "var(--mdc-theme-text-secondary-on-background)"
  }
});

var SingleImageUpload = /*#__PURE__*/function (_React$Component) {
  _inherits(SingleImageUpload, _React$Component);

  var _super = _createSuper(SingleImageUpload);

  function SingleImageUpload() {
    _classCallCheck(this, SingleImageUpload);

    return _super.apply(this, arguments);
  }

  _createClass(SingleImageUpload, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          onChange = _this$props.onChange,
          value = _this$props.value,
          validation = _this$props.validation,
          label = _this$props.label,
          description = _this$props.description,
          accept = _this$props.accept,
          maxSize = _this$props.maxSize,
          multipleMaxCount = _this$props.multipleMaxCount,
          multipleMaxSize = _this$props.multipleMaxSize,
          imagePreviewProps = _this$props.imagePreviewProps,
          round = _this$props.round;
      return /*#__PURE__*/React.createElement(ImageUploadWrapper, {
        className: className
      }, label && /*#__PURE__*/React.createElement("div", {
        className: "mdc-floating-label mdc-floating-label--float-above"
      }, label), /*#__PURE__*/React.createElement(FileManager, {
        onChange: onChange,
        accept: accept,
        images: !accept,
        maxSize: maxSize,
        multipleMaxCount: multipleMaxCount,
        multipleMaxSize: multipleMaxSize
      }, function (_ref) {
        var showFileManager = _ref.showFileManager;
        return /*#__PURE__*/React.createElement(Ui.Image, {
          renderImagePreview: function renderImagePreview(renderImageProps) {
            return /*#__PURE__*/React.createElement(Image, Object.assign({}, renderImageProps, imagePreviewProps));
          },
          style: {
            width: "100%",
            height: "auto"
          },
          value: value,
          uploadImage: showFileManager,
          removeImage: onChange,
          round: round
        });
      }), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
    }
  }]);

  return SingleImageUpload;
}(React.Component);

_defineProperty(SingleImageUpload, "defaultProps", {
  validation: {
    isValid: null
  }
});

export { SingleImageUpload as default };
//# sourceMappingURL=SingleImageUpload.js.map