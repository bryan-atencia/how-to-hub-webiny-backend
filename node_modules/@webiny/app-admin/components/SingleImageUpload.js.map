{"version":3,"sources":["../../src/components/SingleImageUpload.tsx"],"names":["React","Image","Ui","FileManager","FormElementMessage","styled","ImageUploadWrapper","position","opacity","pointerEvents","transform","top","left","color","SingleImageUpload","props","className","onChange","value","validation","label","description","accept","maxSize","multipleMaxCount","multipleMaxSize","imagePreviewProps","round","showFileManager","renderImageProps","width","height","isValid","message","Component"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,8BAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,kBAAkB,gBAAGD,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AACrCE,EAAAA,QAAQ,EAAE,UAD2B;AAErC,eAAa;AACTC,IAAAA,OAAO,EAAE,IADA;AAETC,IAAAA,aAAa,EAAE;AAFN,GAFwB;AAMrC,sCAAoC;AAChCC,IAAAA,SAAS,EAAE,aADqB;AAEhCC,IAAAA,GAAG,EAAE,EAF2B;AAGhCC,IAAAA,IAAI,EAAE,EAH0B;AAIhCC,IAAAA,KAAK,EAAE;AAJyB,GANC;AAYrC,iCAA+B;AAC3BA,IAAAA,KAAK,EAAE;AADoB;AAZM,CAAjB,CAAxB;;IAqDqBC,iB;;;;;;;;;;;;;6BAKR;AAAA,wBAcD,KAAKC,KAdJ;AAAA,UAEDC,SAFC,eAEDA,SAFC;AAAA,UAGDC,QAHC,eAGDA,QAHC;AAAA,UAIDC,KAJC,eAIDA,KAJC;AAAA,UAKDC,UALC,eAKDA,UALC;AAAA,UAMDC,KANC,eAMDA,KANC;AAAA,UAODC,WAPC,eAODA,WAPC;AAAA,UAQDC,MARC,eAQDA,MARC;AAAA,UASDC,OATC,eASDA,OATC;AAAA,UAUDC,gBAVC,eAUDA,gBAVC;AAAA,UAWDC,eAXC,eAWDA,eAXC;AAAA,UAYDC,iBAZC,eAYDA,iBAZC;AAAA,UAaDC,KAbC,eAaDA,KAbC;AAgBL,0BACI,oBAAC,kBAAD;AAAoB,QAAA,SAAS,EAAEX;AAA/B,SACKI,KAAK,iBACF;AAAK,QAAA,SAAS,EAAC;AAAf,SACKA,KADL,CAFR,eAOI,oBAAC,WAAD;AACI,QAAA,QAAQ,EAAEH,QADd;AAEI,QAAA,MAAM,EAAEK,MAFZ;AAGI,QAAA,MAAM,EAAE,CAACA,MAHb;AAII,QAAA,OAAO,EAAEC,OAJb;AAKI,QAAA,gBAAgB,EAAEC,gBALtB;AAMI,QAAA,eAAe,EAAEC;AANrB,SAQK;AAAA,YAAGG,eAAH,QAAGA,eAAH;AAAA,4BACG,oBAAC,EAAD,CAAI,KAAJ;AACI,UAAA,kBAAkB,EAAE,4BAAAC,gBAAgB;AAAA,gCAChC,oBAAC,KAAD,oBAAWA,gBAAX,EAAiCH,iBAAjC,EADgC;AAAA,WADxC;AAII,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,MAAM,EAAE;AAAzB,WAJX;AAKI,UAAA,KAAK,EAAEb,KALX;AAMI,UAAA,WAAW,EAAEU,eANjB;AAOI,UAAA,WAAW,EAAEX,QAPjB;AAQI,UAAA,KAAK,EAAEU;AARX,UADH;AAAA,OARL,CAPJ,EA6BKR,UAAU,CAACa,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,QAAA,KAAK;AAAzB,SAA2Bb,UAAU,CAACc,OAAtC,CA9BR,EAgCKd,UAAU,CAACa,OAAX,KAAuB,KAAvB,IAAgCX,WAAhC,iBACG,oBAAC,kBAAD,QAAqBA,WAArB,CAjCR,CADJ;AAsCH;;;;EA3D0CrB,KAAK,CAACkC,S;;gBAAhCpB,iB,kBACK;AAClBK,EAAAA,UAAU,EAAE;AAAEa,IAAAA,OAAO,EAAE;AAAX;AADM,C;;SADLlB,iB","sourcesContent":["import * as React from \"react\";\nimport { Image } from \"@webiny/app/components/Image\";\nimport * as Ui from \"@webiny/ui/ImageUpload\";\nimport { FileManager } from \"./FileManager\";\nimport { FormComponentProps } from \"@webiny/ui/types\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport styled from \"@emotion/styled\";\n\nconst ImageUploadWrapper = styled(\"div\")({\n    position: \"relative\",\n    \".disabled\": {\n        opacity: 0.75,\n        pointerEvents: \"none\"\n    },\n    \".mdc-floating-label--float-above\": {\n        transform: \"scale(0.75)\",\n        top: 10,\n        left: 10,\n        color: \"var(--mdc-theme-text-secondary-on-background)\"\n    },\n    \".mdc-text-field-helper-text\": {\n        color: \"var(--mdc-theme-text-secondary-on-background)\"\n    }\n});\n\ntype SingleImageUploadProps = FormComponentProps & {\n    // Accept types\n    accept?: string[];\n\n    // Component label.\n    label?: string;\n\n    // Is component disabled?\n    disabled?: boolean;\n\n    // Description beneath the image.\n    description?: React.ReactNode;\n\n    // A className for the root element.\n    className?: string;\n\n    // Define file's max allowed size (default is \"10mb\").\n    // Uses \"bytes\" (https://www.npmjs.com/package/bytes) library to convert string notation to actual number.\n    maxSize?: number | string;\n\n    // Max number of files in a single batch.\n    multipleMaxCount?: number;\n\n    // Max size of files in a single batch.\n    multipleMaxSize?: number | string;\n\n    // onChange callback.\n    onChange?: Function;\n\n    // Optional custom props, passed to the preview image.\n    imagePreviewProps?: any;\n\n    // Is the wrapper round?\n    round?: boolean;\n};\n\nexport default class SingleImageUpload extends React.Component<SingleImageUploadProps> {\n    static defaultProps = {\n        validation: { isValid: null }\n    };\n\n    render() {\n        const {\n            className,\n            onChange,\n            value,\n            validation,\n            label,\n            description,\n            accept,\n            maxSize,\n            multipleMaxCount,\n            multipleMaxSize,\n            imagePreviewProps,\n            round\n        } = this.props;\n\n        return (\n            <ImageUploadWrapper className={className}>\n                {label && (\n                    <div className=\"mdc-floating-label mdc-floating-label--float-above\">\n                        {label}\n                    </div>\n                )}\n\n                <FileManager\n                    onChange={onChange}\n                    accept={accept}\n                    images={!accept}\n                    maxSize={maxSize}\n                    multipleMaxCount={multipleMaxCount}\n                    multipleMaxSize={multipleMaxSize}\n                >\n                    {({ showFileManager }) => (\n                        <Ui.Image\n                            renderImagePreview={renderImageProps => (\n                                <Image {...renderImageProps} {...imagePreviewProps} />\n                            )}\n                            style={{ width: \"100%\", height: \"auto\" }}\n                            value={value}\n                            uploadImage={showFileManager}\n                            removeImage={onChange}\n                            round={round}\n                        />\n                    )}\n                </FileManager>\n\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </ImageUploadWrapper>\n        );\n    }\n}\n"],"file":"SingleImageUpload.js"}