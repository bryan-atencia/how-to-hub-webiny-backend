{"version":3,"sources":["../../../src/components/FileManager/FileManagerView.tsx"],"names":["React","Files","ButtonPrimary","ButtonIcon","Icon","File","useQuery","useMutation","useApolloClient","LIST_FILES","CREATE_FILE","GET_FILE_SETTINGS","getFileTypePlugin","getFileUploader","outputFileSelectionError","DropFilesHere","NoResults","FileDetails","LeftSidebar","BottomInfoBar","OverlayLayout","useSnackbar","Scrollbar","css","styled","useHotkeys","useFileManager","i18n","t","ns","style","draggingFeedback","position","top","left","width","height","opacity","background","zIndex","leftDrawer","header","textAlign","fontSize","padding","fontWeight","color","InputSearch","backgroundColor","borderRadius","border","marginLeft","outline","searchIcon","FileListWrapper","float","display","FileList","gridTemplateColumns","marginBottom","renderFile","props","file","plugin","src","render","renderEmpty","hasPreviouslyUploadedFiles","browseFiles","FileManagerView","onClose","onChange","accept","multiple","maxSize","multipleMaxCount","multipleMaxSize","selected","toggleSelected","dragging","setDragging","uploading","setUploading","showFileDetails","showingFileDetails","queryParams","setQueryParams","setHasPreviouslyUploadedFiles","useRef","useCallback","showSnackbar","searchOnChange","search","toggleTag","tag","finalTags","Array","isArray","tags","includes","splice","indexOf","push","refreshOnScroll","scrollFrame","fetchMore","gqlQuery","current","getQueryResult","data","nextPage","variables","page","updateQuery","prev","fetchMoreResult","next","files","listFiles","getFileUploadErrorMessage","e","match","message","updateCacheAfterCreateFile","cache","newFile","newFileData","readQuery","query","unshift","writeQuery","getFileDetailsFile","list","find","item","keys","esc","searchInput","apolloClient","onCompleted","response","length","update","createFile","uploadFile","errors","Promise","all","map","setTimeout","name","settingsQuery","settings","uploadMaxFileSize","getDropZoneProps","validateFiles","onDragEnter","onExited","target","value","onSelect","defaultProps"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Files from \"react-butterfiles\";\nimport { ButtonPrimary, ButtonIcon } from \"@webiny/ui/Button\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport File from \"./File\";\nimport { useQuery, useMutation, useApolloClient, Query } from \"react-apollo\";\nimport { FilesRules } from \"react-butterfiles\";\nimport { LIST_FILES, CREATE_FILE, GET_FILE_SETTINGS } from \"./graphql\";\nimport getFileTypePlugin from \"./getFileTypePlugin\";\nimport { get, debounce, cloneDeep } from \"lodash\";\nimport getFileUploader from \"./getFileUploader\";\nimport outputFileSelectionError from \"./outputFileSelectionError\";\nimport DropFilesHere from \"./DropFilesHere\";\nimport NoResults from \"./NoResults\";\nimport FileDetails from \"./FileDetails\";\nimport LeftSidebar from \"./LeftSidebar\";\nimport BottomInfoBar from \"./BottomInfoBar\";\nimport { OverlayLayout } from \"@webiny/app-admin/components/OverlayLayout\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { Scrollbar } from \"@webiny/ui/Scrollbar\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport { useHotkeys } from \"react-hotkeyz\";\nimport { useFileManager } from \"./FileManagerContext\";\nimport { i18n } from \"@webiny/app/i18n\";\n\nconst t = i18n.ns(\"app-admin/file-manager/file-manager-view\");\n\nimport { ReactComponent as SearchIcon } from \"./icons/round-search-24px.svg\";\nimport { ReactComponent as UploadIcon } from \"./icons/round-cloud_upload-24px.svg\";\nimport gql from \"graphql-tag\";\n\nconst style = {\n    draggingFeedback: css({\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        opacity: 0.5,\n        background: \"white\",\n        zIndex: 100\n    }),\n    leftDrawer: {\n        header: css({\n            textAlign: \"center\",\n            fontSize: 18,\n            padding: 10,\n            fontWeight: 600,\n            color: \"var(--mdc-theme-on-surface)\"\n        })\n    }\n};\n\nconst InputSearch = styled(\"div\")({\n    backgroundColor: \"var(--mdc-theme-on-background)\",\n    position: \"relative\",\n    height: 32,\n    padding: 3,\n    width: \"100%\",\n    borderRadius: 2,\n    \"> input\": {\n        border: \"none\",\n        fontSize: 14,\n        width: \"calc(100% - 10px)\",\n        height: \"100%\",\n        marginLeft: 50,\n        backgroundColor: \"transparent\",\n        outline: \"none\",\n        color: \"var(--mdc-theme-text-primary-on-background)\"\n    }\n});\n\nconst searchIcon = css({\n    \"&.mdc-button__icon\": {\n        color: \"var(--mdc-theme-text-secondary-on-background)\",\n        position: \"absolute\",\n        width: 24,\n        height: 24,\n        left: 15,\n        top: 7\n    }\n});\n\nconst FileListWrapper = styled(\"div\")({\n    float: \"right\",\n    display: \"inline-block\",\n    width: \"calc(100vw - 270px)\",\n    height: \"100%\"\n});\n\nconst FileList = styled(\"div\")({\n    width: \"100%\",\n    display: \"grid\",\n    /* define the number of grid columns */\n    gridTemplateColumns: \"repeat( auto-fill, minmax(220px, 1fr) )\",\n    marginBottom: 95\n});\n\ntype FileManagerViewProps = {\n    onChange: Function;\n    onClose: Function;\n    files?: FilesRules;\n    multiple: boolean; // Does not affect <Files> component, it always allows multiple selection.\n    accept: Array<string>;\n    maxSize: number | string;\n    multipleMaxCount: number;\n    multipleMaxSize: number | string;\n};\n\nfunction renderFile(props) {\n    const { file } = props;\n    const plugin = getFileTypePlugin(file);\n    return (\n        <File {...props} key={file.src}>\n            {plugin.render({ file })}\n        </File>\n    );\n}\n\nconst renderEmpty = ({ hasPreviouslyUploadedFiles, browseFiles }) => {\n    if (hasPreviouslyUploadedFiles) {\n        return <NoResults />;\n    }\n    return <DropFilesHere empty onClick={browseFiles} />;\n};\n\nfunction FileManagerView(props: FileManagerViewProps) {\n    const {\n        onClose,\n        onChange,\n        accept,\n        multiple,\n        maxSize,\n        multipleMaxCount,\n        multipleMaxSize\n    } = props;\n\n    const {\n        selected,\n        toggleSelected,\n        dragging,\n        setDragging,\n        uploading,\n        setUploading,\n        showFileDetails,\n        showingFileDetails,\n        queryParams,\n        setQueryParams,\n        hasPreviouslyUploadedFiles,\n        setHasPreviouslyUploadedFiles\n    } = useFileManager();\n\n    const { useRef, useCallback } = React;\n\n    const { showSnackbar } = useSnackbar();\n\n    const searchOnChange = useCallback(\n        // @ts-ignore\n        debounce(search => setQueryParams({ search }), 500),\n        []\n    );\n\n    const toggleTag = useCallback(async ({ tag, queryParams }) => {\n        const finalTags = Array.isArray(queryParams.tags) ? [...queryParams.tags] : [];\n\n        if (finalTags.includes(tag)) {\n            finalTags.splice(finalTags.indexOf(tag), 1);\n        } else {\n            finalTags.push(tag);\n        }\n\n        setQueryParams({ ...queryParams, tags: finalTags });\n    }, []);\n\n    const refreshOnScroll = useCallback(\n        // @ts-ignore\n        debounce(({ scrollFrame, fetchMore }) => {\n            if (scrollFrame.top > 0.9) {\n                // @ts-ignore // TODO: @adrian - what is `current` ?\n                if (!gqlQuery.current) {\n                    return;\n                }\n                // @ts-ignore // TODO: @adrian - what is `current` ?\n                const { data } = gqlQuery.current.getQueryResult();\n                const nextPage = get(data, \"files.listFiles.meta.nextPage\");\n                nextPage &&\n                    fetchMore({\n                        variables: { page: nextPage },\n                        updateQuery: (prev, { fetchMoreResult }) => {\n                            if (!fetchMoreResult) {\n                                return prev;\n                            }\n\n                            const next = { ...fetchMoreResult };\n\n                            next.files.listFiles.data = [\n                                ...prev.files.listFiles.data,\n                                ...fetchMoreResult.files.listFiles.data\n                            ];\n\n                            return next;\n                        }\n                    });\n            }\n        }, 500),\n        []\n    );\n\n    const getFileUploadErrorMessage = useCallback(e => {\n        if (typeof e === \"string\") {\n            const match = e.match(/Message>(.*?)<\\/Message/);\n            if (match) {\n                const [, message] = match;\n                return message;\n            }\n\n            return e;\n        }\n        return e.message;\n    }, []);\n\n    const updateCacheAfterCreateFile = (cache, newFile) => {\n        const newFileData = get(newFile, \"data.files.createFile.data\");\n\n        const data = cloneDeep(cache.readQuery({ query: LIST_FILES, variables: queryParams }));\n        data.files.listFiles.data.unshift(newFileData);\n\n        cache.writeQuery({\n            query: LIST_FILES,\n            variables: queryParams,\n            data\n        });\n    };\n\n    const getFileDetailsFile = useCallback(function getFileDetailsFile({ src, list }) {\n        return list.find(item => item.src === src);\n    }, []);\n\n    useHotkeys({\n        zIndex: 50,\n        keys: {\n            esc: onClose\n        }\n    });\n\n    const searchInput = useRef();\n\n    const apolloClient = useApolloClient();\n\n    const gqlQuery = useQuery(LIST_FILES, {\n        variables: queryParams,\n        onCompleted: response => {\n            const list = get(response, \"files.listFiles.data\") || [];\n            if (hasPreviouslyUploadedFiles === null) {\n                setHasPreviouslyUploadedFiles(list.length > 0);\n            }\n        }\n    });\n\n    const { data, fetchMore } = gqlQuery;\n\n    const list = get(data, \"files.listFiles.data\") || [];\n    const [createFile] = useMutation(CREATE_FILE, { update: updateCacheAfterCreateFile });\n    const uploadFile = async files => {\n        setUploading(true);\n        const list = Array.isArray(files) ? files : [files];\n\n        const errors = [];\n        await Promise.all(\n            list.map(async file => {\n                try {\n                    const response = await getFileUploader()(file, { apolloClient });\n                    await createFile({ variables: { data: response } });\n                } catch (e) {\n                    errors.push({ file, e });\n                }\n            })\n        );\n\n        if (!hasPreviouslyUploadedFiles) {\n            setHasPreviouslyUploadedFiles(true);\n        }\n\n        setUploading(false);\n\n        if (errors.length > 0) {\n            // We wait 750ms, just for everything to settle down a bit.\n            return setTimeout(() => {\n                showSnackbar(\n                    <>\n                        {t`One or more files were not uploaded successfully:`}\n                        <ol>\n                            {errors.map(({ file, e }) => (\n                                <li key={file.name}>\n                                    <strong>{file.name}</strong>: {getFileUploadErrorMessage(e)}\n                                </li>\n                            ))}\n                        </ol>\n                    </>\n                );\n            }, 750);\n        }\n\n        // We wait 750ms, just for everything to settle down a bit.\n        setTimeout(() => showSnackbar(t`File upload complete.`), 750);\n    };\n\n    const settingsQuery = useQuery(GET_FILE_SETTINGS);\n    const settings = get(settingsQuery.data, \"files.getSettings.data\") || {};\n    return (\n        <Files\n            multiple\n            maxSize={settings.uploadMaxFileSize ? settings.uploadMaxFileSize + \"b\" : maxSize}\n            multipleMaxSize={multipleMaxSize}\n            multipleMaxCount={multipleMaxCount}\n            accept={accept}\n            onSuccess={files => uploadFile(files.map(file => file.src.file))}\n            onError={errors => {\n                const message = outputFileSelectionError(errors);\n                showSnackbar(message);\n            }}\n        >\n            {({ getDropZoneProps, browseFiles, validateFiles }) => (\n                <OverlayLayout\n                    {...getDropZoneProps({\n                        onDragEnter: () => hasPreviouslyUploadedFiles && setDragging(true),\n                        onExited: onClose\n                    })}\n                    barLeft={\n                        <InputSearch>\n                            <Icon className={searchIcon} icon={<SearchIcon />} />\n                            <input\n                                ref={searchInput}\n                                onChange={e => searchOnChange(e.target.value)}\n                                placeholder={t`Search by filename or tags`}\n                            />\n                        </InputSearch>\n                    }\n                    barRight={\n                        selected.length > 0 ? (\n                            <ButtonPrimary\n                                disabled={uploading}\n                                onClick={async () => {\n                                    await onChange(multiple ? selected : selected[0]);\n\n                                    onClose();\n                                }}\n                            >\n                                {t`Select`} {multiple && `(${selected.length})`}\n                            </ButtonPrimary>\n                        ) : (\n                            // @ts-ignore\n                            <ButtonPrimary onClick={browseFiles} disabled={uploading}>\n                                <ButtonIcon icon={<UploadIcon />} />\n                                {t`Upload...`}\n                            </ButtonPrimary>\n                        )\n                    }\n                >\n                    <>\n                        {dragging && hasPreviouslyUploadedFiles && (\n                            <DropFilesHere\n                                // @ts-ignore TODO: @adrian - className is never rendered?!\n                                className={style.draggingFeedback}\n                                onDragLeave={() => setDragging(false)}\n                                onDrop={() => setDragging(false)}\n                            />\n                        )}\n\n                        <FileDetails\n                            validateFiles={validateFiles}\n                            uploadFile={uploadFile}\n                            file={getFileDetailsFile({\n                                list,\n                                src: showingFileDetails\n                            })}\n                        />\n\n                        <LeftSidebar\n                            queryParams={queryParams}\n                            toggleTag={tag => toggleTag({ tag, queryParams })}\n                        />\n\n                        <FileListWrapper>\n                            <Scrollbar\n                                onScrollFrame={scrollFrame =>\n                                    refreshOnScroll({\n                                        scrollFrame,\n                                        fetchMore\n                                    })\n                                }\n                            >\n                                <FileList>\n                                    {list.length\n                                        ? list.map(file =>\n                                              renderFile({\n                                                  uploadFile,\n                                                  file,\n                                                  showFileDetails: () => showFileDetails(file.src),\n                                                  selected: selected.find(\n                                                      current => current.src === file.src\n                                                  ),\n                                                  onSelect: async () => {\n                                                      if (multiple) {\n                                                          toggleSelected(file);\n                                                          return;\n                                                      }\n\n                                                      await onChange(file);\n                                                      onClose();\n                                                  }\n                                              })\n                                          )\n                                        : renderEmpty({\n                                              hasPreviouslyUploadedFiles,\n                                              browseFiles\n                                          })}\n                                </FileList>\n                            </Scrollbar>\n                            <BottomInfoBar accept={accept} uploading={uploading} />\n                        </FileListWrapper>\n                    </>\n                </OverlayLayout>\n            )}\n        </Files>\n    );\n}\n\nFileManagerView.defaultProps = {\n    multiple: false,\n    maxSize: \"10mb\",\n    multipleMaxSize: \"100mb\",\n    multipleMaxCount: 100\n};\n\nexport default FileManagerView;\n"],"file":"FileManagerView.js"}