import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";

function init(_ref) {
  var accept = _ref.accept;
  return {
    showingFileDetails: null,
    selected: [],
    hasPreviouslyUploadedFiles: null,
    queryParams: {
      types: accept,
      limit: 50,
      sort: {
        createdOn: -1
      }
    }
  };
}

function fileManagerReducer(state, action) {
  var next = _objectSpread({}, state);

  switch (action.type) {
    case "toggleSelected":
      {
        var existingIndex = state.selected.findIndex(function (item) {
          return item.src === action.file.src;
        });

        if (existingIndex < 0) {
          next.selected.push(action.file);
        } else {
          next.selected.splice(existingIndex, 1);
        }

        break;
      }

    case "queryParams":
      {
        next.selected = [];
        next.queryParams = _objectSpread(_objectSpread(_objectSpread({}, state.queryParams), action.queryParams), {}, {
          types: state.queryParams.types,
          limit: 40,
          sort: {
            createdOn: -1
          }
        });
        break;
      }

    case "showFileDetails":
      {
        next.showingFileDetails = action.src;
        break;
      }

    case "dragging":
      {
        next.dragging = action.state;
        break;
      }

    case "hasPreviouslyUploadedFiles":
      {
        next.hasPreviouslyUploadedFiles = action.hasPreviouslyUploadedFiles;
        break;
      }

    case "uploading":
      {
        next.uploading = action.state;
        break;
      }
  }

  return next;
}

var FileManagerContext = React.createContext({});

function FileManagerProvider(_ref2) {
  var children = _ref2.children,
      props = _objectWithoutProperties(_ref2, ["children"]);

  var _React$useReducer = React.useReducer(fileManagerReducer, props, init),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      state = _React$useReducer2[0],
      dispatch = _React$useReducer2[1];

  var value = React.useMemo(function () {
    return {
      state: state,
      dispatch: dispatch
    };
  }, [state]);
  return /*#__PURE__*/React.createElement(FileManagerContext.Provider, Object.assign({
    value: value
  }, props), children);
}

function useFileManager() {
  var context = React.useContext(FileManagerContext);

  if (!context) {
    throw new Error("useFileManager must be used within a FileManagerProvider");
  }

  var state = context.state,
      dispatch = context.dispatch;
  return {
    selected: state.selected,
    toggleSelected: function toggleSelected(file) {
      dispatch({
        type: "toggleSelected",
        file: file
      });
    },
    hasPreviouslyUploadedFiles: state.hasPreviouslyUploadedFiles,
    setHasPreviouslyUploadedFiles: function setHasPreviouslyUploadedFiles(hasPreviouslyUploadedFiles) {
      dispatch({
        type: "hasPreviouslyUploadedFiles",
        hasPreviouslyUploadedFiles: hasPreviouslyUploadedFiles
      });
    },
    queryParams: state.queryParams,
    setQueryParams: function setQueryParams(queryParams) {
      dispatch({
        type: "queryParams",
        queryParams: queryParams
      });
    },
    setDragging: function setDragging() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      dispatch({
        type: "dragging",
        state: state
      });
    },
    dragging: state.dragging,
    setUploading: function setUploading() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      dispatch({
        type: "uploading",
        state: state
      });
    },
    uploading: state.uploading,
    showFileDetails: function showFileDetails(src) {
      dispatch({
        type: "showFileDetails",
        src: src
      });
    },
    hideFileDetails: function hideFileDetails() {
      dispatch({
        type: "showFileDetails",
        src: null
      });
    },
    showingFileDetails: state.showingFileDetails,
    state: state,
    dispatch: dispatch
  };
}

export { FileManagerProvider, useFileManager };
//# sourceMappingURL=FileManagerContext.js.map