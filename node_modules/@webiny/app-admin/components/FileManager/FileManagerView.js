import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _cloneDeep from "lodash/cloneDeep";
import _debounce from "lodash/debounce";
import _get from "lodash/get";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["Upload..."]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Select"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Search by filename or tags"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["File upload complete."]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["One or more files were not uploaded successfully:"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import * as React from "react";
import Files from "react-butterfiles";
import { ButtonPrimary, ButtonIcon } from "@webiny/ui/Button";
import { Icon } from "@webiny/ui/Icon";
import File from "./File";
import { useQuery, useMutation, useApolloClient } from "react-apollo";
import { LIST_FILES, CREATE_FILE, GET_FILE_SETTINGS } from "./graphql";
import getFileTypePlugin from "./getFileTypePlugin";
import getFileUploader from "./getFileUploader";
import outputFileSelectionError from "./outputFileSelectionError";
import DropFilesHere from "./DropFilesHere";
import NoResults from "./NoResults";
import FileDetails from "./FileDetails";
import LeftSidebar from "./LeftSidebar";
import BottomInfoBar from "./BottomInfoBar";
import { OverlayLayout } from "@webiny/app-admin/components/OverlayLayout";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Scrollbar } from "@webiny/ui/Scrollbar";
import { css } from "emotion";
import styled from "@emotion/styled";
import { useHotkeys } from "react-hotkeyz";
import { useFileManager } from "./FileManagerContext";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-admin/file-manager/file-manager-view");
import { ReactComponent as SearchIcon } from "@svgr/webpack!./icons/round-search-24px.svg";
import { ReactComponent as UploadIcon } from "@svgr/webpack!./icons/round-cloud_upload-24px.svg";
var style = {
  draggingFeedback: /*#__PURE__*/css({
    position: "fixed",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    opacity: 0.5,
    background: "white",
    zIndex: 100
  }, "label:draggingFeedback;"),
  leftDrawer: {
    header: /*#__PURE__*/css({
      textAlign: "center",
      fontSize: 18,
      padding: 10,
      fontWeight: 600,
      color: "var(--mdc-theme-on-surface)"
    }, "label:header;")
  }
};
var InputSearch = /*#__PURE__*/styled("div", {
  target: "ee8m09m0",
  label: "InputSearch"
})({
  backgroundColor: "var(--mdc-theme-on-background)",
  position: "relative",
  height: 32,
  padding: 3,
  width: "100%",
  borderRadius: 2,
  "> input": {
    border: "none",
    fontSize: 14,
    width: "calc(100% - 10px)",
    height: "100%",
    marginLeft: 50,
    backgroundColor: "transparent",
    outline: "none",
    color: "var(--mdc-theme-text-primary-on-background)"
  }
});
var searchIcon = /*#__PURE__*/css({
  "&.mdc-button__icon": {
    color: "var(--mdc-theme-text-secondary-on-background)",
    position: "absolute",
    width: 24,
    height: 24,
    left: 15,
    top: 7
  }
}, "label:searchIcon;");
var FileListWrapper = /*#__PURE__*/styled("div", {
  target: "ee8m09m1",
  label: "FileListWrapper"
})({
  float: "right",
  display: "inline-block",
  width: "calc(100vw - 270px)",
  height: "100%"
});
var FileList = /*#__PURE__*/styled("div", {
  target: "ee8m09m2",
  label: "FileList"
})({
  width: "100%",
  display: "grid",

  /* define the number of grid columns */
  gridTemplateColumns: "repeat( auto-fill, minmax(220px, 1fr) )",
  marginBottom: 95
});

function renderFile(props) {
  var file = props.file;
  var plugin = getFileTypePlugin(file);
  return /*#__PURE__*/React.createElement(File, Object.assign({}, props, {
    key: file.src
  }), plugin.render({
    file: file
  }));
}

var renderEmpty = function renderEmpty(_ref) {
  var hasPreviouslyUploadedFiles = _ref.hasPreviouslyUploadedFiles,
      browseFiles = _ref.browseFiles;

  if (hasPreviouslyUploadedFiles) {
    return /*#__PURE__*/React.createElement(NoResults, null);
  }

  return /*#__PURE__*/React.createElement(DropFilesHere, {
    empty: true,
    onClick: browseFiles
  });
};

function FileManagerView(props) {
  var onClose = props.onClose,
      onChange = props.onChange,
      accept = props.accept,
      multiple = props.multiple,
      maxSize = props.maxSize,
      multipleMaxCount = props.multipleMaxCount,
      multipleMaxSize = props.multipleMaxSize;

  var _useFileManager = useFileManager(),
      selected = _useFileManager.selected,
      toggleSelected = _useFileManager.toggleSelected,
      dragging = _useFileManager.dragging,
      setDragging = _useFileManager.setDragging,
      uploading = _useFileManager.uploading,
      setUploading = _useFileManager.setUploading,
      _showFileDetails = _useFileManager.showFileDetails,
      showingFileDetails = _useFileManager.showingFileDetails,
      queryParams = _useFileManager.queryParams,
      setQueryParams = _useFileManager.setQueryParams,
      hasPreviouslyUploadedFiles = _useFileManager.hasPreviouslyUploadedFiles,
      setHasPreviouslyUploadedFiles = _useFileManager.setHasPreviouslyUploadedFiles;

  var useRef = React.useRef,
      useCallback = React.useCallback;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var searchOnChange = useCallback( // @ts-ignore
  _debounce(function (search) {
    return setQueryParams({
      search: search
    });
  }, 500), []);

  var _toggleTag = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
      var tag, queryParams, finalTags;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              tag = _ref2.tag, queryParams = _ref2.queryParams;
              finalTags = Array.isArray(queryParams.tags) ? _toConsumableArray(queryParams.tags) : [];

              if (finalTags.includes(tag)) {
                finalTags.splice(finalTags.indexOf(tag), 1);
              } else {
                finalTags.push(tag);
              }

              setQueryParams(_objectSpread(_objectSpread({}, queryParams), {}, {
                tags: finalTags
              }));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);

  var refreshOnScroll = useCallback( // @ts-ignore
  _debounce(function (_ref4) {
    var scrollFrame = _ref4.scrollFrame,
        fetchMore = _ref4.fetchMore;

    if (scrollFrame.top > 0.9) {
      // @ts-ignore // TODO: @adrian - what is `current` ?
      if (!gqlQuery.current) {
        return;
      } // @ts-ignore // TODO: @adrian - what is `current` ?


      var _gqlQuery$current$get = gqlQuery.current.getQueryResult(),
          _data = _gqlQuery$current$get.data;

      var nextPage = _get(_data, "files.listFiles.meta.nextPage");

      nextPage && fetchMore({
        variables: {
          page: nextPage
        },
        updateQuery: function updateQuery(prev, _ref5) {
          var fetchMoreResult = _ref5.fetchMoreResult;

          if (!fetchMoreResult) {
            return prev;
          }

          var next = _objectSpread({}, fetchMoreResult);

          next.files.listFiles.data = [].concat(_toConsumableArray(prev.files.listFiles.data), _toConsumableArray(fetchMoreResult.files.listFiles.data));
          return next;
        }
      });
    }
  }, 500), []);
  var getFileUploadErrorMessage = useCallback(function (e) {
    if (typeof e === "string") {
      var match = e.match(/Message>(.*?)<\/Message/);

      if (match) {
        var _match = _slicedToArray(match, 2),
            message = _match[1];

        return message;
      }

      return e;
    }

    return e.message;
  }, []);

  var updateCacheAfterCreateFile = function updateCacheAfterCreateFile(cache, newFile) {
    var newFileData = _get(newFile, "data.files.createFile.data");

    var data = _cloneDeep(cache.readQuery({
      query: LIST_FILES,
      variables: queryParams
    }));

    data.files.listFiles.data.unshift(newFileData);
    cache.writeQuery({
      query: LIST_FILES,
      variables: queryParams,
      data: data
    });
  };

  var getFileDetailsFile = useCallback(function getFileDetailsFile(_ref6) {
    var src = _ref6.src,
        list = _ref6.list;
    return list.find(function (item) {
      return item.src === src;
    });
  }, []);
  useHotkeys({
    zIndex: 50,
    keys: {
      esc: onClose
    }
  });
  var searchInput = useRef();
  var apolloClient = useApolloClient();
  var gqlQuery = useQuery(LIST_FILES, {
    variables: queryParams,
    onCompleted: function onCompleted(response) {
      var list = _get(response, "files.listFiles.data") || [];

      if (hasPreviouslyUploadedFiles === null) {
        setHasPreviouslyUploadedFiles(list.length > 0);
      }
    }
  });
  var data = gqlQuery.data,
      fetchMore = gqlQuery.fetchMore;
  var list = _get(data, "files.listFiles.data") || [];

  var _useMutation = useMutation(CREATE_FILE, {
    update: updateCacheAfterCreateFile
  }),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      createFile = _useMutation2[0];

  var uploadFile = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(files) {
      var list, errors;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              setUploading(true);
              list = Array.isArray(files) ? files : [files];
              errors = [];
              _context3.next = 5;
              return Promise.all(list.map( /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {
                  var response;
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.prev = 0;
                          _context2.next = 3;
                          return getFileUploader()(file, {
                            apolloClient: apolloClient
                          });

                        case 3:
                          response = _context2.sent;
                          _context2.next = 6;
                          return createFile({
                            variables: {
                              data: response
                            }
                          });

                        case 6:
                          _context2.next = 11;
                          break;

                        case 8:
                          _context2.prev = 8;
                          _context2.t0 = _context2["catch"](0);
                          errors.push({
                            file: file,
                            e: _context2.t0
                          });

                        case 11:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[0, 8]]);
                }));

                return function (_x3) {
                  return _ref8.apply(this, arguments);
                };
              }()));

            case 5:
              if (!hasPreviouslyUploadedFiles) {
                setHasPreviouslyUploadedFiles(true);
              }

              setUploading(false);

              if (!(errors.length > 0)) {
                _context3.next = 9;
                break;
              }

              return _context3.abrupt("return", setTimeout(function () {
                showSnackbar( /*#__PURE__*/React.createElement(React.Fragment, null, t(_templateObject()), /*#__PURE__*/React.createElement("ol", null, errors.map(function (_ref9) {
                  var file = _ref9.file,
                      e = _ref9.e;
                  return /*#__PURE__*/React.createElement("li", {
                    key: file.name
                  }, /*#__PURE__*/React.createElement("strong", null, file.name), ": ", getFileUploadErrorMessage(e));
                }))));
              }, 750));

            case 9:
              // We wait 750ms, just for everything to settle down a bit.
              setTimeout(function () {
                return showSnackbar(t(_templateObject2()));
              }, 750);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function uploadFile(_x2) {
      return _ref7.apply(this, arguments);
    };
  }();

  var settingsQuery = useQuery(GET_FILE_SETTINGS);
  var settings = _get(settingsQuery.data, "files.getSettings.data") || {};
  return /*#__PURE__*/React.createElement(Files, {
    multiple: true,
    maxSize: settings.uploadMaxFileSize ? settings.uploadMaxFileSize + "b" : maxSize,
    multipleMaxSize: multipleMaxSize,
    multipleMaxCount: multipleMaxCount,
    accept: accept,
    onSuccess: function onSuccess(files) {
      return uploadFile(files.map(function (file) {
        return file.src.file;
      }));
    },
    onError: function onError(errors) {
      var message = outputFileSelectionError(errors);
      showSnackbar(message);
    }
  }, function (_ref10) {
    var getDropZoneProps = _ref10.getDropZoneProps,
        browseFiles = _ref10.browseFiles,
        validateFiles = _ref10.validateFiles;
    return /*#__PURE__*/React.createElement(OverlayLayout, Object.assign({}, getDropZoneProps({
      onDragEnter: function onDragEnter() {
        return hasPreviouslyUploadedFiles && setDragging(true);
      },
      onExited: onClose
    }), {
      barLeft: /*#__PURE__*/React.createElement(InputSearch, null, /*#__PURE__*/React.createElement(Icon, {
        className: searchIcon,
        icon: /*#__PURE__*/React.createElement(SearchIcon, null)
      }), /*#__PURE__*/React.createElement("input", {
        ref: searchInput,
        onChange: function onChange(e) {
          return searchOnChange(e.target.value);
        },
        placeholder: t(_templateObject3())
      })),
      barRight: selected.length > 0 ? /*#__PURE__*/React.createElement(ButtonPrimary, {
        disabled: uploading,
        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return onChange(multiple ? selected : selected[0]);

                case 2:
                  onClose();

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }))
      }, t(_templateObject4()), " ", multiple && "(".concat(selected.length, ")")) :
      /*#__PURE__*/
      // @ts-ignore
      React.createElement(ButtonPrimary, {
        onClick: browseFiles,
        disabled: uploading
      }, /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: /*#__PURE__*/React.createElement(UploadIcon, null)
      }), t(_templateObject5()))
    }), /*#__PURE__*/React.createElement(React.Fragment, null, dragging && hasPreviouslyUploadedFiles && /*#__PURE__*/React.createElement(DropFilesHere // @ts-ignore TODO: @adrian - className is never rendered?!
    , {
      className: style.draggingFeedback,
      onDragLeave: function onDragLeave() {
        return setDragging(false);
      },
      onDrop: function onDrop() {
        return setDragging(false);
      }
    }), /*#__PURE__*/React.createElement(FileDetails, {
      validateFiles: validateFiles,
      uploadFile: uploadFile,
      file: getFileDetailsFile({
        list: list,
        src: showingFileDetails
      })
    }), /*#__PURE__*/React.createElement(LeftSidebar, {
      queryParams: queryParams,
      toggleTag: function toggleTag(tag) {
        return _toggleTag({
          tag: tag,
          queryParams: queryParams
        });
      }
    }), /*#__PURE__*/React.createElement(FileListWrapper, null, /*#__PURE__*/React.createElement(Scrollbar, {
      onScrollFrame: function onScrollFrame(scrollFrame) {
        return refreshOnScroll({
          scrollFrame: scrollFrame,
          fetchMore: fetchMore
        });
      }
    }, /*#__PURE__*/React.createElement(FileList, null, list.length ? list.map(function (file) {
      return renderFile({
        uploadFile: uploadFile,
        file: file,
        showFileDetails: function showFileDetails() {
          return _showFileDetails(file.src);
        },
        selected: selected.find(function (current) {
          return current.src === file.src;
        }),
        onSelect: function () {
          var _onSelect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
            return _regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (!multiple) {
                      _context5.next = 3;
                      break;
                    }

                    toggleSelected(file);
                    return _context5.abrupt("return");

                  case 3:
                    _context5.next = 5;
                    return onChange(file);

                  case 5:
                    onClose();

                  case 6:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));

          function onSelect() {
            return _onSelect.apply(this, arguments);
          }

          return onSelect;
        }()
      });
    }) : renderEmpty({
      hasPreviouslyUploadedFiles: hasPreviouslyUploadedFiles,
      browseFiles: browseFiles
    }))), /*#__PURE__*/React.createElement(BottomInfoBar, {
      accept: accept,
      uploading: uploading
    }))));
  });
}

FileManagerView.defaultProps = {
  multiple: false,
  maxSize: "10mb",
  multipleMaxSize: "100mb",
  multipleMaxCount: 100
};
export default FileManagerView;
//# sourceMappingURL=FileManagerView.js.map