import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _cloneDeep from "lodash/cloneDeep";
import _get from "lodash/get";

/* eslint-disable */
import React, { useState } from "react";
import { css } from "emotion";
import { useApolloClient } from "react-apollo";
import { Chips, Chip } from "@webiny/ui/Chips";
import { Tags as TagsComponent } from "@webiny/ui/Tags";
import { UPDATE_FILE, LIST_FILES, LIST_TAGS } from "./../graphql";
import { ReactComponent as EditIcon } from "@svgr/webpack!./../icons/round-edit-24px.svg";
import { useFileManager } from "./../FileManagerContext";
import { Hotkeys } from "react-hotkeyz";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
var style = {
  editTag: /*#__PURE__*/css({
    cursor: "pointer",
    display: "inline-block"
  }, "label:editTag;")
};

function Tags(_ref) {
  var file = _ref.file;
  var client = useApolloClient();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      editing = _useState2[0],
      setEdit = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      saving = _useState4[0],
      setSaving = _useState4[1];

  var initialTags = Array.isArray(file.tags) ? _toConsumableArray(file.tags) : [];

  var _useState5 = useState(initialTags),
      _useState6 = _slicedToArray(_useState5, 2),
      currentTags = _useState6[0],
      setCurrentTags = _useState6[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useFileManager = useFileManager(),
      queryParams = _useFileManager.queryParams;

  if (editing) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Hotkeys, {
      disabled: !editing,
      zIndex: 60,
      keys: {
        esc: function esc() {
          setSaving(true);
          client.mutate({
            mutation: UPDATE_FILE,
            variables: {
              id: file.id,
              data: {
                tags: currentTags
              }
            },
            refetchQueries: [{
              query: LIST_TAGS
            }],
            update: function update(cache, updated) {
              var newFileData = _get(updated, "data.files.updateFile.data"); // 1. Update files list cache


              var data = _cloneDeep(cache.readQuery({
                query: LIST_FILES,
                variables: queryParams
              }));

              data.files.listFiles.data.forEach(function (item) {
                if (item.key === newFileData.key) {
                  item.tags = newFileData.tags;
                }
              });
              cache.writeQuery({
                query: LIST_FILES,
                variables: queryParams,
                data: data
              });
            }
          }).then(function () {
            setSaving(false);
            setEdit(false);
            showSnackbar("Tags successfully updated.");
          });
        }
      }
    }), /*#__PURE__*/React.createElement(TagsComponent, {
      disabled: saving,
      value: currentTags,
      onChange: function onChange(tags) {
        return setCurrentTags(tags.map(function (tag) {
          return tag.toLowerCase();
        }));
      },
      autoFocus: true,
      placeholder: "Enter a tag and press enter"
    }));
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, initialTags.length > 0 ? /*#__PURE__*/React.createElement(Chips, null, initialTags.map(function (tag, index) {
    return /*#__PURE__*/React.createElement(Chip, {
      key: tag + index,
      label: tag
    });
  })) : /*#__PURE__*/React.createElement("div", null, "No tags assigned."), /*#__PURE__*/React.createElement("div", {
    className: style.editTag
  }, /*#__PURE__*/React.createElement("a", {
    onClick: function onClick() {
      return setEdit(true);
    }
  }, /*#__PURE__*/React.createElement(EditIcon, null), " Edit")));
}

export default Tags;
//# sourceMappingURL=Tags.js.map