import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _cloneDeep from "lodash/cloneDeep";
import _get from "lodash/get";

/* eslint-disable */
import React, { useState } from "react";
import { useApolloClient } from "react-apollo";
import { css } from "emotion";
import { ButtonSecondary, ButtonPrimary } from "@webiny/ui/Button";
import { Input } from "@webiny/ui/Input";
import { Form } from "@webiny/form";
import { ReactComponent as EditIcon } from "@svgr/webpack!./../icons/round-edit-24px.svg";
import { UPDATE_FILE, LIST_FILES } from "./../graphql";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useFileManager } from "./../FileManagerContext";
var style = {
  editTag: /*#__PURE__*/css({
    cursor: "pointer",
    display: "inline-block"
  }, "label:editTag;")
};

function Name(_ref) {
  var file = _ref.file;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      editing = _useState2[0],
      setEdit = _useState2[1];

  var name = file.name || "";

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useFileManager = useFileManager(),
      queryParams = _useFileManager.queryParams;

  if (editing) {
    return /*#__PURE__*/React.createElement(Form, {
      data: {
        name: name
      },
      onSubmit: /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
          var name;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  name = _ref2.name;
                  setEdit(false);
                  _context.next = 4;
                  return client.mutate({
                    mutation: UPDATE_FILE,
                    variables: {
                      id: file.id,
                      data: {
                        name: name
                      }
                    },
                    update: function update(cache, updated) {
                      var newFileData = _get(updated, "data.files.updateFile.data");

                      var data = _cloneDeep(cache.readQuery({
                        query: LIST_FILES,
                        variables: queryParams
                      }));

                      data.files.listFiles.data.forEach(function (item) {
                        if (item.src === newFileData.src) {
                          item.name = newFileData.name;
                        }
                      });
                      cache.writeQuery({
                        query: LIST_FILES,
                        variables: queryParams,
                        data: data
                      });
                    }
                  });

                case 4:
                  showSnackbar("Name successfully updated.");

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }()
    }, function (_ref4) {
      var Bind = _ref4.Bind,
          submit = _ref4.submit;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Bind, {
        name: "name"
      }, /*#__PURE__*/React.createElement(Input, {
        autoFocus: true,
        placeholder: "Enter name"
      })), /*#__PURE__*/React.createElement("div", {
        style: {
          marginTop: "10px"
        }
      }, /*#__PURE__*/React.createElement(ButtonPrimary, {
        small: true,
        onClick: submit
      }, "Submit"), " ", /*#__PURE__*/React.createElement(ButtonSecondary, {
        small: true,
        onClick: function onClick() {
          return setEdit(false);
        }
      }, "Cancel")));
    });
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: style.editTag
  }, name, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("a", {
    onClick: function onClick() {
      return setEdit(true);
    }
  }, /*#__PURE__*/React.createElement(EditIcon, null), " Edit")));
}

export default Name;
//# sourceMappingURL=Name.js.map