{"version":3,"sources":["../../../src/components/Install/AppInstaller.tsx"],"names":["React","useState","styled","css","CircularProgress","ButtonPrimary","SplitView","LeftPanel","RightPanel","useInstaller","Sidebar","Elevation","Wrapper","display","flexDirection","justifyContent","minHeight","color","InstallContent","maxWidth","margin","borderRadius","boxShadow","installerSplitView","height","SuccessDialog","padding","textAlign","p","paddingBottom","InnerContent","position","AppInstaller","children","security","finished","setFinished","loading","installers","installer","showNextInstaller","showLogin","onUser","renderLayout","content","secure","cloneElement","renderBody","length","plugin","render","onInstalled"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { SplitView, LeftPanel, RightPanel } from \"@webiny/app-admin/components/SplitView\";\nimport { useInstaller } from \"./useInstaller\";\nimport Sidebar from \"./Sidebar\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\n\nexport const Wrapper = styled(\"section\")({\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    minHeight: \"100vh\",\n    color: \"var(--mdc-theme-on-surface)\"\n});\n\nexport const InstallContent = styled(\"div\")({\n    maxWidth: 800,\n    margin: \"0 auto 25px auto\",\n    \".mdc-elevation--z2\": {\n        borderRadius: 4,\n        boxShadow: \"0 1px 3px 0 rgba(0,0,0,0.15)\"\n    }\n});\n\nconst installerSplitView = css({\n    \".webiny-split-view__inner\": {\n        height: \"100vh\",\n        \".webiny-split-view__right-panel-wrapper\": {\n            height: \"100vh\"\n        }\n    }\n});\n\nconst SuccessDialog = styled(\"div\")({\n    padding: 40,\n    textAlign: \"center\",\n    p: {\n        paddingBottom: 40\n    }\n});\n\nexport const InnerContent = styled(\"div\")({\n    padding: 25,\n    position: \"relative\"\n});\n\nexport const AppInstaller = ({ children, security }) => {\n    const [finished, setFinished] = useState(false);\n    const { loading, installers, installer, showNextInstaller, showLogin, onUser } = useInstaller();\n\n    const renderLayout = (content, secure = false) => {\n        return (\n            <SplitView className={installerSplitView}>\n                <LeftPanel span={2}>\n                    <Sidebar\n                        allInstallers={installers}\n                        installer={installer}\n                        showLogin={showLogin}\n                    />\n                </LeftPanel>\n                <RightPanel span={10}>\n                    {!showLogin && !secure && content}\n                    {(showLogin || secure) && React.cloneElement(security, { onUser }, content)}\n                </RightPanel>\n            </SplitView>\n        );\n    };\n\n    const renderBody = content => {\n        return (\n            <Wrapper>\n                <InstallContent>\n                    <InnerContent>{content}</InnerContent>\n                </InstallContent>\n            </Wrapper>\n        );\n    };\n\n    // Loading installers data\n    if (loading) {\n        return <CircularProgress label={\"Checking apps...\"} />;\n    }\n\n    // This means there are no installers to run or installation was finished\n    if (!loading && (installers.length === 0 || finished)) {\n        return React.cloneElement(security, null, children);\n    }\n\n    if (installer) {\n        return renderLayout(\n            renderBody(installer.plugin.render({ onInstalled: showNextInstaller })),\n            installer.plugin.secure\n        );\n    }\n\n    return renderLayout(\n        renderBody(\n            <Elevation z={1}>\n                <SuccessDialog>\n                    <p>You have successfully installed all new applications!</p>\n                    <ButtonPrimary\n                        data-testid={\"open-webiny-cms-admin-button\"}\n                        onClick={() => setFinished(true)}\n                    >\n                        Open Webiny CMS Administration\n                    </ButtonPrimary>\n                </SuccessDialog>\n            </Elevation>\n        ),\n        true\n    );\n};\n"],"file":"AppInstaller.js"}