{"version":3,"sources":["../../src/components/FileManager.tsx"],"names":["React","ReactDOM","FileManagerView","pick","FileManagerProvider","useState","FileManagerPortal","props","window","container","document","getElementById","createElement","setAttribute","body","appendChild","onChange","onClose","accept","multiple","images","maxSize","multipleMaxCount","multipleMaxSize","files","fields","Array","isArray","map","file","createPortal","Component","FileManager","children","rest","show","setShow","showFileManager"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileManagerView from \"./FileManager/FileManagerView\";\nimport pick from \"lodash/pick\";\nimport { FileManagerProvider } from \"./FileManager/FileManagerContext\";\n\ntype FileManagerProps = {\n    onChange?: Function;\n    images?: boolean;\n    multiple?: boolean;\n    accept?: Array<string>;\n    children: ({ showFileManager: Function }) => React.ReactNode;\n    maxSize?: number | string;\n    multipleMaxCount?: number;\n    multipleMaxSize?: number | string;\n    onClose?: Function;\n};\n\ntype FileManagerPortalProps = Omit<FileManagerProps, \"children\">;\n\nconst { useState } = React;\n\nclass FileManagerPortal extends React.Component<FileManagerPortalProps> {\n    container: Element;\n    constructor(props) {\n        super(props);\n\n        if (!window) {\n            return;\n        }\n\n        this.container = window.document.getElementById(\"file-manager-container\");\n\n        if (!this.container) {\n            this.container = document.createElement(\"div\");\n            this.container.setAttribute(\"id\", \"file-manager-container\");\n            const container = this.container;\n            document.body && document.body.appendChild(container);\n        }\n    }\n\n    render() {\n        const {\n            onChange,\n            onClose,\n            accept,\n            multiple,\n            images,\n            maxSize,\n            multipleMaxCount,\n            multipleMaxSize\n        } = this.props;\n\n        const container = this.container;\n\n        const props = {\n            onChange: files => {\n                const fields = [\"id\", \"name\", \"key\", \"src\", \"size\", \"type\"];\n                if (Array.isArray(files)) {\n                    onChange(files.map(file => pick(file, fields)));\n                } else {\n                    onChange(pick(files, fields));\n                }\n            },\n            onClose,\n            accept,\n            multiple,\n            maxSize,\n            multipleMaxCount,\n            multipleMaxSize\n        };\n\n        if (images) {\n            props.accept = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\", \"image/svg+xml\"];\n        }\n\n        // Let's pass \"permanent\" / \"persistent\" / \"temporary\" flags as \"mode\" prop instead.\n        return ReactDOM.createPortal(\n            <FileManagerProvider {...props}>\n                <FileManagerView {...props} />\n            </FileManagerProvider>,\n            container\n        );\n    }\n}\n\nexport function FileManager({ children, ...rest }: FileManagerProps) {\n    const [show, setShow] = useState(false);\n    return (\n        <>\n            {show && <FileManagerPortal onClose={() => setShow(false)} {...rest} />}\n            {children({\n                showFileManager: () => setShow(true)\n            })}\n        </>\n    );\n}\n"],"file":"FileManager.js"}