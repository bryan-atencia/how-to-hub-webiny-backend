{"version":3,"sources":["../../../src/components/SplitView/SplitView.tsx"],"names":["React","classSet","Cell","Grid","GridInner","css","styled","getClasses","grid","padding","backgroundColor","gridInner","gridGap","RightPanelWrapper","overflow","height","leftPanel","display","flexDirection","maxHeight","SplitView","props","className","children","LeftPanel","propList","hasOwnProperty","span","RightPanel"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,SAArB,QAAiD,iBAAjD;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,IAAMC,IAAI,gBAAGH,GAAG,CAAC;AACb,uBAAqB;AACjBI,IAAAA,OAAO,EAAE,CADQ;AAEjBC,IAAAA,eAAe,EAAE;AAFA;AADR,CAAD,gBAAhB;AAOA,IAAMC,SAAS,gBAAGN,GAAG,CAAC;AAClB,8BAA4B;AACxBO,IAAAA,OAAO,EAAE;AADe;AADV,CAAD,qBAArB;AAMA,IAAMC,iBAAiB,gBAAGP,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AACpC;AACAI,EAAAA,eAAe,EAAE,6BAFmB;AAGpCI,EAAAA,QAAQ,EAAE,QAH0B;AAIpCC,EAAAA,MAAM,EAAE;AAJ4B,CAAjB,CAAvB;AAOA,IAAMC,SAAS,gBAAGX,GAAG,CAAC;AAClBK,EAAAA,eAAe,EAAE,0BADC;AAElB,wBAAsB;AAClBO,IAAAA,OAAO,EAAE,MADS;AAElBC,IAAAA,aAAa,EAAE,QAFG;AAGlBC,IAAAA,SAAS,EAAE,oBAHO;AAIlB,iBAAa;AACTJ,MAAAA,MAAM,EAAE,MADC;AAETD,MAAAA,QAAQ,EAAE;AAFD;AAJK,GAFJ;AAWlB,gBAAc;AACVG,IAAAA,OAAO,EAAE,MADC;AAEVC,IAAAA,aAAa,EAAE,QAFL;AAGVC,IAAAA,SAAS,EAAE,oBAHD;AAIVL,IAAAA,QAAQ,EAAE;AAJA;AAXI,CAAD,qBAArB;;AAwBA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA2B;AACzC,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEpB,QAAQ,CAACO,IAAD,EAAOa,KAAK,CAACC,SAAb,EAAwB,mBAAxB;AAAzB,kBACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEX,SAAS,GAAG;AAAlC,KACKU,KAAK,CAACE,QADX,CADJ,CADJ;AAOH,CARD;;AAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACH,KAAD,EAAsB;AACpC,MAAMI,QAAQ,GAAG,OAAMJ,KAAN,CAAjB;;AACA,MAAI,CAACI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAL,EAAsC;AAClCD,IAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACH;;AAED,sBACI,oBAAC,IAAD,EACQpB,UAAU,CACVkB,QADU,EAEVxB,QAAQ,CAACe,SAAD,EAAYK,KAAK,CAACC,SAAlB,EAA6B,+BAA7B,CAFE,CADlB,EAMKG,QAAQ,CAACF,QANd,CADJ;AAUH,CAhBD;;AAkBA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACP,KAAD,EAAsB;AACrC,MAAMI,QAAQ,GAAG,OAAMJ,KAAN,CAAjB;;AACA,MAAI,CAACI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAL,EAAsC;AAClCD,IAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACH;;AAED,sBACI,oBAAC,IAAD,EAAUpB,UAAU,CAACkB,QAAD,EAAW,gCAAX,CAApB,eACI,oBAAC,iBAAD;AACI,IAAA,SAAS,EAAE,wCADf;AAEI,IAAA,EAAE,EAAE;AAFR,KAIKA,QAAQ,CAACF,QAJd,CADJ,CADJ;AAUH,CAhBD;;AAkBA,SAASH,SAAT,EAAoBI,SAApB,EAA+BI,UAA/B","sourcesContent":["import * as React from \"react\";\nimport classSet from \"classnames\";\nimport { Cell, Grid, GridInner, CellProps } from \"@webiny/ui/Grid\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport { clone } from \"lodash\";\nimport { getClasses } from \"@webiny/ui/Helpers\";\n\nconst grid = css({\n    \"&.mdc-layout-grid\": {\n        padding: 0,\n        backgroundColor: \"var(--mdc-theme-background)\"\n    }\n});\n\nconst gridInner = css({\n    \"&.mdc-layout-grid__inner\": {\n        gridGap: 0\n    }\n});\n\nconst RightPanelWrapper = styled(\"div\")({\n    //padding: 25,\n    backgroundColor: \"var(--mdc-theme-background)\",\n    overflow: \"scroll\",\n    height: \"calc(100vh - 70px)\"\n});\n\nconst leftPanel = css({\n    backgroundColor: \"var(--mdc-theme-surface)\",\n    \">.webiny-data-list\": {\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxHeight: \"calc(100vh - 70px)\",\n        \".mdc-list\": {\n            height: \"100%\",\n            overflow: \"scroll\"\n        }\n    },\n    \">.mdc-list\": {\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxHeight: \"calc(100vh - 70px)\",\n        overflow: \"scroll\"\n    }\n});\n\ntype SplitViewProps = {\n    children: React.ReactElement<any> | React.ReactElement<any>[];\n    className?: string;\n};\n\nconst SplitView = (props: SplitViewProps) => {\n    return (\n        <Grid className={classSet(grid, props.className, \"webiny-split-view\")}>\n            <GridInner className={gridInner + \" webiny-split-view__inner\"}>\n                {props.children}\n            </GridInner>\n        </Grid>\n    );\n};\n\nconst LeftPanel = (props: CellProps) => {\n    const propList = clone(props);\n    if (!propList.hasOwnProperty(\"span\")) {\n        propList.span = 5;\n    }\n\n    return (\n        <Cell\n            {...getClasses(\n                propList,\n                classSet(leftPanel, props.className, \"webiny-split-view__left-panel\")\n            )}\n        >\n            {propList.children}\n        </Cell>\n    );\n};\n\nconst RightPanel = (props: CellProps) => {\n    const propList = clone(props);\n    if (!propList.hasOwnProperty(\"span\")) {\n        propList.span = 7;\n    }\n\n    return (\n        <Cell {...getClasses(propList, \"webiny-split-view__right-panel\")}>\n            <RightPanelWrapper\n                className={\"webiny-split-view__right-panel-wrapper\"}\n                id={\"webiny-split-view-right-panel\"}\n            >\n                {propList.children}\n            </RightPanelWrapper>\n        </Cell>\n    );\n};\n\nexport { SplitView, LeftPanel, RightPanel };\n"],"file":"SplitView.js"}