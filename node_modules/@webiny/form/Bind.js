import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _get from "lodash/get";
import * as React from "react";
import invariant from "invariant";

var createBind = function createBind(form) {
  var Bind = function Bind(props) {
    var name = props.name,
        _props$validators = props.validators,
        validators = _props$validators === void 0 ? [] : _props$validators,
        children = props.children,
        defaultValue = props.defaultValue,
        beforeChange = props.beforeChange,
        afterChange = props.afterChange;
    invariant(name, "Bind component must have a \"name\" prop."); // Track component rendering

    form.lastRender.push(name); // Store validators and custom messages

    form.inputs[name] = {
      defaultValue: defaultValue,
      validators: validators
    }; // Build new input props

    var newProps = {
      disabled: false,
      form: form,
      validate: form.getValidateFn(name),
      validation: form.state.validation[name] || {
        isValid: null,
        message: null,
        results: null
      },
      value: _get(form.state, "data.".concat(name), defaultValue),
      onChange: form.getOnChangeFn({
        name: name,
        beforeChange: beforeChange,
        afterChange: afterChange
      })
    }; // If Form has a `disabled` prop we must evaluate it to see if form input needs to be disabled

    if (form.props.disabled) {
      var inputDisabledByForm = typeof form.props.disabled === "function" ? form.props.disabled({
        data: _objectSpread({}, form.state.data)
      }) : form.props.disabled; // Only override the input prop if the entire Form is disabled

      if (inputDisabledByForm) {
        newProps.disabled = true;
      }
    }

    form.inputs[name].props = newProps;

    if ( /*#__PURE__*/React.isValidElement(children)) {
      if (!newProps.disabled) {
        newProps.disabled = children.props.disabled;
      }

      return /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, children.props), newProps));
    }

    return children(newProps);
  };

  return Bind;
};

export { createBind };
//# sourceMappingURL=Bind.js.map