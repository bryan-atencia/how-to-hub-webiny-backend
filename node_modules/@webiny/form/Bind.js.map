{"version":3,"sources":["../src/Bind.ts"],"names":["React","invariant","createBind","form","Bind","props","name","validators","children","defaultValue","beforeChange","afterChange","lastRender","push","inputs","newProps","disabled","validate","getValidateFn","validation","state","isValid","message","results","value","onChange","getOnChangeFn","inputDisabledByForm","data","isValidElement","cloneElement"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,SAAP,MAAsB,WAAtB;;AA8BA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAgB;AAC/B,MAAMC,IAAmB,GAAG,SAAtBA,IAAsB,CAAAC,KAAK,EAAI;AAAA,QACzBC,IADyB,GACoDD,KADpD,CACzBC,IADyB;AAAA,4BACoDD,KADpD,CACnBE,UADmB;AAAA,QACnBA,UADmB,kCACN,EADM;AAAA,QACFC,QADE,GACoDH,KADpD,CACFG,QADE;AAAA,QACQC,YADR,GACoDJ,KADpD,CACQI,YADR;AAAA,QACsBC,YADtB,GACoDL,KADpD,CACsBK,YADtB;AAAA,QACoCC,WADpC,GACoDN,KADpD,CACoCM,WADpC;AAGjCV,IAAAA,SAAS,CAACK,IAAD,8CAAT,CAHiC,CAKjC;;AACAH,IAAAA,IAAI,CAACS,UAAL,CAAgBC,IAAhB,CAAqBP,IAArB,EANiC,CAQjC;;AACAH,IAAAA,IAAI,CAACW,MAAL,CAAYR,IAAZ,IAAoB;AAChBG,MAAAA,YAAY,EAAZA,YADgB;AAEhBF,MAAAA,UAAU,EAAVA;AAFgB,KAApB,CATiC,CAcjC;;AACA,QAAMQ,QAAQ,GAAG;AACbC,MAAAA,QAAQ,EAAE,KADG;AAEbb,MAAAA,IAAI,EAAJA,IAFa;AAGbc,MAAAA,QAAQ,EAAEd,IAAI,CAACe,aAAL,CAAmBZ,IAAnB,CAHG;AAIba,MAAAA,UAAU,EAAEhB,IAAI,CAACiB,KAAL,CAAWD,UAAX,CAAsBb,IAAtB,KAA+B;AACvCe,QAAAA,OAAO,EAAE,IAD8B;AAEvCC,QAAAA,OAAO,EAAE,IAF8B;AAGvCC,QAAAA,OAAO,EAAE;AAH8B,OAJ9B;AASbC,MAAAA,KAAK,EAAE,KAAIrB,IAAI,CAACiB,KAAT,iBAAwBd,IAAxB,GAAgCG,YAAhC,CATM;AAUbgB,MAAAA,QAAQ,EAAEtB,IAAI,CAACuB,aAAL,CAAmB;AAAEpB,QAAAA,IAAI,EAAJA,IAAF;AAAQI,QAAAA,YAAY,EAAZA,YAAR;AAAsBC,QAAAA,WAAW,EAAXA;AAAtB,OAAnB;AAVG,KAAjB,CAfiC,CA4BjC;;AACA,QAAIR,IAAI,CAACE,KAAL,CAAWW,QAAf,EAAyB;AACrB,UAAMW,mBAAmB,GACrB,OAAOxB,IAAI,CAACE,KAAL,CAAWW,QAAlB,KAA+B,UAA/B,GACMb,IAAI,CAACE,KAAL,CAAWW,QAAX,CAAoB;AAAEY,QAAAA,IAAI,oBAAOzB,IAAI,CAACiB,KAAL,CAAWQ,IAAlB;AAAN,OAApB,CADN,GAEMzB,IAAI,CAACE,KAAL,CAAWW,QAHrB,CADqB,CAKrB;;AACA,UAAIW,mBAAJ,EAAyB;AACrBZ,QAAAA,QAAQ,CAACC,QAAT,GAAoB,IAApB;AACH;AACJ;;AAEDb,IAAAA,IAAI,CAACW,MAAL,CAAYR,IAAZ,EAAkBD,KAAlB,GAA0BU,QAA1B;;AAEA,sBAAIf,KAAK,CAAC6B,cAAN,CAAqBrB,QAArB,CAAJ,EAAoC;AAChC,UAAI,CAACO,QAAQ,CAACC,QAAd,EAAwB;AACpBD,QAAAA,QAAQ,CAACC,QAAT,GAAoBR,QAAQ,CAACH,KAAT,CAAeW,QAAnC;AACH;;AACD,0BAAOhB,KAAK,CAAC8B,YAAN,CAAmBtB,QAAnB,kCAAkCA,QAAQ,CAACH,KAA3C,GAAqDU,QAArD,EAAP;AACH;;AAED,WAAOP,QAAQ,CAACO,QAAD,CAAf;AACH,GAlDD;;AAoDA,SAAOX,IAAP;AACH,CAtDD;;AAwDA,SAASF,UAAT","sourcesContent":["import * as React from \"react\";\nimport { get } from \"lodash\";\nimport { Form } from \"./Form\";\nimport invariant from \"invariant\";\n\nexport type BindComponentRenderPropValidation = {\n    isValid: boolean;\n    message: string;\n    results?: { [key: string]: any };\n};\n\nexport type BindComponentRenderPropOnChange = (value: any) => Promise<void>;\n\nexport type BindComponentRenderProp = {\n    form: Object;\n    onChange: BindComponentRenderPropOnChange;\n    value: any;\n    validate: () => Promise<boolean | any>;\n    validation: BindComponentRenderPropValidation;\n};\n\nexport type BindComponentProps = {\n    name: string;\n    beforeChange?: Function;\n    afterChange?: Function;\n    defaultValue?: any;\n    validators?: Function | Array<Function>;\n    children: ((props: BindComponentRenderProp) => React.ReactElement) | React.ReactElement;\n    validate?: Function;\n};\n\nexport type BindComponent = (props: BindComponentProps) => React.ReactElement;\n\nconst createBind = (form: Form) => {\n    const Bind: BindComponent = props => {\n        const { name, validators = [], children, defaultValue, beforeChange, afterChange } = props;\n\n        invariant(name, `Bind component must have a \"name\" prop.`);\n\n        // Track component rendering\n        form.lastRender.push(name);\n\n        // Store validators and custom messages\n        form.inputs[name] = {\n            defaultValue,\n            validators\n        };\n\n        // Build new input props\n        const newProps = {\n            disabled: false,\n            form,\n            validate: form.getValidateFn(name),\n            validation: form.state.validation[name] || {\n                isValid: null,\n                message: null,\n                results: null\n            },\n            value: get(form.state, `data.${name}`, defaultValue),\n            onChange: form.getOnChangeFn({ name, beforeChange, afterChange })\n        };\n\n        // If Form has a `disabled` prop we must evaluate it to see if form input needs to be disabled\n        if (form.props.disabled) {\n            const inputDisabledByForm =\n                typeof form.props.disabled === \"function\"\n                    ? form.props.disabled({ data: { ...form.state.data } })\n                    : form.props.disabled;\n            // Only override the input prop if the entire Form is disabled\n            if (inputDisabledByForm) {\n                newProps.disabled = true;\n            }\n        }\n\n        form.inputs[name].props = newProps;\n\n        if (React.isValidElement(children)) {\n            if (!newProps.disabled) {\n                newProps.disabled = children.props.disabled;\n            }\n            return React.cloneElement(children, { ...children.props, ...newProps });\n        }\n\n        return children(newProps);\n    };\n\n    return Bind;\n};\n\nexport { createBind };\n"],"file":"Bind.js"}