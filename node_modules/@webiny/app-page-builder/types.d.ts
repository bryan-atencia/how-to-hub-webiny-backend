import { ComponentType, ReactElement, ReactNode } from "react";
import { Value } from "slate";
import { Plugin as SlatePlugin, Editor } from "slate-react";
import { Plugin } from "@webiny/app/types";
import { BindComponent } from "@webiny/form/Bind";
import { Reducer as ReduxReducer, Store as ReduxStore } from "redux";
import { PbPageDetailsContextValue, PbPageRevision } from "./admin/contexts/PageDetails/PageDetailsContext";
import { IconPrefix, IconName } from "@fortawesome/fontawesome-svg-core";
import { MenuButtonProps } from "@webiny/app-page-builder/editor/components/Slate/Menu";
import { EditorBarProps } from "@webiny/app-page-builder/editor/components/Editor/Bar";
import { Form } from "@webiny/form/Form";
export { Redux } from "@webiny/app-page-builder/editor/redux";
import { Item } from "@webiny/app-admin/plugins/Menu/Navigation/components";
export declare type PbMenuSettingsItemPlugin = Plugin & {
    type: "menu-settings-page-builder";
    render(props: {
        Item: typeof Item;
    }): React.ReactNode;
};
export declare type PbElement = {
    id: string;
    path: string;
    type: string;
    elements: Array<PbElement>;
    data: {
        [key: string]: any;
    };
    [key: string]: any;
};
export declare type PbTheme = {
    colors: {
        [key: string]: string;
    };
    elements: {
        [key: string]: any;
    };
    typography: {
        [key: string]: {
            label: string;
            component: string | React.ComponentType<any>;
            className: string;
        };
    };
};
export declare type PbThemePlugin = Plugin & {
    theme: PbTheme;
};
export declare type PbPageLayout = {
    name: string;
    title: string;
    component: React.ComponentType<any>;
};
export declare type PbPageLayoutPlugin = Plugin & {
    layout: PbPageLayout;
};
export declare type PbDefaultPagePlugin = Plugin & {
    type: "pb-default-page";
    component: React.ComponentType<any>;
};
export declare type PbPageLayoutComponentPlugin = Plugin & {
    componentType: string;
    component: React.ComponentType<any>;
};
export declare type PbPageData = {
    title?: string;
    content: any;
    seo?: {
        title: string;
        description: string;
        meta: {
            name: string;
            content: string;
        }[];
    };
    social?: {
        title: string;
        description: string;
        meta: {
            property: string;
            content: string;
        }[];
        image: {
            src: string;
        };
    };
    settings?: {
        general?: {
            layout?: string;
        };
    };
};
export declare type PbRenderElementPlugin = Plugin & {
    type: "pb-render-page-element";
    elementType: string;
    render: (params: {
        theme: PbTheme;
        element: PbElement;
    }) => React.ReactNode;
};
export declare type PbPageSettingsFieldsPlugin = Plugin & {
    fields: string;
};
export declare type PbRenderElementStylePlugin = Plugin & {
    renderStyle: (params: {
        element: {
            id: string;
            type: string;
            data: {
                [key: string]: any;
            };
        };
        style: {
            [key: string]: any;
        };
    }) => {
        [key: string]: any;
    };
};
export declare type PbRenderElementAttributesPlugin = Plugin & {
    renderAttributes: (params: {
        element: {
            id: string;
            type: string;
            data: {
                [key: string]: any;
            };
        };
        attributes: {
            [key: string]: string;
        };
    }) => {
        [key: string]: string;
    };
};
export declare type PbPageElementImagesListComponentPlugin = Plugin & {
    type: "pb-page-element-images-list-component";
    title: string;
    componentName: string;
    component: ComponentType<any>;
};
export declare type PbPageElementPagesListComponentPlugin = Plugin & {
    type: "pb-page-element-pages-list-component";
    title: string;
    componentName: string;
    component: ComponentType<any>;
};
export declare type PbRenderSlateEditorPlugin = Plugin & {
    type: "pb-render-slate-editor";
    slate: SlatePlugin;
};
export declare type PbAddonRenderPlugin = Plugin & {
    type: "addon-render";
    component: ReactElement;
};
export declare type PbShallowElement = Omit<PbElement, "elements"> & {
    elements: string[];
};
export declare type Action = {
    type: string;
    payload: {
        [key: string]: any;
    };
    meta: {
        [key: string]: any;
    };
};
export declare type ActionOptions = {
    log?: boolean;
};
export declare type StatePathGetter = (action: Action) => string;
export declare type StatePath = null | string | StatePathGetter;
export declare type Reducer = ReduxReducer;
export declare type ReducerFactory = () => Reducer;
export declare type Store = ReduxStore;
export declare type State = {
    elements?: {
        [key: string]: PbShallowElement;
    };
    page?: {
        [key: string]: any;
    };
    revisions?: Array<{
        [key: string]: any;
    }>;
    ui?: {
        [key: string]: any;
    };
};
export declare type MiddlewareParams = {
    store: Store;
    next: Function;
    action: Action;
};
export declare type MiddlewareFunction = (params: MiddlewareParams) => any;
export declare type ActionCreator = (payload?: any, meta?: {
    [key: string]: any;
}) => Action;
export declare type PbEditorReduxMiddlewarePlugin = Plugin & {
    type: "pb-editor-redux-middleware";
    actions: string[];
    middleware: MiddlewareFunction;
};
export { PbPageDetailsContextValue, PbPageRevision };
export declare type PbDocumentElementPlugin = Plugin & {
    elementType: "document";
    create(options?: any): PbElement;
    render(props: any): ReactElement;
};
export declare type PbPageDetailsRevisionContentPlugin = Plugin & {
    type: "pb-page-details-revision-content";
    render(params: {
        pageDetails: PbPageDetailsContextValue;
        loading: boolean;
        refreshPages: () => void;
    }): ReactElement;
};
export declare type PbPageDetailsHeaderRightOptionsMenuItemPlugin = Plugin & {
    type: "pb-page-details-header-right-options-menu-item";
    render(props: any): ReactElement;
};
export declare type PbPageDetailsRevisionContentPreviewPlugin = Plugin & {
    type: "pb-page-details-revision-content-preview";
    render(params: {
        pageDetails: PbPageDetailsContextValue;
        loading: boolean;
        refreshPages: () => void;
    }): ReactElement;
};
export declare type PbMenuItemPlugin = Plugin & {
    type: "pb-menu-item";
    menuItem: {
        type: string;
        title: string;
        icon: ReactElement;
        canHaveChildren: boolean;
        renderForm: (params: {
            data: {
                [key: string]: any;
            };
            onSubmit: Function;
            onCancel: Function;
        }) => ReactElement;
    };
};
export declare type PbEditorPageElementGroupPlugin = Plugin & {
    type: "pb-editor-page-element-group";
    group: {
        title: string;
        icon: ReactElement;
    };
};
export declare type PbEditorPageElementTitle = (params: {
    refresh: () => void;
}) => ReactNode;
export declare type PbEditorPageElementPlugin = Plugin & {
    type: "pb-editor-page-element";
    elementType: string;
    toolbar?: {
        title?: string | PbEditorPageElementTitle;
        group?: string;
        preview?: ({ theme: PbTheme }: {
            theme: any;
        }) => ReactNode;
    };
    help?: string;
    target?: string[];
    settings?: Array<string>;
    create: (options: {
        [key: string]: any;
    }, parent?: PbElement) => Omit<PbElement, "id" | "path">;
    render: (params: {
        theme?: PbTheme;
        element: PbElement;
    }) => ReactNode;
    canDelete?: (params: {
        element: PbElement;
    }) => boolean;
    onReceived?: (params: {
        store?: Store;
        source: PbElement | {
            type: string;
            path?: string;
        };
        target: PbElement;
        position: number | null;
    }) => void;
    onChildDeleted?: (params: {
        element: PbElement;
        child: PbElement;
    }) => void;
    onCreate?: string;
    renderElementPreview?: (params: {
        element: PbElement;
        width: number;
        height: number;
    }) => ReactElement;
};
export declare type PbEditorPageElementActionPlugin = Plugin & {
    type: "pb-editor-page-element-action";
    render: (params: {
        element: PbElement;
        plugin: PbEditorPageElementPlugin;
    }) => ReactNode;
};
export declare type PbPageDetailsPlugin = Plugin & {
    render: (params: {
        [key: string]: any;
    }) => ReactNode;
};
export declare type PbEditorPageSettingsPlugin = Plugin & {
    type: "pb-editor-page-settings";
    title: string;
    description: string;
    icon: ReactNode;
    fields: string;
    render: (params: {
        form: Form;
        Bind: BindComponent;
    }) => ReactNode;
};
export declare type PbIcon = {
    /**
     * [ pack, icon ], ex: ["fab", "cog"]
     */
    id: [IconPrefix, IconName];
    /**
     * Icon name
     */
    name: string;
    /**
     * SVG element
     */
    svg: ReactElement;
};
export declare type PbIconsPlugin = Plugin & {
    type: "pb-icons";
    getIcons(): PbIcon[];
};
export declare type PbEditorSlateEditorPlugin = Plugin & {
    type: "pb-editor-slate-editor";
    slate: SlatePlugin;
};
export declare type PbEditorSlateMenuItemPlugin = Plugin & {
    type: "pb-editor-slate-menu-item";
    render(params: {
        MenuButton: ComponentType<MenuButtonProps>;
        value: Value;
        onChange: any;
        editor: Editor;
        activatePlugin: any;
    }): ReactElement;
    renderDialog?: (params: {
        onChange(change: Editor): void;
        editor: Editor;
        open: boolean;
        closeDialog(): void;
        activePlugin: {
            plugin: string;
            value: {
                [key: string]: any;
            };
        };
        activatePlugin(name: string): void;
    }) => ReactElement;
};
export declare type PbEditorBarPlugin = Plugin & {
    type: "pb-editor-bar";
    shouldRender(props: EditorBarProps): boolean;
    render(): ReactElement;
};
export declare type PbEditorContentPlugin = Plugin & {
    type: "pb-editor-content";
    render(): ReactElement;
};
export declare type PbEditorDefaultBarLeftPlugin = Plugin & {
    type: "pb-editor-default-bar-left";
    render(): ReactElement;
};
export declare type PbEditorDefaultBarRightPlugin = Plugin & {
    type: "pb-editor-default-bar-right";
    render(): ReactElement;
};
export declare type PbEditorDefaultBarRightPageOptionsPlugin = Plugin & {
    type: "pb-editor-default-bar-right-page-options";
    render(): ReactElement;
};
export declare type PbEditorToolbarTopPlugin = Plugin & {
    type: "pb-editor-toolbar-top";
    renderAction(): ReactElement;
    renderDialog?: () => ReactElement;
    renderDrawer?: () => ReactElement;
};
export declare type PbEditorToolbarBottomPlugin = Plugin & {
    type: "pb-editor-toolbar-bottom";
    renderAction(): ReactElement;
    renderDialog?: () => ReactElement;
};
export declare type PbEditorBlockPlugin = Plugin & {
    type: "pb-editor-block";
    title: string;
    category: string;
    tags: string[];
    image: {
        src?: string;
        meta: {
            width: number;
            height: number;
            aspectRatio: number;
        };
    };
    create(): PbElement;
    preview(): ReactElement;
};
export declare type PbEditorBlockCategoryPlugin = Plugin & {
    type: "pb-editor-block-category";
    title: string;
    categoryName: string;
    description: string;
    icon: ReactElement;
};
export declare type PbEditorPageElementSettingsPlugin = Plugin & {
    type: "pb-editor-page-element-settings";
    renderAction(params: {
        options?: any;
    }): ReactElement;
    renderMenu?: (params: {
        options?: any;
    }) => ReactElement;
};
export declare type PbEditorPageElementAdvancedSettingsPlugin = Plugin & {
    type: "pb-editor-page-element-advanced-settings";
    elementType: string;
    render(params?: {
        Bind: BindComponent;
        data: any;
    }): ReactElement;
    onSave?: (data: FormData) => FormData;
};
