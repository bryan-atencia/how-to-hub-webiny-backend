import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _omit from "lodash/omit";
import _isPlainObject from "lodash/isPlainObject";
import shortid from "shortid";
import invariant from "invariant";
import { set } from "dot-prop-immutable";
import { getPlugin, getPlugins } from "@webiny/plugins";
export var updateChildPaths = function updateChildPaths(element) {
  if (!element.id) {
    element.id = shortid.generate();
  }

  if (!element.path) {
    element.path = "0";
  }

  if (Array.isArray(element.elements)) {
    // Process children only if "elements" is an array of objects.
    // We may get an array of strings when working with shallow element copies.
    if (_isPlainObject(element.elements[0])) {
      element.elements.forEach(function (el, index) {
        if (!el.id) {
          el.id = shortid.generate();
        }

        el.path = element.path + "." + index;

        if (el.elements.length) {
          updateChildPaths(el);
        }
      });
    }
  }
};
export var addElementToParent = function addElementToParent(element, parent, position) {
  var newParent;

  if (position === null) {
    newParent = set(parent, "elements", [].concat(_toConsumableArray(parent.elements), [element]));
  } else {
    newParent = set(parent, "elements", [].concat(_toConsumableArray(parent.elements.slice(0, position)), [element], _toConsumableArray(parent.elements.slice(position))));
  }

  updateChildPaths(newParent);
  return newParent;
};
export var createElement = function createElement(type) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parent = arguments.length > 2 ? arguments[2] : undefined;
  var plugin = getPlugins("pb-editor-page-element").find(function (pl) {
    return pl.elementType === type;
  });
  invariant(plugin, "Missing element plugin for type \"".concat(type, "\"!"));
  return _objectSpread({
    id: shortid.generate(),
    data: {},
    elements: [],
    path: "",
    type: type
  }, plugin.create(options, parent));
};
export var createBlock = function createBlock() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var parent = arguments.length > 1 ? arguments[1] : undefined;
  return createElement("block", options, parent);
};
export var createRow = function createRow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var parent = arguments.length > 1 ? arguments[1] : undefined;
  return createElement("row", options, parent);
};
export var createColumn = function createColumn() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var parent = arguments.length > 1 ? arguments[1] : undefined;
  return createElement("column", options, parent);
};
export var createBlockElements = function createBlockElements(name) {
  var plugin = getPlugin(name);
  invariant(plugin, "Missing block plugin \"".concat(name, "\"!"));
  return _objectSpread({
    id: shortid.generate(),
    data: {},
    elements: [],
    path: ""
  }, plugin.create());
};
export var cloneElement = function cloneElement(element) {
  var clone = _omit(element, ["id", "path"]);

  clone.elements = clone.elements.map(function (el) {
    return cloneElement(el);
  });
  return clone;
};
//# sourceMappingURL=utils.js.map