{"version":3,"sources":["../../../../src/editor/components/DropZone/Center.tsx"],"names":["React","styled","getElementProps","connect","Droppable","Container","memo","isOver","backgroundColor","boxSizing","height","minHeight","position","userSelect","width","border","color","Add","top","left","transform","margin","isVisible","Center","type","onDrop","children","active","highlight","isDroppable","drop","state","props"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,eAAT,QAAgC,2CAAhC;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAOA,IAAMC,SAAS,gBAAGL,KAAK,CAACM,IAAN;AAAA;AACd;AACAL,MAFc,CAEP,KAFO;AAAA;AAAA;AAAA,GAEA;AAAA,MAAGM,MAAH,QAAGA,MAAH;AAAA,SAAiB;AAC3BC,IAAAA,eAAe,EAAE,aADU;AAE3BC,IAAAA,SAAS,EAAE,YAFgB;AAG3BC,IAAAA,MAAM,EAAE,MAHmB;AAI3BC,IAAAA,SAAS,EAAE,GAJgB;AAK3BC,IAAAA,QAAQ,EAAE,UALiB;AAM3BC,IAAAA,UAAU,EAAE,MANe;AAO3BC,IAAAA,KAAK,EAAE,MAPoB;AAQ3BC,IAAAA,MAAM,EAAER,MAAM,GACR,qCADQ,GAER,uCAVqB;AAW3B,gBAAY;AACRS,MAAAA,KAAK,EAAET,MAAM,GACP,qCADO,GAEP;AAHE;AAXe,GAAjB;AAAA,CAFA,EAAlB;AAqBA,IAAMU,GAAG,gBAAGhB,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AACtBW,EAAAA,QAAQ,EAAE,UADY;AAEtBM,EAAAA,GAAG,EAAE,KAFiB;AAGtBC,EAAAA,IAAI,EAAE,KAHgB;AAItBC,EAAAA,SAAS,EAAE,sBAJW;AAKtBC,EAAAA,MAAM,EAAE;AALc,CAAjB,CAAT;;AAQA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAM,IAAN;AAAA,CAAlB;;AAUA,IAAMC,MAAM,GAAG,SAATA,MAAS,QAA0D;AAAA,MAAvDC,IAAuD,SAAvDA,IAAuD;AAAA,MAAjDC,MAAiD,SAAjDA,MAAiD;AAAA,MAAzCC,QAAyC,SAAzCA,QAAyC;AAAA,MAA/BC,MAA+B,SAA/BA,MAA+B;AAAA,MAAvBC,SAAuB,SAAvBA,SAAuB;AACrE,sBACI,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEH,MAAnB;AAA2B,IAAA,IAAI,EAAED,IAAjC;AAAuC,IAAA,SAAS,EAAEF;AAAlD,KACK;AAAA,QAAGf,MAAH,SAAGA,MAAH;AAAA,QAAWsB,WAAX,SAAWA,WAAX;AAAA,QAAwBC,IAAxB,SAAwBA,IAAxB;AAAA,wBACG;AAAK,MAAA,KAAK,EAAE;AAAEhB,QAAAA,KAAK,EAAE,MAAT;AAAiBJ,QAAAA,MAAM,EAAE;AAAzB,OAAZ;AAA+C,MAAA,GAAG,EAAEoB;AAApD,oBACI,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAGvB,MAAM,IAAIsB,WAAX,IAA2BF,MAA9C;AAAsD,MAAA,SAAS,EAAEC;AAAjE,oBACI,oBAAC,GAAD,QAAMF,QAAN,CADJ,CADJ,CADH;AAAA,GADL,CADJ;AAWH,CAZD;;AAcA,eAAevB,OAAO,CAAgB,UAAC4B,KAAD,EAAQC,KAAR,EAAkB;AACpD,SAAO9B,eAAe,CAAC6B,KAAD,EAAQC,KAAR,CAAtB;AACH,CAFqB,CAAP,eAEZhC,KAAK,CAACM,IAAN,CAAWiB,MAAX,CAFY,CAAf","sourcesContent":["import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { getElementProps } from \"@webiny/app-page-builder/editor/selectors\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport Droppable from \"./../Droppable\";\n\ntype ContainerProps = {\n    isOver: boolean;\n    highlight: boolean;\n};\n\nconst Container = React.memo<ContainerProps>(\n    // @ts-ignore\n    styled(\"div\")(({ isOver }) => ({\n        backgroundColor: \"transparent\",\n        boxSizing: \"border-box\",\n        height: \"100%\",\n        minHeight: 100,\n        position: \"relative\",\n        userSelect: \"none\",\n        width: \"100%\",\n        border: isOver\n            ? \"1px dashed var(--mdc-theme-primary)\"\n            : \"1px dashed var(--mdc-theme-secondary)\",\n        \".addIcon\": {\n            color: isOver\n                ? \"var(--mdc-theme-primary) !important\"\n                : \"var(--mdc-theme-secondary) !important\"\n        }\n    }))\n);\n\nconst Add = styled(\"div\")({\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%,-50%)\",\n    margin: 0\n});\n\nconst isVisible = () => true;\n\ntype Props = {\n    type: string;\n    onDrop: Function;\n    children: React.ReactNode;\n    active: boolean;\n    highlight: boolean;\n};\n\nconst Center = ({ type, onDrop, children, active, highlight }: Props) => {\n    return (\n        <Droppable onDrop={onDrop} type={type} isVisible={isVisible}>\n            {({ isOver, isDroppable, drop }) => (\n                <div style={{ width: \"100%\", height: \"100%\" }} ref={drop}>\n                    <Container isOver={(isOver && isDroppable) || active} highlight={highlight}>\n                        <Add>{children}</Add>\n                    </Container>\n                </div>\n            )}\n        </Droppable>\n    );\n};\n\nexport default connect<any, any, any>((state, props) => {\n    return getElementProps(state, props);\n})(React.memo(Center));\n"],"file":"Center.js"}