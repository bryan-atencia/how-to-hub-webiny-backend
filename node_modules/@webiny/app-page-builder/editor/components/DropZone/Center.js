import * as React from "react";
import styled from "@emotion/styled";
import { getElementProps } from "@webiny/app-page-builder/editor/selectors";
import { connect } from "@webiny/app-page-builder/editor/redux";
import Droppable from "./../Droppable";
var Container = /*#__PURE__*/React.memo(
/*#__PURE__*/
// @ts-ignore
styled("div", {
  target: "e1meegfv0",
  label: "Container"
})(function (_ref) {
  var isOver = _ref.isOver;
  return {
    backgroundColor: "transparent",
    boxSizing: "border-box",
    height: "100%",
    minHeight: 100,
    position: "relative",
    userSelect: "none",
    width: "100%",
    border: isOver ? "1px dashed var(--mdc-theme-primary)" : "1px dashed var(--mdc-theme-secondary)",
    ".addIcon": {
      color: isOver ? "var(--mdc-theme-primary) !important" : "var(--mdc-theme-secondary) !important"
    }
  };
}));
var Add = /*#__PURE__*/styled("div", {
  target: "e1meegfv1",
  label: "Add"
})({
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%,-50%)",
  margin: 0
});

var isVisible = function isVisible() {
  return true;
};

var Center = function Center(_ref2) {
  var type = _ref2.type,
      onDrop = _ref2.onDrop,
      children = _ref2.children,
      active = _ref2.active,
      highlight = _ref2.highlight;
  return /*#__PURE__*/React.createElement(Droppable, {
    onDrop: onDrop,
    type: type,
    isVisible: isVisible
  }, function (_ref3) {
    var isOver = _ref3.isOver,
        isDroppable = _ref3.isDroppable,
        drop = _ref3.drop;
    return /*#__PURE__*/React.createElement("div", {
      style: {
        width: "100%",
        height: "100%"
      },
      ref: drop
    }, /*#__PURE__*/React.createElement(Container, {
      isOver: isOver && isDroppable || active,
      highlight: highlight
    }, /*#__PURE__*/React.createElement(Add, null, children)));
  });
};

export default connect(function (state, props) {
  return getElementProps(state, props);
})( /*#__PURE__*/React.memo(Center));
//# sourceMappingURL=Center.js.map