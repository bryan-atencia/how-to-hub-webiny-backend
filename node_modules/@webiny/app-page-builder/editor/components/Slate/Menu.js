import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import { Transition } from "react-transition-group";
import { getPlugins } from "@webiny/plugins";
import { css } from "emotion";
import { Elevation } from "@webiny/ui/Elevation";
import { hoverMenuStyle, defaultStyle, transitionStyles } from "./styled";

var MenuButton = function MenuButton(_ref) {
  var onClick = _ref.onClick,
      active = _ref.active,
      children = _ref.children,
      _ref$onMouseDown = _ref.onMouseDown,
      onMouseDown = _ref$onMouseDown === void 0 ? function (e) {
    return e.preventDefault();
  } : _ref$onMouseDown;
  var buttonStyle = /*#__PURE__*/css({
    cursor: "pointer",
    color: active ? "var(--mdc-theme-primary)" : "var(--mdc-theme-text-secondary-on-background)",
    "&:hover": {
      color: "var(--mdc-theme-primary)"
    }
  }, "label:buttonStyle;");
  return /*#__PURE__*/React.createElement("span", {
    onClick: onClick,
    className: buttonStyle,
    onMouseDown: onMouseDown
  }, children);
};

var Menu = /*#__PURE__*/function (_React$Component) {
  _inherits(Menu, _React$Component);

  var _super = _createSuper(Menu);

  function Menu() {
    var _this;

    _classCallCheck(this, Menu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "menu", /*#__PURE__*/React.createRef());

    _defineProperty(_assertThisInitialized(_this), "renderPlugins", function () {
      var _this$props = _this.props,
          value = _this$props.value,
          onChange = _this$props.onChange,
          editor = _this$props.editor,
          exclude = _this$props.exclude;
      var plugins = getPlugins("pb-editor-slate-menu-item");
      return plugins.filter(function (pl) {
        return !exclude.includes(pl.name);
      }).map(function (plugin) {
        return /*#__PURE__*/React.cloneElement(plugin.render({
          MenuButton: MenuButton,
          value: value,
          onChange: onChange,
          editor: editor.current,
          activatePlugin: _this.props.activatePlugin
        }), {
          key: plugin.name
        });
      });
    });

    return _this;
  }

  _createClass(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var menu = this.menu.current;

      if (!menu) {
        return;
      } // @ts-ignore


      var rect = menu.parentNode.getBoundingClientRect();
      var menuLeft = window.pageXOffset - (menu.offsetWidth - rect.width) / 2;
      var absoluteMenuLeft = Math.abs(rect.left + menuLeft); // Check left border

      if (absoluteMenuLeft < 65) {
        menuLeft = -(rect.left - 65);
      } // Check right border


      var absoluteMenuRight = absoluteMenuLeft + menu.offsetWidth;

      if (absoluteMenuRight > window.innerWidth) {
        menuLeft -= absoluteMenuRight - window.innerWidth + 15;
      }

      menu.style.left = "".concat(menuLeft, "px");
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var selection = this.props.value.selection;

      if (selection.isFocused && selection.isCollapsed) {
        return null;
      }

      if (!selection.isFocused) {
        return null;
      }

      return /*#__PURE__*/React.createElement(Transition, {
        in: Boolean(this.menu),
        timeout: 200,
        appear: true
      }, function (state) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Elevation, {
          z: 1,
          ref: _this2.menu,
          className: hoverMenuStyle,
          style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state])
        }, _this2.renderPlugins()));
      });
    }
  }]);

  return Menu;
}(React.Component);

_defineProperty(Menu, "menus", []);

export default Menu;
//# sourceMappingURL=Menu.js.map