{"version":3,"sources":["../../../../src/editor/components/Slate/Menu.tsx"],"names":["React","Transition","getPlugins","css","Elevation","hoverMenuStyle","defaultStyle","transitionStyles","MenuButton","onClick","active","children","onMouseDown","e","preventDefault","buttonStyle","cursor","color","Menu","createRef","props","value","onChange","editor","exclude","plugins","filter","pl","includes","name","map","plugin","cloneElement","render","current","activatePlugin","key","menu","rect","parentNode","getBoundingClientRect","menuLeft","window","pageXOffset","offsetWidth","width","absoluteMenuLeft","Math","abs","left","absoluteMenuRight","innerWidth","style","selection","isFocused","isCollapsed","Boolean","state","renderPlugins","Component"],"mappings":"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","sourcesContent":["import React, { ReactElement, SyntheticEvent } from \"react\";\nimport { Transition } from \"react-transition-group\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { css } from \"emotion\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { hoverMenuStyle, defaultStyle, transitionStyles } from \"./styled\";\nimport { PbEditorSlateMenuItemPlugin } from \"@webiny/app-page-builder/types\";\n\nexport type MenuButtonProps = {\n    onClick?: (e: SyntheticEvent) => void;\n    active?: boolean;\n    children: ReactElement;\n    onMouseDown?: (e: SyntheticEvent) => void;\n};\n\nconst MenuButton: React.FC<MenuButtonProps> = ({\n    onClick,\n    active,\n    children,\n    onMouseDown = e => e.preventDefault()\n}) => {\n    const buttonStyle = css({\n        cursor: \"pointer\",\n        color: active\n            ? \"var(--mdc-theme-primary)\"\n            : \"var(--mdc-theme-text-secondary-on-background)\",\n        \"&:hover\": {\n            color: \"var(--mdc-theme-primary)\"\n        }\n    });\n\n    return (\n        <span onClick={onClick} className={buttonStyle} onMouseDown={onMouseDown}>\n            {children}\n        </span>\n    );\n};\n\nclass Menu extends React.Component<any> {\n    static menus = [];\n    menu = React.createRef();\n\n    componentDidUpdate() {\n        const menu = this.menu.current as HTMLElement;\n        if (!menu) {\n            return;\n        }\n\n        // @ts-ignore\n        const rect = menu.parentNode.getBoundingClientRect() as ClientRect;\n        let menuLeft = window.pageXOffset - (menu.offsetWidth - rect.width) / 2;\n        const absoluteMenuLeft = Math.abs(rect.left + menuLeft);\n\n        // Check left border\n        if (absoluteMenuLeft < 65) {\n            menuLeft = -(rect.left - 65);\n        }\n\n        // Check right border\n        const absoluteMenuRight = absoluteMenuLeft + menu.offsetWidth;\n        if (absoluteMenuRight > window.innerWidth) {\n            menuLeft -= absoluteMenuRight - window.innerWidth + 15;\n        }\n\n        menu.style.left = `${menuLeft}px`;\n    }\n\n    renderPlugins = () => {\n        const { value, onChange, editor, exclude } = this.props;\n        const plugins = getPlugins<PbEditorSlateMenuItemPlugin>(\"pb-editor-slate-menu-item\");\n        return plugins\n            .filter(pl => !exclude.includes(pl.name))\n            .map(plugin => {\n                return React.cloneElement(\n                    plugin.render({\n                        MenuButton,\n                        value,\n                        onChange,\n                        editor: editor.current,\n                        activatePlugin: this.props.activatePlugin\n                    }),\n                    {\n                        key: plugin.name\n                    }\n                );\n            });\n    };\n\n    render() {\n        const { selection } = this.props.value;\n\n        if (selection.isFocused && selection.isCollapsed) {\n            return null;\n        }\n\n        if (!selection.isFocused) {\n            return null;\n        }\n\n        return (\n            <Transition in={Boolean(this.menu)} timeout={200} appear={true}>\n                {state => (\n                    <React.Fragment>\n                        <Elevation\n                            z={1}\n                            ref={this.menu}\n                            className={hoverMenuStyle}\n                            style={{ ...defaultStyle, ...transitionStyles[state] }}\n                        >\n                            {this.renderPlugins()}\n                        </Elevation>\n                    </React.Fragment>\n                )}\n            </Transition>\n        );\n    }\n}\n\nexport default Menu;\n"],"file":"Menu.js"}