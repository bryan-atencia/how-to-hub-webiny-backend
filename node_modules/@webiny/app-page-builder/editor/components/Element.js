import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import * as React from "react";
import { Transition } from "react-transition-group";
import isEqual from "lodash/isEqual";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { getPlugins } from "@webiny/plugins";
import { renderPlugins } from "@webiny/app/plugins";
import { dragStart, dragEnd, activateElement, highlightElement } from "@webiny/app-page-builder/editor/actions";
import { getElementProps, getElement } from "@webiny/app-page-builder/editor/selectors";
import Draggable from "./Draggable";
import { defaultStyle, ElementContainer, transitionStyles, typeStyle } from "./Element/ElementStyled";
import tryRenderingPlugin from "./../../utils/tryRenderingPlugin";

var getElementPlugin = function getElementPlugin(element) {
  if (!element) {
    return null;
  }

  var plugins = getPlugins("pb-editor-page-element");
  return plugins.find(function (pl) {
    return pl.elementType === element.type;
  });
};

var Element = function Element(props) {
  var dragEnd = props.dragEnd,
      element = props.element,
      highlight = props.highlight,
      active = props.active,
      _props$className = props.className,
      className = _props$className === void 0 ? "" : _props$className;
  var plugin = getElementPlugin(element);
  var beginDrag = useHandler(props, function (_ref) {
    var dragStart = _ref.dragStart,
        element = _ref.element;
    return function () {
      var data = {
        id: element.id,
        type: element.type,
        path: element.path
      };
      setTimeout(function () {
        dragStart({
          element: data
        });
      });
      return _objectSpread(_objectSpread({}, data), {}, {
        target: plugin.target
      });
    };
  });
  var endDrag = React.useCallback(function (props, monitor) {
    dragEnd({
      element: monitor.getItem()
    });
  }, [dragEnd]);
  var onClick = useHandler(props, function (_ref2) {
    var element = _ref2.element,
        active = _ref2.active,
        activateElement = _ref2.activateElement;
    return function () {
      if (element.type === "document") {
        return;
      }

      if (!active) {
        activateElement({
          element: element.id
        });
      }
    };
  });
  var onMouseOver = useHandler(props, function (_ref3) {
    var element = _ref3.element,
        highlight = _ref3.highlight,
        highlightElement = _ref3.highlightElement;
    return function (e) {
      if (element.type === "document") {
        return;
      }

      e.stopPropagation();

      if (!highlight) {
        highlightElement({
          element: element.id
        });
      }
    };
  });
  var renderDraggable = useHandler(props, function (_ref4) {
    var element = _ref4.element;
    return function (_ref5) {
      var drag = _ref5.drag;
      return /*#__PURE__*/React.createElement("div", {
        ref: drag,
        className: "type " + typeStyle
      }, /*#__PURE__*/React.createElement("div", {
        className: "background",
        onClick: onClick
      }), /*#__PURE__*/React.createElement("div", {
        className: "element-holder",
        onClick: onClick
      }, renderPlugins("pb-editor-page-element-action", {
        element: element,
        plugin: plugin
      }), /*#__PURE__*/React.createElement("span", null, plugin.elementType)));
    };
  });

  if (!plugin) {
    return null;
  }

  var renderedPlugin = tryRenderingPlugin(function () {
    return plugin.render({
      element: element
    });
  });
  return /*#__PURE__*/React.createElement(Transition, {
    in: true,
    timeout: 250,
    appear: true
  }, function (state) {
    return /*#__PURE__*/React.createElement(ElementContainer, {
      id: element.id,
      onMouseOver: onMouseOver,
      highlight: highlight,
      active: active,
      style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state]),
      className: "webiny-pb-page-element-container"
    }, /*#__PURE__*/React.createElement("div", {
      className: ["innerWrapper", className].filter(function (c) {
        return c;
      }).join(" ")
    }, /*#__PURE__*/React.createElement(Draggable, {
      target: plugin.target,
      beginDrag: beginDrag,
      endDrag: endDrag
    }, renderDraggable), renderedPlugin));
  });
};

export default connect(function (state, props) {
  return _objectSpread(_objectSpread({}, getElementProps(state, props)), {}, {
    element: getElement(state, props.id)
  });
}, {
  dragStart: dragStart,
  dragEnd: dragEnd,
  activateElement: activateElement,
  highlightElement: highlightElement
}, null, {
  areStatePropsEqual: isEqual
})( /*#__PURE__*/React.memo(Element));
//# sourceMappingURL=Element.js.map