import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import * as React from "react";
import { useDrop } from "react-dnd";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { getIsDragging } from "@webiny/app-page-builder/editor/selectors";

var defaultVisibility = function defaultVisibility(_ref) {
  var type = _ref.type,
      isDragging = _ref.isDragging,
      item = _ref.item;
  var target = item && item.target || [];

  if (!item || !target.includes(type)) {
    return false;
  }

  return isDragging;
};

var Droppable = /*#__PURE__*/React.memo(function (props) {
  var type = props.type,
      children = props.children,
      isDragging = props.isDragging,
      _props$isDroppable = props.isDroppable,
      isDroppable = _props$isDroppable === void 0 ? function () {
    return true;
  } : _props$isDroppable,
      onDrop = props.onDrop;
  var isVisible = props.isVisible;

  var _useDrop = useDrop({
    accept: "element",
    collect: function collect(monitor) {
      return {
        isOver: monitor.isOver() && monitor.isOver({
          shallow: true
        }),
        item: monitor.getItem()
      };
    },
    drop: function drop(item, monitor) {
      if (typeof onDrop === "function") {
        onDrop(monitor.getItem());
      }
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      _useDrop2$ = _useDrop2[0],
      item = _useDrop2$.item,
      isOver = _useDrop2$.isOver,
      drop = _useDrop2[1];

  if (!isVisible) {
    isVisible = defaultVisibility;
  }

  if (!isVisible({
    type: type,
    item: item,
    isDragging: isDragging
  })) {
    return null;
  }

  return children({
    isDragging: isDragging,
    isOver: isOver,
    isDroppable: isDroppable(item),
    drop: drop
  });
});

var mapStateToProps = function mapStateToProps(state) {
  return {
    isDragging: getIsDragging(state)
  };
};

export default connect(mapStateToProps)(Droppable);
//# sourceMappingURL=Droppable.js.map