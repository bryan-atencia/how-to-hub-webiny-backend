import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";
import _isEqual from "lodash/isEqual";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    query GetOEmbedData($url: String!, $width: String, $height: String) {\n        pageBuilder {\n            oembedData(url: $url, width: $width, height: $height) {\n                data\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import * as React from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { css } from "emotion";
import { set } from "dot-prop-immutable";
import gql from "graphql-tag";
import { useQuery } from "react-apollo";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";

function appendSDK(props) {
  var sdk = props.sdk,
      global = props.global,
      element = props.element;

  var _ref = _get(element, "data.source") || {},
      url = _ref.url;

  if (!sdk || !url || window[global]) {
    return Promise.resolve();
  }

  return new Promise(function (resolve) {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = encodeURI(sdk);
    script.setAttribute("async", "");
    script.setAttribute("charset", "utf-8");
    script.onload = resolve;
    document.body.appendChild(script);
  });
}

function initEmbed(props) {
  var sdk = props.sdk,
      init = props.init,
      element = props.element;

  if (sdk && _get(element, "data.source.url")) {
    var node = document.getElementById(element.id);

    if (typeof init === "function" && node) {
      init({
        props: props,
        node: node
      });
    }
  }
}

var oembedQuery = gql(_templateObject());
var centerAlign = /*#__PURE__*/css({
  "*:first-of-type": {
    marginLeft: "auto !important",
    marginRight: "auto !important"
  }
}, "label:centerAlign;");
var OEmbed = /*#__PURE__*/React.memo(function (props) {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var element = props.element,
      updateElement = props.updateElement,
      _props$onData = props.onData,
      onData = _props$onData === void 0 ? function (d) {
    return d;
  } : _props$onData;
  React.useEffect(function () {
    appendSDK(props).then(function () {
      return initEmbed(props);
    });
  });
  var source = _get(element, "data.source") || {};
  var oembed = _get(element, "data.oembed") || {};

  var skip = !source.url || _isEqual(oembed.source, source);

  var _useQuery = useQuery(oembedQuery, {
    skip: skip,
    variables: source,
    onCompleted: function onCompleted(data) {
      if (skip) {
        return;
      }

      var _get2 = _get(data, "pageBuilder.oembedData"),
          oembed = _get2.data,
          error = _get2.error;

      if (oembed) {
        // Store loaded oembed data
        updateElement({
          element: set(element, "data.oembed", onData(oembed))
        });
      }

      if (error) {
        showSnackbar(error.message);
      }
    }
  }),
      loading = _useQuery.loading;

  var renderEmpty = React.useCallback(function () {
    return /*#__PURE__*/React.createElement("div", null, "You must configure your embed in the settings!");
  }, []);
  var renderEmbed = React.useCallback(function () {
    if (typeof props.renderEmbed === "function") {
      return props.renderEmbed(props);
    }

    if (loading) {
      return /*#__PURE__*/React.createElement("div", null, "Loading embed data...");
    }

    return /*#__PURE__*/React.createElement("div", {
      id: element.id,
      className: centerAlign + " pb-editor-dragging--disabled pb-editor-resizing--disabled",
      dangerouslySetInnerHTML: {
        __html: _get(element, "data.oembed.html") || ""
      }
    });
  }, [element, loading]);

  var _ref2 = _get(element, "data.source") || {},
      url = _ref2.url;

  return url ? renderEmbed() : renderEmpty();
});
export default connect(null, {
  updateElement: updateElement
})(OEmbed);
//# sourceMappingURL=OEmbed.js.map