{"version":3,"sources":["../../../src/editor/redux/index.ts"],"names":["applyMiddleware","createStore","compose","invariant","getPlugins","createRootReducer","createMiddleware","wrapMiddleware","connect","Redux","reducers","higherOrderReducers","middleware","actionMeta","type","options","payload","meta","log","hasOwnProperty","actions","statePath","reducer","push","factory","INIT_STATE","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","predicate","state","action","middlewareFromPlugins","map","pl","Array","isArray","reverse","store","redux","createAction","addReducer","addHigherOrderReducer","addMiddleware","dispatch"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAyF,OAAzF;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,gBAAP,IAA2BC,cAA3B,QAAiD,oBAAjD;AAcA,SAASC,OAAT,QAAwB,WAAxB;AAEA,WAAaC,KAAb;AAWI,mBAAc;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACV,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;;AAhBL;AAAA;AAAA,iCAkBiBC,IAlBjB,EAkB2E;AAAA;;AAAA,UAA5CC,OAA4C,uEAAnB,EAAmB;AACnE,aAAO,YAA6B;AAAA,YAA5BC,OAA4B,uEAAlB,EAAkB;AAAA,YAAdC,IAAc,uEAAP,EAAO;AAChC,eAAO;AACHH,UAAAA,IAAI,EAAJA,IADG;AAEHE,UAAAA,OAAO,EAAPA,OAFG;AAGHC,UAAAA,IAAI,kCACG,KAAI,CAACJ,UADR;AAEAK,YAAAA,GAAG,EAAEH,OAAO,CAACI,cAAR,CAAuB,KAAvB,IAAgCJ,OAAO,CAACG,GAAxC,GAA8C;AAFnD,aAGGD,IAHH;AAHD,SAAP;AASH,OAVD;AAWH;AA9BL;AAAA;AAAA,+BAgCeG,OAhCf,EAgCuCC,SAhCvC,EAgC6DC,OAhC7D,EAgC+E;AACvEnB,MAAAA,SAAS,CAACmB,OAAD,EAAU,qCAAV,CAAT;AAEA,WAAKZ,QAAL,CAAca,IAAd,CAAmB;AAAEH,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,SAAS,EAATA,SAAX;AAAsBC,QAAAA,OAAO,EAAPA;AAAtB,OAAnB;AACH;AApCL;AAAA;AAAA,0CAsC0BF,OAtC1B,EAsCkDC,SAtClD,EAsCwEG,OAtCxE,EAsCiG;AACzF,WAAKb,mBAAL,CAAyBY,IAAzB,CAA8B;AAAEH,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,SAAS,EAATA,SAAX;AAAsBC,QAAAA,OAAO,EAAEE,OAAO;AAAtC,OAA9B;AACH;AAxCL;AAAA;AAAA,kCA0CkBJ,OA1ClB,EA0C0CR,UA1C1C,EA0C0E;AAClE,WAAKA,UAAL,CAAgBW,IAAhB,CAAqB;AAAEH,QAAAA,OAAO,EAAPA,OAAF;AAAWR,QAAAA,UAAU,EAAVA;AAAX,OAArB;AACH;AA5CL;AAAA;AAAA,gCA8CuD;AAAA,UAAzCa,UAAyC,uEAArB,EAAqB;AAAA,UAAjBZ,UAAiB,uEAAJ,EAAI;AAC/C,WAAKA,UAAL,GAAkBA,UAAlB,CAD+C,CAE/C;AACA;;AACA,UAAMa,aAAa,GAAGC,MAAM,CAACC,oCAA7B;AACA,UAAMC,gBAAgB,GACjBH,aAAa,IACVA,aAAa,CAAC;AACVI,QAAAA,SAAS,EAAE,mBAACC,KAAD,EAAQC,MAAR;AAAA,iBAAmB,KAAMA,MAAN,EAAc,UAAd,EAA0B,IAA1B,CAAnB;AAAA;AADD,OAAD,CADjB,IAIA9B,OALJ;AAOA,UAAM+B,qBAAmC,GAAG7B,UAAU,CAClD,4BADkD,CAAV,CAGvC8B,GAHuC,CAGnC,UAAAC,EAAE;AAAA,eAAI5B,cAAc,CAAC4B,EAAE,CAACvB,UAAJ,EAAgBwB,KAAK,CAACC,OAAN,CAAcF,EAAE,CAACf,OAAjB,IAA4Be,EAAE,CAACf,OAA/B,GAAyC,IAAzD,CAAlB;AAAA,OAHiC,EAIvCkB,OAJuC,EAA5C;AAMA,WAAKC,KAAL,GAAatC,WAAW,CACpBI,iBAAiB,CAACoB,UAAD,EAAa,IAAb,CADG,EAEpBI,gBAAgB,CAAC7B,eAAe,MAAf,4BAAmBiC,qBAAnB,4BAA6C3B,gBAAgB,CAAC,IAAD,CAA7D,GAAD,CAFI,CAAxB;AAKA,aAAO,KAAKiC,KAAZ;AACH;AAtEL;;AAAA;AAAA;AAyEA,IAAMC,KAAK,GAAG,IAAI/B,KAAJ,EAAd;AAEA,SAAS+B,KAAT;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAC3B,IAAD,EAAeC,OAAf,EAA0D;AAClF,SAAOyB,KAAK,CAACC,YAAN,CAAmB3B,IAAnB,EAAyBC,OAAzB,CAAP;AACH,CAFM;AAIP,OAAO,IAAM2B,UAAU,GAAG,SAAbA,UAAa,CAACtB,OAAD,EAAyBC,SAAzB,EAA+CC,OAA/C,EAAoE;AAC1FkB,EAAAA,KAAK,CAACE,UAAN,CAAiBtB,OAAjB,EAA0BC,SAA1B,EAAqCC,OAArC;AACH,CAFM;AAIP,OAAO,IAAMqB,qBAAqB,GAAG,SAAxBA,qBAAwB,CACjCvB,OADiC,EAEjCC,SAFiC,EAGjCG,OAHiC,EAIhC;AACDgB,EAAAA,KAAK,CAACG,qBAAN,CAA4BvB,OAA5B,EAAqCC,SAArC,EAAgDG,OAAhD;AACH,CANM;AAQP,OAAO,IAAMoB,aAAa,GAAG,SAAhBA,aAAgB,CAACxB,OAAD,EAAyBR,UAAzB,EAA4D;AACrF4B,EAAAA,KAAK,CAACI,aAAN,CAAoBxB,OAApB,EAA6BR,UAA7B;AACH,CAFM;AAIP,OAAO,IAAMiC,QAAQ,GAAG,SAAXA,QAAW,CAACb,MAAD,EAAkC;AACtD,SAAOQ,KAAK,CAACD,KAAN,CAAYM,QAAZ,CAAqBb,MAArB,CAAP;AACH,CAFM","sourcesContent":["import { applyMiddleware, createStore, compose, Middleware, Action as ReduxAction } from \"redux\";\nimport _ from \"lodash\";\nimport invariant from \"invariant\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport createRootReducer from \"./createRootReducer\";\nimport createMiddleware, { wrapMiddleware } from \"./createMiddleware\";\nimport {\n    MiddlewareFunction,\n    ReducerFactory,\n    Reducer,\n    Action,\n    ActionCreator,\n    ActionOptions,\n    StatePath,\n    Store,\n    State,\n    PbEditorReduxMiddlewarePlugin\n} from \"@webiny/app-page-builder/types\";\n\nexport { connect } from \"./connect\";\n\nexport class Redux {\n    actionMeta: { [key: string]: any };\n    store: Store;\n    middleware: Array<{ actions: Array<string>; middleware: MiddlewareFunction }>;\n    reducers: Array<{ statePath: StatePath; reducer: Reducer; actions: Array<string> }>;\n    higherOrderReducers: Array<{\n        statePath: StatePath;\n        reducer: Reducer;\n        actions: Array<string>;\n    }>;\n\n    constructor() {\n        this.reducers = [];\n        this.higherOrderReducers = [];\n        this.middleware = [];\n        this.actionMeta = {};\n    }\n\n    createAction(type: string, options: ActionOptions = {}): ActionCreator {\n        return (payload = {}, meta = {}) => {\n            return {\n                type,\n                payload,\n                meta: {\n                    ...this.actionMeta,\n                    log: options.hasOwnProperty(\"log\") ? options.log : true,\n                    ...meta\n                }\n            };\n        };\n    }\n\n    addReducer(actions: Array<string>, statePath: StatePath, reducer: Reducer) {\n        invariant(reducer, \"Must pass a valid reducer function!\");\n\n        this.reducers.push({ actions, statePath, reducer });\n    }\n\n    addHigherOrderReducer(actions: Array<string>, statePath: StatePath, factory: ReducerFactory) {\n        this.higherOrderReducers.push({ actions, statePath, reducer: factory() });\n    }\n\n    addMiddleware(actions: Array<string>, middleware: MiddlewareFunction) {\n        this.middleware.push({ actions, middleware });\n    }\n\n    initStore(INIT_STATE: State = {}, actionMeta = {}) {\n        this.actionMeta = actionMeta;\n        // dev tool\n        // @ts-ignore\n        const reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n        const composeEnhancers =\n            (reduxDevTools &&\n                reduxDevTools({\n                    predicate: (state, action) => _.get(action, \"meta.log\", true)\n                })) ||\n            compose;\n\n        const middlewareFromPlugins: Middleware[] = getPlugins<PbEditorReduxMiddlewarePlugin>(\n            \"pb-editor-redux-middleware\"\n        )\n            .map(pl => wrapMiddleware(pl.middleware, Array.isArray(pl.actions) ? pl.actions : null))\n            .reverse();\n\n        this.store = createStore(\n            createRootReducer(INIT_STATE, this),\n            composeEnhancers(applyMiddleware(...middlewareFromPlugins, ...createMiddleware(this)))\n        );\n\n        return this.store;\n    }\n}\n\nconst redux = new Redux();\n\nexport { redux };\n\nexport const createAction = (type: string, options?: ActionOptions): ActionCreator => {\n    return redux.createAction(type, options);\n};\n\nexport const addReducer = (actions: Array<string>, statePath: StatePath, reducer: Reducer) => {\n    redux.addReducer(actions, statePath, reducer);\n};\n\nexport const addHigherOrderReducer = (\n    actions: Array<string>,\n    statePath: StatePath,\n    factory: ReducerFactory\n) => {\n    redux.addHigherOrderReducer(actions, statePath, factory);\n};\n\nexport const addMiddleware = (actions: Array<string>, middleware: MiddlewareFunction) => {\n    redux.addMiddleware(actions, middleware);\n};\n\nexport const dispatch = (action: Action | ReduxAction) => {\n    return redux.store.dispatch(action);\n};\n"],"file":"index.js"}