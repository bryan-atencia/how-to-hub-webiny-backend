import _clone from "lodash/clone";
import { get, set } from "dot-prop-immutable";

var findHigherOrderReducer = function findHigherOrderReducer(reducers, statePath, action) {
  for (var i = 0; i < reducers.length; i++) {
    var hor = reducers[i];

    if (hor.actions.includes(action.type)) {
      if (!hor.statePath) {
        // If HOR does not have a slice defined it means it will process the entire app state
        return {
          statePath: null,
          reducer: hor.reducer
        };
      } // Normalize statePath using current action


      var horStatePath = resolveStatePath(hor.statePath, action);

      if (statePath && horStatePath && typeof statePath === "string" && (statePath.startsWith(horStatePath + ".") || statePath === horStatePath)) {
        return {
          statePath: horStatePath,
          reducer: hor.reducer
        };
      }
    }
  }

  return null;
};

var runReducer = function runReducer(appState, action, extra, reducer, statePath) {
  // Get a slice of state for this reducer
  var stateSlice = statePath ? get(appState, statePath) : appState; // Run reducer and update app state

  var newState = reducer(stateSlice, action, extra);
  return statePath ? set(appState, statePath, newState) : newState;
}; // Resolve statePath to string


var resolveStatePath = function resolveStatePath(statePath, action) {
  if (typeof statePath === "function") {
    return statePath(action);
  }

  return statePath;
};

export default (function () {
  var INIT_STATE = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var redux = arguments.length > 1 ? arguments[1] : undefined;
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;
    var action = arguments.length > 1 ? arguments[1] : undefined;

    var newState = _clone(state);

    redux.reducers.forEach(function (_ref) {
      var statePath = _ref.statePath,
          reducer = _ref.reducer,
          actions = _ref.actions;

      if (!actions.includes(action.type)) {
        return;
      }

      statePath = resolveStatePath(statePath, action); // If requested statePath triggers a higher order reducer - delegate processing to that HOR

      var horDef = findHigherOrderReducer(redux.higherOrderReducers, statePath, action);

      if (horDef) {
        // Run HOR and pass the original {slice, reducer} that triggered this HOR
        newState = runReducer(newState, action, {
          statePath: statePath,
          reducer: reducer
        }, horDef.reducer, horDef.statePath);
      } else {
        newState = runReducer(newState, action, {}, reducer, statePath);
      }
    });
    return newState;
  };
});
//# sourceMappingURL=createRootReducer.js.map