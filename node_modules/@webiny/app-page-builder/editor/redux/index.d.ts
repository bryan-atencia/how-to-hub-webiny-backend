import { Action as ReduxAction } from "redux";
import { MiddlewareFunction, ReducerFactory, Reducer, Action, ActionCreator, ActionOptions, StatePath, Store, State } from "@webiny/app-page-builder/types";
export { connect } from "./connect";
export declare class Redux {
    actionMeta: {
        [key: string]: any;
    };
    store: Store;
    middleware: Array<{
        actions: Array<string>;
        middleware: MiddlewareFunction;
    }>;
    reducers: Array<{
        statePath: StatePath;
        reducer: Reducer;
        actions: Array<string>;
    }>;
    higherOrderReducers: Array<{
        statePath: StatePath;
        reducer: Reducer;
        actions: Array<string>;
    }>;
    constructor();
    createAction(type: string, options?: ActionOptions): ActionCreator;
    addReducer(actions: Array<string>, statePath: StatePath, reducer: Reducer): void;
    addHigherOrderReducer(actions: Array<string>, statePath: StatePath, factory: ReducerFactory): void;
    addMiddleware(actions: Array<string>, middleware: MiddlewareFunction): void;
    initStore(INIT_STATE?: State, actionMeta?: {}): Store;
}
declare const redux: Redux;
export { redux };
export declare const createAction: (type: string, options?: ActionOptions) => ActionCreator;
export declare const addReducer: (actions: string[], statePath: StatePath, reducer: import("redux").Reducer<any, import("redux").AnyAction>) => void;
export declare const addHigherOrderReducer: (actions: string[], statePath: StatePath, factory: ReducerFactory) => void;
export declare const addMiddleware: (actions: string[], middleware: MiddlewareFunction) => void;
export declare const dispatch: (action: ReduxAction<any> | Action) => ReduxAction<any> | Action;
