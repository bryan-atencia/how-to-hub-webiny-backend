{"version":3,"sources":["../../../src/editor/redux/createRootReducer.ts"],"names":["get","set","findHigherOrderReducer","reducers","statePath","action","i","length","hor","actions","includes","type","reducer","horStatePath","resolveStatePath","startsWith","runReducer","appState","extra","stateSlice","newState","INIT_STATE","redux","state","forEach","horDef","higherOrderReducers"],"mappings":";AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,oBAAzB;;AAKA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAC3BC,QAD2B,EAE3BC,SAF2B,EAG3BC,MAH2B,EAI1B;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAME,GAAG,GAAGL,QAAQ,CAACG,CAAD,CAApB;;AACA,QAAIE,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqBL,MAAM,CAACM,IAA5B,CAAJ,EAAuC;AACnC,UAAI,CAACH,GAAG,CAACJ,SAAT,EAAoB;AAChB;AACA,eAAO;AAAEA,UAAAA,SAAS,EAAE,IAAb;AAAmBQ,UAAAA,OAAO,EAAEJ,GAAG,CAACI;AAAhC,SAAP;AACH,OAJkC,CAMnC;;;AACA,UAAMC,YAAY,GAAGC,gBAAgB,CAACN,GAAG,CAACJ,SAAL,EAAgBC,MAAhB,CAArC;;AAEA,UACID,SAAS,IACTS,YADA,IAEA,OAAOT,SAAP,KAAqB,QAFrB,KAGCA,SAAS,CAACW,UAAV,CAAqBF,YAAY,GAAG,GAApC,KAA4CT,SAAS,KAAKS,YAH3D,CADJ,EAKE;AACE,eAAO;AAAET,UAAAA,SAAS,EAAES,YAAb;AAA2BD,UAAAA,OAAO,EAAEJ,GAAG,CAACI;AAAxC,SAAP;AACH;AACJ;AACJ;;AAED,SAAO,IAAP;AACH,CA5BD;;AA8BA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWZ,MAAX,EAAmBa,KAAnB,EAA0BN,OAA1B,EAAmCR,SAAnC,EAAiD;AAChE;AACA,MAAMe,UAAU,GAAGf,SAAS,GAAGJ,GAAG,CAACiB,QAAD,EAAWb,SAAX,CAAN,GAA8Ba,QAA1D,CAFgE,CAGhE;;AACA,MAAMG,QAAQ,GAAGR,OAAO,CAACO,UAAD,EAAad,MAAb,EAAqBa,KAArB,CAAxB;AACA,SAAOd,SAAS,GAAGH,GAAG,CAACgB,QAAD,EAAWb,SAAX,EAAsBgB,QAAtB,CAAN,GAAwCA,QAAxD;AACH,CAND,C,CAQA;;;AACA,IAAMN,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACV,SAAD,EAAuBC,MAAvB,EAAyD;AAC9E,MAAI,OAAOD,SAAP,KAAqB,UAAzB,EAAqC;AACjC,WAAOA,SAAS,CAACC,MAAD,CAAhB;AACH;;AAED,SAAOD,SAAP;AACH,CAND;;AAQA,gBAAe,YAAmD;AAAA,MAAlDiB,UAAkD,uEAA9B,EAA8B;AAAA,MAA1BC,KAA0B;AAC9D,SAAO,YAA+C;AAAA,QAA9CC,KAA8C,uEAA/BF,UAA+B;AAAA,QAAnBhB,MAAmB;;AAClD,QAAIe,QAAQ,GAAG,OAAMG,KAAN,CAAf;;AACAD,IAAAA,KAAK,CAACnB,QAAN,CAAeqB,OAAf,CAAuB,gBAAqC;AAAA,UAAlCpB,SAAkC,QAAlCA,SAAkC;AAAA,UAAvBQ,OAAuB,QAAvBA,OAAuB;AAAA,UAAdH,OAAc,QAAdA,OAAc;;AACxD,UAAI,CAACA,OAAO,CAACC,QAAR,CAAiBL,MAAM,CAACM,IAAxB,CAAL,EAAoC;AAChC;AACH;;AAEDP,MAAAA,SAAS,GAAGU,gBAAgB,CAACV,SAAD,EAAYC,MAAZ,CAA5B,CALwD,CAOxD;;AACA,UAAMoB,MAAM,GAAGvB,sBAAsB,CAACoB,KAAK,CAACI,mBAAP,EAA4BtB,SAA5B,EAAuCC,MAAvC,CAArC;;AAEA,UAAIoB,MAAJ,EAAY;AACR;AACAL,QAAAA,QAAQ,GAAGJ,UAAU,CACjBI,QADiB,EAEjBf,MAFiB,EAGjB;AAAED,UAAAA,SAAS,EAATA,SAAF;AAAaQ,UAAAA,OAAO,EAAPA;AAAb,SAHiB,EAIjBa,MAAM,CAACb,OAJU,EAKjBa,MAAM,CAACrB,SALU,CAArB;AAOH,OATD,MASO;AACHgB,QAAAA,QAAQ,GAAGJ,UAAU,CAACI,QAAD,EAAWf,MAAX,EAAmB,EAAnB,EAAuBO,OAAvB,EAAgCR,SAAhC,CAArB;AACH;AACJ,KAtBD;AAwBA,WAAOgB,QAAP;AACH,GA3BD;AA4BH,CA7BD","sourcesContent":["import { clone } from \"lodash\";\nimport { get, set } from \"dot-prop-immutable\";\nimport { Redux, Reducer, State, Action, StatePath } from \"@webiny/app-page-builder/types\";\n\ntype ReducerCollection = Array<{ statePath: StatePath; reducer: Reducer; actions: Array<string> }>;\n\nconst findHigherOrderReducer = (\n    reducers: ReducerCollection,\n    statePath: StatePath,\n    action: Action\n) => {\n    for (let i = 0; i < reducers.length; i++) {\n        const hor = reducers[i];\n        if (hor.actions.includes(action.type)) {\n            if (!hor.statePath) {\n                // If HOR does not have a slice defined it means it will process the entire app state\n                return { statePath: null, reducer: hor.reducer };\n            }\n\n            // Normalize statePath using current action\n            const horStatePath = resolveStatePath(hor.statePath, action);\n\n            if (\n                statePath &&\n                horStatePath &&\n                typeof statePath === \"string\" &&\n                (statePath.startsWith(horStatePath + \".\") || statePath === horStatePath)\n            ) {\n                return { statePath: horStatePath, reducer: hor.reducer };\n            }\n        }\n    }\n\n    return null;\n};\n\nconst runReducer = (appState, action, extra, reducer, statePath) => {\n    // Get a slice of state for this reducer\n    const stateSlice = statePath ? get(appState, statePath) : appState;\n    // Run reducer and update app state\n    const newState = reducer(stateSlice, action, extra);\n    return statePath ? set(appState, statePath, newState) : newState;\n};\n\n// Resolve statePath to string\nconst resolveStatePath = (statePath: StatePath, action: Action): null | string => {\n    if (typeof statePath === \"function\") {\n        return statePath(action);\n    }\n\n    return statePath;\n};\n\nexport default (INIT_STATE: State = {}, redux: Redux): Reducer => {\n    return (state: State = INIT_STATE, action: Action) => {\n        let newState = clone(state);\n        redux.reducers.forEach(({ statePath, reducer, actions }) => {\n            if (!actions.includes(action.type)) {\n                return;\n            }\n\n            statePath = resolveStatePath(statePath, action);\n\n            // If requested statePath triggers a higher order reducer - delegate processing to that HOR\n            const horDef = findHigherOrderReducer(redux.higherOrderReducers, statePath, action);\n\n            if (horDef) {\n                // Run HOR and pass the original {slice, reducer} that triggered this HOR\n                newState = runReducer(\n                    newState,\n                    action,\n                    { statePath, reducer },\n                    horDef.reducer,\n                    horDef.statePath\n                );\n            } else {\n                newState = runReducer(newState, action, {}, reducer, statePath);\n            }\n        });\n\n        return newState;\n    };\n};\n"],"file":"createRootReducer.js"}