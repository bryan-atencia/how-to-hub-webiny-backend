{"version":3,"sources":["../../../../src/editor/actions/history/reducer.ts"],"names":["debug","ActionTypes","parseActions","isHistory","newHistory","createHistory","state","ignoreInitialState","history","_latestUnfiltered","lengthWithoutFuture","past","length","insert","limit","group","log","historyOverflow","pastSliced","slice","newPast","jumpToFuture","index","future","newPresent","newFuture","jumpToPast","jump","n","actionTypeAmongClearHistoryType","actionType","clearHistoryType","indexOf","undoable","reducer","rawConfig","set","config","initTypes","filter","groupBy","undoType","UNDO","redoType","REDO","jumpToPastType","JUMP_TO_PAST","jumpToFutureType","JUMP_TO_FUTURE","jumpType","JUMP","Array","isArray","CLEAR_HISTORY","neverSkipReducer","syncFilter","initialState","action","slices","start","undefined","clearHistoryAction","type","present","skipReducer","res","end","some","filtered","filteredState","groupedState"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as debug from \"./debug\";\nimport { ActionTypes } from \"./actions\";\nimport { parseActions, isHistory, newHistory } from \"./helpers\";\n\n// createHistory\nfunction createHistory(state, ignoreInitialState) {\n    // ignoreInitialState essentially prevents the user from undoing to the\n    // beginning, in the case that the undoable reducer handles initialization\n    // in a way that can't be redone simply\n    const history = newHistory([], state, []);\n    if (ignoreInitialState) {\n        history._latestUnfiltered = null;\n    }\n    return history;\n}\n\n// lengthWithoutFuture: get length of history\nfunction lengthWithoutFuture(history) {\n    return history.past.length + 1;\n}\n\n// insert: insert `state` into history, which means adding the current state\n//         into `past`, setting the new `state` as `present` and erasing\n//         the `future`.\nfunction insert(history, state, limit, group) {\n    debug.log(\"inserting\", state);\n    debug.log(\"new free: \", limit - lengthWithoutFuture(history));\n\n    const { past, _latestUnfiltered } = history;\n    const historyOverflow = limit && lengthWithoutFuture(history) >= limit;\n\n    const pastSliced = past.slice(historyOverflow ? 1 : 0);\n    const newPast = _latestUnfiltered != null ? [...pastSliced, _latestUnfiltered] : pastSliced;\n\n    return newHistory(newPast, state, [], group);\n}\n\n// jumpToFuture: jump to requested index in future history\nfunction jumpToFuture(history, index) {\n    if (index < 0 || index >= history.future.length) {\n        return history;\n    }\n\n    const { past, future, _latestUnfiltered } = history;\n\n    const newPast = [...past, _latestUnfiltered, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n\n    return newHistory(newPast, newPresent, newFuture);\n}\n\n// jumpToPast: jump to requested index in past history\nfunction jumpToPast(history, index) {\n    if (index < 0 || index >= history.past.length) {\n        return history;\n    }\n\n    const { past, future, _latestUnfiltered } = history;\n\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), _latestUnfiltered, ...future];\n    const newPresent = past[index];\n\n    return newHistory(newPast, newPresent, newFuture);\n}\n\n// jump: jump n steps in the past or forward\nfunction jump(history, n) {\n    if (n > 0) {\n        return jumpToFuture(history, n - 1);\n    }\n    if (n < 0) {\n        return jumpToPast(history, history.past.length + n);\n    }\n    return history;\n}\n\n// helper to dynamically match in the reducer's switch-case\nfunction actionTypeAmongClearHistoryType(actionType, clearHistoryType) {\n    return clearHistoryType.indexOf(actionType) > -1 ? actionType : !actionType;\n}\n\n// redux-undo higher order reducer\nexport default function undoable(reducer, rawConfig = {}) {\n    debug.set(rawConfig.debug);\n\n    const config = {\n        initTypes: parseActions(rawConfig.initTypes, [\"@@redux-undo/INIT\"]),\n        limit: rawConfig.limit,\n        filter: rawConfig.filter || (() => true),\n        groupBy: rawConfig.groupBy || (() => null),\n        undoType: rawConfig.undoType || ActionTypes.UNDO,\n        redoType: rawConfig.redoType || ActionTypes.REDO,\n        jumpToPastType: rawConfig.jumpToPastType || ActionTypes.JUMP_TO_PAST,\n        jumpToFutureType: rawConfig.jumpToFutureType || ActionTypes.JUMP_TO_FUTURE,\n        jumpType: rawConfig.jumpType || ActionTypes.JUMP,\n        clearHistoryType: Array.isArray(rawConfig.clearHistoryType)\n            ? rawConfig.clearHistoryType\n            : [rawConfig.clearHistoryType || ActionTypes.CLEAR_HISTORY],\n        neverSkipReducer: rawConfig.neverSkipReducer || false,\n        ignoreInitialState: rawConfig.ignoreInitialState || false,\n        syncFilter: rawConfig.syncFilter || false\n    };\n\n    let initialState = config.history;\n    return (state = initialState, action = {}, ...slices) => {\n        debug.start(action, state);\n\n        let history = state;\n        if (!initialState) {\n            debug.log(\"history is uninitialized\");\n\n            if (state === undefined) {\n                const clearHistoryAction = { type: ActionTypes.CLEAR_HISTORY };\n                const start = reducer(state, clearHistoryAction, ...slices);\n\n                history = createHistory(start, config.ignoreInitialState);\n\n                debug.log(\"do not set initialState on probe actions\");\n            } else if (isHistory(state)) {\n                history = initialState = config.ignoreInitialState\n                    ? state\n                    : newHistory(state.past, state.present, state.future);\n                debug.log(\"initialHistory initialized: initialState is a history\", initialState);\n            } else {\n                history = initialState = createHistory(state, config.ignoreInitialState);\n                debug.log(\n                    \"initialHistory initialized: initialState is not a history\",\n                    initialState\n                );\n            }\n        }\n\n        const skipReducer = res =>\n            config.neverSkipReducer\n                ? {\n                      ...res,\n                      present: reducer(res.present, action, ...slices)\n                  }\n                : res;\n\n        let res;\n        switch (action.type) {\n            case undefined:\n                return history;\n\n            case config.undoType:\n                res = jump(history, -1);\n                debug.log(\"perform undo\");\n                debug.end(res);\n                return skipReducer(res);\n\n            case config.redoType:\n                res = jump(history, 1);\n                debug.log(\"perform redo\");\n                debug.end(res);\n                return skipReducer(res);\n\n            case config.jumpToPastType:\n                res = jumpToPast(history, action.index);\n                debug.log(`perform jumpToPast to ${action.index}`);\n                debug.end(res);\n                return skipReducer(res);\n\n            case config.jumpToFutureType:\n                res = jumpToFuture(history, action.index);\n                debug.log(`perform jumpToFuture to ${action.index}`);\n                debug.end(res);\n                return skipReducer(res);\n\n            case config.jumpType:\n                res = jump(history, action.index);\n                debug.log(`perform jump to ${action.index}`);\n                debug.end(res);\n                return skipReducer(res);\n\n            case actionTypeAmongClearHistoryType(action.type, config.clearHistoryType):\n                res = createHistory(history.present, config.ignoreInitialState);\n                debug.log(\"perform clearHistory\");\n                debug.end(res);\n                return skipReducer(res);\n\n            default:\n                res = reducer(history.present, action, ...slices);\n\n                if (config.initTypes.some(actionType => actionType === action.type)) {\n                    debug.log(\"reset history due to init action\");\n                    debug.end(initialState);\n                    history = initialState = createHistory(state, config.ignoreInitialState);\n                    return initialState;\n                }\n\n                if (history._latestUnfiltered === res) {\n                    // Don't handle this action. Do not call debug.end here,\n                    // because this action should not produce side effects to the console\n                    return history;\n                }\n\n                const filtered =\n                    typeof config.filter === \"function\" && !config.filter(action, res, history);\n\n                if (filtered) {\n                    // if filtering an action, merely update the present\n                    const filteredState = newHistory(\n                        history.past,\n                        res,\n                        history.future,\n                        history.group\n                    );\n                    if (!config.syncFilter) {\n                        filteredState._latestUnfiltered = history._latestUnfiltered;\n                    }\n                    debug.log(\"filter ignored action, not storing it in past\");\n                    debug.end(filteredState);\n                    return filteredState;\n                }\n\n                const group = config.groupBy(action, res, history);\n                if (group != null && group === history.group) {\n                    // if grouping with the previous action, only update the present\n                    const groupedState = newHistory(\n                        history.past,\n                        res,\n                        history.future,\n                        history.group\n                    );\n                    debug.log(\"groupBy grouped the action with the previous action\");\n                    debug.end(groupedState);\n                    return groupedState;\n                }\n\n                // If the action wasn't filtered or grouped, insert normally\n                history = insert(history, res, config.limit, group);\n\n                debug.log(\"inserted new state into history\");\n                debug.end(history);\n                return history;\n        }\n    };\n}\n"],"file":"reducer.js"}