{"version":3,"sources":["../../../../src/editor/actions/history/helpers.ts"],"names":["parseActions","rawActions","defaultValue","Array","isArray","isHistory","history","present","future","past","distinctState","console","warn","includeAction","actions","action","indexOf","type","excludeAction","combineFilters","filters","reduce","prev","curr","currentState","previousHistory","groupByActionTypes","newHistory","group","_latestUnfiltered","index","length","limit"],"mappings":"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","sourcesContent":["// parseActions helper: takes a string (or array)\n//                      and makes it an array if it isn't yet\nexport function parseActions(rawActions, defaultValue = []) {\n    if (Array.isArray(rawActions)) {\n        return rawActions;\n    } else if (typeof rawActions === \"string\") {\n        return [rawActions];\n    }\n    return defaultValue;\n}\n\n// isHistory helper: check for a valid history object\nexport function isHistory(history) {\n    return (\n        typeof history.present !== \"undefined\" &&\n        typeof history.future !== \"undefined\" &&\n        typeof history.past !== \"undefined\" &&\n        Array.isArray(history.future) &&\n        Array.isArray(history.past)\n    );\n}\n\n// distinctState helper: deprecated, does nothing in latest beta\n/* istanbul ignore next */\nexport function distinctState() {\n    console.warn(\n        \"distinctState is deprecated in beta4 and newer. \" +\n            \"The distinctState behavior is now default, which means only \" +\n            \"actions resulting in a new state are recorded. \" +\n            \"See https://github.com/omnidan/redux-undo#filtering-actions \" +\n            \"for more details.\"\n    );\n    return () => true;\n}\n\n// includeAction helper: whitelist actions to be added to the history\nexport function includeAction(rawActions) {\n    const actions = parseActions(rawActions);\n    return action => actions.indexOf(action.type) >= 0;\n}\n\n// excludeAction helper: blacklist actions from being added to the history\nexport function excludeAction(rawActions) {\n    const actions = parseActions(rawActions);\n    return action => actions.indexOf(action.type) < 0;\n}\n\n// combineFilters helper: combine multiple filters to one\nexport function combineFilters(...filters) {\n    return filters.reduce(\n        (prev, curr) => (action, currentState, previousHistory) =>\n            prev(action, currentState, previousHistory) &&\n            curr(action, currentState, previousHistory),\n        () => true\n    );\n}\n\nexport function groupByActionTypes(rawActions) {\n    const actions = parseActions(rawActions);\n    return action => (actions.indexOf(action.type) >= 0 ? action.type : null);\n}\n\nexport function newHistory(past, present, future, group = null) {\n    return {\n        past,\n        present,\n        future,\n        group,\n        _latestUnfiltered: present,\n        index: past.length,\n        limit: past.length + future.length + 1\n    };\n}\n"],"file":"helpers.js"}