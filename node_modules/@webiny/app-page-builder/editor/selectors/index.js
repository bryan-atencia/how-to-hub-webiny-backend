import _get from "lodash/get";
import invariant from "invariant";
import { getPlugin } from "@webiny/plugins";

var getPluginType = function getPluginType(name) {
  var plugin = getPlugin(name);
  return plugin ? plugin.type : null;
};
/**
 * Get editor `ui` state
 */


export var getUi = function getUi(state) {
  return state.ui || {};
};
/**
 * Get editor `page` state
 */

export var getPage = function getPage(state) {
  return state.page || {};
};
/**
 * Get editor `revisions` state
 */

export var getRevisions = function getRevisions(state) {
  return state.revisions || [];
};
/**
 * Get editor content.
 */

export var getContent = function getContent(state) {
  var page = getPage(state);

  if (page.content && page.content.present) {
    return page.content.present;
  } else if (page.content) {
    return page.content;
  }

  var document = getPlugin("pb-editor-page-element-document");
  invariant(document, "\"pb-editor-page-element-document\" plugin must exist for Page Builder to work!");
  return document.create();
};
/**
 * Get element and all of its children recursively.
 * WARNING: use carefully as this makes render optimization really difficult when used in `connect`!
 */

export var getElementWithChildren = function getElementWithChildren(state, id) {
  var element = getElement(state, id);

  if (!element) {
    return null;
  }

  var content = getContent(state);
  return _get(content, element.path.replace(/\./g, ".elements.").slice(2));
};
/**
 * Get element by ID or path.
 * @param state
 * @param id ID or path of the element
 */

export var getElement = function getElement(state, id) {
  if (state.elements.hasOwnProperty(id)) {
    return state.elements[id];
  } // Find by path


  return Object.values(state.elements).find(function (el) {
    return el.path === id;
  });
};
/**
 * Get parent element and all of its children recursively
 * WARNING: use carefully as this makes render optimization really difficult when used in `connect`!
 * @param state
 * @param id
 * @returns {*}
 */

export var getParentElementWithChildren = function getParentElementWithChildren(state, id) {
  var element = getElement(state, id);
  var content = getContent(state);
  var parentPaths = element.path.split(".").slice(0, -1);

  if (parentPaths.length === 1) {
    return content;
  }

  return _get(content, parentPaths.join(".elements.").slice(2));
};
export var getActiveElement = function getActiveElement(state) {
  return getElement(state, getActiveElementId(state));
};
/**
 * Get active element ID.
 */

export var getActiveElementId = function getActiveElementId(state) {
  return getUi(state).activeElement;
};
/**
 * Get editor plugins (this mostly contains UI state).
 */

export var getPlugins = function getPlugins(state) {
  return getUi(state).plugins || {};
};
/**
 * Get editor plugins of certain type (this mostly contains UI state).
 */

export var getPluginsByType = function getPluginsByType(type) {
  return function (state) {
    return getPlugins(state)[type] || [];
  };
};
/**
 * Get an active plugin of the given type.
 */

export var getActivePlugins = function getActivePlugins(type) {
  var pluginsByType = getPluginsByType(type);
  return function (state) {
    return pluginsByType(state) || [];
  };
};
/**
 * Get active plugin params
 */

export var getActivePluginParams = function getActivePluginParams(name) {
  var type = getPluginType(name);

  if (typeof type !== "string") {
    return null;
  }

  var pluginsByType = getPluginsByType(type);
  return function (state) {
    var plugins = pluginsByType(state);

    if (plugins) {
      var plugin = plugins.find(function (pl) {
        return pl.name === name;
      });
      return plugin ? plugin.params : null;
    }

    return null;
  };
};
export var isPluginActive = function isPluginActive(name) {
  var type = getPluginType(name);

  if (typeof type !== "string") {
    // eslint-disable-next-line
    return function (state) {
      return false;
    };
  }

  var pluginsByType = getPluginsByType(type);
  return function (state) {
    return Boolean(pluginsByType(state).find(function (pl) {
      return pl.name === name;
    }));
  };
};
/**
 * Get dragging state.
 */

export var getIsDragging = function getIsDragging(state) {
  return getUi(state).dragging;
};
/**
 * Get props that need to be passed to an <Element>.
 */

export var getElementProps = function getElementProps(state, _ref) {
  var id = _ref.id;

  var _getUi = getUi(state),
      activeElement = _getUi.activeElement,
      highlightElement = _getUi.highlightElement,
      resizing = _getUi.resizing,
      dragging = _getUi.dragging;

  var element = state.elements[id];
  var active = activeElement && activeElement === element.id;
  var highlight = active || highlightElement && highlightElement === id;
  return {
    active: active,
    highlight: highlight && !dragging && !resizing
  };
};
//# sourceMappingURL=index.js.map