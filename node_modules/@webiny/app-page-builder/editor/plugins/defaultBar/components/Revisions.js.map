{"version":3,"sources":["../../../../../src/editor/plugins/defaultBar/components/Revisions.tsx"],"names":["React","connect","css","useRouter","Menu","MenuItem","getRevisions","ButtonDefault","Icon","Typography","buttonStyle","color","menuList","flexDirection","justifyContent","alignItems","textAlign","Revisions","revisions","history","evt","push","detail","index","id","map","rev","status","published","locked","version","state","memo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,iBAA/B;AACA,SAASC,YAAT,QAA6B,2CAA7B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAGA,IAAMC,WAAW,gBAAGR,GAAG,CAAC;AACpB,kBAAgB;AACZS,IAAAA,KAAK,EAAE;AADK;AADI,CAAD,uBAAvB;AAMA,IAAMC,QAAQ,gBAAGV,GAAG,CAAC;AACjB,oBAAkB;AACdW,IAAAA,aAAa,EAAE,QADD;AAEdC,IAAAA,cAAc,EAAE,QAFF;AAGdC,IAAAA,UAAU,EAAE,UAHE;AAIdC,IAAAA,SAAS,EAAE;AAJG;AADD,CAAD,oBAApB;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,mBACbf,SAAS,EADI;AAAA,MACzBgB,OADyB,cACzBA,OADyB;;AAEjC,sBACI,oBAAC,IAAD;AACI,IAAA,SAAS,EAAEP,QADf;AAEI,IAAA,QAAQ,EAAE,kBAAAQ,GAAG,EAAI;AACbD,MAAAA,OAAO,CAACE,IAAR,gCAAqCH,SAAS,CAACE,GAAG,CAACE,MAAJ,CAAWC,KAAZ,CAAT,CAA4BC,EAAjE;AACH,KAJL;AAKI,IAAA,MAAM,eACF,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEd;AAA1B,kCACc,oBAAC,IAAD;AAAM,MAAA,IAAI,eAAE,oBAAC,UAAD;AAAZ,MADd;AANR,KAWKQ,SAAS,CAACO,GAAV,CAAc,UAAAC,GAAG,EAAI;AAClB,QAAIC,MAAM,GAAG,OAAb;;AACA,QAAID,GAAG,CAACE,SAAR,EAAmB;AACfD,MAAAA,MAAM,GAAG,WAAT;AACH;;AACD,QAAID,GAAG,CAACG,MAAJ,IAAc,CAACH,GAAG,CAACE,SAAvB,EAAkC;AAC9BD,MAAAA,MAAM,GAAG,QAAT;AACH;;AAED,wBACI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAED,GAAG,CAACF,EAAnB;AAAuB,MAAA,QAAQ,EAAEG,MAAM,KAAK;AAA5C,oBACI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE;AAAjB,YAA4BD,GAAG,CAACI,OAAhC,CADJ,eAEI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE;AAAjB,YAA8BH,MAA9B,OAFJ,CADJ;AAMH,GAfA,CAXL,CADJ;AA8BH,CAhCD;;AAkCA,eAAe1B,OAAO,CAAgB,UAAA8B,KAAK;AAAA,SAAK;AAAEb,IAAAA,SAAS,EAAEZ,YAAY,CAACyB,KAAD;AAAzB,GAAL;AAAA,CAArB,CAAP,eACX/B,KAAK,CAACgC,IAAN,CAAWf,SAAX,CADW,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { css } from \"emotion\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { Menu, MenuItem } from \"@webiny/ui/Menu\";\nimport { getRevisions } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ButtonDefault } from \"@webiny/ui/Button\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { ReactComponent as DownButton } from \"./icons/round-arrow_drop_down-24px.svg\";\n\nconst buttonStyle = css({\n    \"&.mdc-button\": {\n        color: \"var(--mdc-theme-text-primary-on-background) !important\"\n    }\n});\n\nconst menuList = css({\n    \".mdc-list-item\": {\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"baseline\",\n        textAlign: \"left\"\n    }\n});\n\nconst Revisions = ({ revisions }) => {\n    const { history } = useRouter();\n    return (\n        <Menu\n            className={menuList}\n            onSelect={evt => {\n                history.push(`/page-builder/editor/${revisions[evt.detail.index].id}`);\n            }}\n            handle={\n                <ButtonDefault className={buttonStyle}>\n                    Revisions <Icon icon={<DownButton />} />\n                </ButtonDefault>\n            }\n        >\n            {revisions.map(rev => {\n                let status = \"draft\";\n                if (rev.published) {\n                    status = \"published\";\n                }\n                if (rev.locked && !rev.published) {\n                    status = \"locked\";\n                }\n\n                return (\n                    <MenuItem key={rev.id} disabled={status !== \"draft\"}>\n                        <Typography use={\"body2\"}>v{rev.version}</Typography>\n                        <Typography use={\"caption\"}>({status}) </Typography>\n                    </MenuItem>\n                );\n            })}\n        </Menu>\n    );\n};\n\nexport default connect<any, any, any>(state => ({ revisions: getRevisions(state) }))(\n    React.memo(Revisions)\n);\n"],"file":"Revisions.js"}