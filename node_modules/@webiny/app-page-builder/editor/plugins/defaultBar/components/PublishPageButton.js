import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _isEqual from "lodash/isEqual";
import _omit from "lodash/omit";
import React from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { ButtonPrimary } from "@webiny/ui/Button";
import { getPage } from "@webiny/app-page-builder/editor/selectors";
import { Mutation } from "react-apollo";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useRouter } from "@webiny/react-router";
import { PUBLISH_REVISION } from "./PublishPageButton/graphql";

var PublishPageButton = function PublishPageButton(_ref) {
  var page = _ref.page;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(ConfirmationDialog, {
    "data-testid": "pb-editor-publish-confirmation-dialog",
    title: "Publish page",
    message: "You are about to publish this page, are you sure want to continue?"
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: PUBLISH_REVISION,
      refetchQueries: ["PbListPages"]
    }, function (update) {
      return /*#__PURE__*/React.createElement(ButtonPrimary, {
        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                    var response, error;
                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return update({
                              variables: {
                                id: page.id
                              }
                            });

                          case 2:
                            response = _context.sent;
                            error = response.data.pageBuilder.publishRevision.error;

                            if (!error) {
                              _context.next = 6;
                              break;
                            }

                            return _context.abrupt("return", showSnackbar(error.message));

                          case 6:
                            history.push("/page-builder/pages?id=".concat(page.id)); // Let's wait a bit, because we are also redirecting the user.

                            setTimeout(function () {
                              showSnackbar("Your page was published successfully!");
                            }, 500);

                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  })));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))
      }, page.version > 1 ? "Publish changes" : "Publish");
    });
  });
};

export default connect(function (state) {
  return {
    page: _omit(getPage(state), ["content"])
  };
}, null, null, {
  areStatePropsEqual: _isEqual
})(PublishPageButton);
//# sourceMappingURL=PublishPageButton.js.map