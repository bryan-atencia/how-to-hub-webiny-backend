import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _isEqual from "lodash/isEqual";
import _omit from "lodash/omit";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    mutation SetHomePage($id: ID!) {\n        pageBuilder {\n            setHomePage(id: $id) {\n                error {\n                    message\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { getPage } from "@webiny/app-page-builder/editor/selectors";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useRouter } from "@webiny/react-router";
import { MenuItem } from "@webiny/ui/Menu";
import { ListItemGraphic } from "@webiny/ui/List";
import { Icon } from "@webiny/ui/Icon";
import { ReactComponent as HomeIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/round-home-24px.svg";
import { Mutation } from "react-apollo";
import gql from "graphql-tag";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
var setHomePage = gql(_templateObject());

var SetAsHomepageButton = function SetAsHomepageButton(_ref) {
  var page = _ref.page;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(ConfirmationDialog, {
    message: /*#__PURE__*/React.createElement("span", null, "You're about to set this page as your new homepage, are you sure you want to continue? Note that the page will automatically be published.")
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: setHomePage
    }, function (update) {
      return /*#__PURE__*/React.createElement(MenuItem, {
        onClick: function onClick() {
          showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            var response, error;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return update({
                      variables: {
                        id: page.id
                      }
                    });

                  case 2:
                    response = _context.sent;
                    error = response.data.pageBuilder.setHomePage.error;

                    if (!error) {
                      _context.next = 6;
                      break;
                    }

                    return _context.abrupt("return", showSnackbar(error.message));

                  case 6:
                    history.push("/page-builder/pages?id=".concat(page.id)); // Let's wait a bit, because we are also redirecting the user.

                    setTimeout(function () {
                      return showSnackbar("New homepage set successfully!");
                    }, 500);

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));
        }
      }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
        icon: /*#__PURE__*/React.createElement(HomeIcon, null)
      })), "Set as homepage");
    });
  });
};

export default connect(function (state) {
  return {
    page: _omit(getPage(state), ["content"])
  };
}, null, null, {
  areStatePropsEqual: _isEqual
})(SetAsHomepageButton);
//# sourceMappingURL=SetAsHomepageButton.js.map