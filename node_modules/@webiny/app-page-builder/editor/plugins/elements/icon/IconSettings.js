import React, { useMemo, useCallback } from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { Tabs, Tab } from "@webiny/ui/Tabs";
import { get, set } from "dot-prop-immutable";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import Input from "@webiny/app-page-builder/editor/plugins/elementSettings/components/Input";
import ColorPicker from "@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker";
import IconPicker from "@webiny/app-page-builder/editor/plugins/elementSettings/components/IconPicker";
import { getSvg } from "./utils";

var IconSettings = function IconSettings(_ref) {
  var element = _ref.element,
      updateElement = _ref.updateElement;
  var _element$data = element.data;
  _element$data = _element$data === void 0 ? {} : _element$data;
  var _element$data$icon = _element$data.icon,
      icon = _element$data$icon === void 0 ? {} : _element$data$icon;
  var setData = useMemo(function () {
    var historyUpdated = {};
    return function (name, value) {
      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var attrKey = "data.icon.".concat(name);
      var newElement = set(element, attrKey, value);

      var _get = get(newElement, "data.icon"),
          id = _get.id,
          width = _get.width,
          color = _get.color;

      newElement = set(newElement, "data.icon.svg", getSvg(id, {
        width: width,
        color: color
      }));

      if (!history) {
        updateElement({
          element: newElement,
          history: history
        });
        return;
      }

      if (historyUpdated[name] !== value) {
        historyUpdated[name] = value;
        updateElement({
          element: newElement
        });
      }
    };
  }, [element, updateElement]);
  var updateIcon = useCallback(function (value) {
    return setData("id", value.id);
  }, [setData]);
  var updateColor = useCallback(function (value) {
    return setData("color", value);
  }, [setData]);
  var updateColorPreview = useCallback(function (value) {
    return setData("color", value, false);
  }, [setData]);
  var updateWidth = useCallback(function (value) {
    return setData("width", value);
  }, [setData]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
    label: "Icon"
  }, /*#__PURE__*/React.createElement(IconPicker, {
    label: "Icon",
    value: icon.id,
    updateValue: updateIcon
  }), /*#__PURE__*/React.createElement(Input, {
    label: "Width",
    value: icon.width,
    updateValue: updateWidth,
    placeholder: "50"
  }), /*#__PURE__*/React.createElement(ColorPicker, {
    label: "Color",
    value: icon.color,
    updateValue: updateColor,
    updatePreview: updateColorPreview
  }))));
};

export default connect(function (state) {
  return {
    element: getActiveElement(state)
  };
}, {
  updateElement: updateElement
})(IconSettings);
//# sourceMappingURL=IconSettings.js.map