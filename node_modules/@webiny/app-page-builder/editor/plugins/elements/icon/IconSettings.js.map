{"version":3,"sources":["../../../../../src/editor/plugins/elements/icon/IconSettings.tsx"],"names":["React","useMemo","useCallback","connect","Tabs","Tab","get","set","updateElement","getActiveElement","Input","ColorPicker","IconPicker","getSvg","IconSettings","element","data","icon","setData","historyUpdated","name","value","history","attrKey","newElement","id","width","color","updateIcon","updateColor","updateColorPreview","updateWidth","state"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { get, set } from \"dot-prop-immutable\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport Input from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Input\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker\";\nimport IconPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/IconPicker\";\nimport { getSvg } from \"./utils\";\n\nconst IconSettings = ({ element, updateElement }) => {\n    const { data: { icon = {} } = {} } = element;\n\n    const setData = useMemo(() => {\n        const historyUpdated = {};\n\n        return (name, value, history = true) => {\n            const attrKey = `data.icon.${name}`;\n\n            let newElement = set(element, attrKey, value);\n            const { id, width, color } = get(newElement, \"data.icon\");\n            newElement = set(newElement, \"data.icon.svg\", getSvg(id, { width, color }));\n\n            if (!history) {\n                updateElement({ element: newElement, history });\n                return;\n            }\n\n            if (historyUpdated[name] !== value) {\n                historyUpdated[name] = value;\n                updateElement({ element: newElement });\n            }\n        };\n    }, [element, updateElement]);\n\n    const updateIcon = useCallback(value => setData(\"id\", value.id), [setData]);\n    const updateColor = useCallback(value => setData(\"color\", value), [setData]);\n    const updateColorPreview = useCallback(value => setData(\"color\", value, false), [setData]);\n    const updateWidth = useCallback(value => setData(\"width\", value), [setData]);\n\n    return (\n        <React.Fragment>\n            <Tabs>\n                <Tab label={\"Icon\"}>\n                    <IconPicker label={\"Icon\"} value={icon.id} updateValue={updateIcon} />\n                    <Input\n                        label={\"Width\"}\n                        value={icon.width}\n                        updateValue={updateWidth}\n                        placeholder=\"50\"\n                    />\n                    <ColorPicker\n                        label={\"Color\"}\n                        value={icon.color}\n                        updateValue={updateColor}\n                        updatePreview={updateColorPreview}\n                    />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n\nexport default connect<any, any, any>(state => ({ element: getActiveElement(state) }), {\n    updateElement\n})(IconSettings);\n"],"file":"IconSettings.js"}