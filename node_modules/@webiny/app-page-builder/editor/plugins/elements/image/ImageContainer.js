import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _isEqual from "lodash/isEqual";
import _set from "lodash/set";
import React, { useCallback } from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import styled from "@emotion/styled";
import isNumeric from "isnumeric";
import SingleImageUpload from "@webiny/app-admin/components/SingleImageUpload";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getElement } from "@webiny/app-page-builder/editor/selectors";
var position = {
  left: "flex-start",
  center: "center",
  right: "flex-end"
};
var AlignImage = /*#__PURE__*/styled("div", {
  target: "egixx440",
  label: "AlignImage"
})(function (props) {
  return {
    img: {
      alignSelf: position[props.align]
    }
  };
});

var ImageContainer = function ImageContainer(props) {
  var horizontalAlign = props.horizontalAlign,
      updateElement = props.updateElement,
      element = props.element;

  var image = _objectSpread({}, props.image);

  var imgStyle = {
    width: null,
    height: null
  };

  if (image.width) {
    var width = image.width;
    imgStyle.width = isNumeric(width) ? parseInt(width) : width;
  }

  if (image.height) {
    var height = image.height;
    imgStyle.height = isNumeric(height) ? parseInt(height) : height;
  }

  var onChange = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              updateElement({
                element: _set(element, "data.image.file", data),
                merge: true
              });

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [element]);
  return /*#__PURE__*/React.createElement(AlignImage, {
    align: horizontalAlign
  }, /*#__PURE__*/React.createElement(SingleImageUpload, {
    imagePreviewProps: {
      style: imgStyle,
      srcSet: "auto"
    },
    onChange: onChange,
    value: image.file
  }));
};

export default connect(function (state, _ref2) {
  var elementId = _ref2.elementId;
  var element = getElement(state, elementId);
  var _element$data = element.data,
      _element$data$image = _element$data.image,
      image = _element$data$image === void 0 ? {} : _element$data$image,
      _element$data$setting = _element$data.settings,
      settings = _element$data$setting === void 0 ? {} : _element$data$setting;
  return {
    element: {
      id: element.id,
      type: element.type,
      path: element.path
    },
    image: image,
    horizontalAlign: settings.horizontalAlign || "center"
  };
}, {
  updateElement: updateElement
}, null, {
  areStatePropsEqual: _isEqual
})( /*#__PURE__*/React.memo(ImageContainer));
//# sourceMappingURL=ImageContainer.js.map