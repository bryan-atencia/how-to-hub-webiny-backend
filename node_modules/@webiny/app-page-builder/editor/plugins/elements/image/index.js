import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import styled from "@emotion/styled";
import { getPlugins } from "@webiny/plugins";
import { ELEMENT_CREATED } from "@webiny/app-page-builder/editor/actions";
import { ReactComponent as ImageIcon } from "@svgr/webpack!./round-image-24px.svg";
import ImageSettings from "./ImageSettings";
import Image from "./Image";
import Action from "../../elementSettings/components/Action";
export default (function () {
  var PreviewBox = /*#__PURE__*/styled("div", {
    target: "ey8f7jk0",
    label: "PreviewBox"
  })({
    textAlign: "center",
    height: 50,
    svg: {
      height: 50,
      width: 50
    }
  });
  return [{
    name: "pb-editor-page-element-image",
    type: "pb-editor-page-element",
    elementType: "image",
    toolbar: {
      title: "Image",
      group: "pb-editor-element-group-basic",
      preview: function preview() {
        return /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(ImageIcon, null));
      }
    },
    settings: ["pb-editor-page-element-settings-image", ["pb-editor-page-element-settings-background", {
      image: false
    }], "pb-editor-page-element-settings-link", "", "pb-editor-page-element-settings-border", "pb-editor-page-element-settings-shadow", "", ["pb-editor-page-element-settings-horizontal-align", {
      alignments: ["left", "center", "right"]
    }], "pb-editor-page-element-settings-padding", "pb-editor-page-element-settings-margin", "", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete", ""],
    target: ["column", "row"],
    create: function create(options) {
      return _objectSpread({
        type: "image",
        elements: [],
        data: {
          settings: {
            horizontalAlign: "center",
            margin: {
              desktop: {
                all: 0
              },
              mobile: {
                top: 0,
                left: 0,
                right: 0,
                bottom: 15
              },
              advanced: true
            },
            padding: {
              desktop: {
                all: 0
              },
              mobile: {
                all: 0
              }
            }
          }
        }
      }, options);
    },
    render: function render(_ref) {
      var element = _ref.element;
      return /*#__PURE__*/React.createElement(Image, {
        element: element
      });
    }
  }, {
    name: "pb-editor-page-element-settings-image",
    type: "pb-editor-page-element-settings",
    renderAction: function renderAction() {
      return /*#__PURE__*/React.createElement(Action, {
        plugin: this.name,
        tooltip: "Image",
        icon: /*#__PURE__*/React.createElement(ImageIcon, null)
      });
    },
    renderMenu: function renderMenu() {
      return /*#__PURE__*/React.createElement(ImageSettings, null);
    }
  }, {
    type: "pb-editor-redux-middleware",
    name: "pb-editor-redux-middleware-image-created",
    actions: [ELEMENT_CREATED],
    middleware: function middleware(_ref2) {
      var action = _ref2.action,
          next = _ref2.next;
      var _action$payload = action.payload,
          element = _action$payload.element,
          source = _action$payload.source;
      next(action);

      if (element.type !== "image") {
        return;
      } // Check the source of the element (could be `saved` element which behaves differently from other elements)


      var imagePlugin = getPlugins("pb-editor-page-element").find(function (pl) {
        return pl.elementType === source.type;
      });

      if (!imagePlugin) {
        return;
      }

      var onCreate = imagePlugin.onCreate;

      if (!onCreate || onCreate !== "skip") {
        // If source element does not define a specific `onCreate` behavior - continue with the actual element plugin
        // TODO: this isn't an ideal approach, implement a retry mechanism which polls for DOM element
        setTimeout(function () {
          var image = document.querySelector("#".concat(window.CSS.escape(element.id), " [data-role=\"select-image\"]"));

          if (image) {
            image.click();
          }
        }, 100);
      }
    }
  }];
});
//# sourceMappingURL=index.js.map