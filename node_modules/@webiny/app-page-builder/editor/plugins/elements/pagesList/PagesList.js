import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _get from "lodash/get";
import * as React from "react";
import { Query } from "react-apollo";
import { usePageBuilder } from "@webiny/app-page-builder/hooks/usePageBuilder";
import { loadPages } from "./graphql";
import { getPlugins } from "@webiny/plugins";

var PagesList = function PagesList(_ref) {
  var data = _ref.data;

  var component = data.component,
      vars = _objectWithoutProperties(data, ["component"]);

  var components = getPlugins("pb-page-element-pages-list-component");
  var pageList = components.find(function (cmp) {
    return cmp.componentName === component;
  });

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  if (!pageList) {
    return /*#__PURE__*/React.createElement("div", null, "Selected page list component not found!");
  }

  var ListComponent = pageList.component;

  if (!ListComponent) {
    return /*#__PURE__*/React.createElement("div", null, "You must select a component to render your list!");
  }

  var sort = null;

  if (vars.sortBy) {
    sort = _defineProperty({}, vars.sortBy, parseInt(vars.sortDirection) || -1);
  }

  var variables = {
    category: vars.category,
    sort: sort,
    tags: vars.tags,
    tagsRule: vars.tagsRule,
    limit: parseInt(vars.resultsPerPage),
    after: undefined,
    before: undefined
  };
  return /*#__PURE__*/React.createElement(Query, {
    query: loadPages,
    variables: variables
  }, function (_ref2) {
    var data = _ref2.data,
        loading = _ref2.loading,
        refetch = _ref2.refetch;

    if (loading) {
      return /*#__PURE__*/React.createElement("div", null, "Loading...");
    }

    var pages = _get(data, "pageBuilder.listPublishedPages");

    if (!pages || !pages.data.length) {
      return /*#__PURE__*/React.createElement("div", null, "No pages match the criteria.");
    }

    var prevPage = null;

    if (pages.meta.hasPreviousPage) {
      prevPage = function prevPage() {
        return refetch(_objectSpread(_objectSpread({}, variables), {}, {
          before: pages.meta.cursors.before
        }));
      };
    }

    var nextPage = null;

    if (pages.meta.hasNextPage) {
      nextPage = function nextPage() {
        return refetch(_objectSpread(_objectSpread({}, variables), {}, {
          after: pages.meta.cursors.after
        }));
      };
    }

    return /*#__PURE__*/React.createElement(ListComponent, Object.assign({}, pages, {
      nextPage: nextPage,
      prevPage: prevPage,
      theme: theme
    }));
  });
};

export default /*#__PURE__*/React.memo(PagesList);
//# sourceMappingURL=PagesList.js.map