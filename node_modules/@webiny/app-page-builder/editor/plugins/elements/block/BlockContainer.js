import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _isEqual from "lodash/isEqual";
import * as React from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { css } from "emotion";
import Element from "@webiny/app-page-builder/editor/components/Element";
import DropZone from "@webiny/app-page-builder/editor/components/DropZone";
import { dropElement } from "@webiny/app-page-builder/editor/actions";
import { getElement } from "@webiny/app-page-builder/editor/selectors";

var BlockContainer = function BlockContainer(_ref) {
  var elementStyle = _ref.elementStyle,
      elementAttributes = _ref.elementAttributes,
      customClasses = _ref.customClasses,
      combineClassNames = _ref.combineClassNames,
      element = _ref.element,
      dropElement = _ref.dropElement;

  var width = elementStyle.width,
      alignItems = elementStyle.alignItems,
      justifyContent = elementStyle.justifyContent,
      containerStyle = _objectWithoutProperties(elementStyle, ["width", "alignItems", "justifyContent"]);

  var id = element.id,
      type = element.type,
      elements = element.elements;
  return /*#__PURE__*/React.createElement("div", Object.assign({
    style: {
      width: "100%",
      display: "flex",
      justifyContent: "center"
    },
    className: "webiny-pb-layout-block-container " + /*#__PURE__*/css(containerStyle, "label:BlockContainer;")
  }, elementAttributes), /*#__PURE__*/React.createElement("div", {
    style: {
      width: width ? width : "100%",
      alignSelf: justifyContent,
      alignItems: alignItems
    },
    className: combineClassNames.apply(void 0, _toConsumableArray(customClasses))
  }, !elements.length && /*#__PURE__*/React.createElement(DropZone.Center, {
    element: element
  }, "Add an element here"), elements.map(function (childId, index) {
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: childId
    }, /*#__PURE__*/React.createElement(DropZone.Above, {
      type: type,
      onDrop: function onDrop(source) {
        return dropElement({
          source: source,
          target: {
            id: id,
            type: type,
            position: index
          }
        });
      }
    }), /*#__PURE__*/React.createElement(Element, {
      key: childId,
      id: childId
    }), index === elements.length - 1 && /*#__PURE__*/React.createElement(DropZone.Below, {
      type: type,
      onDrop: function onDrop(source) {
        dropElement({
          source: source,
          target: {
            id: id,
            type: type,
            position: elements.length
          }
        });
      }
    }));
  })));
};

export default connect(function (state, props) {
  return {
    element: getElement(state, props.elementId)
  };
}, {
  dropElement: dropElement
}, null, {
  areStatePropsEqual: _isEqual
})(BlockContainer);
//# sourceMappingURL=BlockContainer.js.map