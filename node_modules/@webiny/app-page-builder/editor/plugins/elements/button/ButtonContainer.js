import React from "react";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { set } from "dot-prop-immutable";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getElement } from "@webiny/app-page-builder/editor/selectors";
import ConnectedSlate from "@webiny/app-page-builder/editor/components/ConnectedSlate";
var excludePlugins = ["pb-editor-slate-menu-item-link", "pb-editor-slate-menu-item-align", "pb-editor-slate-menu-item-ordered-list", "pb-editor-slate-menu-item-unordered-list", "pb-editor-slate-menu-item-code", "pb-editor-slate-editor-align", "pb-editor-slate-editor-lists", "pb-editor-slate-editor-link"];

var ButtonContainer = function ButtonContainer(props) {
  var getAllClasses = props.getAllClasses,
      elementStyle = props.elementStyle,
      elementAttributes = props.elementAttributes,
      element = props.element;

  var _ref = element.data || {},
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? "default" : _ref$type,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? {} : _ref$icon;

  var svg = icon.svg || null;
  var alignItems = elementStyle.alignItems;
  var _icon$position = icon.position,
      position = _icon$position === void 0 ? "left" : _icon$position;
  var onChange = useHandler(props, function (_ref2) {
    var element = _ref2.element,
        updateElement = _ref2.updateElement;
    return function (value) {
      updateElement({
        element: set(element, "data.text", value)
      });
    };
  });
  return /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      justifyContent: alignItems
    }
  }, /*#__PURE__*/React.createElement("a", Object.assign({
    href: null,
    style: elementStyle
  }, elementAttributes, {
    className: getAllClasses("webiny-pb-page-element-button", "webiny-pb-page-element-button--" + type, "webiny-pb-page-element-button__icon--" + position)
  }), svg && /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: svg
    }
  }), /*#__PURE__*/React.createElement(ConnectedSlate, {
    elementId: element.id,
    onChange: onChange,
    exclude: excludePlugins
  })));
};

export default connect(function (state, props) {
  return {
    element: getElement(state, props.elementId)
  };
}, {
  updateElement: updateElement
})(ButtonContainer);
//# sourceMappingURL=ButtonContainer.js.map