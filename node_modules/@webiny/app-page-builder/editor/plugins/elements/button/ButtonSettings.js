import _isEqual from "lodash/isEqual";
import _get from "lodash/get";
import React, { useCallback, useMemo } from "react";
import { renderToStaticMarkup } from "react-dom/server";
import { getPlugins } from "@webiny/plugins";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { set } from "dot-prop-immutable";
import { Tabs, Tab } from "@webiny/ui/Tabs";
import { Select } from "@webiny/ui/Select";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { usePageBuilder } from "@webiny/app-page-builder/hooks/usePageBuilder";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import Input from "@webiny/app-page-builder/editor/plugins/elementSettings/components/Input";
import ColorPicker from "@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker";
import IconPicker from "@webiny/app-page-builder/editor/plugins/elementSettings/components/IconPicker";

var ButtonSettings = function ButtonSettings(_ref) {
  var element = _ref.element,
      updateElement = _ref.updateElement;

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  var _get2 = _get(theme, "elements.button", []),
      types = _get2.types;

  var _get3 = _get(element, "data", {}),
      _get3$type = _get3.type,
      type = _get3$type === void 0 ? _get(types, "0.name", "") : _get3$type,
      _get3$icon = _get3.icon,
      icon = _get3$icon === void 0 ? {} : _get3$icon;

  var setData = useMemo(function () {
    var historyUpdated = {};
    return function (name, value) {
      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var attrKey = "data.".concat(name);
      var newElement = set(element, attrKey, value);

      if (name.startsWith("icon")) {
        var _get4 = _get(newElement, "data.icon"),
            id = _get4.id,
            width = _get4.width,
            color = _get4.color;

        newElement = set(newElement, "data.icon.svg", getSvg(id, {
          width: width,
          color: color
        }));
      }

      if (!history) {
        updateElement({
          element: newElement,
          history: history
        });
        return;
      }

      if (historyUpdated[name] !== value) {
        historyUpdated[name] = value;
        updateElement({
          element: newElement
        });
      }
    };
  }, [element, updateElement]);
  var updateType = useCallback(function (value) {
    return setData("type", value);
  }, [setData]);
  var updateIcon = useCallback(function (value) {
    return setData("icon.id", value.id);
  }, [setData]);
  var updateIconColor = useCallback(function (value) {
    return setData("icon.color", value);
  }, [setData]);
  var updateIconColorPreview = useCallback(function (value) {
    return setData("icon.color", value, false);
  }, [setData]);
  var updateIconWidth = useCallback(function (value) {
    return setData("icon.width", value);
  }, [setData]);
  var updateIconPosition = useCallback(function (value) {
    return setData("icon.position", value);
  }, [setData]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
    label: "Button"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, "Type")), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Select, {
    value: type,
    onChange: updateType
  }, types.map(function (type) {
    return /*#__PURE__*/React.createElement("option", {
      key: type.className,
      value: type.className
    }, type.label);
  }))))), /*#__PURE__*/React.createElement(Tab, {
    label: "Icon"
  }, /*#__PURE__*/React.createElement(IconPicker, {
    label: "Icon",
    value: icon.id,
    updateValue: updateIcon
  }), /*#__PURE__*/React.createElement(Input, {
    label: "Width",
    value: icon.width || 50,
    updateValue: updateIconWidth
  }), /*#__PURE__*/React.createElement(ColorPicker, {
    label: "Color",
    value: icon.color,
    updateValue: updateIconColor,
    updatePreview: updateIconColorPreview
  }), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, "Position")), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Select, {
    value: icon.position || "left",
    onChange: updateIconPosition
  }, /*#__PURE__*/React.createElement("option", {
    value: "left"
  }, "Left"), /*#__PURE__*/React.createElement("option", {
    value: "right"
  }, "Right"), /*#__PURE__*/React.createElement("option", {
    value: "top"
  }, "Top"), /*#__PURE__*/React.createElement("option", {
    value: "bottom"
  }, "Bottom")))))));
};

var icons;

var getIcons = function getIcons() {
  if (!icons) {
    var plugins = getPlugins("pb-icons");
    icons = plugins.reduce(function (icons, pl) {
      return icons.concat(pl.getIcons());
    }, []);
  }

  return icons;
};

var getSvg = function getSvg(id) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!props.width) {
    props.width = 50;
  }

  var icon = getIcons().find(function (ic) {
    return _isEqual(ic.id, id);
  });

  if (!icon) {
    return null;
  }

  return renderToStaticMarkup( /*#__PURE__*/React.cloneElement(icon.svg, props));
};

export default connect(function (state) {
  return {
    element: getActiveElement(state)
  };
}, {
  updateElement: updateElement
})( /*#__PURE__*/React.memo(ButtonSettings));
//# sourceMappingURL=ButtonSettings.js.map