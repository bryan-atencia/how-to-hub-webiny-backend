{"version":3,"sources":["../../../../../src/editor/plugins/elements/button/ButtonSettings.tsx"],"names":["React","useCallback","useMemo","renderToStaticMarkup","getPlugins","connect","set","Tabs","Tab","Select","Grid","Cell","Typography","usePageBuilder","updateElement","getActiveElement","Input","ColorPicker","IconPicker","ButtonSettings","element","theme","types","type","icon","setData","historyUpdated","name","value","history","attrKey","newElement","startsWith","id","width","color","getSvg","updateType","updateIcon","updateIconColor","updateIconColorPreview","updateIconWidth","updateIconPosition","map","className","label","position","icons","getIcons","plugins","reduce","pl","concat","props","find","ic","cloneElement","svg","state","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { set } from \"dot-prop-immutable\";\nimport { get, isEqual } from \"lodash\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { usePageBuilder } from \"@webiny/app-page-builder/hooks/usePageBuilder\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport Input from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Input\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker\";\nimport IconPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/IconPicker\";\nimport { PbIcon, PbIconsPlugin } from \"@webiny/app-page-builder/types\";\n\nconst ButtonSettings = ({ element, updateElement }) => {\n    const { theme } = usePageBuilder();\n    const { types } = get(theme, \"elements.button\", []);\n    const { type = get(types, \"0.name\", \"\"), icon = {} } = get(element, \"data\", {});\n\n    const setData = useMemo(() => {\n        const historyUpdated = {};\n\n        return (name, value, history = true) => {\n            const attrKey = `data.${name}`;\n\n            let newElement = set(element, attrKey, value);\n            if (name.startsWith(\"icon\")) {\n                const { id, width, color } = get(newElement, \"data.icon\");\n                newElement = set(newElement, \"data.icon.svg\", getSvg(id, { width, color }));\n            }\n\n            if (!history) {\n                updateElement({ element: newElement, history });\n                return;\n            }\n\n            if (historyUpdated[name] !== value) {\n                historyUpdated[name] = value;\n                updateElement({ element: newElement });\n            }\n        };\n    }, [element, updateElement]);\n\n    const updateType = useCallback(value => setData(\"type\", value), [setData]);\n    const updateIcon = useCallback(value => setData(\"icon.id\", value.id), [setData]);\n    const updateIconColor = useCallback((value: string) => setData(\"icon.color\", value), [setData]);\n    const updateIconColorPreview = useCallback(\n        (value: string) => setData(\"icon.color\", value, false),\n        [setData]\n    );\n    const updateIconWidth = useCallback((value: string) => setData(\"icon.width\", value), [setData]);\n    const updateIconPosition = useCallback((value: string) => setData(\"icon.position\", value), [\n        setData\n    ]);\n\n    return (\n        <React.Fragment>\n            <Tabs>\n                <Tab label={\"Button\"}>\n                    <Grid>\n                        <Cell span={6}>\n                            <Typography use={\"overline\"}>Type</Typography>\n                        </Cell>\n                        <Cell span={6}>\n                            <Select value={type} onChange={updateType}>\n                                {types.map(type => (\n                                    <option key={type.className} value={type.className}>\n                                        {type.label}\n                                    </option>\n                                ))}\n                            </Select>\n                        </Cell>\n                    </Grid>\n                </Tab>\n                <Tab label={\"Icon\"}>\n                    <IconPicker label={\"Icon\"} value={icon.id} updateValue={updateIcon} />\n                    <Input label={\"Width\"} value={icon.width || 50} updateValue={updateIconWidth} />\n                    <ColorPicker\n                        label={\"Color\"}\n                        value={icon.color}\n                        updateValue={updateIconColor}\n                        updatePreview={updateIconColorPreview}\n                    />\n                    <Grid>\n                        <Cell span={6}>\n                            <Typography use={\"overline\"}>Position</Typography>\n                        </Cell>\n                        <Cell span={6}>\n                            <Select value={icon.position || \"left\"} onChange={updateIconPosition}>\n                                <option value={\"left\"}>Left</option>\n                                <option value={\"right\"}>Right</option>\n                                <option value={\"top\"}>Top</option>\n                                <option value={\"bottom\"}>Bottom</option>\n                            </Select>\n                        </Cell>\n                    </Grid>\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n\nlet icons;\nconst getIcons = (): PbIcon[] => {\n    if (!icons) {\n        const plugins = getPlugins<PbIconsPlugin>(\"pb-icons\");\n        icons = plugins.reduce((icons, pl) => {\n            return icons.concat(pl.getIcons());\n        }, []);\n    }\n    return icons;\n};\n\nconst getSvg = (id: string[], props: any = {}) => {\n    if (!props.width) {\n        props.width = 50;\n    }\n    const icon: PbIcon = getIcons().find(ic => isEqual(ic.id, id));\n    if (!icon) {\n        return null;\n    }\n    return renderToStaticMarkup(React.cloneElement(icon.svg, props));\n};\n\nexport default connect<any, any, any>(state => ({ element: getActiveElement(state) }), {\n    updateElement\n})(React.memo(ButtonSettings));\n"],"file":"ButtonSettings.js"}