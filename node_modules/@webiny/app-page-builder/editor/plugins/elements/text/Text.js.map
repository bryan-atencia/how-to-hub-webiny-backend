{"version":3,"sources":["../../../../../src/editor/plugins/elements/text/Text.tsx"],"names":["React","useHandler","connect","set","ConnectedSlate","ElementRoot","updateElement","getElement","className","Text","props","onChange","element","value","id","state","elementId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2DAA3B;AACA,SAASC,WAAT,QAA4B,wDAA5B;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,UAAT,QAA2B,2CAA3B;AAEA,OAAO,IAAMC,SAAS,GAAG,+DAAlB;;AAEP,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AAClB,MAAMC,QAAQ,GAAGV,UAAU,CAACS,KAAD,EAAQ;AAAA,QAAGE,OAAH,QAAGA,OAAH;AAAA,QAAYN,aAAZ,QAAYA,aAAZ;AAAA,WAAgC,UAAAO,KAAK,EAAI;AACxEP,MAAAA,aAAa,CAAC;AAAEM,QAAAA,OAAO,EAAET,GAAG,CAACS,OAAD,EAAU,WAAV,EAAuBC,KAAvB;AAAd,OAAD,CAAb;AACH,KAFkC;AAAA,GAAR,CAA3B;AAIA,sBACI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEH,KAAK,CAACE,OAA5B;AAAqC,IAAA,SAAS,EAAEJ;AAAhD,kBACI,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEE,KAAK,CAACE,OAAN,CAAcE,EAAzC;AAA6C,IAAA,QAAQ,EAAEH;AAAvD,IADJ,CADJ;AAKH,CAVD;;AAYA,eAAeT,OAAO,CAClB,UAACa,KAAD,EAAQL,KAAR;AAAA,SAAmB;AACfE,IAAAA,OAAO,EAAEL,UAAU,CAACQ,KAAD,EAAQL,KAAK,CAACM,SAAd;AADJ,GAAnB;AAAA,CADkB,EAIlB;AAAEV,EAAAA,aAAa,EAAbA;AAAF,CAJkB,CAAP,CAKbG,IALa,CAAf","sourcesContent":["import React from \"react\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { set } from \"dot-prop-immutable\";\nimport ConnectedSlate from \"@webiny/app-page-builder/editor/components/ConnectedSlate\";\nimport { ElementRoot } from \"@webiny/app-page-builder/render/components/ElementRoot\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getElement } from \"@webiny/app-page-builder/editor/selectors\";\n\nexport const className = \"webiny-pb-base-page-element-style webiny-pb-page-element-text\";\n\nconst Text = props => {\n    const onChange = useHandler(props, ({ element, updateElement }) => value => {\n        updateElement({ element: set(element, \"data.text\", value) });\n    });\n\n    return (\n        <ElementRoot element={props.element} className={className}>\n            <ConnectedSlate elementId={props.element.id} onChange={onChange} />\n        </ElementRoot>\n    );\n};\n\nexport default connect<any, any, any>(\n    (state, props) => ({\n        element: getElement(state, props.elementId)\n    }),\n    { updateElement }\n)(Text);\n"],"file":"Text.js"}