import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from "react";
import loremIpsum from "lorem-ipsum";
import Text, { className } from "./Text";
import { createValue } from "@webiny/app-page-builder/editor/components/Slate";
export default (function () {
  var defaultLipsum = {
    count: 3,
    units: "sentences",
    sentenceLowerBound: 5,
    sentenceUpperBound: 15
  };
  return {
    name: "pb-editor-page-element-text",
    type: "pb-editor-page-element",
    elementType: "text",
    toolbar: {
      title: "Text",
      group: "pb-editor-element-group-basic",
      preview: function preview() {
        var previewText = loremIpsum(defaultLipsum);
        return /*#__PURE__*/React.createElement("p", {
          className: className
        }, previewText);
      }
    },
    settings: ["pb-editor-page-element-settings-background", "", "pb-editor-page-element-settings-border", "pb-editor-page-element-settings-shadow", "", "pb-editor-page-element-settings-padding", "pb-editor-page-element-settings-margin", "", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete", ""],
    target: ["column", "row", "list-item"],
    create: function create(_ref) {
      var _ref$content = _ref.content,
          content = _ref$content === void 0 ? {} : _ref$content,
          options = _objectWithoutProperties(_ref, ["content"]);

      var previewText = content.text || loremIpsum(content.lipsum || defaultLipsum);
      return _objectSpread({
        type: "text",
        elements: [],
        data: {
          text: createValue(previewText, content.typography || "paragraph"),
          settings: {
            margin: {
              mobile: {
                top: 0,
                left: 0,
                right: 0,
                bottom: 15
              },
              desktop: {
                top: 0,
                left: 0,
                right: 0,
                bottom: 25
              },
              advanced: true
            },
            padding: {
              desktop: {
                all: 0
              },
              mobile: {
                all: 0
              }
            }
          }
        }
      }, options);
    },
    render: function render(_ref2) {
      var element = _ref2.element;
      return /*#__PURE__*/React.createElement(Text, {
        elementId: element.id
      });
    }
  };
});
//# sourceMappingURL=index.js.map