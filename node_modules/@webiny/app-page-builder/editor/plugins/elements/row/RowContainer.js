import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _isEqual from "lodash/isEqual";
import React, { useRef, useCallback, useState } from "react";
import { css } from "emotion";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { set } from "dot-prop-immutable";
import { getElement } from "@webiny/app-page-builder/editor/selectors";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { resizeStart, resizeStop } from "./actions";
import RowChild from "./RowChild";
var innerElement = /*#__PURE__*/css({
  position: "relative",
  display: "flex",
  flex: "1 100%",
  boxSizing: "border-box"
}, "label:innerElement;");

var RowContainer = function RowContainer(_ref) {
  var element = _ref.element,
      updateElement = _ref.updateElement,
      resizeStart = _ref.resizeStart,
      resizeStop = _ref.resizeStop;
  var ref = useRef({});

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      resizing = _useState2[0],
      setResizing = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      width = _useState4[0],
      setWidth = _useState4[1];

  var id = element.id,
      path = element.path,
      type = element.type,
      elements = element.elements;
  var onResizeStart = useCallback(function (leftElement, rightElement) {
    resizeStart(); // @ts-ignore

    setResizing({
      left: leftElement,
      right: rightElement
    });
    setWidth({
      left: leftElement.data.width,
      right: rightElement.data.width
    });
  }, [resizeStart]);
  var onResizeStop = useCallback(function () {
    var left = resizing.left,
        right = resizing.right;
    setResizing(false);
    updateElement({
      element: set(left, "data.width", width.left)
    });
    updateElement({
      element: set(right, "data.width", width.right)
    });
    setWidth(null);
    resizeStop();
  }, [resizing, width, updateElement, resizeStop]);
  var onResize = useCallback(function (diff) {
    var change = parseFloat((diff / ref.current.offsetWidth * 100).toFixed(2));
    var totalWidth = width.left + width.right; // Apply the change

    var rightWidth = width.right + change;
    var leftWidth = totalWidth - rightWidth;

    if (rightWidth < 10) {
      rightWidth = 10;
      leftWidth = totalWidth - rightWidth;
    }

    if (leftWidth < 10) {
      leftWidth = 10;
      rightWidth = totalWidth - leftWidth;
    }

    setWidth({
      left: leftWidth,
      right: rightWidth
    });
  }, [width]);
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: innerElement
  }, elements.map(function (childElement, index) {
    var last = index === elements.length - 1;
    var leftElement = index > 0 && elements[index - 1];

    if (resizing) {
      if (resizing.left.id === childElement.id) {
        childElement = set(childElement, "data.width", width.left);
      }

      if (resizing.right.id === childElement.id) {
        childElement = set(childElement, "data.width", width.right);
        leftElement = set(leftElement, "data.width", width.left);
      }
    }

    return /*#__PURE__*/React.createElement(RowChild, {
      key: childElement.id,
      resizing: resizing,
      element: childElement,
      index: index,
      leftElement: leftElement,
      count: elements.length,
      last: last,
      target: {
        id: id,
        path: path,
        type: type
      },
      onResizeStart: onResizeStart,
      onResizeStop: onResizeStop,
      onResize: onResize
    });
  }));
};

export default connect(function (state, props) {
  var element = getElement(state, props.elementId);
  return {
    element: _objectSpread(_objectSpread({}, element), {}, {
      elements: element.elements.map(function (id) {
        return getElement(state, id);
      })
    })
  };
}, {
  updateElement: updateElement,
  resizeStart: resizeStart,
  resizeStop: resizeStop
}, null, {
  areStatePropsEqual: _isEqual
})(RowContainer);
//# sourceMappingURL=RowContainer.js.map