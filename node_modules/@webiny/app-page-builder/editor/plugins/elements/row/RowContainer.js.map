{"version":3,"sources":["../../../../../src/editor/plugins/elements/row/RowContainer.tsx"],"names":["React","useRef","useCallback","useState","css","connect","set","getElement","updateElement","resizeStart","resizeStop","RowChild","innerElement","position","display","flex","boxSizing","RowContainer","element","ref","resizing","setResizing","width","setWidth","id","path","type","elements","onResizeStart","leftElement","rightElement","left","right","data","onResizeStop","onResize","diff","change","parseFloat","current","offsetWidth","toFixed","totalWidth","rightWidth","leftWidth","map","childElement","index","last","length","state","props","elementId","areStatePropsEqual"],"mappings":"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","sourcesContent":["import React, {useRef, useCallback, useState, RefObject} from \"react\";\nimport { css } from \"emotion\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { set } from \"dot-prop-immutable\";\nimport { isEqual } from \"lodash\";\nimport { getElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { resizeStart, resizeStop } from \"./actions\";\nimport RowChild from \"./RowChild\";\n\nconst innerElement = css({\n    position: \"relative\",\n    display: \"flex\",\n    flex: \"1 100%\",\n    boxSizing: \"border-box\"\n});\n\nconst RowContainer = ({ element, updateElement, resizeStart, resizeStop }) => {\n    const ref: RefObject<any> = useRef({});\n    const [resizing, setResizing]: any = useState(false);\n    const [width, setWidth] = useState(null);\n\n    const { id, path, type, elements } = element;\n\n    const onResizeStart = useCallback(\n        (leftElement, rightElement) => {\n            resizeStart();\n            // @ts-ignore\n            setResizing({ left: leftElement, right: rightElement });\n            setWidth({ left: leftElement.data.width, right: rightElement.data.width });\n        },\n        [resizeStart]\n    );\n\n    const onResizeStop = useCallback(() => {\n        const { left, right } = resizing;\n        setResizing(false);\n        updateElement({ element: set(left, \"data.width\", width.left) });\n        updateElement({ element: set(right, \"data.width\", width.right) });\n        setWidth(null);\n        resizeStop();\n    }, [resizing, width, updateElement, resizeStop]);\n\n    const onResize = useCallback(\n        diff => {\n            const change = parseFloat(((diff / ref.current.offsetWidth) * 100).toFixed(2));\n\n            const totalWidth = width.left + width.right;\n\n            // Apply the change\n            let rightWidth = width.right + change;\n            let leftWidth = totalWidth - rightWidth;\n\n            if (rightWidth < 10) {\n                rightWidth = 10;\n                leftWidth = totalWidth - rightWidth;\n            }\n\n            if (leftWidth < 10) {\n                leftWidth = 10;\n                rightWidth = totalWidth - leftWidth;\n            }\n\n            setWidth({ left: leftWidth, right: rightWidth });\n        },\n        [width]\n    );\n\n    return (\n        <div ref={ref} className={innerElement}>\n            {elements.map((childElement, index) => {\n                const last = index === elements.length - 1;\n                let leftElement = index > 0 && elements[index - 1];\n                if (resizing) {\n                    if (resizing.left.id === childElement.id) {\n                        childElement = set(childElement, \"data.width\", width.left);\n                    }\n\n                    if (resizing.right.id === childElement.id) {\n                        childElement = set(childElement, \"data.width\", width.right);\n                        leftElement = set(leftElement, \"data.width\", width.left);\n                    }\n                }\n\n                return (\n                    <RowChild\n                        key={childElement.id}\n                        resizing={resizing}\n                        element={childElement}\n                        index={index}\n                        leftElement={leftElement}\n                        count={elements.length}\n                        last={last}\n                        target={{ id, path, type }}\n                        onResizeStart={onResizeStart}\n                        onResizeStop={onResizeStop}\n                        onResize={onResize}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default connect<any, any, any>(\n    (state, props) => {\n        const element = getElement(state, props.elementId);\n        return {\n            element: { ...element, elements: element.elements.map(id => getElement(state, id)) }\n        };\n    },\n    { updateElement, resizeStart, resizeStop },\n    null,\n    { areStatePropsEqual: isEqual }\n)(RowContainer);\n"],"file":"RowContainer.js"}