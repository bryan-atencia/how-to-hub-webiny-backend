import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import styled from "@emotion/styled";
import { set } from "dot-prop-immutable";
import { dispatch } from "@webiny/app-page-builder/editor/redux";
import { createElement, createColumn, cloneElement, addElementToParent } from "@webiny/app-page-builder/editor/utils";
import { updateElement, deleteElement, elementCreated } from "@webiny/app-page-builder/editor/actions";
import "./actions";
import Row from "./Row";
import { ReactComponent as RowIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/row-icon.svg";
export default (function () {
  var PreviewBox = /*#__PURE__*/styled("div", {
    target: "et1srml0",
    label: "PreviewBox"
  })({
    textAlign: "center",
    height: 50,
    svg: {
      height: 50,
      width: 50
    }
  });
  return {
    name: "pb-editor-page-element-row",
    type: "pb-editor-page-element",
    elementType: "row",
    toolbar: {
      title: "Row",
      group: "pb-editor-element-group-layout",
      // Render element preview
      preview: function preview() {
        return /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(RowIcon, null));
      }
    },
    settings: ["pb-editor-page-element-settings-background", "pb-editor-page-element-settings-animation", "", "pb-editor-page-element-settings-border", "pb-editor-page-element-settings-shadow", "", "pb-editor-page-element-settings-padding", "pb-editor-page-element-settings-margin", "pb-editor-page-element-settings-width", "", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete", ""],
    // Target drop zones that will accept this type
    target: ["block", "column"],
    // This function is called when `createElement` is called for this plugin
    create: function create() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var row = _objectSpread({
        type: "row",
        elements: [],
        data: {
          settings: {
            margin: {
              desktop: {
                all: 0
              },
              mobile: {
                all: 0
              }
            },
            padding: {
              desktop: {
                all: 0
              },
              mobile: {
                all: 0
              }
            }
          }
        }
      }, options); // A row MUST contain at least 1 column


      if (!row.elements.length) {
        row.elements.push(createColumn({
          data: {
            width: 100
          }
        }));
      }

      return row;
    },
    // Render element in editor
    render: function render(props) {
      return /*#__PURE__*/React.createElement(Row, props);
    },
    // This callback is executed when another element is dropped on the drop zones with type "row"
    onReceived: function onReceived(_ref) {
      var source = _ref.source,
          target = _ref.target,
          _ref$position = _ref.position,
          position = _ref$position === void 0 ? null : _ref$position;
      var dispatchNew = false;
      var element;

      if (source.path) {
        element = cloneElement(source);
      } else {
        dispatchNew = true;
        element = createElement(source.type, {}, target);
      }

      var column;

      if (element.type !== "column") {
        column = createColumn({
          elements: [element]
        });
      } // Add new child element


      var row = addElementToParent(column || element, target, position); // Recalculate column widths

      row = distributeColumnWidths(row); // Dispatch update action

      dispatch(updateElement({
        element: row
      }));

      if (source.path) {
        dispatch(deleteElement({
          element: source
        }));
      }

      if (dispatchNew) {
        dispatch(elementCreated({
          element: element,
          source: source
        }));
      }
    },
    onChildDeleted: function onChildDeleted(_ref2) {
      var element = _ref2.element;
      dispatch(updateElement({
        element: distributeColumnWidths(element)
      }));
    }
  };
});

var distributeColumnWidths = function distributeColumnWidths(row) {
  var width = Math.round(100 / row.elements.length * 100) / 100;
  var columns = row.elements.map(function (el) {
    return set(el, "data.width", width);
  });
  return set(row, "elements", columns);
};
//# sourceMappingURL=index.js.map