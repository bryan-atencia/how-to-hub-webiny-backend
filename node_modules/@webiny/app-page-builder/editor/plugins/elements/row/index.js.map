{"version":3,"sources":["../../../../../src/editor/plugins/elements/row/index.tsx"],"names":["React","styled","set","dispatch","createElement","createColumn","cloneElement","addElementToParent","updateElement","deleteElement","elementCreated","Row","PreviewBox","textAlign","height","svg","width","name","type","elementType","toolbar","title","group","preview","settings","target","create","options","row","elements","data","margin","desktop","all","mobile","padding","length","push","render","props","onReceived","source","position","dispatchNew","element","path","column","distributeColumnWidths","onChildDeleted","Math","round","columns","map","el"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { set } from \"dot-prop-immutable\";\nimport { dispatch } from \"@webiny/app-page-builder/editor/redux\";\nimport {\n    createElement,\n    createColumn,\n    cloneElement,\n    addElementToParent\n} from \"@webiny/app-page-builder/editor/utils\";\nimport {\n    updateElement,\n    deleteElement,\n    elementCreated\n} from \"@webiny/app-page-builder/editor/actions\";\nimport \"./actions\";\nimport Row from \"./Row\";\nimport { ReactComponent as RowIcon } from \"@webiny/app-page-builder/editor/assets/icons/row-icon.svg\";\nimport {PbElement, PbEditorPageElementPlugin} from \"@webiny/app-page-builder/types\";\n\nexport default (): PbEditorPageElementPlugin => {\n    const PreviewBox = styled(\"div\")({\n        textAlign: \"center\",\n        height: 50,\n        svg: {\n            height: 50,\n            width: 50\n        }\n    });\n\n    return {\n        name: \"pb-editor-page-element-row\",\n        type: \"pb-editor-page-element\",\n        elementType: \"row\",\n        toolbar: {\n            title: \"Row\",\n            group: \"pb-editor-element-group-layout\",\n            // Render element preview\n            preview() {\n                return (\n                    <PreviewBox>\n                        <RowIcon />\n                    </PreviewBox>\n                );\n            }\n        },\n        settings: [\n            \"pb-editor-page-element-settings-background\",\n            \"pb-editor-page-element-settings-animation\",\n            \"\",\n            \"pb-editor-page-element-settings-border\",\n            \"pb-editor-page-element-settings-shadow\",\n            \"\",\n            \"pb-editor-page-element-settings-padding\",\n            \"pb-editor-page-element-settings-margin\",\n            \"pb-editor-page-element-settings-width\",\n            \"\",\n            \"pb-editor-page-element-settings-clone\",\n            \"pb-editor-page-element-settings-delete\",\n            \"\"\n        ],\n        // Target drop zones that will accept this type\n        target: [\"block\", \"column\"],\n        // This function is called when `createElement` is called for this plugin\n        create(options = {}) {\n            const row = {\n                type: \"row\",\n                elements: [],\n                data: {\n                    settings: {\n                        margin: {\n                            desktop: { all: 0 },\n                            mobile: { all: 0 }\n                        },\n                        padding: {\n                            desktop: { all: 0 },\n                            mobile: { all: 0 }\n                        }\n                    }\n                },\n                ...options\n            };\n\n            // A row MUST contain at least 1 column\n            if (!row.elements.length) {\n                row.elements.push(createColumn({ data: { width: 100 } }));\n            }\n\n            return row;\n        },\n\n        // Render element in editor\n        render(props) {\n            return <Row {...props} />;\n        },\n\n        // This callback is executed when another element is dropped on the drop zones with type \"row\"\n        onReceived({ source, target, position = null }) {\n            let dispatchNew = false;\n            let element;\n            if (source.path) {\n                element = cloneElement(source as PbElement);\n            } else {\n                dispatchNew = true;\n                element = createElement(source.type, {}, target);\n            }\n\n            let column;\n            if (element.type !== \"column\") {\n                column = createColumn({ elements: [element] });\n            }\n\n            // Add new child element\n            let row = addElementToParent(column || element, target, position);\n\n            // Recalculate column widths\n            row = distributeColumnWidths(row);\n\n            // Dispatch update action\n            dispatch(updateElement({ element: row }));\n\n            if (source.path) {\n                dispatch(deleteElement({ element: source }));\n            }\n\n            if (dispatchNew) {\n                dispatch(elementCreated({ element, source }));\n            }\n        },\n\n        onChildDeleted({ element }) {\n            dispatch(updateElement({ element: distributeColumnWidths(element) }));\n        }\n    };\n};\n\nconst distributeColumnWidths = row => {\n    const width = Math.round((100 / row.elements.length) * 100) / 100;\n    const columns = row.elements.map(el => {\n        return set(el, \"data.width\", width);\n    });\n    return set(row, \"elements\", columns);\n};\n"],"file":"index.js"}