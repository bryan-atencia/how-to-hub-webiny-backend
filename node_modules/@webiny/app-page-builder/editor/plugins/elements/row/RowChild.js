import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _get from "lodash/get";
import React, { useCallback } from "react";
import { css } from "emotion";
import styled from "@emotion/styled";
import { useHandlers } from "@webiny/app/hooks/useHandlers";
import { connect } from "@webiny/app-page-builder/editor/redux";
import DropZone from "@webiny/app-page-builder/editor/components/DropZone";
import Resizer from "@webiny/app-page-builder/editor/components/Resizer";
import Element from "@webiny/app-page-builder/editor/components/Element";
import { dropElement } from "@webiny/app-page-builder/editor/actions";
import { getIsDragging } from "@webiny/app-page-builder/editor/selectors";
import ResizeHandle from "./ResizeHandle";
var ColumnContainer = /*#__PURE__*/styled("div", {
  target: "e1w915fo0",
  label: "ColumnContainer"
})({
  position: "relative",
  display: "flex",
  "&:hover": {
    ">.resize-handle": {
      display: "block !important"
    }
  }
});
var noPointer = /*#__PURE__*/css({
  "> *": {
    pointerEvents: "none"
  }
}, "label:noPointer;");
var RowChild = /*#__PURE__*/React.memo(function (props) {
  var onResize = props.onResize,
      onResizeStop = props.onResizeStop,
      target = props.target,
      resizing = props.resizing,
      element = props.element,
      index = props.index,
      leftElement = props.leftElement,
      _props$last = props.last,
      last = _props$last === void 0 ? false : _props$last;
  var resize = useCallback(function (diff) {
    return onResize(diff);
  }, [onResize]);

  var _useHandlers = useHandlers(props, {
    resizeStart: function resizeStart(_ref) {
      var onResizeStart = _ref.onResizeStart,
          element = _ref.element,
          leftElement = _ref.leftElement;
      return function () {
        onResizeStart(leftElement, element);
      };
    },
    dropElementLeft: function dropElementLeft(_ref2) {
      var target = _ref2.target,
          index = _ref2.index,
          dropElement = _ref2.dropElement;
      return function (source) {
        dropElement({
          source: source,
          target: _objectSpread(_objectSpread({}, target), {}, {
            position: index
          })
        });
      };
    },
    dropElementRight: function dropElementRight(_ref3) {
      var target = _ref3.target,
          count = _ref3.count,
          dropElement = _ref3.dropElement;
      return function (source) {
        dropElement({
          source: source,
          target: _objectSpread(_objectSpread({}, target), {}, {
            position: count
          })
        });
      };
    }
  }),
      resizeStart = _useHandlers.resizeStart,
      dropElementLeft = _useHandlers.dropElementLeft,
      dropElementRight = _useHandlers.dropElementRight;

  return /*#__PURE__*/React.createElement(ColumnContainer, {
    "data-type": "row-column-container",
    style: {
      width: _get(element, "data.width", 100) + "%",
      position: "relative"
    }
  }, index > 0 && /*#__PURE__*/React.createElement(Resizer, {
    axis: "x",
    onResizeStart: resizeStart,
    onResizeStop: onResizeStop,
    onResize: resize
  }, function (resizeProps) {
    return /*#__PURE__*/React.createElement(ResizeHandle, Object.assign({}, resizeProps, {
      leftWidth: leftElement.data.width,
      rightWidth: element.data.width
    }));
  }), /*#__PURE__*/React.createElement(DropZone.Left, {
    type: target.type,
    onDrop: dropElementLeft
  }), /*#__PURE__*/React.createElement(Element, {
    id: element.id,
    className: resizing && noPointer
  }), last && /*#__PURE__*/React.createElement(DropZone.Right, {
    type: target.type,
    onDrop: dropElementRight
  }));
});
export default connect(function (state) {
  return {
    isDragging: getIsDragging(state)
  };
}, {
  dropElement: dropElement
})(RowChild);
//# sourceMappingURL=RowChild.js.map