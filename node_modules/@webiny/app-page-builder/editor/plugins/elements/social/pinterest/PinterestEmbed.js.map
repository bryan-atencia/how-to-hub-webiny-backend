{"version":3,"sources":["../../../../../../src/editor/plugins/elements/social/pinterest/PinterestEmbed.tsx"],"names":["React","useCallback","useEffect","css","appendSDK","props","element","url","window","Promise","resolve","script","document","createElement","type","src","encodeURI","setAttribute","onload","body","appendChild","initEmbed","node","getElementById","id","PinUtils","build","centerAlign","textAlign","getHTML","data","size","memo","then","empty","renderEmbed","__html","nextProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,GAAT,QAAoB,SAApB;;AAWA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,MACdC,OADc,GACFD,KADE,CACdC,OADc;;AAAA,aAEN,KAAIA,OAAJ,EAAa,aAAb,KAA+B,EAFzB;AAAA,MAEdC,GAFc,QAEdA,GAFc;;AAItB,MAAI,CAACA,GAAD,IAAQC,MAAM,CAAC,UAAD,CAAlB,EAAgC;AAC5B,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AAED,SAAO,IAAID,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,IAAP,GAAc,iBAAd;AACAH,IAAAA,MAAM,CAACI,GAAP,GAAaC,SAAS,CAAC,0CAAD,CAAtB;AACAL,IAAAA,MAAM,CAACM,YAAP,CAAoB,OAApB,EAA6B,EAA7B;AACAN,IAAAA,MAAM,CAACM,YAAP,CAAoB,SAApB,EAA+B,OAA/B;AACAN,IAAAA,MAAM,CAACO,MAAP,GAAgBR,OAAhB;AACAE,IAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,MAA1B;AACH,GARM,CAAP;AASH;;AAED,SAASU,SAAT,CAAmBhB,KAAnB,EAA0B;AAAA,MACdC,OADc,GACFD,KADE,CACdC,OADc;AAEtB,MAAMgB,IAAI,GAAGV,QAAQ,CAACW,cAAT,CAAwBjB,OAAO,CAACkB,EAAhC,CAAb;;AACA,MAAIF,IAAI,IAAId,MAAM,CAACiB,QAAnB,EAA6B;AACzBjB,IAAAA,MAAM,CAACiB,QAAP,CAAgBC,KAAhB;AACH;AACJ;;AAED,IAAMC,WAAW,gBAAGxB,GAAG,CAAC;AACpByB,EAAAA,SAAS,EAAE;AADS,CAAD,uBAAvB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI,EAAI;AACpB,kFAEsBA,IAAI,CAACC,IAAL,IAAa,OAFnC,gCAGYD,IAAI,CAACvB,GAHjB;AAKH,CAND;;AAQA,4BAAeP,KAAK,CAACgC,IAAN,CACX,UAAC3B,KAAD,EAA0C;AAAA,MAC9BC,OAD8B,GAClBD,KADkB,CAC9BC,OAD8B;AAGtCJ,EAAAA,SAAS,CAAC,YAAM;AACZE,IAAAA,SAAS,CAACC,KAAD,CAAT,CAAiB4B,IAAjB,CAAsB;AAAA,aAAMZ,SAAS,CAAChB,KAAD,CAAf;AAAA,KAAtB;AACH,GAFQ,EAEN,CAACC,OAAD,CAFM,CAAT;AAIA,MAAM4B,KAAK,gBAAG,kFAAd;AAEA,MAAMC,WAAW,GAAGlC,WAAW,CAAC,YAAM;AAClC,QAAM6B,IAAI,GAAG,KAAIxB,OAAJ,EAAa,aAAb,CAAb;;AACA,wBACI;AACI,MAAA,EAAE,EAAEA,OAAO,CAACkB,EADhB;AAEI,MAAA,SAAS,EAAEG,WAFf;AAGI,MAAA,uBAAuB,EAAE;AAAES,QAAAA,MAAM,EAAEP,OAAO,CAACC,IAAD;AAAjB;AAH7B,MADJ;AAOH,GAT8B,EAS5B,CAACxB,OAAD,CAT4B,CAA/B;;AATsC,cAoBtB,KAAIA,OAAJ,EAAa,aAAb,KAA+B,EApBT;AAAA,MAoB9BC,GApB8B,SAoB9BA,GApB8B;;AAsBtC,SAAOA,GAAG,GAAG4B,WAAW,EAAd,GAAmBD,KAA7B;AACH,CAxBU,EAyBX,UAAC7B,KAAD,EAAQgC,SAAR;AAAA,SAAsB,SAAQhC,KAAR,EAAegC,SAAf,CAAtB;AAAA,CAzBW,CAAf","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport { css } from \"emotion\";\nimport { isEqual } from \"lodash\";\nimport { get } from \"lodash\";\nimport { PbShallowElement } from \"@webiny/app-page-builder/types\";\n\ndeclare global {\n    interface Window {\n        PinUtils: any;\n    }\n}\n\nfunction appendSDK(props) {\n    const { element } = props;\n    const { url } = get(element, \"data.source\") || {};\n\n    if (!url || window[\"PinUtils\"]) {\n        return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = encodeURI(\"https://assets.pinterest.com/js/pinit.js\");\n        script.setAttribute(\"async\", \"\");\n        script.setAttribute(\"charset\", \"utf-8\");\n        script.onload = resolve;\n        document.body.appendChild(script);\n    });\n}\n\nfunction initEmbed(props) {\n    const { element } = props;\n    const node = document.getElementById(element.id);\n    if (node && window.PinUtils) {\n        window.PinUtils.build();\n    }\n}\n\nconst centerAlign = css({\n    textAlign: \"center\"\n});\n\nconst getHTML = data => {\n    return `<a\n        data-pin-do=\"embedPin\"\n        data-pin-width=\"${data.size || \"small\"}\"\n        href=\"${data.url}\"\n    />`;\n};\n\nexport default React.memo(\n    (props: { element: PbShallowElement }) => {\n        const { element } = props;\n\n        useEffect(() => {\n            appendSDK(props).then(() => initEmbed(props));\n        }, [element]);\n\n        const empty = <div>You must configure your embed in the settings!</div>;\n\n        const renderEmbed = useCallback(() => {\n            const data = get(element, \"data.source\");\n            return (\n                <div\n                    id={element.id}\n                    className={centerAlign}\n                    dangerouslySetInnerHTML={{ __html: getHTML(data) }}\n                />\n            );\n        }, [element]);\n\n        const { url } = get(element, \"data.source\") || {};\n\n        return url ? renderEmbed() : empty;\n    },\n    (props, nextProps) => isEqual(props, nextProps)\n);\n"],"file":"PinterestEmbed.js"}