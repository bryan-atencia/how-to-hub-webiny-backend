import _get from "lodash/get";
import _isEqual from "lodash/isEqual";
import React, { useCallback, useEffect } from "react";
import { css } from "emotion";

function appendSDK(props) {
  var element = props.element;

  var _ref = _get(element, "data.source") || {},
      url = _ref.url;

  if (!url || window["PinUtils"]) {
    return Promise.resolve();
  }

  return new Promise(function (resolve) {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = encodeURI("https://assets.pinterest.com/js/pinit.js");
    script.setAttribute("async", "");
    script.setAttribute("charset", "utf-8");
    script.onload = resolve;
    document.body.appendChild(script);
  });
}

function initEmbed(props) {
  var element = props.element;
  var node = document.getElementById(element.id);

  if (node && window.PinUtils) {
    window.PinUtils.build();
  }
}

var centerAlign = /*#__PURE__*/css({
  textAlign: "center"
}, "label:centerAlign;");

var getHTML = function getHTML(data) {
  return "<a\n        data-pin-do=\"embedPin\"\n        data-pin-width=\"".concat(data.size || "small", "\"\n        href=\"").concat(data.url, "\"\n    />");
};

export default /*#__PURE__*/React.memo(function (props) {
  var element = props.element;
  useEffect(function () {
    appendSDK(props).then(function () {
      return initEmbed(props);
    });
  }, [element]);
  var empty = /*#__PURE__*/React.createElement("div", null, "You must configure your embed in the settings!");
  var renderEmbed = useCallback(function () {
    var data = _get(element, "data.source");

    return /*#__PURE__*/React.createElement("div", {
      id: element.id,
      className: centerAlign,
      dangerouslySetInnerHTML: {
        __html: getHTML(data)
      }
    });
  }, [element]);

  var _ref2 = _get(element, "data.source") || {},
      url = _ref2.url;

  return url ? renderEmbed() : empty;
}, function (props, nextProps) {
  return _isEqual(props, nextProps);
});
//# sourceMappingURL=PinterestEmbed.js.map