{"version":3,"sources":["../../../../../src/editor/plugins/elements/column/Column.tsx"],"names":["React","styled","css","useHandler","connect","IconButton","ElementRoot","DropZone","ConnectedElement","dropElement","togglePlugin","getElement","ElementAnimation","ColumnChild","ColumnContainer","position","flex","boxSizing","height","width","zIndex","display","addIcon","color","transition","transform","Column","props","element","onClick","id","path","type","name","params","onDrop","source","target","justifyContent","flexDirection","elements","length","map","childId","index","state","areStatePropsEqual","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { isEqual } from \"lodash\";\nimport { css } from \"emotion\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { ElementRoot } from \"@webiny/app-page-builder/render/components/ElementRoot\";\nimport DropZone from \"@webiny/app-page-builder/editor/components/DropZone\";\nimport ConnectedElement from \"@webiny/app-page-builder/editor/components/ConnectedElement\";\nimport { ReactComponent as AddCircleOutline } from \"@webiny/app-page-builder/editor/assets/icons/baseline-add_circle-24px.svg\";\nimport { dropElement, togglePlugin } from \"@webiny/app-page-builder/editor/actions\";\nimport { getElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport ElementAnimation from \"@webiny/app-page-builder/render/components/ElementAnimation\";\nimport ColumnChild from \"./ColumnChild\";\n\nconst ColumnContainer = styled(\"div\")({\n    position: \"relative\",\n    flex: \"1 100%\",\n    boxSizing: \"border-box\",\n    height: \"100%\",\n    width: \"100%\",\n    zIndex: 20,\n    display: \"flex\"\n});\n\nconst addIcon = css({\n    color: \"var(--mdc-theme-secondary)\",\n    transition: \"transform 0.2s\",\n    \"&:hover\": {\n        transform: \"scale(1.3)\"\n    },\n    \"&::before, &::after\": {\n        display: \"none\"\n    }\n});\n\nconst Column = props => {\n    const { element } = props;\n\n    const onClick = useHandler(props, ({ element, togglePlugin }) => () => {\n        const { id, path, type } = element;\n        togglePlugin({\n            name: \"pb-editor-toolbar-add-element\",\n            params: { id, path, type }\n        });\n    });\n\n    const onDrop = useHandler(props, ({ element, dropElement }) => source => {\n        const { id, path, type } = element;\n        dropElement({ source, target: { id, path, type, position: null } });\n    });\n\n    return (\n        <ElementAnimation>\n            <ColumnContainer style={{ justifyContent: \"center\" }}>\n                <ElementRoot\n                    element={element}\n                    className={\"webiny-pb-base-page-element-style webiny-pb-layout-column\"}\n                    style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\" }}\n                >\n                    <ConnectedElement elementId={element.id}>\n                        {({ id, path, type, elements }) => (\n                            <React.Fragment>\n                                {!elements.length && (\n                                    <DropZone.Center key={id} id={id} type={type} onDrop={onDrop}>\n                                        <IconButton\n                                            data-testid={\"pb-editor-column-add-button\"}\n                                            className={addIcon + \" addIcon\"}\n                                            icon={<AddCircleOutline />}\n                                            onClick={onClick}\n                                        />\n                                    </DropZone.Center>\n                                )}\n                                {elements.map((childId, index) => (\n                                    <ColumnChild\n                                        key={childId}\n                                        id={childId}\n                                        index={index}\n                                        count={elements.length}\n                                        last={index === elements.length - 1}\n                                        target={{ id, path, type }}\n                                    />\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </ConnectedElement>\n                </ElementRoot>\n            </ColumnContainer>\n        </ElementAnimation>\n    );\n};\n\nexport default connect<any, any, any>(\n    (state, props) => {\n        const element = getElement(state, props.element.id);\n        return {\n            element: { ...element, elements: element.elements.map(id => getElement(state, id)) }\n        };\n    },\n    { dropElement, togglePlugin },\n    null,\n    { areStatePropsEqual: isEqual }\n)(React.memo(Column));\n"],"file":"Column.js"}