import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _isEqual from "lodash/isEqual";
import React from "react";
import styled from "@emotion/styled";
import { css } from "emotion";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { IconButton } from "@webiny/ui/Button";
import { ElementRoot } from "@webiny/app-page-builder/render/components/ElementRoot";
import DropZone from "@webiny/app-page-builder/editor/components/DropZone";
import ConnectedElement from "@webiny/app-page-builder/editor/components/ConnectedElement";
import { ReactComponent as AddCircleOutline } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/baseline-add_circle-24px.svg";
import { dropElement, togglePlugin } from "@webiny/app-page-builder/editor/actions";
import { getElement } from "@webiny/app-page-builder/editor/selectors";
import ElementAnimation from "@webiny/app-page-builder/render/components/ElementAnimation";
import ColumnChild from "./ColumnChild";
var ColumnContainer = /*#__PURE__*/styled("div", {
  target: "eg27g9n0",
  label: "ColumnContainer"
})({
  position: "relative",
  flex: "1 100%",
  boxSizing: "border-box",
  height: "100%",
  width: "100%",
  zIndex: 20,
  display: "flex"
});
var addIcon = /*#__PURE__*/css({
  color: "var(--mdc-theme-secondary)",
  transition: "transform 0.2s",
  "&:hover": {
    transform: "scale(1.3)"
  },
  "&::before, &::after": {
    display: "none"
  }
}, "label:addIcon;");

var Column = function Column(props) {
  var element = props.element;
  var onClick = useHandler(props, function (_ref) {
    var element = _ref.element,
        togglePlugin = _ref.togglePlugin;
    return function () {
      var id = element.id,
          path = element.path,
          type = element.type;
      togglePlugin({
        name: "pb-editor-toolbar-add-element",
        params: {
          id: id,
          path: path,
          type: type
        }
      });
    };
  });
  var onDrop = useHandler(props, function (_ref2) {
    var element = _ref2.element,
        dropElement = _ref2.dropElement;
    return function (source) {
      var id = element.id,
          path = element.path,
          type = element.type;
      dropElement({
        source: source,
        target: {
          id: id,
          path: path,
          type: type,
          position: null
        }
      });
    };
  });
  return /*#__PURE__*/React.createElement(ElementAnimation, null, /*#__PURE__*/React.createElement(ColumnContainer, {
    style: {
      justifyContent: "center"
    }
  }, /*#__PURE__*/React.createElement(ElementRoot, {
    element: element,
    className: "webiny-pb-base-page-element-style webiny-pb-layout-column",
    style: {
      width: "100%",
      display: "flex",
      flexDirection: "column"
    }
  }, /*#__PURE__*/React.createElement(ConnectedElement, {
    elementId: element.id
  }, function (_ref3) {
    var id = _ref3.id,
        path = _ref3.path,
        type = _ref3.type,
        elements = _ref3.elements;
    return /*#__PURE__*/React.createElement(React.Fragment, null, !elements.length && /*#__PURE__*/React.createElement(DropZone.Center, {
      key: id,
      id: id,
      type: type,
      onDrop: onDrop
    }, /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "pb-editor-column-add-button",
      className: addIcon + " addIcon",
      icon: /*#__PURE__*/React.createElement(AddCircleOutline, null),
      onClick: onClick
    })), elements.map(function (childId, index) {
      return /*#__PURE__*/React.createElement(ColumnChild, {
        key: childId,
        id: childId,
        index: index,
        count: elements.length,
        last: index === elements.length - 1,
        target: {
          id: id,
          path: path,
          type: type
        }
      });
    }));
  }))));
};

export default connect(function (state, props) {
  var element = getElement(state, props.element.id);
  return {
    element: _objectSpread(_objectSpread({}, element), {}, {
      elements: element.elements.map(function (id) {
        return getElement(state, id);
      })
    })
  };
}, {
  dropElement: dropElement,
  togglePlugin: togglePlugin
}, null, {
  areStatePropsEqual: _isEqual
})( /*#__PURE__*/React.memo(Column));
//# sourceMappingURL=Column.js.map