import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import isEqual from "lodash/isEqual";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { connect } from "@webiny/app-page-builder/editor/redux";
import DropZone from "@webiny/app-page-builder/editor/components/DropZone";
import Element from "@webiny/app-page-builder/editor/components/Element";
import { dropElement } from "@webiny/app-page-builder/editor/actions";
import { getElement } from "@webiny/app-page-builder/editor/selectors";

var ColumnChild = function ColumnChild(props) {
  var target = props.target,
      element = props.element,
      _props$last = props.last,
      last = _props$last === void 0 ? false : _props$last;
  var dropElementAbove = useHandler(props, function (_ref) {
    var index = _ref.index,
        target = _ref.target,
        dropElement = _ref.dropElement;
    return function (source) {
      dropElement({
        source: source,
        target: _objectSpread(_objectSpread({}, target), {}, {
          position: index
        })
      });
    };
  });
  var dropElementBelow = useHandler(props, function (_ref2) {
    var dropElement = _ref2.dropElement,
        count = _ref2.count,
        target = _ref2.target;
    return function (source) {
      dropElement({
        source: source,
        target: _objectSpread(_objectSpread({}, target), {}, {
          position: count
        })
      });
    };
  });
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: "100%",
      position: "relative"
    }
  }, /*#__PURE__*/React.createElement(DropZone.Above, {
    type: target.type,
    onDrop: dropElementAbove
  }), /*#__PURE__*/React.createElement(Element, {
    id: element.id
  }), last && /*#__PURE__*/React.createElement(DropZone.Below, {
    type: target.type,
    onDrop: dropElementBelow
  }));
};

export default connect(function (state, props) {
  return {
    element: getElement(state, props.id)
  };
}, {
  dropElement: dropElement
}, null, {
  areStatePropsEqual: isEqual
})( /*#__PURE__*/React.memo(ColumnChild));
//# sourceMappingURL=ColumnChild.js.map