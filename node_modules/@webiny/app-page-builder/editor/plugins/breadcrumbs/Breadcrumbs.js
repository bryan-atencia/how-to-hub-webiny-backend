import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _isEqual from "lodash/isEqual";
import * as React from "react";
import { connect } from "react-redux";
import { css } from "emotion";
import { getActiveElement, getElement } from "@webiny/app-page-builder/editor/selectors";
import { activateElement, highlightElement } from "@webiny/app-page-builder/editor/actions";
var breadcrumbs = /*#__PURE__*/css({
  display: "flex",
  zIndex: 20,
  flexDirection: "row",
  padding: 0,
  position: "fixed",
  left: 55,
  bottom: 0,
  width: "calc(100% - 55px)",
  backgroundColor: "var(--mdc-theme-surface)",
  borderTop: "1px solid var(--mdc-theme-on-background)",
  fontSize: "14px",
  "> li": {
    cursor: "pointer",
    ".element": {
      color: "var(--mdc-theme-secondary)",
      padding: "5px",
      display: "inline-block",
      "&:hover": {
        backgroundColor: "var(--mdc-theme-background)",
        color: "var(--mdc-theme-on-surface)"
      }
    },
    ".divider": {
      color: "var(--mdc-theme-text-secondary-on-background)"
    }
  }
}, "label:breadcrumbs;");

var Breadcrumbs = function Breadcrumbs(_ref) {
  var elements = _ref.elements,
      activateElement = _ref.activateElement,
      highlightElement = _ref.highlightElement;

  if (!elements) {
    return null;
  }

  return /*#__PURE__*/React.createElement("ul", {
    className: breadcrumbs
  }, elements.map(function (el, index) {
    return /*#__PURE__*/React.createElement("li", {
      key: el.id,
      onMouseOver: function onMouseOver() {
        return highlightElement({
          element: el.id
        });
      },
      onClick: function onClick() {
        return activateElement({
          element: el.id
        });
      }
    }, /*#__PURE__*/React.createElement("span", {
      className: "element"
    }, el.type.replace("pb-editor-page-element-", "")), elements.length - 1 > index ? /*#__PURE__*/React.createElement("span", {
      className: "divider"
    }, "\xA0>\xA0") : null);
  }));
};

export default connect(function (state) {
  var element = getActiveElement(state);

  if (!element) {
    return {
      elements: null
    };
  }

  var paths = element.path.split(".").slice(1);
  var elements = paths.map(function (path, index) {
    var elPath = [0].concat(_toConsumableArray(paths.slice(0, index + 1))).join(".");
    var el = getElement(state, elPath);
    return {
      id: el.id,
      type: el.type,
      index: path,
      active: el.id === element.id
    };
  });
  return {
    elements: elements
  };
}, {
  activateElement: activateElement,
  highlightElement: highlightElement
}, null, {
  areStatePropsEqual: _isEqual
})(Breadcrumbs);
//# sourceMappingURL=Breadcrumbs.js.map