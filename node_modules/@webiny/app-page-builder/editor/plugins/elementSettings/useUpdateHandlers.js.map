{"version":3,"sources":["../../../../src/editor/plugins/elementSettings/useUpdateHandlers.ts"],"names":["useMemo","useHandler","props","updateSettings","element","updateElement","dataNamespace","historyUpdated","name","newValue","history","propName","newElement","merge","getUpdateValue","handlers","value","getUpdatePreview"],"mappings":";AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,UAAT,QAA2B,8BAA3B;AAEA,gBAAe,UAAAC,KAAK,EAAI;AACpB,MAAMC,cAAc,GAAGF,UAAU,CAACC,KAAD,EAAQ,gBAA+C;AAAA,QAA5CE,OAA4C,QAA5CA,OAA4C;AAAA,QAAnCC,aAAmC,QAAnCA,aAAmC;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;AACpF,QAAMC,cAAc,GAAG,EAAvB;AACA,WAAO,UAACC,IAAD,EAAeC,QAAf,EAAkD;AAAA,UAApBC,OAAoB,uEAAV,KAAU;AACrD,UAAMC,QAAQ,aAAML,aAAN,cAAuBE,IAAvB,CAAd;;AAEA,UAAMI,UAAU,GAAG,KAAIR,OAAJ,EAAaO,QAAb,EAAuBF,QAAvB,CAAnB;;AAEA,UAAI,CAACC,OAAL,EAAc;AACVL,QAAAA,aAAa,CAAC;AACVD,UAAAA,OAAO,EAAEQ,UADC;AAEVF,UAAAA,OAAO,EAAPA,OAFU;AAGVG,UAAAA,KAAK,EAAE;AAHG,SAAD,CAAb;AAKA;AACH;;AAED,UAAIN,cAAc,CAACI,QAAD,CAAd,KAA6BF,QAAjC,EAA2C;AACvCF,QAAAA,cAAc,CAACI,QAAD,CAAd,GAA2BF,QAA3B;AACAJ,QAAAA,aAAa,CAAC;AAAED,UAAAA,OAAO,EAAEQ,UAAX;AAAuBC,UAAAA,KAAK,EAAE;AAA9B,SAAD,CAAb;AACH;AACJ,KAlBD;AAmBH,GArBgC,CAAjC;AAuBA,MAAMC,cAAc,GAAGd,OAAO,CAAC,YAAM;AACjC,QAAMe,QAAQ,GAAG,EAAjB;AACA,WAAO,UAACP,IAAD,EAAkB;AACrB,UAAI,CAACO,QAAQ,CAACP,IAAD,CAAb,EAAqB;AACjBO,QAAAA,QAAQ,CAACP,IAAD,CAAR,GAAiB,UAAAQ,KAAK;AAAA,iBAAIb,cAAc,CAACK,IAAD,EAAOQ,KAAP,EAAc,IAAd,CAAlB;AAAA,SAAtB;AACH;;AAED,aAAOD,QAAQ,CAACP,IAAD,CAAf;AACH,KAND;AAOH,GAT6B,EAS3B,CAACL,cAAD,CAT2B,CAA9B;AAWA,MAAMc,gBAAgB,GAAGjB,OAAO,CAAC,YAAM;AACnC,QAAMe,QAAQ,GAAG,EAAjB;AACA,WAAO,UAACP,IAAD,EAAkB;AACrB,UAAI,CAACO,QAAQ,CAACP,IAAD,CAAb,EAAqB;AACjBO,QAAAA,QAAQ,CAACP,IAAD,CAAR,GAAiB,UAAAQ,KAAK;AAAA,iBAAIb,cAAc,CAACK,IAAD,EAAOQ,KAAP,EAAc,KAAd,CAAlB;AAAA,SAAtB;AACH;;AAED,aAAOD,QAAQ,CAACP,IAAD,CAAf;AACH,KAND;AAOH,GAT+B,EAS7B,CAACL,cAAD,CAT6B,CAAhC;AAWA,SAAO;AAAEW,IAAAA,cAAc,EAAdA,cAAF;AAAkBG,IAAAA,gBAAgB,EAAhBA;AAAlB,GAAP;AACH,CA/CD","sourcesContent":["import { useMemo } from \"react\";\nimport { set } from \"lodash\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\n\nexport default props => {\n    const updateSettings = useHandler(props, ({ element, updateElement, dataNamespace }) => {\n        const historyUpdated = {};\n        return (name: string, newValue: any, history = false) => {\n            const propName = `${dataNamespace}.${name}`;\n\n            const newElement = set(element, propName, newValue);\n\n            if (!history) {\n                updateElement({\n                    element: newElement,\n                    history,\n                    merge: true\n                });\n                return;\n            }\n\n            if (historyUpdated[propName] !== newValue) {\n                historyUpdated[propName] = newValue;\n                updateElement({ element: newElement, merge: true });\n            }\n        };\n    });\n\n    const getUpdateValue = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, true);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    const getUpdatePreview = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, false);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    return { getUpdateValue, getUpdatePreview };\n};\n"],"file":"useUpdateHandlers.js"}