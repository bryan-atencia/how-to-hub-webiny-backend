import React from "react";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { getPlugins } from "@webiny/plugins";
import { set } from "dot-prop-immutable";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import { get } from "dot-prop-immutable";
import { ReactComponent as AlignCenterIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_center.svg";
import { ReactComponent as AlignLeftIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_left.svg";
import { ReactComponent as AlignJustifyIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_justify.svg";
import { ReactComponent as AlignRightIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_right.svg";
// Icons map for dynamic render
var icons = {
  left: /*#__PURE__*/React.createElement(AlignLeftIcon, null),
  center: /*#__PURE__*/React.createElement(AlignCenterIcon, null),
  right: /*#__PURE__*/React.createElement(AlignRightIcon, null),
  justify: /*#__PURE__*/React.createElement(AlignJustifyIcon, null)
};
var defaultOptions = {
  alignments: ["left", "center", "right", "justify"]
};

var HorizontalAlignAction = function HorizontalAlignAction(props) {
  var element = props.element,
      children = props.children,
      _props$options = props.options;
  _props$options = _props$options === void 0 ? defaultOptions : _props$options;
  var alignments = _props$options.alignments;
  var align = get(element, "data.settings.horizontalAlign") || "left";
  var onClick = useHandler(props, function (_ref) {
    var element = _ref.element,
        updateElement = _ref.updateElement;
    return function () {
      var align = get(element, "data.settings.horizontalAlign") || "left";
      var types = Object.keys(icons).filter(function (key) {
        return alignments ? alignments.includes(key) : true;
      });
      var nextAlign = types[types.indexOf(align) + 1] || "left";
      updateElement({
        element: set(element, "data.settings.horizontalAlign", nextAlign)
      });
    };
  });
  var plugin = getPlugins("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.cloneElement(children, {
    onClick: onClick,
    icon: icons[align]
  });
};

export default connect(function (state) {
  return {
    element: getActiveElement(state)
  };
}, {
  updateElement: updateElement
})(HorizontalAlignAction);
//# sourceMappingURL=HorizontalAlignAction.js.map