import * as React from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { getPlugins } from "@webiny/plugins";
import { set } from "dot-prop-immutable";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import { get } from "dot-prop-immutable";
import { ReactComponent as AlignCenterIcon } from "@svgr/webpack!./icons/round-border_horizontal-24px.svg";
import { ReactComponent as AlignTopIcon } from "@svgr/webpack!./icons/round-border_top-24px.svg";
import { ReactComponent as AlignBottomIcon } from "@svgr/webpack!./icons/round-border_bottom-24px.svg";
// Icons map for dynamic render
var icons = {
  start: /*#__PURE__*/React.createElement(AlignTopIcon, null),
  center: /*#__PURE__*/React.createElement(AlignCenterIcon, null),
  end: /*#__PURE__*/React.createElement(AlignBottomIcon, null)
};

var VerticalAlignAction = function VerticalAlignAction(_ref) {
  var element = _ref.element,
      updateElement = _ref.updateElement,
      children = _ref.children;
  var align = get(element, "data.settings.verticalAlign") || "start";
  var plugin = getPlugins("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });
  var alignElement = React.useCallback(function () {
    var alignments = Object.keys(icons);
    var nextAlign = alignments[alignments.indexOf(align) + 1] || "start";
    updateElement({
      element: set(element, "data.settings.verticalAlign", nextAlign)
    });
  }, [align]);

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.cloneElement(children, {
    onClick: alignElement,
    icon: icons[align]
  });
};

export default connect(function (state) {
  return {
    element: getActiveElement(state)
  };
}, {
  updateElement: updateElement
})(VerticalAlignAction);
//# sourceMappingURL=VerticalAlignAction.js.map