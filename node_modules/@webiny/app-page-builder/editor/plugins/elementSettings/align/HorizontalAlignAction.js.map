{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/align/HorizontalAlignAction.tsx"],"names":["React","useHandler","connect","getPlugins","set","updateElement","getActiveElement","get","icons","left","center","right","justify","defaultOptions","alignments","HorizontalAlignAction","props","element","children","options","align","onClick","types","Object","keys","filter","key","includes","nextAlign","indexOf","plugin","find","pl","elementType","type","cloneElement","icon","state"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,gBAAT,QAAiC,2CAAjC;AACA,SAASC,GAAT,QAAoB,oBAApB;;;;;AAOA;AACA,IAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,eAAE,oBAAC,aAAD,OADI;AAEVC,EAAAA,MAAM,eAAE,oBAAC,eAAD,OAFE;AAGVC,EAAAA,KAAK,eAAE,oBAAC,cAAD,OAHG;AAIVC,EAAAA,OAAO,eAAE,oBAAC,gBAAD;AAJC,CAAd;AAOA,IAAMC,cAAc,GAAG;AAAEC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,SAA5B;AAAd,CAAvB;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,KAAK,EAAI;AAAA,MAC3BC,OAD2B,GACqCD,KADrC,CAC3BC,OAD2B;AAAA,MAClBC,QADkB,GACqCF,KADrC,CAClBE,QADkB;AAAA,uBACqCF,KADrC,CACRG,OADQ;AAAA,+CACkBN,cADlB;AAAA,MACGC,UADH,kBACGA,UADH;AAEnC,MAAMM,KAAK,GAAGb,GAAG,CAACU,OAAD,EAAU,+BAAV,CAAH,IAAiD,MAA/D;AAEA,MAAMI,OAAO,GAAGpB,UAAU,CAACe,KAAD,EAAQ;AAAA,QAAGC,OAAH,QAAGA,OAAH;AAAA,QAAYZ,aAAZ,QAAYA,aAAZ;AAAA,WAAgC,YAAM;AACpE,UAAMe,KAAK,GAAGb,GAAG,CAACU,OAAD,EAAU,+BAAV,CAAH,IAAiD,MAA/D;AAEA,UAAMK,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYhB,KAAZ,EAAmBiB,MAAnB,CAA0B,UAAAC,GAAG;AAAA,eACvCZ,UAAU,GAAGA,UAAU,CAACa,QAAX,CAAoBD,GAApB,CAAH,GAA8B,IADD;AAAA,OAA7B,CAAd;AAIA,UAAME,SAAS,GAAGN,KAAK,CAACA,KAAK,CAACO,OAAN,CAAcT,KAAd,IAAuB,CAAxB,CAAL,IAAmC,MAArD;AAEAf,MAAAA,aAAa,CAAC;AACVY,QAAAA,OAAO,EAAEb,GAAG,CAACa,OAAD,EAAU,+BAAV,EAA2CW,SAA3C;AADF,OAAD,CAAb;AAGH,KAZiC;AAAA,GAAR,CAA1B;AAcA,MAAME,MAAM,GAAG3B,UAAU,CAA4B,wBAA5B,CAAV,CAAgE4B,IAAhE,CACX,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACC,WAAH,KAAmBhB,OAAO,CAACiB,IAA/B;AAAA,GADS,CAAf;;AAIA,MAAI,CAACJ,MAAL,EAAa;AACT,WAAO,IAAP;AACH;;AAED,sBAAO9B,KAAK,CAACmC,YAAN,CAAmBjB,QAAnB,EAA6B;AAAEG,IAAAA,OAAO,EAAPA,OAAF;AAAWe,IAAAA,IAAI,EAAE5B,KAAK,CAACY,KAAD;AAAtB,GAA7B,CAAP;AACH,CA3BD;;AA6BA,eAAelB,OAAO,CAClB,UAAAmC,KAAK;AAAA,SAAK;AAAEpB,IAAAA,OAAO,EAAEX,gBAAgB,CAAC+B,KAAD;AAA3B,GAAL;AAAA,CADa,EAElB;AAAEhC,EAAAA,aAAa,EAAbA;AAAF,CAFkB,CAAP,CAGbU,qBAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { set } from \"dot-prop-immutable\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { get } from \"dot-prop-immutable\";\nimport { ReactComponent as AlignCenterIcon } from \"@webiny/app-page-builder/editor/assets/icons/format_align_center.svg\";\nimport { ReactComponent as AlignLeftIcon } from \"@webiny/app-page-builder/editor/assets/icons/format_align_left.svg\";\nimport { ReactComponent as AlignJustifyIcon } from \"@webiny/app-page-builder/editor/assets/icons/format_align_justify.svg\";\nimport { ReactComponent as AlignRightIcon } from \"@webiny/app-page-builder/editor/assets/icons/format_align_right.svg\";\nimport { PbEditorPageElementPlugin } from \"@webiny/app-page-builder/types\";\n\n// Icons map for dynamic render\nconst icons = {\n    left: <AlignLeftIcon />,\n    center: <AlignCenterIcon />,\n    right: <AlignRightIcon />,\n    justify: <AlignJustifyIcon />\n};\n\nconst defaultOptions = { alignments: [\"left\", \"center\", \"right\", \"justify\"] };\n\nconst HorizontalAlignAction = props => {\n    const { element, children, options: { alignments } = defaultOptions } = props;\n    const align = get(element, \"data.settings.horizontalAlign\") || \"left\";\n\n    const onClick = useHandler(props, ({ element, updateElement }) => () => {\n        const align = get(element, \"data.settings.horizontalAlign\") || \"left\";\n\n        const types = Object.keys(icons).filter(key =>\n            alignments ? alignments.includes(key) : true\n        );\n\n        const nextAlign = types[types.indexOf(align) + 1] || \"left\";\n\n        updateElement({\n            element: set(element, \"data.settings.horizontalAlign\", nextAlign)\n        });\n    });\n\n    const plugin = getPlugins<PbEditorPageElementPlugin>(\"pb-editor-page-element\").find(\n        pl => pl.elementType === element.type\n    );\n\n    if (!plugin) {\n        return null;\n    }\n\n    return React.cloneElement(children, { onClick, icon: icons[align] });\n};\n\nexport default connect<any, any, any>(\n    state => ({ element: getActiveElement(state) }),\n    { updateElement }\n)(HorizontalAlignAction);\n"],"file":"HorizontalAlignAction.js"}