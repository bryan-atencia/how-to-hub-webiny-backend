{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/shadow/Settings.tsx"],"names":["React","connect","getActiveElement","Tabs","Tab","updateElement","ColorPicker","Input","useUpdateHandlers","DATA_NAMESPACE","Settings","element","dataNamespace","getUpdateValue","getUpdatePreview","state","id","type","path","areStatePropsEqual"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,uCAAxB;AAEA,SAASC,gBAAT,QAAiC,2CAAjC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,OAAOC,WAAP,MAAwB,gFAAxB;AACA,OAAOC,KAAP,MAAkB,0EAAlB;AACA,OAAOC,iBAAP,MAA8B,2EAA9B;AAEA,IAAMC,cAAc,GAAG,sBAAvB,C,CAEA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAqC;AAAA,MAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,MAAzBN,aAAyB,QAAzBA,aAAyB;;AAAA,2BACLG,iBAAiB,CAAC;AAC3DG,IAAAA,OAAO,EAAPA,OAD2D;AAE3DN,IAAAA,aAAa,EAAbA,aAF2D;AAG3DO,IAAAA,aAAa,EAAEH;AAH4C,GAAD,CADZ;AAAA,MAC1CI,cAD0C,sBAC1CA,cAD0C;AAAA,MAC1BC,gBAD0B,sBAC1BA,gBAD0B;;AAOlD,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,IAAD,qBACI,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAZ,kBACI,oBAAC,WAAD;AACI,IAAA,KAAK,EAAE,OADX;AAEI,IAAA,QAAQ,EAAEL,cAAc,GAAG,QAF/B;AAGI,IAAA,WAAW,EAAEI,cAAc,CAAC,OAAD,CAH/B;AAII,IAAA,aAAa,EAAEC,gBAAgB,CAAC,OAAD;AAJnC,IADJ,eAQI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,mBADX;AAEI,IAAA,QAAQ,EAAEL,cAAc,GAAG,aAF/B;AAGI,IAAA,WAAW,EAAEI,cAAc,CAAC,YAAD;AAH/B,IARJ,eAcI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,iBADX;AAEI,IAAA,QAAQ,EAAEJ,cAAc,GAAG,WAF/B;AAGI,IAAA,WAAW,EAAEI,cAAc,CAAC,UAAD;AAH/B,IAdJ,eAoBI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,MADX;AAEI,IAAA,QAAQ,EAAEJ,cAAc,GAAG,OAF/B;AAGI,IAAA,WAAW,EAAEI,cAAc,CAAC,MAAD;AAH/B,IApBJ,eA0BI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,QADX;AAEI,IAAA,QAAQ,EAAEJ,cAAc,GAAG,SAF/B;AAGI,IAAA,WAAW,EAAEI,cAAc,CAAC,QAAD;AAH/B,IA1BJ,CADJ,CADJ,CADJ;AAsCH,CA7CD;;AA+CA,eAAeZ,OAAO,CAClB,UAAAc,KAAK,EAAI;AAAA,0BACsBb,gBAAgB,CAACa,KAAD,CADtC;AAAA,MACGC,EADH,qBACGA,EADH;AAAA,MACOC,IADP,qBACOA,IADP;AAAA,MACaC,IADb,qBACaA,IADb;;AAEL,SAAO;AAAEP,IAAAA,OAAO,EAAE;AAAEK,MAAAA,EAAE,EAAFA,EAAF;AAAMC,MAAAA,IAAI,EAAJA,IAAN;AAAYC,MAAAA,IAAI,EAAJA;AAAZ;AAAX,GAAP;AACH,CAJiB,EAKlB;AAAEb,EAAAA,aAAa,EAAbA;AAAF,CALkB,EAMlB,IANkB,EAOlB;AAAEc,EAAAA,kBAAkB;AAApB,CAPkB,CAAP,CAQbT,QARa,CAAf","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { isEqual } from \"lodash\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker\";\nimport Input from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Input\";\nimport useUpdateHandlers from \"@webiny/app-page-builder/editor/plugins/elementSettings/useUpdateHandlers\";\n\nconst DATA_NAMESPACE = \"data.settings.shadow\";\n\n// TODO: need to figure out how to properly type the `connect` props and apply it to all `elementSettings` plugins.\n\nconst Settings = ({ element, updateElement }: any) => {\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        updateElement,\n        dataNamespace: DATA_NAMESPACE\n    });\n\n    return (\n        <React.Fragment>\n            <Tabs>\n                <Tab label={\"Shadow\"}>\n                    <ColorPicker\n                        label={\"Color\"}\n                        valueKey={DATA_NAMESPACE + \".color\"}\n                        updateValue={getUpdateValue(\"color\")}\n                        updatePreview={getUpdatePreview(\"color\")}\n                    />\n\n                    <Input\n                        label={\"Horizontal offset\"}\n                        valueKey={DATA_NAMESPACE + \".horizontal\"}\n                        updateValue={getUpdateValue(\"horizontal\")}\n                    />\n\n                    <Input\n                        label={\"Vertical offset\"}\n                        valueKey={DATA_NAMESPACE + \".vertical\"}\n                        updateValue={getUpdateValue(\"vertical\")}\n                    />\n\n                    <Input\n                        label={\"Blur\"}\n                        valueKey={DATA_NAMESPACE + \".blur\"}\n                        updateValue={getUpdateValue(\"blur\")}\n                    />\n\n                    <Input\n                        label={\"Spread\"}\n                        valueKey={DATA_NAMESPACE + \".spread\"}\n                        updateValue={getUpdateValue(\"spread\")}\n                    />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n\nexport default connect<any, any, any>(\n    state => {\n        const { id, type, path } = getActiveElement(state);\n        return { element: { id, type, path } };\n    },\n    { updateElement },\n    null,\n    { areStatePropsEqual: isEqual }\n)(Settings);\n"],"file":"Settings.js"}