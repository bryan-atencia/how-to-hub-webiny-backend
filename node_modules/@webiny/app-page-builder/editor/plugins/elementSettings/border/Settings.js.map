{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/border/Settings.tsx"],"names":["React","connect","Tabs","Tab","updateElement","getActiveElement","ColorPicker","Select","Slider","Selector","useUpdateHandlers","options","DATA_NAMESPACE","EMPTY_OBJECT","Settings","element","dataNamespace","getUpdateValue","getUpdatePreview","state","id","type","path","areStatePropsEqual"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { isEqual } from \"lodash\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/ColorPicker\";\nimport Select from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Select\";\nimport Slider from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Slider\";\nimport Selector from \"./Selector\";\nimport useUpdateHandlers from \"../useUpdateHandlers\";\nimport { PbElement } from \"@webiny/app-page-builder/types\";\n\ntype SettingsProps = {\n    element: PbElement;\n    updateElement: (value: any) => void;\n};\n\nconst options = [\"none\", \"solid\", \"dashed\", \"dotted\"];\nconst DATA_NAMESPACE = \"data.settings.border\";\nconst EMPTY_OBJECT = {};\n\nconst Settings = ({ element, updateElement }: SettingsProps) => {\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        updateElement,\n        dataNamespace: DATA_NAMESPACE\n    });\n    return (\n        <React.Fragment>\n            <Tabs>\n                <Tab label={\"Border\"}>\n                    <ColorPicker\n                        label={\"Color\"}\n                        valueKey={DATA_NAMESPACE + \".color\"}\n                        defaultValue={\"#fff\"}\n                        updateValue={getUpdateValue(\"color\")}\n                        updatePreview={getUpdatePreview(\"color\")}\n                    />\n                    <Slider\n                        label={\"Width\"}\n                        valueKey={DATA_NAMESPACE + \".width\"}\n                        defaultValue={0}\n                        updateValue={getUpdateValue(\"width\")}\n                        updatePreview={getUpdatePreview(\"width\")}\n                        min={0}\n                        max={20}\n                        step={1}\n                    />\n                    <Slider\n                        label={\"Radius\"}\n                        valueKey={DATA_NAMESPACE + \".radius\"}\n                        defaultValue={0}\n                        updateValue={getUpdateValue(\"radius\")}\n                        updatePreview={getUpdatePreview(\"radius\")}\n                        min={0}\n                        max={100}\n                        step={1}\n                    />\n                    <Select\n                        label={\"Style\"}\n                        valueKey={DATA_NAMESPACE + \".style\"}\n                        defaultValue={\"none\"}\n                        updateValue={getUpdateValue(\"style\")}\n                        options={options}\n                    />\n                    <Selector\n                        label={\"Borders\"}\n                        valueKey={DATA_NAMESPACE + \".borders\"}\n                        defaultValue={EMPTY_OBJECT}\n                        updateValue={getUpdateValue(\"borders\")}\n                    />\n                </Tab>\n            </Tabs>\n        </React.Fragment>\n    );\n};\n\nexport default connect<any, any, any>(\n    state => {\n        const { id, type, path } = getActiveElement(state);\n        return { element: { id, type, path } };\n    },\n    { updateElement },\n    null,\n    { areStatePropsEqual: isEqual }\n)(Settings) as React.FC<any>;\n"],"file":"Settings.js"}