{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/border/Selector.tsx"],"names":["React","connect","css","Typography","Grid","Cell","IconButton","getActiveElement","enabled","color","cellStyle","marginBottom","getValue","value","side","Selector","memo","label","updateValue","top","right","bottom","left","displayName","state","valueKey","areStatePropsEqual"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { get, isEqual } from \"lodash\";\nimport { css } from \"emotion\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ReactComponent as TopIcon } from \"./icons/round-border_top-24px.svg\";\nimport { ReactComponent as RightIcon } from \"./icons/round-border_right-24px.svg\";\nimport { ReactComponent as BottomIcon } from \"./icons/round-border_bottom-24px.svg\";\nimport { ReactComponent as LeftIcon } from \"./icons/round-border_left-24px.svg\";\n\ntype SelectorProps = {\n    label: string;\n    value?: any;\n    defaultValue: any;\n    updateValue: Function;\n};\n\nconst enabled = css({\n    color: \"var(--mdc-theme-primary, #fa5723) !important\"\n});\n\nconst cellStyle = { marginBottom: 0 };\n\nconst getValue = (value, side) => {\n    const enabled = value[side];\n    return typeof enabled === \"undefined\" ? true : enabled;\n};\n\nconst Selector = React.memo(({ label, value, updateValue }: SelectorProps) => {\n    const top = getValue(value, \"top\");\n    const right = getValue(value, \"right\");\n    const bottom = getValue(value, \"bottom\");\n    const left = getValue(value, \"left\");\n\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <Grid>\n                    <Cell span={3} style={cellStyle}>\n                        <IconButton\n                            onClick={() => updateValue({ ...value, top: !top })}\n                            className={top && enabled}\n                            icon={<TopIcon />}\n                        />\n                    </Cell>\n                    <Cell span={3} style={cellStyle}>\n                        <IconButton\n                            onClick={() => updateValue({ ...value, right: !right })}\n                            className={right && enabled}\n                            icon={<RightIcon />}\n                        />\n                    </Cell>\n                    <Cell span={3} style={cellStyle}>\n                        <IconButton\n                            onClick={() => updateValue({ ...value, bottom: !bottom })}\n                            className={bottom && enabled}\n                            icon={<BottomIcon />}\n                        />\n                    </Cell>\n                    <Cell span={3} style={cellStyle}>\n                        <IconButton\n                            onClick={() => updateValue({ ...value, left: !left })}\n                            className={left && enabled}\n                            icon={<LeftIcon />}\n                        />\n                    </Cell>\n                </Grid>\n            </Cell>\n        </Grid>\n    );\n});\n\nSelector.displayName = \"Selector\";\n\nexport default connect<any, any, any>(\n    (state, { valueKey }: { valueKey: string }) => {\n        return {\n            value: get(getActiveElement(state), valueKey, 0)\n        };\n    },\n    null,\n    null,\n    { areStatePropsEqual: isEqual }\n)(Selector);\n"],"file":"Selector.js"}