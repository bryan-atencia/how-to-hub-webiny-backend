import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from "react";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { getPlugins } from "@webiny/plugins";
import { set } from "dot-prop-immutable";
import { redux } from "@webiny/app-page-builder/editor/redux";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import { cloneElement } from "@webiny/app-page-builder/editor/utils";
import { getElementWithChildren, getParentElementWithChildren } from "@webiny/app-page-builder/editor/selectors";

var CloneAction = function CloneAction(props) {
  var element = props.element,
      children = props.children;
  var onClick = useHandler(props, function (_ref) {
    var element = _ref.element,
        updateElement = _ref.updateElement;
    return function () {
      var state = redux.store.getState();
      element = getElementWithChildren(state, element.id);
      var parent = getParentElementWithChildren(state, element.id);
      var position = parent.elements.findIndex(function (el) {
        return el.id === element.id;
      }) + 1;
      var newElement = set(parent, "elements", [].concat(_toConsumableArray(parent.elements.slice(0, position)), [cloneElement(element)], _toConsumableArray(position < parent.elements.length ? parent.elements.slice(position) : [])));
      updateElement({
        element: newElement
      });
    };
  });
  var plugin = getPlugins("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.cloneElement(children, {
    onClick: onClick
  });
};

export default connect(function (state) {
  return {
    element: getActiveElement(state)
  };
}, {
  updateElement: updateElement
})(CloneAction);
//# sourceMappingURL=CloneAction.js.map