{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/background/Settings.tsx"],"names":["React","useCallback","set","css","useHandlers","connect","Tabs","Tab","updateElement","getActiveElement","ColorPicker","Cell","Grid","Select","SingleImageUpload","BackgroundPositionSelector","imageSelect","width","root","Settings","props","setImage","element","image","history","setScaling","value","setPosition","position","setColor","onColorChange","onColorChangeComplete","options","bg","imageSrc","src","state"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { get } from \"lodash\";\nimport { set } from \"dot-prop-immutable\";\nimport { css } from \"emotion\";\nimport { useHandlers } from \"@webiny/app/hooks/useHandlers\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport ColorPicker from \"@webiny/app-page-builder/editor/components/ColorPicker\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport Select from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Select\";\nimport SingleImageUpload from \"@webiny/app-admin/components/SingleImageUpload\";\nimport BackgroundPositionSelector from \"./BackgroundPositionSelector\";\n\nconst imageSelect = css({\n    width: \"100%\"\n});\n\nconst root = \"data.settings.background\";\n\nconst Settings = props => {\n    const { setImage, setScaling, setPosition, setColor } = useHandlers(props, {\n        setImage: ({ element, updateElement }) => image => {\n            if (!image) {\n                updateElement({\n                    element: set(element, `${root}.image.file`, null),\n                    history: true\n                });\n            } else {\n                updateElement({\n                    element: set(element, `${root}.image.file`, image),\n                    history: true\n                });\n            }\n        },\n        setScaling: ({ element, updateElement }) => (value: string) => {\n            updateElement({\n                element: set(element, `${root}.image.scaling`, value),\n                history: true\n            });\n        },\n        setPosition: ({ element, updateElement }) => (position: string) => {\n            updateElement({\n                element: set(element, `${root}.image.position`, position),\n                history: true\n            });\n        },\n        setColor: ({ element, updateElement }) => (value, history) => {\n            updateElement({\n                element: set(element, `${root}.color`, value),\n                history\n            });\n        }\n    });\n\n    const onColorChange = useCallback(value => setColor(value, false), [setColor]);\n    const onColorChangeComplete = useCallback(value => setColor(value), [setColor]);\n\n    const { element, options } = props;\n    const bg = get(element, \"data.settings.background\");\n    const imageSrc = get(bg, \"image.file.src\");\n\n    return (\n        <React.Fragment>\n            <Tabs>\n                <Tab label={\"Color\"}>\n                    <Grid>\n                        <Cell span={12}>\n                            <ColorPicker\n                                value={get(bg, \"color\", \"#fff\")}\n                                onChange={onColorChange}\n                                onChangeComplete={onColorChangeComplete}\n                            />\n                        </Cell>\n                    </Grid>\n                </Tab>\n                {options.image !== false && (\n                    <Tab label={\"Image\"}>\n                        <Grid>\n                            <Cell span={12}>\n                                <SingleImageUpload\n                                    className={imageSelect}\n                                    onChange={setImage}\n                                    value={{ src: imageSrc }}\n                                />\n                            </Cell>\n                        </Grid>\n                        <Select\n                            disabled={!imageSrc}\n                            label=\"Scaling\"\n                            value={get(bg, \"image.scaling\")}\n                            updateValue={setScaling}\n                        >\n                            <option value=\"cover\">Cover</option>\n                            <option value=\"contain\">Contain</option>\n                            <option value=\"originalSize\">Original size</option>\n                            <option value=\"tile\">Tile</option>\n                            <option value=\"tileHorizontally\">Tile Horizontally</option>\n                            <option value=\"tileVertically\">Tile Vertically</option>\n                        </Select>\n                        <Grid>\n                            <Cell span={12}>\n                                <BackgroundPositionSelector\n                                    disabled={!imageSrc}\n                                    value={get(bg, \"image.position\")}\n                                    onChange={setPosition}\n                                />\n                            </Cell>\n                        </Grid>\n                    </Tab>\n                )}\n            </Tabs>\n        </React.Fragment>\n    );\n};\n\nexport default connect<any, any, any>(\n    state => ({ element: getActiveElement(state) }),\n    { updateElement }\n)(Settings);\n"],"file":"Settings.js"}