import _get from "lodash/get";
import React, { useCallback } from "react";
import { set } from "dot-prop-immutable";
import { css } from "emotion";
import { useHandlers } from "@webiny/app/hooks/useHandlers";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { Tabs, Tab } from "@webiny/ui/Tabs";
import { updateElement } from "@webiny/app-page-builder/editor/actions";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import ColorPicker from "@webiny/app-page-builder/editor/components/ColorPicker";
import { Cell, Grid } from "@webiny/ui/Grid";
import Select from "@webiny/app-page-builder/editor/plugins/elementSettings/components/Select";
import SingleImageUpload from "@webiny/app-admin/components/SingleImageUpload";
import BackgroundPositionSelector from "./BackgroundPositionSelector";
var imageSelect = /*#__PURE__*/css({
  width: "100%"
}, "label:imageSelect;");
var root = "data.settings.background";

var Settings = function Settings(props) {
  var _useHandlers = useHandlers(props, {
    setImage: function setImage(_ref) {
      var element = _ref.element,
          updateElement = _ref.updateElement;
      return function (image) {
        if (!image) {
          updateElement({
            element: set(element, "".concat(root, ".image.file"), null),
            history: true
          });
        } else {
          updateElement({
            element: set(element, "".concat(root, ".image.file"), image),
            history: true
          });
        }
      };
    },
    setScaling: function setScaling(_ref2) {
      var element = _ref2.element,
          updateElement = _ref2.updateElement;
      return function (value) {
        updateElement({
          element: set(element, "".concat(root, ".image.scaling"), value),
          history: true
        });
      };
    },
    setPosition: function setPosition(_ref3) {
      var element = _ref3.element,
          updateElement = _ref3.updateElement;
      return function (position) {
        updateElement({
          element: set(element, "".concat(root, ".image.position"), position),
          history: true
        });
      };
    },
    setColor: function setColor(_ref4) {
      var element = _ref4.element,
          updateElement = _ref4.updateElement;
      return function (value, history) {
        updateElement({
          element: set(element, "".concat(root, ".color"), value),
          history: history
        });
      };
    }
  }),
      setImage = _useHandlers.setImage,
      setScaling = _useHandlers.setScaling,
      setPosition = _useHandlers.setPosition,
      setColor = _useHandlers.setColor;

  var onColorChange = useCallback(function (value) {
    return setColor(value, false);
  }, [setColor]);
  var onColorChangeComplete = useCallback(function (value) {
    return setColor(value);
  }, [setColor]);
  var element = props.element,
      options = props.options;

  var bg = _get(element, "data.settings.background");

  var imageSrc = _get(bg, "image.file.src");

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
    label: "Color"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(ColorPicker, {
    value: _get(bg, "color", "#fff"),
    onChange: onColorChange,
    onChangeComplete: onColorChangeComplete
  })))), options.image !== false && /*#__PURE__*/React.createElement(Tab, {
    label: "Image"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(SingleImageUpload, {
    className: imageSelect,
    onChange: setImage,
    value: {
      src: imageSrc
    }
  }))), /*#__PURE__*/React.createElement(Select, {
    disabled: !imageSrc,
    label: "Scaling",
    value: _get(bg, "image.scaling"),
    updateValue: setScaling
  }, /*#__PURE__*/React.createElement("option", {
    value: "cover"
  }, "Cover"), /*#__PURE__*/React.createElement("option", {
    value: "contain"
  }, "Contain"), /*#__PURE__*/React.createElement("option", {
    value: "originalSize"
  }, "Original size"), /*#__PURE__*/React.createElement("option", {
    value: "tile"
  }, "Tile"), /*#__PURE__*/React.createElement("option", {
    value: "tileHorizontally"
  }, "Tile Horizontally"), /*#__PURE__*/React.createElement("option", {
    value: "tileVertically"
  }, "Tile Vertically")), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(BackgroundPositionSelector, {
    disabled: !imageSrc,
    value: _get(bg, "image.position"),
    onChange: setPosition
  }))))));
};

export default connect(function (state) {
  return {
    element: getActiveElement(state)
  };
}, {
  updateElement: updateElement
})(Settings);
//# sourceMappingURL=Settings.js.map