{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/columnWidth/Settings.tsx"],"names":["React","connect","set","Tabs","Tab","Input","InputContainer","Typography","Grid","Cell","Form","updateElement","getActiveElement","validateWidth","value","isNaN","parseInt","Error","endsWith","Settings","data","form","validate","valid","props","element","attrKey","newElement","updateSettings","Bind","Component","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { get } from \"lodash\";\nimport { set } from \"dot-prop-immutable\";\n\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { InputContainer } from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/StyledComponents\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Form } from \"@webiny/form\";\n\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport {PbShallowElement} from \"@webiny/app-page-builder/types\";\n\nconst validateWidth = value => {\n    if (!value) {\n        return null;\n    }\n\n    if (isNaN(parseInt(value))) {\n        throw Error(\"Enter a valid number!\");\n    }\n\n    if (value.endsWith(\"%\") || value.endsWith(\"px\")) {\n        return true;\n    }\n\n    throw Error(\"Specify % or px!\");\n};\n\ntype SettingsProps = {\n    element: PbShallowElement;\n    updateElement: Function;\n};\n\nclass Settings extends React.Component<SettingsProps> {\n    updateSettings = async (data, form) => {\n        const valid = await form.validate();\n        if (!valid) {\n            return;\n        }\n\n        const { element, updateElement } = this.props;\n        const attrKey = `data.settings.columnWidth`;\n        const newElement = set(element, attrKey, data);\n\n        updateElement({ element: newElement });\n    };\n\n    render() {\n        const { element } = this.props;\n\n        const data = get(element.data, \"settings.columnWidth\", { value: \"100%\" });\n\n        return (\n            <Form data={data} onChange={this.updateSettings}>\n                {({ Bind }) => (\n                    <Tabs>\n                        <Tab label={\"Width\"}>\n                            <Grid>\n                                <Cell span={5}>\n                                    <Typography use={\"overline\"}>Width</Typography>\n                                </Cell>\n                                <Cell span={7}>\n                                    <InputContainer width={\"auto\"} margin={0}>\n                                        <Bind name={\"value\"} validators={validateWidth}>\n                                            <Input />\n                                        </Bind>\n                                    </InputContainer>\n                                </Cell>\n                            </Grid>\n                        </Tab>\n                    </Tabs>\n                )}\n            </Form>\n        );\n    }\n}\n\nexport default connect<any, any, any>(\n    state => ({ element: getActiveElement(state) }),\n    { updateElement }\n)(Settings);\n"],"file":"Settings.js"}