import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import { Transition } from "react-transition-group";
import { connect } from "@webiny/app-page-builder/editor/redux";
import styled from "@emotion/styled";
import { Elevation } from "@webiny/ui/Elevation";
import { togglePlugin } from "@webiny/app-page-builder/editor/actions";
import { isPluginActive } from "@webiny/app-page-builder/editor/selectors";
var Overlay = /*#__PURE__*/styled("div", {
  target: "e1p5lh7r0",
  label: "Overlay"
})({
  position: "fixed",
  top: 64,
  left: 0,
  width: "100%",
  height: "100%",
  zIndex: 5
});
var defaultStyle = {
  transform: "translateY(-5px)",
  opacity: 0,
  transitionProperty: "opacity, transform",
  transitionTimingFunction: "cubic-bezier(0, 0, .2, 1)",
  transitionDuration: "250ms",
  willChange: "opacity, transform"
};
var transitionStyles = {
  entering: {
    opacity: 0,
    transform: "translateY(-5px)"
  },
  entered: {
    opacity: 1,
    transform: "translateY(0px)"
  }
};
var Wrapper = /*#__PURE__*/styled("div", {
  target: "e1p5lh7r1",
  label: "Wrapper"
})({
  padding: 0,
  boxSizing: "border-box",
  ".mdc-tab-content": {
    padding: 15
  },
  ".mdc-layout-grid": {
    padding: 0,
    "&.no-bottom-padding": {
      paddingBottom: 0
    },
    ".mdc-layout-grid__inner": {
      gridGap: 0,
      '[class*="mdc-layout-grid__cell--span-"]': {
        display: "flex",
        alignItems: "center",
        color: "var(--mdc-theme-text-secondary-on-background)",
        marginBottom: 10,
        justifyContent: "flex-end",
        '[class*="mdc-typography--"], .mdc-button__icon': {
          lineHeight: "120%",
          width: "100%"
        },
        ".mdc-button__icon": {
          marginRight: 20
        }
      }
    }
  }
});
var ToolbarBox = /*#__PURE__*/styled("div", {
  target: "e1p5lh7r2",
  label: "ToolbarBox"
})({
  position: "absolute",
  color: "var(--mdc-theme-on-surface)",
  zIndex: 6,
  width: 270,
  top: 56,
  left: 25,
  ".elevationBox": {
    backgroundColor: "var(--mdc-theme-surface)",
    borderRadius: 2,
    "&::after": {
      content: "''",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent",
      borderBottom: "7px solid var(--mdc-theme-on-background)",
      position: "absolute",
      top: -7,
      left: "50%",
      transform: "translateX(-50%)"
    }
  }
}, function (props) {
  return {
    left: props.left || 0
  };
});

var Menu = /*#__PURE__*/function (_React$Component) {
  _inherits(Menu, _React$Component);

  var _super = _createSuper(Menu);

  function Menu() {
    var _this;

    _classCallCheck(this, Menu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "ref", /*#__PURE__*/React.createRef());

    _defineProperty(_assertThisInitialized(_this), "state", {
      left: null
    });

    return _this;
  }

  _createClass(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.ref.current && this.state.left === null) {
        this.setState({
          left: -(this.ref.current.offsetWidth - 48) / 2
        }, function () {
          /*eslint-env browser */
          window.dispatchEvent(new Event("resize"));
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          active = _this$props.active,
          plugin = _this$props.plugin,
          options = _this$props.options,
          togglePlugin = _this$props.togglePlugin;
      var content = plugin.renderMenu({
        options: options
      });
      return /*#__PURE__*/React.createElement(Transition, {
        in: active,
        timeout: 125,
        appear: true,
        unmountOnExit: true
      }, function (state) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToolbarBox, {
          left: _this2.state.left,
          style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state])
        }, /*#__PURE__*/React.createElement(Elevation, {
          z: 2,
          className: "elevationBox"
        }, /*#__PURE__*/React.createElement("div", {
          ref: _this2.ref
        }, /*#__PURE__*/React.createElement(Wrapper, null, content)))), /*#__PURE__*/React.createElement(Overlay, {
          onClick: function onClick() {
            return togglePlugin({
              name: plugin.name
            });
          }
        }));
      });
    }
  }]);

  return Menu;
}(React.Component);

export default connect(function (state, props) {
  return {
    active: isPluginActive(props.plugin.name)(state)
  };
}, {
  togglePlugin: togglePlugin
})(Menu);
//# sourceMappingURL=Menu.js.map