{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/bar/ElementSettingsBar.tsx"],"names":["React","useEffect","connect","TopAppBarSecondary","TopAppBarSection","ButtonDefault","ButtonIcon","deactivateElement","getPlugin","getPlugins","getActiveElement","useKeyHandler","Menu","divider","getElementActions","plugin","settings","actions","map","pl","options","Array","isArray","filter","ElementSettingsBar","elementType","find","ElementSettingsBarContent","memo","addKeyHandler","removeKeyHandler","e","preventDefault","index","name","position","renderAction","renderMenu","displayName","state","element","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,sBAArD;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,mBAA1C;AACA,SAASC,iBAAT,QAAkC,yCAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,iBAAtC;AACA,SAASC,gBAAT,QAAiC,2CAAjC;AACA,SAASC,aAAT,QAA8B,qDAA9B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAIA,IAAMC,OAAO,GAAG,yCAAhB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AAChC,MAAI,CAACA,MAAM,CAACC,QAAZ,EAAsB;AAClB,WAAO,EAAP;AACH;;AAED,MAAMC,OAAO,GAAGF,MAAM,CAACC,QAAP,CAAgBE,GAAhB,CAAoB,UAAAC,EAAE,EAAI;AACtC,QAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;AACxB,aAAO;AAAEJ,QAAAA,MAAM,EAAEP,SAAS,CAACW,EAAE,IAAIN,OAAP,CAAnB;AAAoCO,QAAAA,OAAO,EAAE;AAA7C,OAAP;AACH;;AAED,QAAIC,KAAK,CAACC,OAAN,CAAcH,EAAd,CAAJ,EAAuB;AACnB,aAAO;AAAEJ,QAAAA,MAAM,EAAEP,SAAS,CAACW,EAAE,CAAC,CAAD,CAAF,IAASN,OAAV,CAAnB;AAAuCO,QAAAA,OAAO,EAAED,EAAE,CAAC,CAAD;AAAlD,OAAP;AACH;;AAED,WAAO,IAAP;AACH,GAVe,CAAhB;AAYA,SAAO,6BACAF,OADA,IAEH;AAAEF,IAAAA,MAAM,EAAEP,SAAS,CAAC,0CAAD;AAAnB,GAFG,EAGH;AAAEO,IAAAA,MAAM,EAAEP,SAAS,CAAC,sCAAD;AAAnB,GAHG,GAILe,MAJK,CAIE,UAAAJ,EAAE;AAAA,WAAIA,EAAJ;AAAA,GAJJ,CAAP;AAKH,CAtBD;;AAwBA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,OAAwC;AAAA,MAArCC,WAAqC,QAArCA,WAAqC;AAAA,MAAxBlB,iBAAwB,QAAxBA,iBAAwB;;AAC/D,MAAI,CAACkB,WAAL,EAAkB;AACd,WAAO,IAAP;AACH;;AAED,MAAMV,MAAM,GAAGN,UAAU,CAA4B,wBAA5B,CAAV,CAAgEiB,IAAhE,CACX,UAAAP,EAAE;AAAA,WAAIA,EAAE,CAACM,WAAH,KAAmBA,WAAvB;AAAA,GADS,CAAf;;AAIA,MAAI,CAACV,MAAL,EAAa;AACT,WAAO,IAAP;AACH;;AAED,sBAAO,oBAAC,yBAAD;AAA2B,IAAA,MAAM,EAAEA,MAAnC;AAA2C,IAAA,iBAAiB,EAAER;AAA9D,IAAP;AACH,CAdD;;AAkBA,IAAMoB,yBAAyB,gBAAG3B,KAAK,CAAC4B,IAAN,CAC9B,iBAA4D;AAAA,MAAzDb,MAAyD,SAAzDA,MAAyD;AAAA,MAAjDR,iBAAiD,SAAjDA,iBAAiD;;AAAA,uBACZI,aAAa,EADD;AAAA,MAChDkB,aADgD,kBAChDA,aADgD;AAAA,MACjCC,gBADiC,kBACjCA,gBADiC;;AAGxD7B,EAAAA,SAAS,CAAC,YAAM;AACZ4B,IAAAA,aAAa,CAAC,QAAD,EAAW,UAAAE,CAAC,EAAI;AACzBA,MAAAA,CAAC,CAACC,cAAF;AACAzB,MAAAA,iBAAiB;AACpB,KAHY,CAAb;AAIA,WAAO;AAAA,aAAMuB,gBAAgB,CAAC,QAAD,CAAtB;AAAA,KAAP;AACH,GANQ,CAAT;AAQA,MAAMb,OAAO,GAAGH,iBAAiB,CAACC,MAAD,CAAjC;AAEA,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,kBAAD;AAAoB,IAAA,KAAK;AAAzB,kBACI,oBAAC,gBAAD;AAAkB,IAAA,UAAU;AAA5B,kBACI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAER;AAAxB,kBACI,oBAAC,UAAD;AAAY,IAAA,IAAI,eAAE,oBAAC,kBAAD;AAAlB,IADJ,UADJ,CADJ,eAMI,oBAAC,gBAAD,QAMKU,OAAO,CAACC,GAAR,CAAY,iBAAsBe,KAAtB,EAAgC;AAAA,QAA7BlB,MAA6B,SAA7BA,MAA6B;AAAA,QAArBK,OAAqB,SAArBA,OAAqB;AACzC,wBACI;AACI,MAAA,GAAG,EAAEL,MAAM,CAACmB,IAAP,GAAc,GAAd,GAAoBD,KAD7B;AAEI,MAAA,KAAK,EAAE;AAAEE,QAAAA,QAAQ,EAAE;AAAZ;AAFX,OAIKpB,MAAM,CAACqB,YAAP,CAAoB;AAAEhB,MAAAA,OAAO,EAAPA;AAAF,KAApB,CAJL,EAKK,OAAOL,MAAM,CAACsB,UAAd,KAA6B,UAA7B,iBACG,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAEtB,MAAd;AAAsB,MAAA,OAAO,EAAEK;AAA/B,MANR,CADJ;AAWH,GAZA,CANL,CANJ,CADJ,CADJ;AA+BH,CA7C6B,CAAlC;AAgDAO,yBAAyB,CAACW,WAA1B,GAAwC,2BAAxC;AAEA,eAAepC,OAAO,CAClB,UAAAqC,KAAK,EAAI;AACL,MAAMC,OAAO,GAAG9B,gBAAgB,CAAC6B,KAAD,CAAhC;AACA,SAAO;AACHd,IAAAA,WAAW,EAAEe,OAAO,GAAGA,OAAO,CAACC,IAAX,GAAkB;AADnC,GAAP;AAGH,CANiB,EAOlB;AAAElC,EAAAA,iBAAiB,EAAjBA;AAAF,CAPkB,CAAP,eAQbP,KAAK,CAAC4B,IAAN,CAAWJ,kBAAX,CARa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { TopAppBarSecondary, TopAppBarSection } from \"@webiny/ui/TopAppBar\";\nimport { ButtonDefault, ButtonIcon } from \"@webiny/ui/Button\";\nimport { deactivateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getPlugin, getPlugins } from \"@webiny/plugins\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { useKeyHandler } from \"@webiny/app-page-builder/editor/hooks/useKeyHandler\";\nimport Menu from \"./components/Menu\";\nimport { ReactComponent as NavigateBeforeIcon } from \"@webiny/app-page-builder/editor/assets/icons/navigate_before.svg\";\nimport { PbEditorPageElementPlugin } from \"@webiny/app-page-builder/types\";\n\nconst divider = \"pb-editor-page-element-settings-divider\";\n\nconst getElementActions = plugin => {\n    if (!plugin.settings) {\n        return [];\n    }\n\n    const actions = plugin.settings.map(pl => {\n        if (typeof pl === \"string\") {\n            return { plugin: getPlugin(pl || divider), options: {} };\n        }\n\n        if (Array.isArray(pl)) {\n            return { plugin: getPlugin(pl[0] || divider), options: pl[1] };\n        }\n\n        return null;\n    });\n\n    return [\n        ...actions,\n        { plugin: getPlugin(\"pb-editor-page-element-settings-advanced\") },\n        { plugin: getPlugin(\"pb-editor-page-element-settings-save\") }\n    ].filter(pl => pl);\n};\n\nconst ElementSettingsBar = ({ elementType, deactivateElement }) => {\n    if (!elementType) {\n        return null;\n    }\n\n    const plugin = getPlugins<PbEditorPageElementPlugin>(\"pb-editor-page-element\").find(\n        pl => pl.elementType === elementType\n    );\n\n    if (!plugin) {\n        return null;\n    }\n\n    return <ElementSettingsBarContent plugin={plugin} deactivateElement={deactivateElement} />;\n};\n\ntype ElementSettingsBarProps = { plugin: PbEditorPageElementPlugin; deactivateElement: () => void };\n\nconst ElementSettingsBarContent = React.memo(\n    ({ plugin, deactivateElement }: ElementSettingsBarProps) => {\n        const { addKeyHandler, removeKeyHandler } = useKeyHandler();\n\n        useEffect(() => {\n            addKeyHandler(\"escape\", e => {\n                e.preventDefault();\n                deactivateElement();\n            });\n            return () => removeKeyHandler(\"escape\");\n        });\n\n        const actions = getElementActions(plugin);\n\n        return (\n            <React.Fragment>\n                <TopAppBarSecondary fixed>\n                    <TopAppBarSection alignStart>\n                        <ButtonDefault onClick={deactivateElement}>\n                            <ButtonIcon icon={<NavigateBeforeIcon />} /> Back\n                        </ButtonDefault>\n                    </TopAppBarSection>\n                    <TopAppBarSection>\n                        {/*\n                    Render an action button for each relevant action.\n                    Each `element` can have different `element-settings` plugins.\n                    If no `settings` array is defined in an `element` plugin, all settings are shown.\n                    */}\n                        {actions.map(({ plugin, options }, index) => {\n                            return (\n                                <div\n                                    key={plugin.name + \"-\" + index}\n                                    style={{ position: \"relative\" }}\n                                >\n                                    {plugin.renderAction({ options })}\n                                    {typeof plugin.renderMenu === \"function\" && (\n                                        <Menu plugin={plugin} options={options} />\n                                    )}\n                                </div>\n                            );\n                        })}\n                    </TopAppBarSection>\n                </TopAppBarSecondary>\n            </React.Fragment>\n        );\n    }\n);\n\nElementSettingsBarContent.displayName = \"ElementSettingsBarContent\";\n\nexport default connect<any, any, any>(\n    state => {\n        const element = getActiveElement(state);\n        return {\n            elementType: element ? element.type : null\n        };\n    },\n    { deactivateElement }\n)(React.memo(ElementSettingsBar));\n"],"file":"ElementSettingsBar.js"}