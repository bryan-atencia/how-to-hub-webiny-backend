import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React, { useEffect } from "react";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { TopAppBarSecondary, TopAppBarSection } from "@webiny/ui/TopAppBar";
import { ButtonDefault, ButtonIcon } from "@webiny/ui/Button";
import { deactivateElement } from "@webiny/app-page-builder/editor/actions";
import { getPlugin, getPlugins } from "@webiny/plugins";
import { getActiveElement } from "@webiny/app-page-builder/editor/selectors";
import { useKeyHandler } from "@webiny/app-page-builder/editor/hooks/useKeyHandler";
import Menu from "./components/Menu";
import { ReactComponent as NavigateBeforeIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/navigate_before.svg";
var divider = "pb-editor-page-element-settings-divider";

var getElementActions = function getElementActions(plugin) {
  if (!plugin.settings) {
    return [];
  }

  var actions = plugin.settings.map(function (pl) {
    if (typeof pl === "string") {
      return {
        plugin: getPlugin(pl || divider),
        options: {}
      };
    }

    if (Array.isArray(pl)) {
      return {
        plugin: getPlugin(pl[0] || divider),
        options: pl[1]
      };
    }

    return null;
  });
  return [].concat(_toConsumableArray(actions), [{
    plugin: getPlugin("pb-editor-page-element-settings-advanced")
  }, {
    plugin: getPlugin("pb-editor-page-element-settings-save")
  }]).filter(function (pl) {
    return pl;
  });
};

var ElementSettingsBar = function ElementSettingsBar(_ref) {
  var elementType = _ref.elementType,
      deactivateElement = _ref.deactivateElement;

  if (!elementType) {
    return null;
  }

  var plugin = getPlugins("pb-editor-page-element").find(function (pl) {
    return pl.elementType === elementType;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ElementSettingsBarContent, {
    plugin: plugin,
    deactivateElement: deactivateElement
  });
};

var ElementSettingsBarContent = /*#__PURE__*/React.memo(function (_ref2) {
  var plugin = _ref2.plugin,
      deactivateElement = _ref2.deactivateElement;

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  useEffect(function () {
    addKeyHandler("escape", function (e) {
      e.preventDefault();
      deactivateElement();
    });
    return function () {
      return removeKeyHandler("escape");
    };
  });
  var actions = getElementActions(plugin);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TopAppBarSecondary, {
    fixed: true
  }, /*#__PURE__*/React.createElement(TopAppBarSection, {
    alignStart: true
  }, /*#__PURE__*/React.createElement(ButtonDefault, {
    onClick: deactivateElement
  }, /*#__PURE__*/React.createElement(ButtonIcon, {
    icon: /*#__PURE__*/React.createElement(NavigateBeforeIcon, null)
  }), " Back")), /*#__PURE__*/React.createElement(TopAppBarSection, null, actions.map(function (_ref3, index) {
    var plugin = _ref3.plugin,
        options = _ref3.options;
    return /*#__PURE__*/React.createElement("div", {
      key: plugin.name + "-" + index,
      style: {
        position: "relative"
      }
    }, plugin.renderAction({
      options: options
    }), typeof plugin.renderMenu === "function" && /*#__PURE__*/React.createElement(Menu, {
      plugin: plugin,
      options: options
    }));
  }))));
});
ElementSettingsBarContent.displayName = "ElementSettingsBarContent";
export default connect(function (state) {
  var element = getActiveElement(state);
  return {
    elementType: element ? element.type : null
  };
}, {
  deactivateElement: deactivateElement
})( /*#__PURE__*/React.memo(ElementSettingsBar));
//# sourceMappingURL=ElementSettingsBar.js.map