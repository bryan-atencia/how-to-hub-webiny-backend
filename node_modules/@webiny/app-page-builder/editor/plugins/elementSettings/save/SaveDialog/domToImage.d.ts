declare const domtoimage: {
    toPng: typeof toPng;
    impl: {
        fontFaces: {
            resolveAll: () => any;
            impl: {
                readAll: () => Promise<any>;
            };
        };
        images: {
            inlineAll: (node: any) => any;
            impl: {
                newImage: (element: any) => {
                    inline: (get: any) => Promise<unknown>;
                };
            };
        };
        util: {
            escape: (string: any) => any;
            mimeType: (url: any) => any;
            dataAsUrl: (content: any, type: any) => string;
            isDataUrl: (url: any) => boolean;
            resolveUrl: (url: any, baseUrl: any) => string;
            getAndEncode: (url: any) => Promise<unknown>;
            uid: () => string;
            delay: (ms: any) => (arg: any) => Promise<unknown>;
            asArray: (arrayLike: any) => any[];
            escapeXhtml: (string: any) => any;
            makeImage: (uri: any) => Promise<unknown>;
            width: (node: any) => any;
            height: (node: any) => any;
        };
        inliner: {
            inlineAll: (string: any, baseUrl: any, get: any) => Promise<any>;
            shouldProcess: (string: any) => boolean;
            impl: {
                readUrls: (string: any) => any[];
                inline: (string: any, url: any, baseUrl: any, get: any) => Promise<any>;
            };
        };
        options: {};
    };
};
export default domtoimage;
/**
 * @param {Node} node - The DOM Node object to render
 * @param {Object} options - Rendering options, @see {@link toSvg}
 * @return {Promise} - A promise that is fulfilled with a PNG image data URL
 * */
declare function toPng(node: any, options: any): Promise<string>;
