{"version":3,"sources":["../../../../../../src/editor/plugins/elementSettings/save/SaveDialog/ElementPreview.tsx"],"names":["React","renderToStaticMarkup","getPlugins","domToImage","ElementPreview","generateImage","element","doc","pl","find","elementType","type","renderElementPreview","elementNode","document","getElementById","id","newContentString","width","offsetWidth","height","offsetHeight","wrapper","createElement","innerHTML","newContentDoc","firstChild","querySelector","replaceWith","elements","length","forEach","el","replaceContent","props","node","editor","classList","add","toPng","onDocument","dataUrl","remove","onChange","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAIqBC,c;;;;;;;;;;;;;wCACG;AAChB,WAAKC,aAAL;AACH;;;yCAEoB;AACjB,WAAKA,aAAL;AACH;;;mCAEcC,O,EAAoBC,G,EAAe;AAAA;;AAC9C,UAAMC,EAAE,GAAGN,UAAU,CAA4B,wBAA5B,CAAV,CAAgEO,IAAhE,CACP,UAAAD,EAAE;AAAA,eAAIA,EAAE,CAACE,WAAH,KAAmBJ,OAAO,CAACK,IAA/B;AAAA,OADK,CAAX;;AAIA,UAAI,CAACH,EAAL,EAAS;AACL,eAAOD,GAAP;AACH;;AAED,UAAI,OAAOC,EAAE,CAACI,oBAAV,KAAmC,UAAvC,EAAmD;AAC/C,YAAMC,WAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwBT,OAAO,CAACU,EAAhC,CAAzB;;AAEA,YAAI,CAACH,WAAL,EAAkB;AACd,iBAAON,GAAP;AACH;;AAED,YAAMU,gBAAgB,GAAGhB,oBAAoB,CACzCO,EAAE,CAACI,oBAAH,CAAwB;AACpBN,UAAAA,OAAO,EAAPA,OADoB;AAEpBY,UAAAA,KAAK,EAAEL,WAAW,CAACM,WAAZ,IAA2B,CAFd;AAGpBC,UAAAA,MAAM,EAAEP,WAAW,CAACQ,YAAZ,IAA4B;AAHhB,SAAxB,CADyC,CAA7C;AAQA,YAAMC,OAAO,GAAGR,QAAQ,CAACS,aAAT,CAAuB,KAAvB,CAAhB;AACAD,QAAAA,OAAO,CAACE,SAAR,GAAoBP,gBAApB;AAEA,YAAMQ,aAAkB,GAAGH,OAAO,CAACI,UAAnC;AAEAnB,QAAAA,GAAG,CAACoB,aAAJ,CAAkB,MAAMrB,OAAO,CAACU,EAAhC,EAAoCY,WAApC,CAAgDH,aAAhD;AACH;;AAED,UAAInB,OAAO,CAACuB,QAAR,CAAiBC,MAArB,EAA6B;AACzBxB,QAAAA,OAAO,CAACuB,QAAR,CAAiBE,OAAjB,CAAyB,UAAAC,EAAE,EAAI;AAC3BzB,UAAAA,GAAG,GAAG,KAAI,CAAC0B,cAAL,CAAoBD,EAApB,EAAwBzB,GAAxB,CAAN;AACH,SAFD;AAGH;;AAED,aAAOA,GAAP;AACH;;;;;;;;;;;;AAGWD,gBAAAA,O,GAAY,KAAK4B,K,CAAjB5B,O;AACF6B,gBAAAA,I,GAAOrB,QAAQ,CAACC,cAAT,CAAwBT,OAAO,CAACU,EAAhC,C;;oBACRmB,I;;;;;iDACM,I;;;AAGLC,gBAAAA,M,GAAStB,QAAQ,CAACa,aAAT,CAAuB,YAAvB,C,EACf;;AACAS,gBAAAA,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB,wBAArB;;uBAEsBnC,UAAU,CAACoC,KAAX,CAAiBJ,IAAjB,EAAuB;AACzCK,kBAAAA,UAAU,EAAE,oBAAAjC,GAAG;AAAA,2BAAI,MAAI,CAAC0B,cAAL,CAAoB3B,OAApB,EAA6BC,GAA7B,CAAJ;AAAA,mBAD0B;AAEzCW,kBAAAA,KAAK,EAAE;AAFkC,iBAAvB,C;;;AAAhBuB,gBAAAA,O;AAKNL,gBAAAA,MAAM,CAACC,SAAP,CAAiBK,MAAjB,CAAwB,wBAAxB;AAEA,qBAAKR,KAAL,CAAWS,QAAX,CAAoBF,OAApB;;;;;;;;;;;;;;;;;;6BAGK;AACL,aAAO,IAAP;AACH;;;;EAzEuCzC,KAAK,CAAC4C,S;;SAA7BxC,c","sourcesContent":["import React from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport domToImage from \"./domToImage\";\nimport { PbElement } from \"@webiny/app-page-builder/types\";\nimport { PbEditorPageElementPlugin } from \"@webiny/app-page-builder/types\";\n\nexport default class ElementPreview extends React.Component<any> {\n    componentDidMount() {\n        this.generateImage();\n    }\n\n    componentDidUpdate() {\n        this.generateImage();\n    }\n\n    replaceContent(element: PbElement, doc: Document) {\n        const pl = getPlugins<PbEditorPageElementPlugin>(\"pb-editor-page-element\").find(\n            pl => pl.elementType === element.type\n        );\n\n        if (!pl) {\n            return doc;\n        }\n\n        if (typeof pl.renderElementPreview === \"function\") {\n            const elementNode: any = document.getElementById(element.id);\n\n            if (!elementNode) {\n                return doc;\n            }\n\n            const newContentString = renderToStaticMarkup(\n                pl.renderElementPreview({\n                    element,\n                    width: elementNode.offsetWidth || 0,\n                    height: elementNode.offsetHeight || 0\n                })\n            );\n\n            const wrapper = document.createElement(\"div\");\n            wrapper.innerHTML = newContentString;\n\n            const newContentDoc: any = wrapper.firstChild;\n\n            doc.querySelector(\"#\" + element.id).replaceWith(newContentDoc);\n        }\n\n        if (element.elements.length) {\n            element.elements.forEach(el => {\n                doc = this.replaceContent(el, doc);\n            });\n        }\n\n        return doc;\n    }\n\n    async generateImage() {\n        const { element } = this.props;\n        const node = document.getElementById(element.id);\n        if (!node) {\n            return null;\n        }\n\n        const editor = document.querySelector(\".pb-editor\");\n        // Hide element highlight while creating the image\n        editor.classList.add(\"pb-editor-no-highlight\");\n\n        const dataUrl = await domToImage.toPng(node, {\n            onDocument: doc => this.replaceContent(element, doc),\n            width: 1000\n        });\n\n        editor.classList.remove(\"pb-editor-no-highlight\");\n\n        this.props.onChange(dataUrl);\n    }\n\n    render() {\n        return null;\n    }\n}\n"],"file":"ElementPreview.js"}