import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from "react";
import { css } from "emotion";
import { getPlugins } from "@webiny/plugins";
import ElementPreview from "./SaveDialog/ElementPreview";
import { CircularProgress } from "@webiny/ui/Progress";
import { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton, DialogCancel } from "@webiny/ui/Dialog";
import { Input } from "@webiny/ui/Input";
import { Switch } from "@webiny/ui/Switch";
import { Select } from "@webiny/ui/Select";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Form } from "@webiny/form";
import styled from "@emotion/styled";
import { validation } from "@webiny/validation";
var narrowDialog = /*#__PURE__*/css({
  ".mdc-dialog__surface": {
    width: 600,
    minWidth: 600
  }
}, "label:narrowDialog;");
var PreviewBox = /*#__PURE__*/styled("div", {
  target: "e16gs1pk0",
  label: "PreviewBox"
})({
  width: 500,
  minHeight: 250,
  border: "1px solid var(--mdc-theme-on-background)",
  backgroundColor: "#fff",
  // this must always be white
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  img: {
    maxHeight: 500,
    maxWidth: 500
  }
});

var SaveDialog = function SaveDialog(props) {
  var element = props.element,
      open = props.open,
      onClose = props.onClose,
      onSubmit = props.onSubmit,
      type = props.type;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var blockCategoriesOptions = getPlugins("pb-editor-block-category").map(function (item) {
    return {
      value: item.categoryName,
      label: item.title
    };
  });
  return /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: onClose,
    className: narrowDialog
  }, /*#__PURE__*/React.createElement(Form, {
    onSubmit: /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setLoading(true);
                _context.next = 3;
                return onSubmit(data);

              case 3:
                setLoading(false);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }(),
    data: {
      type: type,
      category: "general"
    }
  }, function (_ref2) {
    var data = _ref2.data,
        submit = _ref2.submit,
        Bind = _ref2.Bind;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, null, "Save ", type), /*#__PURE__*/React.createElement(DialogContent, null, loading && /*#__PURE__*/React.createElement(CircularProgress, {
      label: "Saving ".concat(type, "...")
    }), element.source && /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "overwrite"
    }, /*#__PURE__*/React.createElement(Switch, {
      label: "Update existing"
    })))), !data.overwrite && /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "name",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "Name",
      autoFocus: true
    })))), data.type === "block" && !data.overwrite && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "category",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Select, {
      label: "Category",
      description: "Select a block category",
      options: blockCategoriesOptions
    }))))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(Bind, {
      name: "preview"
    }, function (_ref3) {
      var value = _ref3.value,
          onChange = _ref3.onChange;
      return value ? /*#__PURE__*/React.createElement("img", {
        src: value,
        alt: ""
      }) : open ? /*#__PURE__*/React.createElement(ElementPreview, {
        key: element.id,
        onChange: onChange,
        element: element
      }) : null;
    }))))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, null, "Cancel"), /*#__PURE__*/React.createElement(DialogButton, {
      onClick: submit
    }, "Save")));
  }));
};

export default /*#__PURE__*/React.memo(SaveDialog, function (props, nextProps) {
  return props.open === nextProps.open;
});
//# sourceMappingURL=SaveDialog.js.map