{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/save/SaveAction.tsx"],"names":["React","useEffect","useCallback","useState","useApolloClient","dataURLtoBlob","useHandler","connect","getPlugins","getPlugin","useSnackbar","useKeyHandler","getActiveElementId","getElementWithChildren","createElementPlugin","createBlockPlugin","CREATE_ELEMENT","UPDATE_ELEMENT","SaveDialog","CREATE_FILE","get","pick","SaveAction","props","children","element","addKeyHandler","removeKeyHandler","showSnackbar","isDialogOpened","setOpenDialog","client","onSubmit","formData","content","removeIdsAndPaths","getDataURLImageDimensions","preview","meta","blob","name","id","fileUploaderPlugin","upload","apolloClient","previewImage","private","mutate","mutation","variables","data","createdImageResponse","createdImage","error","query","overwrite","source","res","hideDialog","pageBuilder","type","toUpperCase","slice","showDialog","plugin","find","pl","elementType","cloneElement","onClick","el","path","elements","map","length","dataURL","Promise","resolve","image","window","Image","onload","width","height","src","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from \"react\";\nimport { useApolloClient } from \"react-apollo\";\nimport { cloneDeep } from \"lodash\";\nimport dataURLtoBlob from \"dataurl-to-blob\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { getPlugins, getPlugin } from \"@webiny/plugins\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { useKeyHandler } from \"@webiny/app-page-builder/editor/hooks/useKeyHandler\";\nimport {\n    getActiveElementId,\n    getElementWithChildren\n} from \"@webiny/app-page-builder/editor/selectors\";\nimport createElementPlugin from \"@webiny/app-page-builder/admin/utils/createElementPlugin\";\nimport createBlockPlugin from \"@webiny/app-page-builder/admin/utils/createBlockPlugin\";\nimport { CREATE_ELEMENT, UPDATE_ELEMENT } from \"@webiny/app-page-builder/admin/graphql/pages\";\nimport SaveDialog from \"./SaveDialog\";\nimport { CREATE_FILE } from \"./SaveDialog/graphql\";\nimport get from \"lodash.get\";\nimport pick from \"lodash.pick\";\nimport { PbElement } from \"@webiny/app-page-builder/types\";\nimport { FileUploaderPlugin } from \"@webiny/app/types\";\nimport { PbEditorPageElementPlugin } from \"@webiny/app-page-builder/types\";\n\ntype Props = {\n    isDialogOpened: boolean;\n    showDialog: Function;\n    hideDialog: Function;\n    onSubmit: Function;\n    children: any;\n    element: PbElement;\n};\n\nconst SaveAction = (props: Props) => {\n    const { children, element } = props;\n    const { addKeyHandler, removeKeyHandler } = useKeyHandler();\n    const { showSnackbar } = useSnackbar();\n    const [isDialogOpened, setOpenDialog] = useState(false);\n    const client = useApolloClient();\n\n    const onSubmit = useHandler(props, ({ element }) => async formData => {\n        formData.content = removeIdsAndPaths(cloneDeep(element));\n\n        const meta = await getDataURLImageDimensions(formData.preview);\n        const blob = dataURLtoBlob(formData.preview);\n        blob.name = \"pb-editor-page-element-\" + element.id + \".png\";\n\n        const fileUploaderPlugin = getPlugin<FileUploaderPlugin>(\"file-uploader\");\n        const previewImage = await fileUploaderPlugin.upload(blob, { apolloClient: client });\n        previewImage.meta = meta;\n        previewImage.meta.private = true;\n\n        const createdImageResponse = await client.mutate({\n            mutation: CREATE_FILE,\n            variables: {\n                data: previewImage\n            }\n        });\n\n        const createdImage = get(createdImageResponse, \"data.files.createFile\", {});\n        if (createdImage.error) {\n            return showSnackbar(\"Image could not be saved.\");\n        }\n\n        formData.preview = createdImage.data.id; // eslint-disable-line\n\n        const query = formData.overwrite ? UPDATE_ELEMENT : CREATE_ELEMENT;\n\n        const { data: res } = await client.mutate({\n            mutation: query,\n            variables: formData.overwrite\n                ? {\n                      id: element.source,\n                      data: pick(formData, [\"content\", \"id\"])\n                  }\n                : { data: pick(formData, [\"type\", \"category\", \"preview\", \"name\", \"content\"]) }\n        });\n\n        hideDialog();\n        const { data } = res.pageBuilder.element;\n        if (data.type === \"block\") {\n            createBlockPlugin(data);\n        } else {\n            createElementPlugin(data);\n        }\n\n        showSnackbar(\n            <span>\n                {formData.type[0].toUpperCase() + formData.type.slice(1)}{\" \"}\n                <strong>{data.name}</strong> was saved!\n            </span>\n        );\n    });\n\n    useEffect(() => {\n        isDialogOpened ? addKeyHandler(\"escape\", hideDialog) : removeKeyHandler(\"escape\");\n    }, [isDialogOpened]);\n\n    const showDialog = useCallback(() => setOpenDialog(true), []);\n    const hideDialog = useCallback(() => setOpenDialog(false), []);\n\n    if (!element) {\n        return null;\n    }\n\n    const plugin = getPlugins<PbEditorPageElementPlugin>(\"pb-editor-page-element\").find(\n        pl => pl.elementType === element.type\n    );\n\n    if (!plugin) {\n        return null;\n    }\n\n    return (\n        <React.Fragment>\n            <SaveDialog\n                key={element.id}\n                element={element}\n                open={isDialogOpened}\n                onClose={hideDialog}\n                onSubmit={onSubmit}\n                type={element.type === \"block\" ? \"block\" : \"element\"}\n            />\n            {React.cloneElement(children, { onClick: showDialog })}\n        </React.Fragment>\n    );\n};\n\nconst removeIdsAndPaths = el => {\n    delete el.id;\n    delete el.path;\n\n    el.elements = el.elements.map(el => {\n        delete el.id;\n        delete el.path;\n        if (el.elements && el.elements.length) {\n            el = removeIdsAndPaths(el);\n        }\n\n        return el;\n    });\n\n    return el;\n};\n\nfunction getDataURLImageDimensions(dataURL: string) {\n    return new Promise(resolve => {\n        const image = new window.Image();\n        image.onload = function() {\n            resolve({ width: image.width, height: image.height });\n        };\n        image.src = dataURL;\n    });\n}\n\nexport default connect<any, any, any>(state => ({\n    element: getElementWithChildren(state, getActiveElementId(state))\n}))(SaveAction);\n"],"file":"SaveAction.js"}