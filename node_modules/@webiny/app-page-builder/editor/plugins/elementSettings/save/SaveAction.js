import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _cloneDeep from "lodash/cloneDeep";
import React, { useEffect, useCallback, useState } from "react";
import { useApolloClient } from "react-apollo";
import dataURLtoBlob from "dataurl-to-blob";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { getPlugins, getPlugin } from "@webiny/plugins";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useKeyHandler } from "@webiny/app-page-builder/editor/hooks/useKeyHandler";
import { getActiveElementId, getElementWithChildren } from "@webiny/app-page-builder/editor/selectors";
import createElementPlugin from "@webiny/app-page-builder/admin/utils/createElementPlugin";
import createBlockPlugin from "@webiny/app-page-builder/admin/utils/createBlockPlugin";
import { CREATE_ELEMENT, UPDATE_ELEMENT } from "@webiny/app-page-builder/admin/graphql/pages";
import SaveDialog from "./SaveDialog";
import { CREATE_FILE } from "./SaveDialog/graphql";
import get from "lodash.get";
import pick from "lodash.pick";

var SaveAction = function SaveAction(props) {
  var children = props.children,
      element = props.element;

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDialogOpened = _useState2[0],
      setOpenDialog = _useState2[1];

  var client = useApolloClient();
  var onSubmit = useHandler(props, function (_ref) {
    var element = _ref.element;
    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {
        var meta, blob, fileUploaderPlugin, previewImage, createdImageResponse, createdImage, query, _yield$client$mutate, res, data;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                formData.content = removeIdsAndPaths(_cloneDeep(element));
                _context.next = 3;
                return getDataURLImageDimensions(formData.preview);

              case 3:
                meta = _context.sent;
                blob = dataURLtoBlob(formData.preview);
                blob.name = "pb-editor-page-element-" + element.id + ".png";
                fileUploaderPlugin = getPlugin("file-uploader");
                _context.next = 9;
                return fileUploaderPlugin.upload(blob, {
                  apolloClient: client
                });

              case 9:
                previewImage = _context.sent;
                previewImage.meta = meta;
                previewImage.meta.private = true;
                _context.next = 14;
                return client.mutate({
                  mutation: CREATE_FILE,
                  variables: {
                    data: previewImage
                  }
                });

              case 14:
                createdImageResponse = _context.sent;
                createdImage = get(createdImageResponse, "data.files.createFile", {});

                if (!createdImage.error) {
                  _context.next = 18;
                  break;
                }

                return _context.abrupt("return", showSnackbar("Image could not be saved."));

              case 18:
                formData.preview = createdImage.data.id; // eslint-disable-line

                query = formData.overwrite ? UPDATE_ELEMENT : CREATE_ELEMENT;
                _context.next = 22;
                return client.mutate({
                  mutation: query,
                  variables: formData.overwrite ? {
                    id: element.source,
                    data: pick(formData, ["content", "id"])
                  } : {
                    data: pick(formData, ["type", "category", "preview", "name", "content"])
                  }
                });

              case 22:
                _yield$client$mutate = _context.sent;
                res = _yield$client$mutate.data;
                hideDialog();
                data = res.pageBuilder.element.data;

                if (data.type === "block") {
                  createBlockPlugin(data);
                } else {
                  createElementPlugin(data);
                }

                showSnackbar( /*#__PURE__*/React.createElement("span", null, formData.type[0].toUpperCase() + formData.type.slice(1), " ", /*#__PURE__*/React.createElement("strong", null, data.name), " was saved!"));

              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  });
  useEffect(function () {
    isDialogOpened ? addKeyHandler("escape", hideDialog) : removeKeyHandler("escape");
  }, [isDialogOpened]);
  var showDialog = useCallback(function () {
    return setOpenDialog(true);
  }, []);
  var hideDialog = useCallback(function () {
    return setOpenDialog(false);
  }, []);

  if (!element) {
    return null;
  }

  var plugin = getPlugins("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SaveDialog, {
    key: element.id,
    element: element,
    open: isDialogOpened,
    onClose: hideDialog,
    onSubmit: onSubmit,
    type: element.type === "block" ? "block" : "element"
  }), /*#__PURE__*/React.cloneElement(children, {
    onClick: showDialog
  }));
};

var removeIdsAndPaths = function removeIdsAndPaths(el) {
  delete el.id;
  delete el.path;
  el.elements = el.elements.map(function (el) {
    delete el.id;
    delete el.path;

    if (el.elements && el.elements.length) {
      el = removeIdsAndPaths(el);
    }

    return el;
  });
  return el;
};

function getDataURLImageDimensions(dataURL) {
  return new Promise(function (resolve) {
    var image = new window.Image();

    image.onload = function () {
      resolve({
        width: image.width,
        height: image.height
      });
    };

    image.src = dataURL;
  });
}

export default connect(function (state) {
  return {
    element: getElementWithChildren(state, getActiveElementId(state))
  };
})(SaveAction);
//# sourceMappingURL=SaveAction.js.map