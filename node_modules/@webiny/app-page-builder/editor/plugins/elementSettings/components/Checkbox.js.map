{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/Checkbox.tsx"],"names":["React","connect","Typography","Grid","Cell","Checkbox","CheckboxCmp","getActiveElement","label","value","updateValue","children","state","valueKey","defaultValue","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,QAAQ,IAAIC,WAArB,QAAwC,qBAAxC;AACA,SAASC,gBAAT,QAAiC,2CAAjC;;AAWA,IAAMF,QAAQ,GAAG,SAAXA,QAAW,OAA4D;AAAA,MAAzDG,KAAyD,QAAzDA,KAAyD;AAAA,MAAlDC,KAAkD,QAAlDA,KAAkD;AAAA,MAA3CC,WAA2C,QAA3CA,WAA2C;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AACzE,sBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA8BH,KAA9B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEC,KAApB;AAA2B,IAAA,QAAQ,EAAEC;AAArC,KACKC,QADL,CADJ,CAJJ,CADJ;AAYH,CAbD;;AAeA,eAAeV,OAAO,CAAgB,UAACW,KAAD,SAAmD;AAAA,MAAzCH,KAAyC,SAAzCA,KAAyC;AAAA,MAAlCI,QAAkC,SAAlCA,QAAkC;AAAA,MAAxBC,YAAwB,SAAxBA,YAAwB;AACrF,SAAO;AACHL,IAAAA,KAAK,EAAEI,QAAQ,GAAG,KAAIN,gBAAgB,CAACK,KAAD,CAApB,EAA6BC,QAA7B,EAAuCC,YAAvC,CAAH,GAA0DL;AADtE,GAAP;AAGH,CAJqB,CAAP,eAIZT,KAAK,CAACe,IAAN,CAAWV,QAAX,CAJY,CAAf","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { get } from \"lodash\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Checkbox as CheckboxCmp } from \"@webiny/ui/Checkbox\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ReactElement } from \"react\";\n\ntype CheckboxProps = {\n    label: string;\n    value: string;\n    updateValue: (value: any) => void;\n    // One or more <option> or <optgroup> elements.\n    children?: Array<ReactElement<\"option\"> | ReactElement<\"optgroup\">>;\n};\n\nconst Checkbox = ({ label, value, updateValue, children }: CheckboxProps) => {\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <CheckboxCmp value={value} onChange={updateValue}>\n                    {children}\n                </CheckboxCmp>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default connect<any, any, any>((state, { value, valueKey, defaultValue }: any) => {\n    return {\n        value: valueKey ? get(getActiveElement(state), valueKey, defaultValue) : value\n    };\n})(React.memo(Checkbox));\n"],"file":"Checkbox.js"}