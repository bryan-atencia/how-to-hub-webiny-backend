{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/Slider.tsx"],"names":["React","connect","Typography","Grid","Cell","Slider","SliderCmp","getActiveElement","label","value","updatePreview","updateValue","min","max","step","state","valueKey","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,mBAApC;AACA,SAASC,gBAAT,QAAiC,2CAAjC;;AAaA,IAAMF,MAAM,GAAG,SAATA,MAAS,OAQI;AAAA,MAPfG,KAOe,QAPfA,KAOe;AAAA,MANfC,KAMe,QANfA,KAMe;AAAA,MALfC,aAKe,QALfA,aAKe;AAAA,MAJfC,WAIe,QAJfA,WAIe;AAAA,sBAHfC,GAGe;AAAA,MAHfA,GAGe,yBAHT,CAGS;AAAA,sBAFfC,GAEe;AAAA,MAFfA,GAEe,yBAFT,GAES;AAAA,uBADfC,IACe;AAAA,MADfA,IACe,0BADR,CACQ;AACf,sBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA8BN,KAA9B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEC,KADX;AAEI,IAAA,QAAQ,EAAEE,WAFd;AAGI,IAAA,OAAO,EAAED,aAHb;AAII,IAAA,GAAG,EAAEE,GAJT;AAKI,IAAA,GAAG,EAAEC,GALT;AAMI,IAAA,QAAQ,MANZ;AAOI,IAAA,IAAI,EAAEC;AAPV,IADJ,CAJJ,CADJ;AAkBH,CA3BD;;AA6BA,eAAeb,OAAO,CAAgB,UAACc,KAAD,SAA+C;AAAA,MAArCC,QAAqC,SAArCA,QAAqC;AACjF,SAAO;AACHP,IAAAA,KAAK,EAAE,KAAIF,gBAAgB,CAACQ,KAAD,CAApB,EAA6BC,QAA7B,EAAuC,CAAvC;AADJ,GAAP;AAGH,CAJqB,CAAP,eAIZhB,KAAK,CAACiB,IAAN,CAAWZ,MAAX,CAJY,CAAf","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { get } from \"lodash\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Slider as SliderCmp } from \"@webiny/ui/Slider\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\n\ntype SliderProps = {\n    label: string;\n    value: string;\n    defaultValue?: any;\n    updatePreview(value: any): void;\n    updateValue(value: any): void;\n    min: number;\n    max: number;\n    step: number;\n};\n\nconst Slider = ({\n    label,\n    value,\n    updatePreview,\n    updateValue,\n    min = 0,\n    max = 100,\n    step = 1\n}: SliderProps) => {\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <SliderCmp\n                    value={value}\n                    onChange={updateValue}\n                    onInput={updatePreview}\n                    min={min}\n                    max={max}\n                    discrete\n                    step={step}\n                />\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default connect<any, any, any>((state, { valueKey }: { valueKey: string }) => {\n    return {\n        value: get(getActiveElement(state), valueKey, 0)\n    };\n})(React.memo(Slider));\n"],"file":"Slider.js"}