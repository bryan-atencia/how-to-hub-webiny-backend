{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/Select.tsx"],"names":["React","connect","Typography","Grid","Cell","Select","SelectCmp","getActiveElement","css","selectStyle","select","height","paddingTop","label","value","updateValue","options","children","state","valueKey","defaultValue","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,mBAApC;AACA,SAASC,gBAAT,QAAiC,2CAAjC;AACA,SAASC,GAAT,QAAoB,SAApB;AAEA,IAAMC,WAAW,gBAAGD,GAAG,CAAC;AACpBE,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,UAAU,EAAE;AAFR;AADY,CAAD,uBAAvB;;AAgBA,IAAMP,MAAM,GAAG,SAATA,MAAS,OAAmE;AAAA,MAAhEQ,KAAgE,QAAhEA,KAAgE;AAAA,MAAzDC,KAAyD,QAAzDA,KAAyD;AAAA,MAAlDC,WAAkD,QAAlDA,WAAkD;AAAA,MAArCC,OAAqC,QAArCA,OAAqC;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AAC9E,sBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA8BJ,KAA9B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEJ,WADf;AAEI,IAAA,KAAK,EAAEK,KAFX;AAGI,IAAA,QAAQ,EAAEC,WAHd;AAII,IAAA,OAAO,EAAEC;AAJb,KAMKC,QANL,CADJ,CAJJ,CADJ;AAiBH,CAlBD;;AAoBA,eAAehB,OAAO,CAAgB,UAACiB,KAAD,SAAmD;AAAA,MAAzCJ,KAAyC,SAAzCA,KAAyC;AAAA,MAAlCK,QAAkC,SAAlCA,QAAkC;AAAA,MAAxBC,YAAwB,SAAxBA,YAAwB;AACrF,SAAO;AACHN,IAAAA,KAAK,EAAEK,QAAQ,GAAG,KAAIZ,gBAAgB,CAACW,KAAD,CAApB,EAA6BC,QAA7B,EAAuCC,YAAvC,CAAH,GAA0DN;AADtE,GAAP;AAGH,CAJqB,CAAP,eAIZd,KAAK,CAACqB,IAAN,CAAWhB,MAAX,CAJY,CAAf","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { get } from \"lodash\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Select as SelectCmp } from \"@webiny/ui/Select\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { css } from \"emotion\";\n\nconst selectStyle = css({\n    select: {\n        height: 35,\n        paddingTop: \"4px !important\"\n    }\n});\n\ntype SelectProps = {\n    label: string;\n    value: string;\n    updateValue: (value: any) => void;\n    options?: Array<string>;\n    // One or more <option> or <optgroup> elements.\n    children?: Array<React.ReactElement<\"option\"> | React.ReactElement<\"optgroup\">>;\n};\n\nconst Select = ({ label, value, updateValue, options, children }: SelectProps) => {\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <SelectCmp\n                    className={selectStyle}\n                    value={value}\n                    onChange={updateValue}\n                    options={options}\n                >\n                    {children}\n                </SelectCmp>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default connect<any, any, any>((state, { value, valueKey, defaultValue }: any) => {\n    return {\n        value: valueKey ? get(getActiveElement(state), valueKey, defaultValue) : value\n    };\n})(React.memo(Select));\n"],"file":"Select.js"}