{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/ColorPicker.tsx"],"names":["React","connect","Typography","Grid","Cell","ColorPickerCmp","getActiveElement","ColorPicker","label","value","updatePreview","updateValue","state","valueKey","defaultValue","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,OAAOC,cAAP,MAA2B,wDAA3B;AACA,SAASC,gBAAT,QAAiC,2CAAjC;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAoE;AAAA,MAAjEC,KAAiE,QAAjEA,KAAiE;AAAA,MAA1DC,KAA0D,QAA1DA,KAA0D;AAAA,MAAnDC,aAAmD,QAAnDA,aAAmD;AAAA,MAApCC,WAAoC,QAApCA,WAAoC;AACpF,sBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA8BH,KAA9B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,cAAD;AACI,IAAA,OAAO,MADX;AAEI,IAAA,KAAK,EAAEC,KAFX;AAGI,IAAA,QAAQ,EAAEC,aAHd;AAII,IAAA,gBAAgB,EAAEC;AAJtB,IADJ,CAJJ,CADJ;AAeH,CAhBD;;AAwBA,eAAeV,OAAO,CAAgB,UAACW,KAAD,SAAuE;AAAA,MAA7DH,KAA6D,SAA7DA,KAA6D;AAAA,MAAtDI,QAAsD,SAAtDA,QAAsD;AAAA,MAA5CC,YAA4C,SAA5CA,YAA4C;AACzG,SAAO;AACHL,IAAAA,KAAK,EAAEI,QAAQ,GAAG,KAAIP,gBAAgB,CAACM,KAAD,CAApB,EAA6BC,QAA7B,EAAuCC,YAAvC,CAAH,GAA0DL;AADtE,GAAP;AAGH,CAJqB,CAAP,eAIZT,KAAK,CAACe,IAAN,CAAWR,WAAX,CAJY,CAAf","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { get } from \"lodash\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport ColorPickerCmp from \"@webiny/app-page-builder/editor/components/ColorPicker\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\n\ntype ColorPickerProps = {\n    label: string;\n    value: string;\n    updatePreview: Function;\n    updateValue: Function;\n};\n\nconst ColorPicker = ({ label, value, updatePreview, updateValue }: ColorPickerProps) => {\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <ColorPickerCmp\n                    compact\n                    value={value}\n                    onChange={updatePreview}\n                    onChangeComplete={updateValue}\n                />\n            </Cell>\n        </Grid>\n    );\n};\n\ntype ColorPickerConnectProps = {\n    value?: string;\n    valueKey?: string;\n    defaultValue?: string;\n};\n\nexport default connect<any, any, any>((state, { value, valueKey, defaultValue }: ColorPickerConnectProps) => {\n    return {\n        value: valueKey ? get(getActiveElement(state), valueKey, defaultValue) : value\n    };\n})(React.memo(ColorPicker));\n"],"file":"ColorPicker.js"}