import React, { useEffect, useCallback } from "react";
import { css } from "emotion";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { togglePlugin } from "@webiny/app-page-builder/editor/actions";
import { IconButton } from "@webiny/ui/Button";
import { useKeyHandler } from "@webiny/app-page-builder/editor/hooks/useKeyHandler";
import { getUi, getActivePlugins, isPluginActive } from "@webiny/app-page-builder/editor/selectors";
import { Tooltip } from "@webiny/ui/Tooltip";
var activeStyle = /*#__PURE__*/css({
  "&.mdc-icon-button": {
    color: "var(--mdc-theme-primary)"
  }
}, "label:activeStyle;");

var Action = function Action(props) {
  var togglePlugin = props.togglePlugin,
      plugin = props.plugin,
      icon = props.icon,
      active = props.active,
      tooltip = props.tooltip,
      onClick = props.onClick;

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  var clickHandler = useCallback(function () {
    if (typeof onClick === "function") {
      return onClick();
    }

    togglePlugin({
      name: plugin,
      closeOtherInGroup: true
    });
  }, [plugin, onClick]);
  useEffect(function () {
    var _props$shortcut = props.shortcut,
        shortcut = _props$shortcut === void 0 ? [] : _props$shortcut;
    var onClick = props.onClick;

    if (typeof shortcut === "string") {
      shortcut = [shortcut];
    }

    shortcut.map(function (short) {
      addKeyHandler(short, function (e) {
        var slateFocused = props.slateFocused,
            settingsActive = props.settingsActive;

        if (slateFocused || settingsActive) {
          return;
        }

        e.preventDefault();
        onClick();
      });
    });
    return function () {
      var _props$shortcut2 = props.shortcut,
          shortcut = _props$shortcut2 === void 0 ? [] : _props$shortcut2;

      if (typeof shortcut === "string") {
        shortcut = [shortcut];
      }

      shortcut.map(function (short) {
        removeKeyHandler(short);
      });
    };
  });
  return /*#__PURE__*/React.createElement(Tooltip, Object.assign({
    placement: "bottom",
    content: /*#__PURE__*/React.createElement("span", null, tooltip)
  }, active ? {
    visible: false
  } : {}), /*#__PURE__*/React.createElement(IconButton, {
    icon: icon,
    onClick: clickHandler,
    className: active && activeStyle,
    "data-testid": props["data-testid"]
  }));
};

export default connect(function (state, props) {
  return {
    active: isPluginActive(props.plugin)(state),
    slateFocused: getUi(state).slateFocused,
    settingsActive: getActivePlugins("pb-editor-page-element-settings")(state).length > 0
  };
}, {
  togglePlugin: togglePlugin
})(Action);
//# sourceMappingURL=Action.js.map