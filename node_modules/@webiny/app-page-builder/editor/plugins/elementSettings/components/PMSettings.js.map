{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/PMSettings.tsx"],"names":["React","useMemo","useState","connect","useHandler","Tabs","Tab","set","merge","updateElement","getActiveElement","SliderWithInput","Footer","PMSettings","props","advanced","valueKey","tabIndex","setTabIndex","updateSettings","element","name","newValue","history","propName","parseInt","newElement","endsWith","prefix","includes","top","right","bottom","left","getUpdateValue","handlers","value","getUpdatePreview","Boolean","state","styleAttribute","id","type","path","areStatePropsEqual"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { connect } from \"@webiny/app-page-builder/editor/redux\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { get, isEqual } from \"lodash\";\nimport { set, merge } from \"dot-prop-immutable\";\nimport { updateElement } from \"@webiny/app-page-builder/editor/actions\";\nimport { getActiveElement } from \"@webiny/app-page-builder/editor/selectors\";\nimport { ReactComponent as BorderOuterIcon } from \"@webiny/app-page-builder/editor/assets/icons/border_outer.svg\";\nimport { ReactComponent as BorderLeftIcon } from \"@webiny/app-page-builder/editor/assets/icons/border_left.svg\";\nimport { ReactComponent as BorderRightIcon } from \"@webiny/app-page-builder/editor/assets/icons/border_right.svg\";\nimport { ReactComponent as BorderTopIcon } from \"@webiny/app-page-builder/editor/assets/icons/border_top.svg\";\nimport { ReactComponent as BorderBottomIcon } from \"@webiny/app-page-builder/editor/assets/icons/border_bottom.svg\";\nimport SliderWithInput from \"./SliderWithInput\";\nimport Footer from \"./Footer\";\n\n/**\n * PMSettings (Padding/Margin settings).\n * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.\n */\n\ntype PMSettingsProps = {\n    value: any;\n    valueKey: string;\n    advanced: boolean;\n};\n\nconst PMSettings = (props: PMSettingsProps) => {\n    const { advanced, valueKey } = props;\n\n    const [tabIndex, setTabIndex] = useState(0);\n\n    const updateSettings = useHandler(props, ({ element, updateElement }) => {\n        return (name: string, newValue: any, history = false) => {\n            const propName = `${valueKey}.${name}`;\n\n            if (name !== \"advanced\") {\n                newValue = parseInt(newValue) || 0;\n            }\n\n            let newElement = set(element, propName, newValue);\n\n            // Update all values in advanced settings\n            if (propName.endsWith(\".all\")) {\n                const prefix = propName.includes(\"desktop\") ? \"desktop\" : \"mobile\";\n                newElement = merge(newElement, `${valueKey}.${prefix}`, {\n                    top: newValue,\n                    right: newValue,\n                    bottom: newValue,\n                    left: newValue\n                });\n            }\n\n            updateElement({\n                element: newElement,\n                history,\n                merge: true\n            });\n        };\n    });\n\n    const getUpdateValue = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, true);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    const getUpdatePreview = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, false);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    return (\n        <Tabs onActivate={setTabIndex}>\n            <Tab label={\"Desktop\"}>\n                {tabIndex === 0 && (\n                    <>\n                        {!advanced ? (\n                            <SliderWithInput\n                                className={\"no-bottom-padding\"}\n                                icon={<BorderOuterIcon />}\n                                valueKey={valueKey + \".desktop.all\"}\n                                updateValue={getUpdateValue(\"desktop.all\")}\n                                updatePreview={getUpdatePreview(\"desktop.all\")}\n                            />\n                        ) : (\n                            <React.Fragment>\n                                <SliderWithInput\n                                    icon={<BorderTopIcon />}\n                                    valueKey={valueKey + \".desktop.top\"}\n                                    updateValue={getUpdateValue(\"desktop.top\")}\n                                    updatePreview={getUpdatePreview(\"desktop.top\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderRightIcon />}\n                                    valueKey={valueKey + \".desktop.right\"}\n                                    updateValue={getUpdateValue(\"desktop.right\")}\n                                    updatePreview={getUpdatePreview(\"desktop.right\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderBottomIcon />}\n                                    valueKey={valueKey + \".desktop.bottom\"}\n                                    updateValue={getUpdateValue(\"desktop.bottom\")}\n                                    updatePreview={getUpdatePreview(\"desktop.bottom\")}\n                                />\n                                <SliderWithInput\n                                    className={\"no-bottom-padding\"}\n                                    icon={<BorderLeftIcon />}\n                                    valueKey={valueKey + \".desktop.left\"}\n                                    updateValue={getUpdateValue(\"desktop.left\")}\n                                    updatePreview={getUpdatePreview(\"desktop.left\")}\n                                />\n                            </React.Fragment>\n                        )}\n                    </>\n                )}\n                <Footer advanced={Boolean(advanced)} toggleAdvanced={getUpdateValue(\"advanced\")} />\n            </Tab>\n            <Tab label={\"Mobile\"}>\n                {tabIndex === 1 && (\n                    <>\n                        {!advanced ? (\n                            <SliderWithInput\n                                className={\"no-bottom-padding\"}\n                                icon={<BorderOuterIcon />}\n                                valueKey={valueKey + \".mobile.all\"}\n                                updateValue={getUpdateValue(\"mobile.all\")}\n                                updatePreview={getUpdatePreview(\"mobile.all\")}\n                            />\n                        ) : (\n                            <React.Fragment>\n                                <SliderWithInput\n                                    icon={<BorderTopIcon />}\n                                    valueKey={valueKey + \".mobile.top\"}\n                                    updateValue={getUpdateValue(\"mobile.top\")}\n                                    updatePreview={getUpdatePreview(\"mobile.top\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderRightIcon />}\n                                    valueKey={valueKey + \".mobile.right\"}\n                                    updateValue={getUpdateValue(\"mobile.right\")}\n                                    updatePreview={getUpdatePreview(\"mobile.right\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderBottomIcon />}\n                                    valueKey={valueKey + \".mobile.bottom\"}\n                                    updateValue={getUpdateValue(\"mobile.bottom\")}\n                                    updatePreview={getUpdatePreview(\"mobile.bottom\")}\n                                />\n                                <SliderWithInput\n                                    className={\"no-bottom-padding\"}\n                                    icon={<BorderLeftIcon />}\n                                    valueKey={valueKey + \".mobile.left\"}\n                                    updateValue={getUpdateValue(\"mobile.left\")}\n                                    updatePreview={getUpdatePreview(\"mobile.left\")}\n                                />\n                            </React.Fragment>\n                        )}\n                    </>\n                )}\n                <Footer advanced={Boolean(advanced)} toggleAdvanced={getUpdateValue(\"advanced\")} />\n            </Tab>\n        </Tabs>\n    );\n};\n\nexport default connect<any, any, any>(\n    (state, { styleAttribute }: any) => {\n        const valueKey = \"data.settings.\" + styleAttribute;\n        const element = getActiveElement(state);\n        return {\n            valueKey,\n            advanced: get(element, valueKey + \".advanced\", false),\n            element: {\n                id: element.id,\n                type: element.type,\n                path: element.path\n            }\n        };\n    },\n    { updateElement },\n    null,\n    {\n        areStatePropsEqual: isEqual\n    }\n)(PMSettings);\n"],"file":"PMSettings.js"}