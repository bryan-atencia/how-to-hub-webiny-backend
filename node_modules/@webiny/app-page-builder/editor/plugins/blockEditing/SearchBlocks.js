import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { Mutation } from "react-apollo";
import { connect } from "@webiny/app-page-builder/editor/redux";
import { deactivatePlugin, updateElement } from "@webiny/app-page-builder/editor/actions";
import { getContent } from "@webiny/app-page-builder/editor/selectors";
import { useKeyHandler } from "@webiny/app-page-builder/editor/hooks/useKeyHandler";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { getPlugins, unregisterPlugin } from "@webiny/plugins";
import { createBlockElements } from "@webiny/app-page-builder/editor/utils";
import { OverlayLayout } from "@webiny/app-admin/components/OverlayLayout";
import { LeftPanel, RightPanel, SplitView } from "@webiny/app-admin/components/SplitView";
import { List, ListItem, ListItemGraphic } from "@webiny/ui/List";
import { Icon } from "@webiny/ui/Icon";
import { DelayedOnChange } from "@webiny/app-page-builder/editor/components/DelayedOnChange";
import { Typography } from "@webiny/ui/Typography";
import { ReactComponent as SearchIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/search.svg";
import { SimpleForm, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";
import { ReactComponent as AllIcon } from "@svgr/webpack!./icons/round-clear_all-24px.svg";
import createBlockPlugin from "@webiny/app-page-builder/admin/utils/createBlockPlugin";
import BlocksList from "./BlocksList";
import { DELETE_ELEMENT, UPDATE_ELEMENT } from "./graphql";
import EditBlockDialog from "./EditBlockDialog";
import { listItem, ListItemTitle, listStyle, TitleContent } from "./SearchBlocksStyled";
import * as Styled from "./StyledComponents";
var allBlockCategory = {
  type: "pb-editor-block-category",
  name: "pb-editor-block-category-all",
  categoryName: "all",
  title: "All blocks",
  description: "List of all available blocks.",
  icon: /*#__PURE__*/React.createElement(AllIcon, null)
};

var sortBlocks = function sortBlocks(blocks) {
  return blocks.sort(function (a, b) {
    if (a.name === "pb-editor-block-empty") {
      return -1;
    }

    if (b.name === "pb-editor-block-empty") {
      return 1;
    }

    if (a.title < b.title) {
      return -1;
    }

    if (a.title > b.title) {
      return 1;
    }

    return 0;
  });
};

var SearchBar = function SearchBar(props) {
  var updateElement = props.updateElement,
      content = props.content,
      deactivatePlugin = props.deactivatePlugin;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      search = _useState2[0],
      setSearch = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      editingBlock = _useState4[0],
      setEditingBlock = _useState4[1];

  var _useState5 = useState("all"),
      _useState6 = _slicedToArray(_useState5, 2),
      activeCategory = _useState6[0],
      setActiveCategory = _useState6[1];

  var allCategories = useMemo(function () {
    return [allBlockCategory].concat(_toConsumableArray(getPlugins("pb-editor-block-category")));
  }, []);
  var allBlocks = getPlugins("pb-editor-block");

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  useEffect(function () {
    addKeyHandler("escape", function (e) {
      e.preventDefault();
      deactivatePlugin({
        name: "pb-editor-search-blocks-bar"
      });
    });
    return function () {
      return removeKeyHandler("escape");
    };
  }, []);
  var addBlockToContent = useCallback(function (plugin) {
    var element = _objectSpread(_objectSpread({}, content), {}, {
      elements: [].concat(_toConsumableArray(content.elements), [createBlockElements(plugin.name)])
    });

    updateElement({
      element: element
    });
  }, [content]);
  /**
   * Returns a list of blocks - by selected category and by searched term (if present).
   * @returns {*}
   */

  var getBlocksList = function getBlocksList() {
    if (!activeCategory) {
      return [];
    }

    var output = allBlocks; // If "all" is selected, no category filtering is required.

    if (activeCategory !== "all") {
      if (activeCategory === "saved") {
        output = output.filter(function (item) {
          return item.tags && item.tags.includes("saved");
        });
      } else {
        output = output.filter(function (item) {
          return item.category === activeCategory;
        });
      }
    } // Finally, filter by typed search term.


    if (search) {
      output = output.filter(function (item) {
        return item.title.toLowerCase().includes(search.toLowerCase());
      });
    }

    return sortBlocks(output);
  };

  var getCategoryBlocksCount = useCallback(function (category) {
    if (category === "all") {
      return allBlocks.length;
    }

    return allBlocks.filter(function (pl) {
      return pl.category === category;
    }).length;
  }, []);

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var deleteBlock = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
      var plugin, deleteElement, response, error;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              plugin = _ref.plugin, deleteElement = _ref.deleteElement;
              _context.next = 3;
              return deleteElement({
                variables: {
                  id: plugin.id
                }
              });

            case 3:
              response = _context.sent;
              error = response.data.pageBuilder.deleteElement.error;

              if (!error) {
                _context.next = 8;
                break;
              }

              showSnackbar(error.message);
              return _context.abrupt("return");

            case 8:
              unregisterPlugin(plugin.name);
              showSnackbar( /*#__PURE__*/React.createElement("span", null, "Block ", /*#__PURE__*/React.createElement("strong", null, plugin.title), " was deleted!"));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var updateBlock = useCallback( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {
      var updateElement, _ref3$data, name, category, response, _response$data$pageBu, error, data;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              updateElement = _ref3.updateElement, _ref3$data = _ref3.data, name = _ref3$data.title, category = _ref3$data.category;

              if (editingBlock) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return");

            case 3:
              _context2.next = 5;
              return updateElement({
                variables: {
                  id: editingBlock.id,
                  data: {
                    name: name,
                    category: category
                  }
                }
              });

            case 5:
              response = _context2.sent;
              _response$data$pageBu = response.data.pageBuilder.updateElement, error = _response$data$pageBu.error, data = _response$data$pageBu.data;

              if (!error) {
                _context2.next = 10;
                break;
              }

              showSnackbar(error.message);
              return _context2.abrupt("return");

            case 10:
              // This will replace previously registered block plugin.
              createBlockPlugin(data);
              setEditingBlock(null);
              setTimeout(function () {
                // For better UX, success message is shown after 300ms.
                showSnackbar( /*#__PURE__*/React.createElement("span", null, "Block ", /*#__PURE__*/React.createElement("strong", null, name), " was saved!"));
              }, 300);

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref4.apply(this, arguments);
    };
  }(), [editingBlock]);
  var renderSearchInput = useCallback(function () {
    return /*#__PURE__*/React.createElement(Styled.Input, null, /*#__PURE__*/React.createElement(Icon, {
      className: Styled.searchIcon,
      icon: /*#__PURE__*/React.createElement(SearchIcon, null)
    }), /*#__PURE__*/React.createElement(DelayedOnChange, {
      value: search,
      onChange: function onChange(value) {
        return setSearch(value);
      }
    }, function (_ref5) {
      var value = _ref5.value,
          _onChange = _ref5.onChange;
      return /*#__PURE__*/React.createElement("input", {
        autoFocus: true,
        type: "text",
        placeholder: "Search blocks...",
        value: value,
        onChange: function onChange(e) {
          return _onChange(e.target.value);
        }
      });
    }));
  }, [search]);
  var onExited = useCallback(function () {
    deactivatePlugin({
      name: "pb-editor-search-blocks-bar"
    });
  }, []);
  var categoryPlugin = allCategories.find(function (pl) {
    return pl.categoryName === activeCategory;
  });
  return /*#__PURE__*/React.createElement(OverlayLayout, {
    barMiddle: renderSearchInput(),
    onExited: onExited
  }, /*#__PURE__*/React.createElement(SplitView, null, /*#__PURE__*/React.createElement(LeftPanel, {
    span: 3
  }, /*#__PURE__*/React.createElement(List, {
    twoLine: true,
    className: listStyle
  }, allCategories.map(function (p) {
    return /*#__PURE__*/React.createElement(ListItem, {
      key: p.name,
      className: listItem,
      onClick: function onClick() {
        setActiveCategory(p.categoryName);
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: p.icon
    })), /*#__PURE__*/React.createElement(TitleContent, null, /*#__PURE__*/React.createElement(ListItemTitle, null, p.title, " (", getCategoryBlocksCount(p.categoryName), ")"), /*#__PURE__*/React.createElement(Typography, {
      use: "subtitle2"
    }, p.description)));
  }))), /*#__PURE__*/React.createElement(RightPanel, {
    span: 9
  }, /*#__PURE__*/React.createElement(Mutation, {
    mutation: UPDATE_ELEMENT
  }, function (updateElement, _ref6) {
    var updateInProgress = _ref6.loading;
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: DELETE_ELEMENT
    }, function (deleteElement) {
      return activeCategory && /*#__PURE__*/React.createElement(SimpleForm, null, /*#__PURE__*/React.createElement(SimpleFormHeader, {
        title: categoryPlugin.title,
        icon: categoryPlugin.icon
      }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Styled.BlockList, null, /*#__PURE__*/React.createElement(BlocksList, {
        category: activeCategory,
        addBlock: addBlockToContent,
        deactivatePlugin: deactivatePlugin,
        blocks: getBlocksList(),
        onEdit: function onEdit(plugin) {
          return setEditingBlock(plugin);
        },
        onDelete: function onDelete(plugin) {
          return deleteBlock({
            plugin: plugin,
            deleteElement: deleteElement
          });
        }
      })), /*#__PURE__*/React.createElement(EditBlockDialog, {
        onClose: function onClose() {
          return setEditingBlock(null);
        },
        onSubmit: function onSubmit(data) {
          return updateBlock({
            data: data,
            updateElement: updateElement
          });
        },
        open: !!editingBlock,
        plugin: editingBlock,
        loading: updateInProgress
      })));
    });
  }))));
};

export default connect(function (state) {
  return {
    content: getContent(state)
  };
}, {
  deactivatePlugin: deactivatePlugin,
  updateElement: updateElement
})(SearchBar);
//# sourceMappingURL=SearchBlocks.js.map