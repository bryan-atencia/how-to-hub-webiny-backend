import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import React, { useState, useEffect, useRef } from "react";
import { List, WindowScroller } from "react-virtualized";
import BlockPreview from "./BlockPreview";
var listWidth = 800;

var BlocksList = function BlocksList(props) {
  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      setTimestamp = _useState2[1];

  var rightPanelElement = useRef(null);
  var prevProps = useRef(null);
  useEffect(function () {
    rightPanelElement.current = document.getElementById("webiny-split-view-right-panel");
    setTimestamp(new Date().getTime());
  }, []);
  useEffect(function () {
    if (!prevProps.current) {
      return;
    } // Scroll only if the active block category has changed


    if (rightPanelElement && prevProps.current.category !== props.category) {
      if (rightPanelElement.current.scrollTop === 0) {
        rightPanelElement.current.scroll(0, 1);
        return;
      }

      rightPanelElement.current.scroll(0, 0);
    }
  });
  useEffect(function () {
    prevProps.current = props;
  });
  var blocks = props.blocks,
      category = props.category,
      _onEdit = props.onEdit,
      _onDelete = props.onDelete,
      deactivatePlugin = props.deactivatePlugin,
      addBlock = props.addBlock;

  var getRowHeight = function getRowHeight(_ref) {
    var index = _ref.index;

    var height = _get(blocks[index], "image.meta.height", 50);

    var width = _get(blocks[index], "image.meta.width", 50);

    if (width > listWidth) {
      var downscaleRatio = width / listWidth;
      height = height / downscaleRatio;
    }

    return height + 100;
  };

  var renderRow = function renderRow(_ref2) {
    var index = _ref2.index,
        key = _ref2.key,
        style = _ref2.style;
    var plugin = blocks[index];
    return /*#__PURE__*/React.createElement("div", {
      key: key,
      style: style,
      "data-testid": "pb-editor-page-blocks-list-item"
    }, /*#__PURE__*/React.createElement(BlockPreview, {
      plugin: plugin,
      onEdit: function onEdit() {
        return _onEdit(plugin);
      },
      onDelete: function onDelete() {
        return _onDelete(plugin);
      },
      addBlockToContent: addBlock,
      deactivatePlugin: deactivatePlugin
    }));
  };

  if (!rightPanelElement.current) {
    return null;
  }

  return /*#__PURE__*/React.createElement(WindowScroller, {
    scrollElement: rightPanelElement.current
  }, function (_ref3) {
    var isScrolling = _ref3.isScrolling,
        registerChild = _ref3.registerChild,
        onChildScroll = _ref3.onChildScroll,
        scrollTop = _ref3.scrollTop;
    return /*#__PURE__*/React.createElement("div", {
      style: {
        flex: "1 1 auto"
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        width: "800px",
        margin: "0 auto"
      },
      ref: registerChild,
      "data-testid": "pb-editor-page-blocks-list"
    }, /*#__PURE__*/React.createElement(List, {
      key: category,
      autoHeight: true,
      height: window.innerHeight - 70,
      isScrolling: isScrolling,
      onScroll: onChildScroll,
      rowCount: blocks.length,
      rowHeight: getRowHeight,
      rowRenderer: renderRow,
      scrollTop: scrollTop,
      width: listWidth,
      overscanRowCount: 2
    })));
  });
};

export default BlocksList;
//# sourceMappingURL=BlocksList.js.map