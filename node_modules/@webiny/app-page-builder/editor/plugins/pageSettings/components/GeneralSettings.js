import _get from "lodash/get";
import _set from "lodash/set";
import React, { useCallback } from "react";
import slugify from "slugify";
import { getPlugins } from "@webiny/plugins";
import { Grid, Cell } from "@webiny/ui/Grid";
import { TagsMultiAutocomplete } from "@webiny/app-page-builder/admin/components/TagsMultiAutocomplete";
import { Input } from "@webiny/ui/Input";
import { Select } from "@webiny/ui/Select";
import PageImage from "./PageImage";
import appendOgImageDimensions from "./appendOgImageDimensions";
import { validation } from "@webiny/validation";

var toSlug = function toSlug(value, cb) {
  cb(slugify(value, {
    replacement: "-",
    lower: true,
    remove: /[*#\?<>_\{\}\[\]+~.()'"!:;@]/g
  })); // eslint-disable-line
};

var GeneralSettings = function GeneralSettings(_ref) {
  var form = _ref.form,
      Bind = _ref.Bind;
  var layouts = React.useMemo(function () {
    return getPlugins("pb-page-layout").map(function (pl) {
      return pl.layout;
    });
  }, []);
  var hasOgImage = useCallback(function () {
    // const src = get(data, "settings.social.image.src"); // Doesn't work.
    var src = _get(form.state, "data.settings.social.image.src"); // Works.


    return typeof src === "string" && src && !src.startsWith("data:");
  }, [form]);
  var onAfterChangeImage = useCallback(function (selectedImage) {
    // If not already set, set selectedImage as og:image too.
    if (selectedImage && !hasOgImage()) {
      form.setState(function (state) {
        _set(state, "data.settings.social.image", selectedImage);

        return state;
      });
      return appendOgImageDimensions({
        form: form,
        value: selectedImage
      });
    }
  }, [hasOgImage, form]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "title",
    validators: validation.create("required")
  }, /*#__PURE__*/React.createElement(Input, {
    label: "Title",
    description: "Page title"
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "url",
    validators: validation.create("required"),
    beforeChange: toSlug
  }, /*#__PURE__*/React.createElement(Input, {
    label: "URL",
    description: "Page URL"
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "snippet"
  }, /*#__PURE__*/React.createElement(Input, {
    rows: 4,
    label: "Snippet",
    description: "Page snippet"
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "settings.general.layout",
    defaultValue: layouts[0].name
  }, /*#__PURE__*/React.createElement(Select, {
    box: "true",
    label: "Layout",
    description: "Render this page using the selected layout"
  }, layouts.map(function (_ref2) {
    var name = _ref2.name,
        title = _ref2.title;
    return /*#__PURE__*/React.createElement("option", {
      key: name,
      value: name
    }, title);
  })))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "settings.general.tags"
  }, /*#__PURE__*/React.createElement(TagsMultiAutocomplete, {
    description: "Enter tags to filter pages"
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "settings.general.image",
    afterChange: onAfterChangeImage
  }, /*#__PURE__*/React.createElement(PageImage, {
    label: "Page Image"
  })))));
};

export default GeneralSettings;
//# sourceMappingURL=GeneralSettings.js.map