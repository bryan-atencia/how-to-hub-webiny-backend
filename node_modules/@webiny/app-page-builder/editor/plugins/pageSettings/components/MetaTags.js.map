{"version":3,"sources":["../../../../../src/editor/plugins/pageSettings/components/MetaTags.tsx"],"names":["React","DynamicFieldset","ButtonPrimary","ButtonSecondary","Grid","Cell","Input","Typography","css","validation","controlButtons","display","alignItems","justifyContent","marginRight","textStyling","color","MetaTags","prefix","value","onChange","Bind","other","actions","header","row","empty","paddingTop","paddingBottom","index","create","tag","cb","add","remove"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { trim } from \"lodash\";\nimport { DynamicFieldset } from \"@webiny/ui/DynamicFieldset\";\nimport { ButtonPrimary, ButtonSecondary } from \"@webiny/ui/Button\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { css } from \"emotion\";\nimport { validation } from \"@webiny/validation\";\nimport { BindComponent } from \"@webiny/form/Bind\";\n\ntype Props = {\n    prefix: string;\n    value: Array<{ [key: string]: string }>;\n    onChange: Function;\n    Bind: BindComponent;\n};\n\nconst controlButtons = css({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    \">button\": {\n        marginRight: 15\n    }\n});\n\nconst textStyling = css({\n    color: \"var(--mdc-theme-text-secondary-on-background)\"\n});\n\nconst MetaTags = ({ prefix, value, onChange, Bind, ...other }: Props) => {\n    return (\n        <DynamicFieldset value={value} onChange={onChange} {...other}>\n            {({ actions, header, row, empty }) => (\n                <React.Fragment>\n                    {header(() => (\n                        <Grid style={{ paddingTop: 0, paddingBottom: 0 }}>\n                            <Cell span={12} className={textStyling}>\n                                <Typography use={\"button\"}>Meta tags</Typography>\n                            </Cell>\n                        </Grid>\n                    ))}\n                    {row(({ index }) => (\n                        <Grid>\n                            <Cell span={3}>\n                                <Bind\n                                    name={`${prefix}.${index}.name`}\n                                    validators={validation.create(\"required\")}\n                                    beforeChange={(tag, cb) => cb(trim(tag))}\n                                >\n                                    <Input label={\"Name\"} />\n                                </Bind>\n                            </Cell>\n                            <Cell span={4}>\n                                <Bind\n                                    name={`${prefix}.${index}.content`}\n                                    validators={validation.create(\"required\")}\n                                    beforeChange={(tag, cb) => cb(trim(tag))}\n                                >\n                                    <Input label={\"Content\"} />\n                                </Bind>\n                            </Cell>\n                            <Cell span={3} className={controlButtons}>\n                                <ButtonPrimary small onClick={actions.add(index)}>\n                                    +\n                                </ButtonPrimary>\n                                <ButtonSecondary small onClick={actions.remove(index)}>\n                                    -\n                                </ButtonSecondary>\n                            </Cell>\n                        </Grid>\n                    ))}\n                    {empty(() => (\n                        <Grid>\n                            <Cell span={12} className={textStyling}>\n                                <Typography use={\"button\"}>\n                                    To add other meta tags, click{\" \"}\n                                    <ButtonPrimary onClick={actions.add()}>\n                                        Add meta tag\n                                    </ButtonPrimary>\n                                </Typography>\n                            </Cell>\n                        </Grid>\n                    ))}\n                </React.Fragment>\n            )}\n        </DynamicFieldset>\n    );\n};\n\nexport default MetaTags;\n"],"file":"MetaTags.js"}