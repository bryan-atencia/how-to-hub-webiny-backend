import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
var OG_IMAGE_DIMENSIONS_PROPERTIES = ["image:width", "image:height"];
export default /*#__PURE__*/(function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var form, value, image;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            form = _ref.form, value = _ref.value;

            if (!(!value || value.src.startsWith("data:"))) {
              _context.next = 4;
              break;
            }

            form.setState(function (state) {
              var next = _objectSpread({}, state); // Remove previously set og:image:width / og:image:height.


              next.data.settings.social.meta = next.data.settings.social.meta.filter(function (item) {
                return item.property && !OG_IMAGE_DIMENSIONS_PROPERTIES.includes(item.property);
              });
              return next;
            });
            return _context.abrupt("return");

          case 4:
            _context.next = 6;
            return new Promise(function (resolve, reject) {
              var image = new window.Image();

              image.onload = function () {
                resolve(image);
              };

              image.onerror = reject;
              image.src = value.src;
            });

          case 6:
            image = _context.sent;
            form.setState(function (state) {
              var next = _objectSpread({}, state); // Remove previously set og:image:width / og:image:height.


              if (Array.isArray(next.data.settings.social.meta)) {
                next.data.settings.social.meta = next.data.settings.social.meta.filter(function (item) {
                  return !OG_IMAGE_DIMENSIONS_PROPERTIES.includes(item.property);
                });
              } else {
                next.data.settings.social.meta = [];
              }

              next.data.settings.social.meta.push({
                property: "og:image:width",
                content: String(image.width)
              }, {
                property: "og:image:height",
                content: String(image.height)
              });
              return next;
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=appendOgImageDimensions.js.map