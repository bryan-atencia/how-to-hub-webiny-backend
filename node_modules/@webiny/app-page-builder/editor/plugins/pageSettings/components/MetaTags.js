import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _trim from "lodash/trim";
import * as React from "react";
import { DynamicFieldset } from "@webiny/ui/DynamicFieldset";
import { ButtonPrimary, ButtonSecondary } from "@webiny/ui/Button";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Input } from "@webiny/ui/Input";
import { Typography } from "@webiny/ui/Typography";
import { css } from "emotion";
import { validation } from "@webiny/validation";
var controlButtons = /*#__PURE__*/css({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  ">button": {
    marginRight: 15
  }
}, "label:controlButtons;");
var textStyling = /*#__PURE__*/css({
  color: "var(--mdc-theme-text-secondary-on-background)"
}, "label:textStyling;");

var MetaTags = function MetaTags(_ref) {
  var prefix = _ref.prefix,
      value = _ref.value,
      onChange = _ref.onChange,
      Bind = _ref.Bind,
      other = _objectWithoutProperties(_ref, ["prefix", "value", "onChange", "Bind"]);

  return /*#__PURE__*/React.createElement(DynamicFieldset, Object.assign({
    value: value,
    onChange: onChange
  }, other), function (_ref2) {
    var actions = _ref2.actions,
        header = _ref2.header,
        row = _ref2.row,
        empty = _ref2.empty;
    return /*#__PURE__*/React.createElement(React.Fragment, null, header(function () {
      return /*#__PURE__*/React.createElement(Grid, {
        style: {
          paddingTop: 0,
          paddingBottom: 0
        }
      }, /*#__PURE__*/React.createElement(Cell, {
        span: 12,
        className: textStyling
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "button"
      }, "Meta tags")));
    }), row(function (_ref3) {
      var index = _ref3.index;
      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 3
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "".concat(prefix, ".").concat(index, ".name"),
        validators: validation.create("required"),
        beforeChange: function beforeChange(tag, cb) {
          return cb(_trim(tag));
        }
      }, /*#__PURE__*/React.createElement(Input, {
        label: "Name"
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 4
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "".concat(prefix, ".").concat(index, ".content"),
        validators: validation.create("required"),
        beforeChange: function beforeChange(tag, cb) {
          return cb(_trim(tag));
        }
      }, /*#__PURE__*/React.createElement(Input, {
        label: "Content"
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 3,
        className: controlButtons
      }, /*#__PURE__*/React.createElement(ButtonPrimary, {
        small: true,
        onClick: actions.add(index)
      }, "+"), /*#__PURE__*/React.createElement(ButtonSecondary, {
        small: true,
        onClick: actions.remove(index)
      }, "-")));
    }), empty(function () {
      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12,
        className: textStyling
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "button"
      }, "To add other meta tags, click", " ", /*#__PURE__*/React.createElement(ButtonPrimary, {
        onClick: actions.add()
      }, "Add meta tag"))));
    }));
  });
};

export default MetaTags;
//# sourceMappingURL=MetaTags.js.map