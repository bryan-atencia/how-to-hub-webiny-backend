{"version":3,"sources":["../../../../../src/editor/plugins/pageSettings/components/GeneralSettings.tsx"],"names":["React","useCallback","slugify","getPlugins","Grid","Cell","TagsMultiAutocomplete","Input","Select","PageImage","appendOgImageDimensions","validation","toSlug","value","cb","replacement","lower","remove","GeneralSettings","form","Bind","layouts","useMemo","map","pl","layout","hasOgImage","src","state","startsWith","onAfterChangeImage","selectedImage","setState","create","name","title"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport slugify from \"slugify\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { TagsMultiAutocomplete } from \"@webiny/app-page-builder/admin/components/TagsMultiAutocomplete\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Select } from \"@webiny/ui/Select\";\nimport PageImage from \"./PageImage\";\nimport { set, get } from \"lodash\";\nimport appendOgImageDimensions from \"./appendOgImageDimensions\";\nimport { validation } from \"@webiny/validation\";\nimport { PbPageLayoutPlugin } from \"@webiny/app-page-builder/types\";\n\nconst toSlug = (value, cb) => {\n    cb(slugify(value, { replacement: \"-\", lower: true, remove: /[*#\\?<>_\\{\\}\\[\\]+~.()'\"!:;@]/g })); // eslint-disable-line\n};\n\nconst GeneralSettings = ({ form, Bind }) => {\n    const layouts = React.useMemo(\n        () => getPlugins<PbPageLayoutPlugin>(\"pb-page-layout\").map(pl => pl.layout),\n        []\n    );\n\n    const hasOgImage = useCallback(() => {\n        // const src = get(data, \"settings.social.image.src\"); // Doesn't work.\n        const src = get(form.state, \"data.settings.social.image.src\"); // Works.\n\n        return typeof src === \"string\" && src && !src.startsWith(\"data:\");\n    }, [form]);\n\n    const onAfterChangeImage = useCallback(\n        selectedImage => {\n            // If not already set, set selectedImage as og:image too.\n            if (selectedImage && !hasOgImage()) {\n                form.setState(state => {\n                    set(state, \"data.settings.social.image\", selectedImage);\n                    return state;\n                });\n                return appendOgImageDimensions({ form, value: selectedImage });\n            }\n        },\n        [hasOgImage, form]\n    );\n\n    return (\n        <React.Fragment>\n            <Grid>\n                <Cell span={12}>\n                    <Bind name={\"title\"} validators={validation.create(\"required\")}>\n                        <Input label=\"Title\" description=\"Page title\" />\n                    </Bind>\n                </Cell>\n                <Cell span={12}>\n                    <Bind\n                        name={\"url\"}\n                        validators={validation.create(\"required\")}\n                        beforeChange={toSlug}\n                    >\n                        <Input label=\"URL\" description=\"Page URL\" />\n                    </Bind>\n                </Cell>\n                <Cell span={12}>\n                    <Bind name={\"snippet\"}>\n                        <Input rows={4} label=\"Snippet\" description=\"Page snippet\" />\n                    </Bind>\n                </Cell>\n                <Cell span={12}>\n                    <Bind name={\"settings.general.layout\"} defaultValue={layouts[0].name}>\n                        <Select\n                            box={\"true\"}\n                            label={\"Layout\"}\n                            description={\"Render this page using the selected layout\"}\n                        >\n                            {layouts.map(({ name, title }) => (\n                                <option key={name} value={name}>\n                                    {title}\n                                </option>\n                            ))}\n                        </Select>\n                    </Bind>\n                </Cell>\n                <Cell span={12}>\n                    <Bind name={\"settings.general.tags\"}>\n                        <TagsMultiAutocomplete description=\"Enter tags to filter pages\" />\n                    </Bind>\n                </Cell>\n                <Cell span={12}>\n                    <Bind name={\"settings.general.image\"} afterChange={onAfterChangeImage}>\n                        <PageImage label=\"Page Image\" />\n                    </Bind>\n                </Cell>\n            </Grid>\n        </React.Fragment>\n    );\n};\n\nexport default GeneralSettings;\n"],"file":"GeneralSettings.js"}