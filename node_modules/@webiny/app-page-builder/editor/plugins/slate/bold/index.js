import * as React from "react";
import { css } from "emotion";
import { ReactComponent as FormatBoldIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_bold.svg";
import { isKeyHotkey } from "is-hotkey";
var isBoldHotkey = isKeyHotkey("mod+b");

var hasMark = function hasMark(value, type) {
  return Boolean(value.activeMarks.find(function (mark) {
    return mark.type === type;
  }));
};

var onClickMark = function onClickMark(type, editor, onChange) {
  editor.change(function (change) {
    return onChange(change.toggleMark(type));
  });
};

var mark = "bold"; // @ts-ignore

var strongStyle = /*#__PURE__*/css({
  "[class*='mdc-typography--']": {
    fontWeight: "bold !important"
  }
}, "label:strongStyle;");
export default (function () {
  return {
    menu: [{
      name: "pb-editor-slate-menu-item-bold",
      type: "pb-editor-slate-menu-item",
      render: function render(_ref) {
        var MenuButton = _ref.MenuButton,
            editor = _ref.editor,
            onChange = _ref.onChange;
        var isActive = hasMark(editor.value, mark);
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/jsx-no-bind
          React.createElement(MenuButton, {
            onClick: function onClick() {
              return onClickMark(mark, editor, onChange);
            },
            active: isActive
          }, /*#__PURE__*/React.createElement(FormatBoldIcon, null))
        );
      }
    }],
    editor: [{
      name: "pb-editor-slate-editor-bold",
      type: "pb-editor-slate-editor",
      slate: {
        onKeyDown: function onKeyDown(event, change, next) {
          // Decide what to do based on the key code...
          if (isBoldHotkey(event)) {
            event.preventDefault();
            change.toggleMark(mark);
            return true;
          }

          return next();
        },
        renderMark: function renderMark(props, next) {
          if (props.mark.type === mark) {
            return /*#__PURE__*/React.createElement("strong", Object.assign({
              className: strongStyle
            }, props.attributes), props.children);
          }

          return next();
        }
      }
    }]
  };
});
//# sourceMappingURL=index.js.map