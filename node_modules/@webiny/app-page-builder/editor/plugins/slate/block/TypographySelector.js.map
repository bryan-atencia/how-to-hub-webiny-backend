{"version":3,"sources":["../../../../../src/editor/plugins/slate/block/TypographySelector.tsx"],"names":["React","useState","useEffect","useRef","useCallback","Downshift","Elevation","usePageBuilder","useHandler","Item","Button","List","dropDownDialog","TypographySelector","props","showMenu","setShowMenu","dropdown","theme","domRect","current","getBoundingClientRect","right","window","innerWidth","style","left","setBlock","editor","onChange","type","change","setBlocks","onStateChange","isOpen","blockType","value","blocks","first","typography","paragraph","getToggleButtonProps","getItemProps","selectedItem","label","Object","keys","map","name","item","isSelected","createElement","component"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback, RefObject } from \"react\";\nimport Downshift from \"downshift\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { usePageBuilder } from \"@webiny/app-page-builder/hooks/usePageBuilder\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nimport { Item, Button, List, dropDownDialog } from \"./Styled\";\n\nconst TypographySelector = props => {\n    const [showMenu, setShowMenu] = useState(false);\n    const dropdown: RefObject<any> = useRef();\n    const { theme } = usePageBuilder();\n\n    useEffect(() => {\n        if (showMenu) {\n            const domRect = dropdown.current.getBoundingClientRect();\n            if (domRect.right > window.innerWidth) {\n                dropdown.current.style.left = window.innerWidth - domRect.right + \"px\";\n            }\n        }\n    });\n\n    const setBlock = useHandler(props, ({ editor, onChange }) => type => {\n        editor.change(change => onChange(change.setBlocks(type)));\n    });\n\n    const onStateChange = useCallback(({ isOpen }) => setShowMenu(isOpen), []);\n\n    const { editor } = props;\n\n    const blockType = editor.value.blocks.first().type;\n    const style = theme.typography[blockType] || theme.typography.paragraph;\n\n    return (\n        <Downshift selectedItem={blockType} onChange={setBlock} onStateChange={onStateChange}>\n            {({ isOpen, getToggleButtonProps, getItemProps, selectedItem }) => (\n                <div>\n                    <Button {...getToggleButtonProps()}>{style.label}</Button>\n                    {isOpen && (\n                        <Elevation z={2} className={dropDownDialog}>\n                            <div ref={dropdown}>\n                                <List>\n                                    {Object.keys(theme.typography).map(name => {\n                                        const style = theme.typography[name];\n\n                                        return (\n                                            <Item\n                                                {...getItemProps({\n                                                    item: name,\n                                                    // TODO: check this; TS is complaining: isActive: highlightedIndex === index,\n                                                    isSelected: selectedItem === name\n                                                })}\n                                                key={name}\n                                            >\n                                                {React.createElement(\n                                                    style.component || \"span\",\n                                                    {},\n                                                    style.label\n                                                )}\n                                            </Item>\n                                        );\n                                    })}\n                                </List>\n                            </div>\n                        </Elevation>\n                    )}\n                </div>\n            )}\n        </Downshift>\n    );\n};\n\nexport default TypographySelector;\n"],"file":"TypographySelector.js"}