import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from "react";
import { ReactComponent as AlignCenterIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_center.svg";
import { ReactComponent as AlignLeftIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_left.svg";
import { ReactComponent as AlignJustifyIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_justify.svg";
import { ReactComponent as AlignRightIcon } from "@svgr/webpack!@webiny/app-page-builder/editor/assets/icons/format_align_right.svg";
import TypographySelector from "./TypographySelector";
// Icons map for dynamic render
var icons = {
  left: AlignLeftIcon,
  center: AlignCenterIcon,
  right: AlignRightIcon,
  justify: AlignJustifyIcon
}; // Alignment types for faster access

var alignments = Object.keys(icons);

var setAlign = function setAlign(align, blockType, onChange, editor) {
  editor.change(function (change) {
    change.setBlocks({
      type: blockType,
      data: {
        align: align
      }
    }).focus();
    onChange(change);
    return change;
  });
};

export default (function () {
  return {
    menu: [{
      name: "pb-editor-slate-menu-item-typography",
      type: "pb-editor-slate-menu-item",
      render: function render(_ref) {
        var MenuButton = _ref.MenuButton,
            props = _objectWithoutProperties(_ref, ["MenuButton"]);

        return /*#__PURE__*/React.createElement(MenuButton, null, /*#__PURE__*/React.createElement(TypographySelector, props));
      }
    }, {
      name: "pb-editor-slate-menu-item-align",
      type: "pb-editor-slate-menu-item",
      render: function render(_ref2) {
        var MenuButton = _ref2.MenuButton,
            editor = _ref2.editor,
            onChange = _ref2.onChange;
        var block = editor.value.blocks.first();
        var align = block.data.get("align") || "left";
        var nextAlign = alignments[alignments.indexOf(align) + 1] || "left";
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/jsx-no-bind
          React.createElement(MenuButton, {
            onClick: function onClick() {
              return setAlign(nextAlign, block.type, onChange, editor);
            }
          }, /*#__PURE__*/React.createElement(icons[align]))
        );
      }
    }],
    editor: [{
      name: "pb-editor-slate-editor-typography",
      type: "pb-editor-slate-editor",
      slate: {
        renderNode: function renderNode(props, next) {
          var attributes = props.attributes,
              children = props.children,
              node = props.node,
              editor = props.editor; // @ts-ignore

          var type = node.type; // @ts-ignore

          var typography = editor.props.theme.typography;

          if (typography.hasOwnProperty(type) && typography[type].component) {
            var _typography$type = typography[type],
                Component = _typography$type.component,
                _typography$type$clas = _typography$type.className,
                className = _typography$type$clas === void 0 ? null : _typography$type$clas;

            var nodeProps = _objectSpread(_objectSpread({}, attributes), {}, {
              className: className,
              // @ts-ignore
              style: {
                textAlign: "".concat(node.data.get("align"))
              }
            });

            if (typeof Component !== "string") {
              nodeProps = props;
            }

            return /*#__PURE__*/React.createElement(Component, nodeProps, children);
          }

          return next();
        }
      }
    }]
  };
});
//# sourceMappingURL=index.js.map