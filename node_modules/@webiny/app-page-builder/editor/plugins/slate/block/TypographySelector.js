import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useEffect, useRef, useCallback } from "react";
import Downshift from "downshift";
import { Elevation } from "@webiny/ui/Elevation";
import { usePageBuilder } from "@webiny/app-page-builder/hooks/usePageBuilder";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { Item, Button, List, dropDownDialog } from "./Styled";

var TypographySelector = function TypographySelector(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showMenu = _useState2[0],
      setShowMenu = _useState2[1];

  var dropdown = useRef();

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  useEffect(function () {
    if (showMenu) {
      var domRect = dropdown.current.getBoundingClientRect();

      if (domRect.right > window.innerWidth) {
        dropdown.current.style.left = window.innerWidth - domRect.right + "px";
      }
    }
  });
  var setBlock = useHandler(props, function (_ref) {
    var editor = _ref.editor,
        onChange = _ref.onChange;
    return function (type) {
      editor.change(function (change) {
        return onChange(change.setBlocks(type));
      });
    };
  });
  var onStateChange = useCallback(function (_ref2) {
    var isOpen = _ref2.isOpen;
    return setShowMenu(isOpen);
  }, []);
  var editor = props.editor;
  var blockType = editor.value.blocks.first().type;
  var style = theme.typography[blockType] || theme.typography.paragraph;
  return /*#__PURE__*/React.createElement(Downshift, {
    selectedItem: blockType,
    onChange: setBlock,
    onStateChange: onStateChange
  }, function (_ref3) {
    var isOpen = _ref3.isOpen,
        getToggleButtonProps = _ref3.getToggleButtonProps,
        getItemProps = _ref3.getItemProps,
        selectedItem = _ref3.selectedItem;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, getToggleButtonProps(), style.label), isOpen && /*#__PURE__*/React.createElement(Elevation, {
      z: 2,
      className: dropDownDialog
    }, /*#__PURE__*/React.createElement("div", {
      ref: dropdown
    }, /*#__PURE__*/React.createElement(List, null, Object.keys(theme.typography).map(function (name) {
      var style = theme.typography[name];
      return /*#__PURE__*/React.createElement(Item, Object.assign({}, getItemProps({
        item: name,
        // TODO: check this; TS is complaining: isActive: highlightedIndex === index,
        isSelected: selectedItem === name
      }), {
        key: name
      }), /*#__PURE__*/React.createElement(style.component || "span", {}, style.label));
    })))));
  });
};

export default TypographySelector;
//# sourceMappingURL=TypographySelector.js.map