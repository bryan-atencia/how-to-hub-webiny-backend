import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { Fragment, useCallback, useMemo } from "react";
import { Form } from "@webiny/form";
import { Input } from "@webiny/ui/Input";
import { Switch } from "@webiny/ui/Switch";
import { Cell, Grid } from "@webiny/ui/Grid";
import { Dialog, DialogContent, DialogTitle, DialogCancel, DialogActions, DialogButton } from "@webiny/ui/Dialog";
import { getLinkRange, isLink, TYPE } from "./utils";
import { validation } from "@webiny/validation";

var LinkDialog = function LinkDialog(_ref) {
  var open = _ref.open,
      editor = _ref.editor,
      onChange = _ref.onChange,
      closeDialog = _ref.closeDialog,
      activePlugin = _ref.activePlugin;

  var _useMemo = useMemo(function () {
    if (!activePlugin) {
      return {
        linkData: null
      };
    }

    var _activePlugin$value = activePlugin.value,
        selection = _activePlugin$value.selection,
        inlines = _activePlugin$value.inlines;
    var anchorText = activePlugin.value.anchorText;
    var link = inlines.find(isLink);

    if (typeof anchorText !== "string") {
      anchorText = anchorText.getText();
    }

    var ns = normalizeSelection(selection);
    var start = ns.anchor.offset;
    var end = ns.focus.offset;
    var selectedText = link ? anchorText : anchorText.substr(start, end - start);
    return {
      linkData: _objectSpread(_objectSpread({}, link && link.data), {}, {
        text: selectedText
      })
    };
  }, [activePlugin]),
      linkData = _useMemo.linkData;

  var updateLink = useCallback(function (_ref2) {
    var text = _ref2.text,
        data = _objectWithoutProperties(_ref2, ["text"]);

    editor.change(function (change) {
      var selection = activePlugin.value.selection;
      var linkSelection = getLinkRange(change, normalizeSelection(selection));
      change.select(linkSelection).unwrapInline(TYPE).insertText(text).moveAnchorBackward(text.length).wrapInline({
        type: TYPE,
        data: data
      }).moveToStart();
      onChange(change);
      closeDialog();
    });
  }, [editor, activePlugin, onChange, closeDialog]);
  return /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: closeDialog
  }, /*#__PURE__*/React.createElement(Form, {
    data: linkData,
    onSubmit: updateLink
  }, function (_ref3) {
    var Bind = _ref3.Bind,
        submit = _ref3.submit;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, null, "Edit Link"), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "text",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "Text to display"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "href",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "URL"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "newTab"
    }, /*#__PURE__*/React.createElement(Switch, {
      onChange: function onChange() {
        return submit();
      },
      label: "Open in new window"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "noFollow"
    }, /*#__PURE__*/React.createElement(Switch, {
      onChange: function onChange() {
        return submit();
      },
      label: "Add \"rel=nofollow\""
    }))))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, {
      onClick: closeDialog
    }, "Cancel"), /*#__PURE__*/React.createElement(DialogButton, {
      onClick: submit
    }, "OK")));
  }));
};

var normalizeSelection = function normalizeSelection(selection) {
  var start, end;

  if (selection.anchor.offset > selection.focus.offset) {
    start = selection.focus;
    end = selection.anchor;
  } else {
    start = selection.anchor;
    end = selection.focus;
  }

  return {
    anchor: start,
    focus: end
  };
};

export default LinkDialog;
//# sourceMappingURL=LinkDialog.js.map