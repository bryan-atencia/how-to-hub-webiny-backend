import { useEffect, useCallback, useRef } from "react";
import { getLinkRange, TYPE } from "./utils";

var getSelectionRect = function getSelectionRect() {
  var native = window.getSelection();

  if (native.type === "None") {
    return {
      top: 0,
      left: 0,
      width: 0,
      height: 0
    };
  }

  var range = native.getRangeAt(0);
  return range.getBoundingClientRect();
};

export default function useLink(_ref) {
  var editor = _ref.editor,
      onChange = _ref.onChange,
      activatePlugin = _ref.activatePlugin;
  var menuRef = useRef(null);
  var link = editor.value.inlines.find(function (inline) {
    return inline.type === "link";
  });
  var selection = editor.value.selection;
  useEffect(function () {
    var menu = menuRef.current;

    if (!link && selection.isFocused) {
      menu.style.display = "none";
      return;
    }

    if (!selection.isFocused) {
      // Don't reposition the tooltip;
      // When we attempt to click the button, editor focus is lost.
      return;
    } // Calculate position


    if (menu) {
      var editorRect = menu.parentNode.getBoundingClientRect();

      var _getSelectionRect = getSelectionRect(),
          top = _getSelectionRect.top,
          left = _getSelectionRect.left,
          height = _getSelectionRect.height; // Cursor position is calculated in relation to `window`


      var cursorLeft = left - editorRect.left;
      var position = {
        top: top - editorRect.top + height,
        left: cursorLeft
      };
      menu.style.display = "flex";
      menu.style.top = position.top + "px";
      menu.style.left = "0px"; // Menu position is calculated in relation to parent element

      var menuRect = menu.getBoundingClientRect();

      if (menuRect.width + cursorLeft > editorRect.width) {
        menu.style.left = "".concat(editorRect.width - menuRect.width - 20, "px");
      } else {
        menu.style.left = "".concat(cursorLeft, "px");
      }
    }
  });

  function activateLink() {
    activatePlugin("pb-editor-slate-menu-item-link");
  }

  var removeLink = useCallback(function () {
    var menu = menuRef.current;
    editor.change(function (change) {
      // Restore selection
      change.select(getLinkRange(change, change.value.selection)).unwrapInline(TYPE);
      onChange(change);
      menu.style.display = "none";
    });
  }, []);
  var href = link ? link.data.get("href") : "";
  return {
    href: href,
    menuRef: menuRef,
    activateLink: activateLink,
    removeLink: removeLink
  };
}
//# sourceMappingURL=useLink.js.map