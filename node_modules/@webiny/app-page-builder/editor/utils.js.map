{"version":3,"sources":["../../src/editor/utils.ts"],"names":["shortid","invariant","set","getPlugin","getPlugins","updateChildPaths","element","id","generate","path","Array","isArray","elements","forEach","el","index","length","addElementToParent","parent","position","newParent","slice","createElement","type","options","plugin","find","pl","elementType","data","create","createBlock","createRow","createColumn","createBlockElements","name","cloneElement","clone","map"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\nimport invariant from \"invariant\";\nimport { set } from \"dot-prop-immutable\";\nimport { isPlainObject, omit } from \"lodash\";\nimport { getPlugin, getPlugins } from \"@webiny/plugins\";\nimport {\n    PbElement,\n    PbEditorPageElementPlugin,\n    PbEditorBlockPlugin\n} from \"@webiny/app-page-builder/types\";\n\nexport const updateChildPaths = (element: PbElement) => {\n    if (!element.id) {\n        element.id = shortid.generate();\n    }\n\n    if (!element.path) {\n        element.path = \"0\";\n    }\n\n    if (Array.isArray(element.elements)) {\n        // Process children only if \"elements\" is an array of objects.\n        // We may get an array of strings when working with shallow element copies.\n        if (isPlainObject(element.elements[0])) {\n            element.elements.forEach((el, index) => {\n                if (!el.id) {\n                    el.id = shortid.generate();\n                }\n\n                el.path = element.path + \".\" + index;\n                if (el.elements.length) {\n                    updateChildPaths(el);\n                }\n            });\n        }\n    }\n};\n\nexport const addElementToParent = (element: PbElement, parent: PbElement, position?: number) => {\n    let newParent;\n    if (position === null) {\n        newParent = set(parent, \"elements\", [...parent.elements, element]);\n    } else {\n        newParent = set(parent, \"elements\", [\n            ...parent.elements.slice(0, position),\n            element,\n            ...parent.elements.slice(position)\n        ]);\n    }\n\n    updateChildPaths(newParent);\n    return newParent;\n};\n\ntype CreateElement = (\n    type: string,\n    options?: { [key: string]: any },\n    parent?: PbElement\n) => PbElement;\n\nexport const createElement: CreateElement = (type, options = {}, parent) => {\n    const plugin = getPlugins<PbEditorPageElementPlugin>(\"pb-editor-page-element\").find(\n        pl => pl.elementType === type\n    );\n\n    invariant(plugin, `Missing element plugin for type \"${type}\"!`);\n\n    return {\n        id: shortid.generate(),\n        data: {},\n        elements: [],\n        path: \"\",\n        type,\n        ...plugin.create(options, parent)\n    };\n};\n\nexport const createBlock = (options: Object = {}, parent?: PbElement) => {\n    return createElement(\"block\", options, parent);\n};\n\nexport const createRow = (options: Object = {}, parent?: PbElement) => {\n    return createElement(\"row\", options, parent);\n};\n\nexport const createColumn = (options: Object = {}, parent?: PbElement) => {\n    return createElement(\"column\", options, parent);\n};\n\nexport const createBlockElements = (name: string) => {\n    const plugin = getPlugin<PbEditorBlockPlugin>(name);\n\n    invariant(plugin, `Missing block plugin \"${name}\"!`);\n\n    return {\n        id: shortid.generate(),\n        data: {},\n        elements: [],\n        path: \"\",\n        ...plugin.create()\n    };\n};\n\nexport const cloneElement = (element: PbElement) => {\n    const clone = omit(element, [\"id\", \"path\"]);\n\n    clone.elements = clone.elements.map(el => cloneElement(el));\n\n    return clone;\n};\n"],"file":"utils.js"}