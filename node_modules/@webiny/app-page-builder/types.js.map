{"version":3,"sources":["../src/types.ts"],"names":["PbPageDetailsContextValue","PbPageRevision","Redux"],"mappings":"AAMA,SACIA,yBADJ,EAEIC,cAFJ,QAGO,iDAHP;AAQA,SAASC,KAAT,QAAsB,uCAAtB;AAwKA,SAASF,yBAAT,EAAoCC,cAApC","sourcesContent":["import { ComponentType, ReactElement, ReactNode } from \"react\";\nimport { Value } from \"slate\";\nimport { Plugin as SlatePlugin, Editor } from \"slate-react\";\nimport { Plugin } from \"@webiny/app/types\";\nimport { BindComponent } from \"@webiny/form/Bind\";\nimport { Reducer as ReduxReducer, Store as ReduxStore } from \"redux\";\nimport {\n    PbPageDetailsContextValue,\n    PbPageRevision\n} from \"./admin/contexts/PageDetails/PageDetailsContext\";\nimport { IconPrefix, IconName } from \"@fortawesome/fontawesome-svg-core\";\nimport { MenuButtonProps } from \"@webiny/app-page-builder/editor/components/Slate/Menu\";\nimport { EditorBarProps } from \"@webiny/app-page-builder/editor/components/Editor/Bar\";\nimport { Form } from \"@webiny/form/Form\";\nexport { Redux } from \"@webiny/app-page-builder/editor/redux\";\nimport { Item } from \"@webiny/app-admin/plugins/Menu/Navigation/components\";\n\nexport type PbMenuSettingsItemPlugin = Plugin & {\n    type: \"menu-settings-page-builder\";\n    render(props: { Item: typeof Item }): React.ReactNode;\n};\n\nexport type PbElement = {\n    id: string;\n    path: string;\n    type: string;\n    elements: Array<PbElement>;\n    data: { [key: string]: any };\n    [key: string]: any;\n};\n\nexport type PbTheme = {\n    colors: { [key: string]: string };\n    elements: { [key: string]: any };\n    typography: {\n        [key: string]: {\n            label: string;\n            component: string | React.ComponentType<any>;\n            className: string;\n        };\n    };\n};\n\nexport type PbThemePlugin = Plugin & {\n    theme: PbTheme;\n};\n\nexport type PbPageLayout = {\n    name: string;\n    title: string;\n    component: React.ComponentType<any>;\n};\n\nexport type PbPageLayoutPlugin = Plugin & {\n    layout: PbPageLayout;\n};\n\nexport type PbDefaultPagePlugin = Plugin & {\n    type: \"pb-default-page\";\n    component: React.ComponentType<any>;\n};\n\nexport type PbPageLayoutComponentPlugin = Plugin & {\n    componentType: string;\n    component: React.ComponentType<any>;\n};\n\nexport type PbPageData = {\n    title?: string;\n    content: any;\n    seo?: {\n        title: string;\n        description: string;\n        meta: { name: string; content: string }[];\n    };\n    social?: {\n        title: string;\n        description: string;\n        meta: { property: string; content: string }[];\n        image: {\n            src: string;\n        };\n    };\n    settings?: {\n        general?: {\n            layout?: string;\n        };\n    };\n};\n\nexport type PbRenderElementPlugin = Plugin & {\n    type: \"pb-render-page-element\";\n    // Name of the pb-element plugin this render plugin is handling.\n    elementType: string;\n    render: (params: { theme: PbTheme; element: PbElement }) => React.ReactNode;\n};\n\nexport type PbPageSettingsFieldsPlugin = Plugin & {\n    fields: string;\n};\n\nexport type PbRenderElementStylePlugin = Plugin & {\n    renderStyle: (params: {\n        element: { id: string; type: string; data: { [key: string]: any } };\n        style: { [key: string]: any };\n    }) => { [key: string]: any };\n};\n\nexport type PbRenderElementAttributesPlugin = Plugin & {\n    renderAttributes: (params: {\n        element: { id: string; type: string; data: { [key: string]: any } };\n        attributes: { [key: string]: string };\n    }) => { [key: string]: string };\n};\n\nexport type PbPageElementImagesListComponentPlugin = Plugin & {\n    type: \"pb-page-element-images-list-component\";\n    title: string;\n    componentName: string;\n    component: ComponentType<any>;\n};\n\nexport type PbPageElementPagesListComponentPlugin = Plugin & {\n    type: \"pb-page-element-pages-list-component\";\n    title: string;\n    componentName: string;\n    component: ComponentType<any>;\n};\n\nexport type PbRenderSlateEditorPlugin = Plugin & {\n    type: \"pb-render-slate-editor\";\n    slate: SlatePlugin;\n};\n\nexport type PbAddonRenderPlugin = Plugin & {\n    type: \"addon-render\";\n    component: ReactElement;\n};\n\nexport type PbShallowElement = Omit<PbElement, \"elements\"> & { elements: string[] };\n\nexport type Action = {\n    type: string;\n    payload: { [key: string]: any };\n    meta: { [key: string]: any };\n};\n\nexport type ActionOptions = {\n    log?: boolean;\n};\n\nexport type StatePathGetter = (action: Action) => string;\n\nexport type StatePath = null | string | StatePathGetter;\nexport type Reducer = ReduxReducer;\n\nexport type ReducerFactory = () => Reducer;\n\nexport type Store = ReduxStore;\n\nexport type State = {\n    elements?: { [key: string]: PbShallowElement };\n    page?: { [key: string]: any };\n    revisions?: Array<{ [key: string]: any }>;\n    ui?: { [key: string]: any };\n};\n\nexport type MiddlewareParams = {\n    store: Store;\n    next: Function;\n    action: Action;\n};\n\nexport type MiddlewareFunction = (params: MiddlewareParams) => any;\nexport type ActionCreator = (payload?: any, meta?: { [key: string]: any }) => Action;\n\nexport type PbEditorReduxMiddlewarePlugin = Plugin & {\n    type: \"pb-editor-redux-middleware\";\n    actions: string[];\n    middleware: MiddlewareFunction;\n};\n\nexport { PbPageDetailsContextValue, PbPageRevision };\n\nexport type PbDocumentElementPlugin = Plugin & {\n    elementType: \"document\";\n    create(options?: any): PbElement;\n    render(props): ReactElement;\n};\n\nexport type PbPageDetailsRevisionContentPlugin = Plugin & {\n    type: \"pb-page-details-revision-content\";\n    render(params: {\n        pageDetails: PbPageDetailsContextValue;\n        loading: boolean;\n        refreshPages: () => void;\n    }): ReactElement;\n};\n\nexport type PbPageDetailsHeaderRightOptionsMenuItemPlugin = Plugin & {\n    type: \"pb-page-details-header-right-options-menu-item\";\n    render(props: any): ReactElement;\n};\n\nexport type PbPageDetailsRevisionContentPreviewPlugin = Plugin & {\n    type: \"pb-page-details-revision-content-preview\";\n    render(params: {\n        pageDetails: PbPageDetailsContextValue;\n        loading: boolean;\n        refreshPages: () => void;\n    }): ReactElement;\n};\n\nexport type PbMenuItemPlugin = Plugin & {\n    type: \"pb-menu-item\";\n    menuItem: {\n        /* Item type (this will be stored to DB when menu is saved) */\n        type: string;\n        /* Menu item title */\n        title: string;\n        /* Menu item icon */\n        icon: ReactElement;\n        /* Can other menu items become children of this item ? */\n        canHaveChildren: boolean;\n        /* Render function for menu item form */\n        renderForm: (params: {\n            data: { [key: string]: any };\n            onSubmit: Function;\n            onCancel: Function;\n        }) => ReactElement;\n    };\n};\n\nexport type PbEditorPageElementGroupPlugin = Plugin & {\n    type: \"pb-editor-page-element-group\";\n    group: {\n        // Title rendered in the toolbar.\n        title: string;\n        // Icon rendered in the toolbar.\n        icon: ReactElement;\n    };\n};\n\nexport type PbEditorPageElementTitle = (params: { refresh: () => void }) => ReactNode;\n\nexport type PbEditorPageElementPlugin = Plugin & {\n    type: \"pb-editor-page-element\";\n    elementType: string;\n    toolbar?: {\n        // Element title in the toolbar.\n        title?: string | PbEditorPageElementTitle;\n        // Element group this element belongs to.\n        group?: string;\n        // A function to render an element preview in the toolbar.\n        preview?: ({ theme: PbTheme }) => ReactNode;\n    };\n    // Help link\n    help?: string;\n    // Whitelist elements that can accept this element (for drag&drop interaction)\n    target?: string[];\n    // Array of element settings plugin names.\n    settings?: Array<string>;\n    // A function to create an element data structure.\n    create: (options: { [key: string]: any }, parent?: PbElement) => Omit<PbElement, \"id\" | \"path\">;\n    // A function to render an element in the editor.\n    render: (params: { theme?: PbTheme; element: PbElement }) => ReactNode;\n    // A function to check if an element can be deleted.\n    canDelete?: (params: { element: PbElement }) => boolean;\n    // Executed when another element is dropped on the drop zones of current element.\n    onReceived?: (params: {\n        store?: Store;\n        source: PbElement | { type: string; path?: string };\n        target: PbElement;\n        position: number | null;\n    }) => void;\n    // Executed when an immediate child element is deleted\n    onChildDeleted?: (params: { element: PbElement; child: PbElement }) => void;\n    // Executed after element was created\n    onCreate?: string;\n    // Render element preview (used when creating element screenshots; not all elements have a simple DOM representation\n    // so this callback is used to customize the look of the element in a PNG image)\n    renderElementPreview?: (params: {\n        element: PbElement;\n        width: number;\n        height: number;\n    }) => ReactElement;\n};\n\nexport type PbEditorPageElementActionPlugin = Plugin & {\n    type: \"pb-editor-page-element-action\";\n    render: (params: { element: PbElement; plugin: PbEditorPageElementPlugin }) => ReactNode;\n};\n\nexport type PbPageDetailsPlugin = Plugin & {\n    render: (params: { [key: string]: any }) => ReactNode;\n};\n\nexport type PbEditorPageSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-settings\";\n    /* Settings group title */\n    title: string;\n    /* Settings group description */\n    description: string;\n    /* Settings group icon */\n    icon: ReactNode;\n    /* GraphQL query fields to include in the `settings` subselect */\n    fields: string;\n    /* Render function that handles the specified `fields` */\n    render: (params: { form: Form; Bind: BindComponent }) => ReactNode;\n};\n\nexport type PbIcon = {\n    /**\n     * [ pack, icon ], ex: [\"fab\", \"cog\"]\n     */\n    id: [IconPrefix, IconName];\n    /**\n     * Icon name\n     */\n    name: string;\n    /**\n     * SVG element\n     */\n    svg: ReactElement;\n};\n\nexport type PbIconsPlugin = Plugin & {\n    type: \"pb-icons\";\n    getIcons(): PbIcon[];\n};\n\nexport type PbEditorSlateEditorPlugin = Plugin & {\n    type: \"pb-editor-slate-editor\";\n    slate: SlatePlugin;\n};\n\nexport type PbEditorSlateMenuItemPlugin = Plugin & {\n    type: \"pb-editor-slate-menu-item\";\n    render(params: {\n        MenuButton: ComponentType<MenuButtonProps>;\n        value: Value;\n        onChange;\n        editor: Editor;\n        activatePlugin;\n    }): ReactElement;\n    renderDialog?: (params: {\n        onChange(change: Editor): void;\n        editor: Editor;\n        open: boolean;\n        closeDialog(): void;\n        activePlugin: {\n            plugin: string;\n            value: { [key: string]: any };\n        };\n        activatePlugin(name: string): void;\n    }) => ReactElement;\n};\n\nexport type PbEditorBarPlugin = Plugin & {\n    type: \"pb-editor-bar\";\n    shouldRender(props: EditorBarProps): boolean;\n    render(): ReactElement;\n};\n\nexport type PbEditorContentPlugin = Plugin & {\n    type: \"pb-editor-content\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarLeftPlugin = Plugin & {\n    type: \"pb-editor-default-bar-left\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarRightPlugin = Plugin & {\n    type: \"pb-editor-default-bar-right\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarRightPageOptionsPlugin = Plugin & {\n    type: \"pb-editor-default-bar-right-page-options\";\n    render(): ReactElement;\n};\n\nexport type PbEditorToolbarTopPlugin = Plugin & {\n    type: \"pb-editor-toolbar-top\";\n    renderAction(): ReactElement;\n    renderDialog?: () => ReactElement;\n    renderDrawer?: () => ReactElement;\n};\n\nexport type PbEditorToolbarBottomPlugin = Plugin & {\n    type: \"pb-editor-toolbar-bottom\";\n    renderAction(): ReactElement;\n    renderDialog?: () => ReactElement;\n};\n\nexport type PbEditorBlockPlugin = Plugin & {\n    type: \"pb-editor-block\";\n    title: string;\n    category: string;\n    tags: string[];\n    image: {\n        src?: string;\n        meta: {\n            width: number;\n            height: number;\n            aspectRatio: number;\n        };\n    };\n    create(): PbElement;\n    preview(): ReactElement;\n};\n\nexport type PbEditorBlockCategoryPlugin = Plugin & {\n    type: \"pb-editor-block-category\";\n    title: string;\n    categoryName: string;\n    description: string;\n    icon: ReactElement;\n};\n\nexport type PbEditorPageElementSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-element-settings\";\n    renderAction(params: { options?: any }): ReactElement;\n    renderMenu?: (params: { options?: any }) => ReactElement;\n};\n\nexport type PbEditorPageElementAdvancedSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-element-advanced-settings\";\n    elementType: string;\n    render(params?: { Bind: BindComponent; data: any }): ReactElement;\n    onSave?: (data: FormData) => FormData;\n};\n"],"file":"types.js"}