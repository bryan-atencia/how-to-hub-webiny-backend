import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import * as React from "react";
import warning from "warning";
import { useQuery } from "react-apollo";
import { loadPages } from "./graphql";
import { getPlugins } from "@webiny/plugins";

var PagesList = function PagesList(props) {
  var _props$data = props.data,
      component = _props$data.component,
      vars = _objectWithoutProperties(_props$data, ["component"]),
      theme = props.theme;

  var plugins = getPlugins("pb-page-element-pages-list-component");
  var pageList = plugins.find(function (cmp) {
    return cmp.componentName === component;
  });

  if (!pageList) {
    warning(false, "Pages list component \"".concat(component, "\" is missing!"));
    return null;
  }

  var ListComponent = pageList.component;

  if (!ListComponent) {
    warning(false, "React component is not defined for \"".concat(component, "\"!"));
    return null;
  }

  var sort = null;

  if (vars.sortBy) {
    sort = _defineProperty({}, vars.sortBy, parseInt(vars.sortDirection) || -1);
  }

  var variables = {
    category: vars.category,
    sort: sort,
    tags: vars.tags,
    tagsRule: vars.tagsRule,
    limit: parseInt(vars.resultsPerPage),
    after: undefined,
    before: undefined
  };

  var _useQuery = useQuery(loadPages, {
    variables: variables
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      refetch = _useQuery.refetch;

  if (loading) {
    return null;
  }

  var pages = data.pageBuilder.listPublishedPages;

  if (!pages || !pages.data.length) {
    return null;
  }

  var prevPage = null;

  if (pages.meta.hasPreviousPage) {
    prevPage = function prevPage() {
      return refetch(_objectSpread(_objectSpread({}, variables), {}, {
        before: pages.meta.cursors.previous
      }));
    };
  }

  var nextPage = null;

  if (pages.meta.hasNextPage) {
    nextPage = function nextPage() {
      return refetch(_objectSpread(_objectSpread({}, variables), {}, {
        after: pages.meta.cursors.next
      }));
    };
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("ssr-cache", {
    "data-class": "pb-pages-list"
  }), /*#__PURE__*/React.createElement(ListComponent, Object.assign({}, pages, {
    nextPage: nextPage,
    prevPage: prevPage,
    theme: theme
  })));
};

export default /*#__PURE__*/React.memo(PagesList);
//# sourceMappingURL=PagesList.js.map