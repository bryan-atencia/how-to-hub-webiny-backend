{"version":3,"sources":["../../../../../src/admin/plugins/pageDetails/utils/usePublishRevisionHandler.tsx"],"names":["React","set","useApolloClient","useSnackbar","PUBLISH_REVISION","GET_PAGE","usePublishRevisionHandler","page","client","showSnackbar","publishRevision","revision","mutate","mutation","variables","id","refetchQueries","update","cache","data","pageBuilder","error","getPageQuery","pageFromCache","readQuery","query","revisions","forEach","r","published","locked","writeQuery","res","message","version"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,8CAA3C;AAEA,OAAO,SAASC,yBAAT,OAA6C;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAChD,MAAMC,MAAM,GAAGN,eAAe,EAA9B;;AADgD,qBAEvBC,WAAW,EAFY;AAAA,MAExCM,YAFwC,gBAExCA,YAFwC;;AAIhD,MAAMC,eAAe;AAAA,yEAAG,iBAAMC,QAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQH,MAAM,CAACI,MAAP,CAAc;AACtCC,gBAAAA,QAAQ,EAAET,gBAD4B;AAEtCU,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,EAAE,EAAEJ,QAAQ,CAACI;AAAf,iBAF2B;AAGtCC,gBAAAA,cAAc,EAAE,CAAC,aAAD,CAHsB;AAItCC,gBAAAA,MAAM,EAAE,gBAACC,KAAD,SAAqB;AAAA,sBAAXC,IAAW,SAAXA,IAAW;;AACzB;AACA,sBAAIA,IAAI,CAACC,WAAL,CAAiBV,eAAjB,CAAiCW,KAArC,EAA4C;AACxC;AACH;;AAED,sBAAMC,YAAY,GAAGjB,QAAQ,EAA7B,CANyB,CAQzB;;AACA,sBAAMkB,aAAa,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAClCC,oBAAAA,KAAK,EAAEH,YAD2B;AAElCR,oBAAAA,SAAS,EAAE;AAAEC,sBAAAA,EAAE,EAAER,IAAI,CAACQ;AAAX;AAFuB,mBAAhB,CAAtB;AAKAR,kBAAAA,IAAI,CAACmB,SAAL,CAAeC,OAAf,CAAuB,UAAAC,CAAC,EAAI;AACxB;AACA,wBAAIA,CAAC,CAACb,EAAF,KAASJ,QAAQ,CAACI,EAAtB,EAA0B;AACtBa,sBAAAA,CAAC,CAACC,SAAF,GAAc,IAAd;AACAD,sBAAAA,CAAC,CAACE,MAAF,GAAW,IAAX;AACA;AACH,qBANuB,CAQxB;;;AACA,wBAAIF,CAAC,CAACC,SAAN,EAAiB;AACbD,sBAAAA,CAAC,CAACC,SAAF,GAAc,KAAd;AACH;AACJ,mBAZD,EAdyB,CA4BzB;;AACAX,kBAAAA,KAAK,CAACa,UAAN,CAAiB;AACbN,oBAAAA,KAAK,EAAEH,YADM;AAEbH,oBAAAA,IAAI,EAAElB,GAAG,CAACsB,aAAD,EAAgB,uBAAhB,EAAyChB,IAAzC;AAFI,mBAAjB;AAIH;AArCqC,eAAd,CADR;;AAAA;AAAA;AACNyB,cAAAA,GADM,wBACZb,IADY;AAyCZE,cAAAA,KAzCY,GAyCFW,GAAG,CAACZ,WAAJ,CAAgBV,eAzCd,CAyCZW,KAzCY;;AAAA,mBA0ChBA,KA1CgB;AAAA;AAAA;AAAA;;AAAA,+CA2CTZ,YAAY,CAACY,KAAK,CAACY,OAAP,CA3CH;;AAAA;AA8CpBxB,cAAAA,YAAY,eACR,mFACoC,yCAAUE,QAAQ,CAACuB,OAAnB,CADpC,MADQ,CAAZ;;AA9CoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfxB,eAAe;AAAA;AAAA;AAAA,KAArB;;AAqDA,SAAO;AACHA,IAAAA,eAAe,EAAfA;AADG,GAAP;AAGH","sourcesContent":["import React from \"react\";\nimport { set } from \"dot-prop-immutable\";\nimport { useApolloClient } from \"react-apollo\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { PUBLISH_REVISION, GET_PAGE } from \"@webiny/app-page-builder/admin/graphql/pages\";\n\nexport function usePublishRevisionHandler({ page }) {\n    const client = useApolloClient();\n    const { showSnackbar } = useSnackbar();\n\n    const publishRevision = async revision => {\n        const { data: res } = await client.mutate({\n            mutation: PUBLISH_REVISION,\n            variables: { id: revision.id },\n            refetchQueries: [\"PbListPages\"],\n            update: (cache, { data }) => {\n                // Don't do anything if there was an error during publishing!\n                if (data.pageBuilder.publishRevision.error) {\n                    return;\n                }\n\n                const getPageQuery = GET_PAGE();\n\n                // Update revisions\n                const pageFromCache = cache.readQuery({\n                    query: getPageQuery,\n                    variables: { id: page.id }\n                });\n\n                page.revisions.forEach(r => {\n                    // Update published/locked fields on the revision that was just published.\n                    if (r.id === revision.id) {\n                        r.published = true;\n                        r.locked = true;\n                        return;\n                    }\n\n                    // Unpublish other published revisions\n                    if (r.published) {\n                        r.published = false;\n                    }\n                });\n\n                // Write our data back to the cache.\n                cache.writeQuery({\n                    query: getPageQuery,\n                    data: set(pageFromCache, \"pageBuilder.page.data\", page)\n                });\n            }\n        });\n\n        const { error } = res.pageBuilder.publishRevision;\n        if (error) {\n            return showSnackbar(error.message);\n        }\n\n        showSnackbar(\n            <span>\n                Successfully published revision <strong>#{revision.version}</strong>!\n            </span>\n        );\n    };\n\n    return {\n        publishRevision\n    };\n}\n"],"file":"usePublishRevisionHandler.js"}