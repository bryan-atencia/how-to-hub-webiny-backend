import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import store from "store";
import observe from "store/plugins/observe";
store.addPlugin(observe);
var LOCAL_STORAGE_KEY = "webiny_pb_page_zoom";

var Zoom = /*#__PURE__*/function (_React$Component) {
  _inherits(Zoom, _React$Component);

  var _super = _createSuper(Zoom);

  function Zoom(props) {
    var _this;

    _classCallCheck(this, Zoom);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "watchId", void 0);

    _defineProperty(_assertThisInitialized(_this), "setZoomLevel", function (zoom) {
      store.set(LOCAL_STORAGE_KEY, zoom);
    });

    _defineProperty(_assertThisInitialized(_this), "getZoomLevel", function () {
      var zoom = store.get(LOCAL_STORAGE_KEY);

      if (!zoom) {
        switch (true) {
          case window.innerWidth < 1600:
            return 0.75;

          case window.innerWidth < 1200:
            return 0.5;

          default:
            return 1;
        }
      }

      return zoom;
    });

    _this.state = {
      zoom: _this.getZoomLevel()
    };
    return _this;
  }

  _createClass(Zoom, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.watchId = store.observe(LOCAL_STORAGE_KEY, /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(zoom) {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this2.setState({
                    zoom: parseFloat(zoom)
                  });

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      store.unobserve(this.watchId);
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children({
        zoom: this.state.zoom,
        setZoom: this.setZoomLevel
      });
    }
  }]);

  return Zoom;
}(React.Component);

export default Zoom;
//# sourceMappingURL=Zoom.js.map