import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from "react";
import { IconButton } from "@webiny/ui/Button";
import { Icon } from "@webiny/ui/Icon";
import { ReactComponent as MoreVerticalIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/more_vert.svg";
import { ReactComponent as PreviewIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/visibility.svg";
import { ReactComponent as HomeIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/round-home-24px.svg";
import { ListItemGraphic } from "@webiny/ui/List";
import { MenuItem, Menu } from "@webiny/ui/Menu";
import { usePageBuilderSettings } from "@webiny/app-page-builder/admin/hooks/usePageBuilderSettings";
import { css } from "emotion";
import { Mutation } from "react-apollo";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import classNames from "classnames";
import { setHomePage } from "./graphql";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { getPlugins } from "@webiny/plugins";
var menuStyles = /*#__PURE__*/css({
  width: 250,
  right: -105,
  left: "auto !important",
  ".disabled": {
    opacity: 0.5,
    pointerEvents: "none"
  }
}, "label:menuStyles;");

var PageOptionsMenu = function PageOptionsMenu(props) {
  var page = props.pageDetails.page;

  var _usePageBuilderSettin = usePageBuilderSettings(),
      getPageUrl = _usePageBuilderSettin.getPageUrl,
      getPagePreviewUrl = _usePageBuilderSettin.getPagePreviewUrl;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useConfirmationDialo = useConfirmationDialog({
    title: "Delete page",
    message: /*#__PURE__*/React.createElement("span", null, "You're about to set the ", /*#__PURE__*/React.createElement("strong", null, page.title), " page as your new homepage, are you sure you want to continue?", " ", !page.published && "Note that your page will be automatically published.")
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation; // We must prevent opening in new tab - Cypress doesn't work with new tabs.


  var target = window.Cypress ? "_self" : "_blank";
  return /*#__PURE__*/React.createElement(Menu, {
    className: menuStyles,
    handle: /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "pb-page-details-header-page-options-menu",
      icon: /*#__PURE__*/React.createElement(MoreVerticalIcon, null)
    })
  }, page.locked ? /*#__PURE__*/React.createElement(MenuItem, {
    onClick: function onClick() {
      return window.open(getPageUrl(page), target);
    }
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    "data-testid": "pb-page-details-header-page-options-menu-preview",
    icon: /*#__PURE__*/React.createElement(PreviewIcon, null)
  })), "View") : /*#__PURE__*/React.createElement(MenuItem, {
    onClick: function onClick() {
      return window.open(getPagePreviewUrl(page), target);
    }
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    "data-testid": "pb-page-details-header-page-options-menu-preview",
    icon: /*#__PURE__*/React.createElement(PreviewIcon, null)
  })), "Preview"), /*#__PURE__*/React.createElement(Mutation, {
    mutation: setHomePage
  }, function (update) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      className: classNames({
        disabled: page.isHomePage
      }),
      onClick: function onClick() {
        showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var response, error;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return update({
                    variables: {
                      id: page.id
                    }
                  });

                case 2:
                  response = _context.sent;
                  error = response.data.pageBuilder.setHomePage.error;

                  if (error) {
                    showSnackbar(error.message);
                  } else {
                    showSnackbar("Homepage set successfully!");

                    if (!page.published) {
                      props.refreshPages();
                    }
                  }

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(HomeIcon, null)
    })), "Set as homepage");
  }), getPlugins("pb-page-details-header-right-options-menu-item").map(function (plugin) {
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: plugin.name
    }, plugin.render(props));
  }));
};

export default PageOptionsMenu;
//# sourceMappingURL=PageOptionsMenu.js.map