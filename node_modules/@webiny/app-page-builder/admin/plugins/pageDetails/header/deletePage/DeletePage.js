import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _get from "lodash/get";
import React from "react";
import dot from "dot-prop-immutable";
import { useApolloClient } from "react-apollo";
import { useRouter } from "@webiny/react-router";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { useDialog } from "@webiny/app-admin/hooks/useDialog";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/delete.svg";
import { DELETE_PAGE } from "@webiny/app-page-builder/admin/graphql/pages";

var DeletePage = function DeletePage(props) {
  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useDialog = useDialog(),
      showDialog = _useDialog.showDialog;

  var title = _get(props, "pageDetails.page.title", "N/A");

  var _useConfirmationDialo = useConfirmationDialog({
    title: "Delete page",
    message: /*#__PURE__*/React.createElement("p", null, "You are about to delete the entire page and all of its revisions! ", /*#__PURE__*/React.createElement("br", null), "Are you sure you want to permanently delete the page ", /*#__PURE__*/React.createElement("strong", null, title), "?")
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var confirmDelete = useHandler(_objectSpread(_objectSpread({}, props), {}, {
    showConfirmation: showConfirmation
  }), function (_ref) {
    var page = _ref.pageDetails.page,
        showConfirmation = _ref.showConfirmation;
    return function () {
      showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$client$mutate, res, _dot$get, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return client.mutate({
                  mutation: DELETE_PAGE,
                  variables: {
                    id: page.parent
                  },
                  refetchQueries: ["PbListPages"]
                });

              case 2:
                _yield$client$mutate = _context.sent;
                res = _yield$client$mutate.data;
                _dot$get = dot.get(res, "pageBuilder.deletePage"), error = _dot$get.error;

                if (!error) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", showDialog(error.message, {
                  title: "Could not delete page"
                }));

              case 7:
                showSnackbar( /*#__PURE__*/React.createElement("span", null, "The page", " ", /*#__PURE__*/React.createElement("strong", null, page.title.substr(0, 20), "..."), " ", "was deleted successfully!"));
                history.push("/page-builder/pages");

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    };
  });
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: "Delete",
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
    onClick: confirmDelete
  }));
};

export default DeletePage;
//# sourceMappingURL=DeletePage.js.map