import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import React, { useCallback, useState } from "react";
import { IconButton } from "@webiny/ui/Button";
import { useRouter } from "@webiny/react-router";
import { useApolloClient } from "react-apollo";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as EditIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/edit.svg";
import { CREATE_REVISION_FORM } from "@webiny/app-page-builder/admin/graphql/pages";
import { usePageDetails } from "@webiny/app-page-builder/admin/hooks/usePageDetails";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";

var EditRevision = function EditRevision() {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _usePageDetails = usePageDetails(),
      page = _usePageDetails.page;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      inProgress = _useState2[0],
      setInProgress = _useState2[1];

  var unpublishedRevision = (_get(page, "revisions") || []).find(function (item) {
    return !item.published && !item.locked;
  });
  var editRevision = useCallback(function () {
    if (unpublishedRevision) {
      history.push("/page-builder/editor/".concat(unpublishedRevision.id));
    }
  }, [unpublishedRevision]);
  var copyAndEdit = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _page$revisions, latestRevision, _yield$client$mutate, res, _res$pageBuilder$revi, data, error;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _page$revisions = _slicedToArray(page.revisions, 1), latestRevision = _page$revisions[0];
            setInProgress(true);
            _context.next = 4;
            return client.mutate({
              mutation: CREATE_REVISION_FORM,
              variables: {
                revision: latestRevision.id
              },
              refetchQueries: ["PbListPages"],
              awaitRefetchQueries: true
            });

          case 4:
            _yield$client$mutate = _context.sent;
            res = _yield$client$mutate.data;
            setInProgress(false);
            _res$pageBuilder$revi = res.pageBuilder.revision, data = _res$pageBuilder$revi.data, error = _res$pageBuilder$revi.error;

            if (!error) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", showSnackbar(error.message));

          case 10:
            history.push("/page-builder/editor/".concat(data.id));

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [page]);

  if (unpublishedRevision) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: "Edit",
      placement: "top"
    }, /*#__PURE__*/React.createElement(IconButton, {
      disabled: inProgress,
      icon: /*#__PURE__*/React.createElement(EditIcon, null),
      onClick: editRevision,
      "data-testid": "pb-page-details-header-edit-revision"
    }));
  }

  return /*#__PURE__*/React.createElement(Tooltip, {
    content: "Edit",
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    disabled: inProgress,
    icon: /*#__PURE__*/React.createElement(EditIcon, null),
    onClick: copyAndEdit,
    "data-testid": "pb-page-details-header-edit-revision"
  }));
};

export default EditRevision;
//# sourceMappingURL=EditRevision.js.map