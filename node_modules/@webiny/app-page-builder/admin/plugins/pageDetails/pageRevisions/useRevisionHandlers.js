import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { useCallback } from "react";
import { useApolloClient } from "react-apollo";
import { useRouter } from "@webiny/react-router";
import { CREATE_REVISION_FORM, DELETE_REVISION } from "@webiny/app-page-builder/admin/graphql/pages";
import { usePublishRevisionHandler } from "../utils/usePublishRevisionHandler";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { usePageDetails } from "@webiny/app-page-builder/admin/hooks/usePageDetails";
export function useRevisionHandlers(_ref) {
  var rev = _ref.rev;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var client = useApolloClient();

  var _usePageDetails = usePageDetails(),
      page = _usePageDetails.page;

  var _usePublishRevisionHa = usePublishRevisionHandler({
    page: page
  }),
      publishRevision = _usePublishRevisionHa.publishRevision;

  var createRevision = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _yield$client$mutate, res, _res$pageBuilder$revi, data, error;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.mutate({
              mutation: CREATE_REVISION_FORM,
              variables: {
                revision: rev.id
              },
              refetchQueries: ["PbListPages"],
              awaitRefetchQueries: true
            });

          case 2:
            _yield$client$mutate = _context.sent;
            res = _yield$client$mutate.data;
            _res$pageBuilder$revi = res.pageBuilder.revision, data = _res$pageBuilder$revi.data, error = _res$pageBuilder$revi.error;

            if (!error) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", showSnackbar(error.message));

          case 7:
            history.push("/page-builder/editor/".concat(data.id));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [rev]);
  var editRevision = useCallback(function () {
    history.push("/page-builder/editor/".concat(rev.id));
  }, [rev]);
  var deleteRevision = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _yield$client$mutate2, res, error;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.mutate({
              mutation: DELETE_REVISION,
              variables: {
                id: rev.id
              },
              refetchQueries: ["PbListPages"],
              awaitRefetchQueries: true
            });

          case 2:
            _yield$client$mutate2 = _context2.sent;
            res = _yield$client$mutate2.data;
            error = res.pageBuilder.deleteRevision.error;

            if (!error) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", showSnackbar(error.message));

          case 7:
            if (rev.id === page.id) {
              history.push("/page-builder/pages");
            }

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })), [rev, page]);
  return {
    publishRevision: publishRevision,
    createRevision: createRevision,
    editRevision: editRevision,
    deleteRevision: deleteRevision
  };
}
//# sourceMappingURL=useRevisionHandlers.js.map