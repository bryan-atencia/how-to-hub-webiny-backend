import { css as _css } from "emotion";
import _get from "lodash/get";
import * as React from "react";
import { Form } from "@webiny/form";
import { Input } from "@webiny/ui/Input";
import { Typography } from "@webiny/ui/Typography";
import { Grid, Cell } from "@webiny/ui/Grid";
import { ButtonSecondary, ButtonPrimary } from "@webiny/ui/Button";
import { Select } from "@webiny/ui/Select";
import { TagsMultiAutocomplete } from "@webiny/app-page-builder/admin/components/TagsMultiAutocomplete";
import { CategoriesAutocomplete } from "@webiny/app-page-builder/admin/components/CategoriesAutocomplete";
import { Elevation } from "@webiny/ui/Elevation";
import { validation } from "@webiny/validation";
var menuPageFormStyle = {
  color: "var(--mdc-theme-on-surface)",
  backgroundColor: "var(--mdc-theme-background) !important"
};

var LinkForm = function LinkForm(_ref) {
  var data = _ref.data,
      onSubmit = _ref.onSubmit,
      onCancel = _ref.onCancel;
  return /*#__PURE__*/React.createElement(Elevation, {
    z: 4,
    className: _css(menuPageFormStyle)
  }, /*#__PURE__*/React.createElement(Form, {
    data: data,
    onSubmit: onSubmit
  }, function (_ref2) {
    var Bind = _ref2.Bind,
        submit = _ref2.submit;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, "Page list menu item"))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "title",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "Title"
    })))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "category",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(CategoriesAutocomplete, {
      label: "Category"
    })))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "sortBy",
      defaultValue: "publishedOn",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Select, {
      label: "Sort by..."
    }, /*#__PURE__*/React.createElement("option", {
      value: "publishedOn"
    }, "Published on"), /*#__PURE__*/React.createElement("option", {
      value: "title"
    }, "Title"))))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "sortDir",
      defaultValue: "-1",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Select, {
      label: "Sort direction..."
    }, /*#__PURE__*/React.createElement("option", {
      value: "1"
    }, "Ascending"), /*#__PURE__*/React.createElement("option", {
      value: "-1"
    }, "Descending"))))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "tags"
    }, /*#__PURE__*/React.createElement(TagsMultiAutocomplete, null)))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, _get(data, "tags.length", 0) > 0 && /*#__PURE__*/React.createElement(Bind, {
      name: "tagsRule",
      defaultValue: "ALL",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Select, {
      label: "Tags rule..."
    }, /*#__PURE__*/React.createElement("option", {
      value: "ALL"
    }, "Must include all tags"), /*#__PURE__*/React.createElement("option", {
      value: "ANY"
    }, "Must include any of the tags"))))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(ButtonSecondary, {
      onClick: onCancel
    }, "Cancel"), /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: submit,
      style: {
        float: "right"
      }
    }, "Save menu item"))));
  }));
};

export default LinkForm;
//# sourceMappingURL=PageListForm.js.map