import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _set from "lodash/set";
import _get from "lodash/get";
import * as React from "react";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Input } from "@webiny/ui/Input";
import { ButtonPrimary } from "@webiny/ui/Button";
import SingleImageUpload from "@webiny/app-admin/components/SingleImageUpload";
import { Query, Mutation } from "react-apollo";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import graphql from "./graphql";
import { CircularProgress } from "@webiny/ui/Progress";
import { validation } from "@webiny/validation";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";
import { DOMAIN_QUERY } from "@webiny/app-page-builder/admin/hooks/usePageBuilderSettings/usePageBuilderSettings";

var GeneralSettings = function GeneralSettings() {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  return /*#__PURE__*/React.createElement(Query, {
    query: graphql.query
  }, function (_ref) {
    var data = _ref.data,
        queryInProgress = _ref.loading;
    var settings = _get(data, "pageBuilder.getSettings.data") || {};
    return /*#__PURE__*/React.createElement(Mutation, {
      mutation: graphql.mutation,
      update: function update(cache, _ref2) {
        var data = _ref2.data;
        var dataFromCache = cache.readQuery({
          query: DOMAIN_QUERY
        });

        var updatedSettings = _get(data, "pageBuilder.updateSettings.data");

        if (updatedSettings) {
          cache.writeQuery({
            query: DOMAIN_QUERY,
            data: _set(dataFromCache, "pageBuilder.getSettings.data", updatedSettings)
          });
        }
      }
    }, function (update, _ref3) {
      var mutationInProgress = _ref3.loading;
      return /*#__PURE__*/React.createElement(Form, {
        data: settings,
        onSubmit: /*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return update({
                      variables: {
                        data: data
                      }
                    });

                  case 2:
                    showSnackbar("Settings updated successfully.");

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref4.apply(this, arguments);
          };
        }()
      }, function (_ref5) {
        var Bind = _ref5.Bind,
            form = _ref5.form;
        return /*#__PURE__*/React.createElement(SimpleForm, null, (queryInProgress || mutationInProgress) && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
          title: "General Settings"
        }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "name",
          validators: validation.create("required")
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Website name"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "domain"
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Domain",
          description: "eg. https://www.mysite.com"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "favicon"
        }, /*#__PURE__*/React.createElement(SingleImageUpload, {
          label: "Favicon",
          accept: ["image/png", "image/x-icon", "image/vnd.microsoft.icon"],
          description: /*#__PURE__*/React.createElement("span", null, "Supported file types:", " ", /*#__PURE__*/React.createElement("strong", null, ".png"), " ", "and", " ", /*#__PURE__*/React.createElement("strong", null, ".ico"), " .")
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "logo"
        }, /*#__PURE__*/React.createElement(SingleImageUpload, {
          label: "Logo"
        }))))), /*#__PURE__*/React.createElement(Cell, {
          span: 6
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "social.facebook",
          validators: validation.create("url")
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Facebook"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "social.twitter",
          validators: validation.create("url")
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Twitter"
        }))), /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "social.instagram",
          validators: validation.create("url")
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Instagram"
        }))))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
          onClick: form.submit
        }, "Save")));
      });
    });
  });
};

export default GeneralSettings;
//# sourceMappingURL=GeneralSettings.js.map