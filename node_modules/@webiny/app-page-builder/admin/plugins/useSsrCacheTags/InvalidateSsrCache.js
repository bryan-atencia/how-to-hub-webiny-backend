import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from "react";
import { Icon } from "@webiny/ui/Icon";
import { ReactComponent as RefreshIcon } from "@svgr/webpack!@webiny/app-page-builder/admin/assets/baseline-autorenew-24px.svg";
import { ListItemGraphic } from "@webiny/ui/List";
import { MenuItem } from "@webiny/ui/Menu";
import { Mutation } from "react-apollo";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import classNames from "classnames";
import { INVALIDATE_SSR_CACHE } from "./graphql";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";

var InvalidateSsrCache = function InvalidateSsrCache(props) {
  var page = props.pageDetails.page;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useConfirmationDialo = useConfirmationDialog({
    title: "Invalidate cache",
    message: /*#__PURE__*/React.createElement("span", null, "You're about to invalidate the cache for ", /*#__PURE__*/React.createElement("strong", null, page.title), " page, are you sure you want to continue?", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Note that sometimes the cache invalidation process may take up to 10 minutes.")
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  return /*#__PURE__*/React.createElement(Mutation, {
    mutation: INVALIDATE_SSR_CACHE
  }, function (update) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      className: classNames({
        disabled: !page.published
      }),
      onClick: function onClick() {
        showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var response, error;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return update({
                    variables: {
                      revision: page.id,
                      refresh: true
                    }
                  });

                case 2:
                  response = _context.sent;
                  error = response.data.pageBuilder.invalidateSsrCache.error;

                  if (error) {
                    showSnackbar(error.message);
                  } else {
                    showSnackbar("Cache invalidated successfully!");

                    if (!page.published) {
                      props.refreshPages();
                    }
                  }

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(RefreshIcon, null)
    })), "Invalidate cache");
  });
};

export default InvalidateSsrCache;
//# sourceMappingURL=InvalidateSsrCache.js.map