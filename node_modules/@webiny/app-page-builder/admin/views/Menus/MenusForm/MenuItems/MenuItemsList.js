import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import SortableTree from "react-sortable-tree";
import { getPlugins } from "@webiny/plugins";
import MenuItemRenderer from "./MenuItemRenderer";
import { Typography } from "@webiny/ui/Typography";
import styled from "@emotion/styled";
var TreeWrapper = /*#__PURE__*/styled("div", {
  target: "e1g2oxaz0",
  label: "TreeWrapper"
})({
  width: "100%",
  height: 400,
  ".rst__lineHalfHorizontalRight::before, .rst__lineFullVertical::after, .rst__lineHalfVerticalTop::after, .rst__lineHalfVerticalBottom::after, .rst__lineChildren::after": {
    backgroundColor: "var(--mdc-theme-on-surface)"
  }
});
var EmptyTree = /*#__PURE__*/styled("div", {
  target: "e1g2oxaz1",
  label: "EmptyTree"
})({
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  color: "var(--mdc-theme-on-surface)"
});

var MenuItemsList = /*#__PURE__*/function (_React$Component) {
  _inherits(MenuItemsList, _React$Component);

  var _super = _createSuper(MenuItemsList);

  function MenuItemsList() {
    _classCallCheck(this, MenuItemsList);

    return _super.apply(this, arguments);
  }

  _createClass(MenuItemsList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          items = _this$props.items,
          onChange = _this$props.onChange,
          editItem = _this$props.editItem,
          deleteItem = _this$props.deleteItem;
      var data = Array.isArray(items) ? _toConsumableArray(items) : [];
      var dom = /*#__PURE__*/React.createElement(EmptyTree, null, /*#__PURE__*/React.createElement(Typography, {
        use: "overline"
      }, "There are no menu items to display"));

      if (data.length > 0) {
        dom = /*#__PURE__*/React.createElement(SortableTree, {
          treeData: data,
          onChange: onChange,
          canNodeHaveChildren: MenuItemsList.canHaveChildren,
          nodeContentRenderer: MenuItemRenderer,
          rowHeight: 80,
          generateNodeProps: function generateNodeProps() {
            return {
              editItem: editItem,
              deleteItem: deleteItem
            };
          },
          getNodeKey: function getNodeKey(_ref) {
            var node = _ref.node;
            return node.id;
          }
        });
      }

      return /*#__PURE__*/React.createElement(TreeWrapper, null, dom);
    }
  }], [{
    key: "canHaveChildren",
    value: function canHaveChildren(node) {
      var plugins = getPlugins("pb-menu-item");
      var plugin = plugins.find(function (pl) {
        return pl.menuItem.type === node.type;
      });
      return plugin ? plugin.menuItem.canHaveChildren : false;
    }
  }]);

  return MenuItemsList;
}(React.Component);

export default MenuItemsList;
//# sourceMappingURL=MenuItemsList.js.map