import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _isNull from "lodash/isNull";
import _omitBy from "lodash/omitBy";
import _omit from "lodash/omit";
import uniqid from "uniqid";
import { useHandlers } from "@webiny/app/hooks/useHandlers";
import { getPlugins } from "@webiny/plugins";
import findObject from "./findObject";

var MenuItemForm = function MenuItemForm(props) {
  var _useHandlers = useHandlers(props, {
    onCancel: function onCancel(_ref) {
      var editItem = _ref.editItem,
          currentMenuItem = _ref.currentMenuItem,
          deleteItem = _ref.deleteItem;
      return function () {
        if (currentMenuItem.__new) {
          deleteItem(currentMenuItem);
        } else {
          editItem(null);
        }
      };
    },
    onSubmit: function onSubmit(_ref2) {
      var items = _ref2.items,
          onChange = _ref2.onChange,
          editItem = _ref2.editItem;
      return function (data) {
        var item = _omit(_omitBy(data, _isNull), ["__new"]);

        if (item.id) {
          var target = findObject(items, item.id);

          if (target) {
            target.source[target.index] = item;
            onChange(_toConsumableArray(items));
          }
        } else {
          item.id = uniqid();
          onChange([].concat(_toConsumableArray(items), [item]));
        }

        editItem(null);
      };
    }
  }),
      onCancel = _useHandlers.onCancel,
      onSubmit = _useHandlers.onSubmit;

  var currentMenuItem = props.currentMenuItem;
  var plugins = getPlugins("pb-menu-item");
  var plugin = plugins.find(function (pl) {
    return pl.menuItem.type === currentMenuItem.type;
  });

  if (!plugin) {
    return null;
  }

  return plugin.menuItem.renderForm({
    onSubmit: onSubmit,
    onCancel: onCancel,
    data: currentMenuItem
  });
};

export default MenuItemForm;
//# sourceMappingURL=MenuItemForm.js.map