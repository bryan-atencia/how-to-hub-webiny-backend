import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { isDescendant } from "react-sortable-tree";
import classnames from "classnames";
import { getPlugins } from "@webiny/plugins";
import { IconButton } from "@webiny/ui/Button";
import { Typography } from "@webiny/ui/Typography";
import { Icon } from "@webiny/ui/Icon";
import "react-sortable-tree/style.css";
import { rowHandle, fieldContainer, Row, RowContainer } from "./Styled";
import { ReactComponent as EditIcon } from "@svgr/webpack!./icons/round-edit-24px.svg";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!./icons/round-delete-24px.svg";
import { ReactComponent as HandleIcon } from "@svgr/webpack!./icons/round-drag_indicator-24px.svg";

var NodeRendererDefault = /*#__PURE__*/function (_React$Component) {
  _inherits(NodeRendererDefault, _React$Component);

  var _super = _createSuper(NodeRendererDefault);

  function NodeRendererDefault() {
    _classCallCheck(this, NodeRendererDefault);

    return _super.apply(this, arguments);
  }

  _createClass(NodeRendererDefault, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          scaffoldBlockPxWidth = _this$props.scaffoldBlockPxWidth,
          toggleChildrenVisibility = _this$props.toggleChildrenVisibility,
          connectDragPreview = _this$props.connectDragPreview,
          connectDragSource = _this$props.connectDragSource,
          isDragging = _this$props.isDragging,
          canDrop = _this$props.canDrop,
          canDrag = _this$props.canDrag,
          node = _this$props.node,
          title = _this$props.title,
          draggedNode = _this$props.draggedNode,
          path = _this$props.path,
          treeIndex = _this$props.treeIndex,
          editItem = _this$props.editItem,
          deleteItem = _this$props.deleteItem,
          className = _this$props.className,
          style = _this$props.style,
          didDrop = _this$props.didDrop;
      var nodeTitle = title || node.title;
      var plugins = getPlugins("pb-menu-item");
      var plugin = plugins.find(function (pl) {
        return pl.menuItem.type === node.type;
      });

      if (!plugin) {
        return null;
      }

      var handle = connectDragSource( /*#__PURE__*/React.createElement("div", {
        className: rowHandle
      }, /*#__PURE__*/React.createElement(Icon, {
        icon: /*#__PURE__*/React.createElement(HandleIcon, null)
      })), {
        dropEffect: "copy"
      });
      var isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);
      var isLandingPadActive = !didDrop && isDragging;
      var buttonStyle = {
        left: -0.5 * scaffoldBlockPxWidth
      };
      return /*#__PURE__*/React.createElement("div", {
        style: {
          height: "100%"
        },
        "data-testid": "pb-menu-item-render-".concat(nodeTitle)
      }, toggleChildrenVisibility && node.children && (node.children.length > 0 || typeof node.children === "function") && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
        type: "button",
        "aria-label": node.expanded ? "Collapse" : "Expand",
        className: classnames(node.expanded ? "rst__collapseButton" : "rst__expandButton"),
        style: buttonStyle,
        onClick: function onClick() {
          return toggleChildrenVisibility({
            node: node,
            path: path,
            treeIndex: treeIndex
          });
        }
      }), node.expanded && !isDragging && /*#__PURE__*/React.createElement("div", {
        style: {
          width: scaffoldBlockPxWidth
        },
        className: classnames("rst__lineChildren")
      })), /*#__PURE__*/React.createElement(RowContainer, {
        className: "rst__rowWrapper"
      }, connectDragPreview( /*#__PURE__*/React.createElement("div", null, handle, /*#__PURE__*/React.createElement(Row, {
        className: classnames("rst__row", isLandingPadActive && "rst__rowLandingPad", isLandingPadActive && !canDrop && "rst__rowCancelPad", className),
        style: _objectSpread({
          opacity: isDraggedDescendant ? 0.5 : 1
        }, style)
      }, /*#__PURE__*/React.createElement("div", {
        className: classnames(fieldContainer, !canDrag && "rst__rowContentsDragDisabled")
      }, /*#__PURE__*/React.createElement("div", {
        className: classnames("rst__rowLabel")
      }, /*#__PURE__*/React.createElement("span", {
        className: classnames("rst__rowTitle", node.subtitle && "rst__rowTitleWithSubtitle")
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "overline"
      }, nodeTitle))), /*#__PURE__*/React.createElement("div", {
        className: "rst__rowToolbar"
      }, /*#__PURE__*/React.createElement(IconButton, {
        "data-testid": "pb-edit-icon-button",
        icon: /*#__PURE__*/React.createElement(EditIcon, null),
        onClick: function onClick() {
          return editItem(node);
        }
      }), /*#__PURE__*/React.createElement(IconButton, {
        "data-testid": "pb-delete-icon-button",
        icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
        onClick: function onClick() {
          return deleteItem(node);
        }
      }))))))));
    }
  }]);

  return NodeRendererDefault;
}(React.Component);

_defineProperty(NodeRendererDefault, "defaultProps", {
  canDrag: false,
  toggleChildrenVisibility: null,
  buttons: [],
  className: "",
  style: {},
  parentNode: null,
  draggedNode: null,
  canDrop: false,
  title: null,
  subtitle: null
});

export default NodeRendererDefault;
//# sourceMappingURL=MenuItemRenderer.js.map