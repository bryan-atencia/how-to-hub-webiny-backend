{"version":3,"sources":["../../../../../../src/admin/views/Menus/MenusForm/MenuItems/MenuItemRenderer.tsx"],"names":["React","isDescendant","classnames","getPlugins","IconButton","Typography","Icon","rowHandle","fieldContainer","Row","RowContainer","NodeRendererDefault","props","scaffoldBlockPxWidth","toggleChildrenVisibility","connectDragPreview","connectDragSource","isDragging","canDrop","canDrag","node","title","draggedNode","path","treeIndex","editItem","deleteItem","className","style","didDrop","nodeTitle","plugins","plugin","find","pl","menuItem","type","handle","dropEffect","isDraggedDescendant","isLandingPadActive","buttonStyle","left","height","children","length","expanded","width","opacity","subtitle","Component","buttons","parentNode"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { isDescendant } from \"react-sortable-tree\";\nimport classnames from \"classnames\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport \"react-sortable-tree/style.css\";\nimport { rowHandle, fieldContainer, Row, RowContainer } from \"./Styled\";\n\nimport { ReactComponent as EditIcon } from \"./icons/round-edit-24px.svg\";\nimport { ReactComponent as DeleteIcon } from \"./icons/round-delete-24px.svg\";\nimport { ReactComponent as HandleIcon } from \"./icons/round-drag_indicator-24px.svg\";\nimport { PbMenuItemPlugin } from \"@webiny/app-page-builder/types\";\n\nclass NodeRendererDefault extends React.Component<any> {\n    static defaultProps = {\n        canDrag: false,\n        toggleChildrenVisibility: null,\n        buttons: [],\n        className: \"\",\n        style: {},\n        parentNode: null,\n        draggedNode: null,\n        canDrop: false,\n        title: null,\n        subtitle: null\n    };\n\n    render() {\n        const {\n            scaffoldBlockPxWidth,\n            toggleChildrenVisibility,\n            connectDragPreview,\n            connectDragSource,\n            isDragging,\n            canDrop,\n            canDrag,\n            node,\n            title,\n            draggedNode,\n            path,\n            treeIndex,\n            editItem,\n            deleteItem,\n            className,\n            style,\n            didDrop\n        } = this.props;\n\n        const nodeTitle = title || node.title;\n\n        const plugins = getPlugins<PbMenuItemPlugin>(\"pb-menu-item\");\n        const plugin = plugins.find(pl => pl.menuItem.type === node.type);\n        if (!plugin) {\n            return null;\n        }\n\n        const handle = connectDragSource(\n            <div className={rowHandle}>\n                <Icon icon={<HandleIcon />} />\n            </div>,\n            {\n                dropEffect: \"copy\"\n            }\n        );\n\n        const isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);\n        const isLandingPadActive = !didDrop && isDragging;\n\n        const buttonStyle = { left: -0.5 * scaffoldBlockPxWidth };\n\n        return (\n            <div style={{ height: \"100%\" }} data-testid={`pb-menu-item-render-${nodeTitle}`}>\n                {toggleChildrenVisibility &&\n                    node.children &&\n                    (node.children.length > 0 || typeof node.children === \"function\") && (\n                        <div>\n                            <button\n                                type=\"button\"\n                                aria-label={node.expanded ? \"Collapse\" : \"Expand\"}\n                                className={classnames(\n                                    node.expanded ? \"rst__collapseButton\" : \"rst__expandButton\"\n                                )}\n                                style={buttonStyle}\n                                onClick={() =>\n                                    toggleChildrenVisibility({\n                                        node,\n                                        path,\n                                        treeIndex\n                                    })\n                                }\n                            />\n\n                            {node.expanded && !isDragging && (\n                                <div\n                                    style={{ width: scaffoldBlockPxWidth }}\n                                    className={classnames(\"rst__lineChildren\")}\n                                />\n                            )}\n                        </div>\n                    )}\n\n                <RowContainer className={\"rst__rowWrapper\"}>\n                    {/* Set the row preview to be used during drag and drop */}\n                    {connectDragPreview(\n                        <div>\n                            {handle}\n                            <Row\n                                className={classnames(\n                                    \"rst__row\",\n                                    isLandingPadActive && \"rst__rowLandingPad\",\n                                    isLandingPadActive && !canDrop && \"rst__rowCancelPad\",\n                                    className\n                                )}\n                                style={{\n                                    opacity: isDraggedDescendant ? 0.5 : 1,\n                                    ...style\n                                }}\n                            >\n                                <div\n                                    className={classnames(\n                                        fieldContainer,\n                                        !canDrag && \"rst__rowContentsDragDisabled\"\n                                    )}\n                                >\n                                    <div className={classnames(\"rst__rowLabel\")}>\n                                        <span\n                                            className={classnames(\n                                                \"rst__rowTitle\",\n                                                node.subtitle && \"rst__rowTitleWithSubtitle\"\n                                            )}\n                                        >\n                                            <Typography use={\"overline\"}>{nodeTitle}</Typography>\n                                        </span>\n                                    </div>\n\n                                    <div className=\"rst__rowToolbar\">\n                                        <IconButton\n                                            data-testid={\"pb-edit-icon-button\"}\n                                            icon={<EditIcon />}\n                                            onClick={() => editItem(node)}\n                                        />\n                                        <IconButton\n                                            data-testid={\"pb-delete-icon-button\"}\n                                            icon={<DeleteIcon />}\n                                            onClick={() => deleteItem(node)}\n                                        />\n                                    </div>\n                                </div>\n                            </Row>\n                        </div>\n                    )}\n                </RowContainer>\n            </div>\n        );\n    }\n}\n\nexport default NodeRendererDefault;\n"],"file":"MenuItemRenderer.js"}