import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React, { useCallback } from "react";
import { useApolloClient } from "react-apollo";
import { SplitView, LeftPanel, RightPanel } from "@webiny/app-admin/components/SplitView";
import { FloatingActionButton } from "@webiny/app-admin/components/FloatingActionButton";
import { CrudProvider } from "@webiny/app-admin/contexts/Crud";
import CategoriesDataList from "./CategoriesDataList";
import CategoriesForm from "./CategoriesForm";
import { READ_CATEGORY, LIST_CATEGORIES, LIST_CATEGORIES_BY_NAME, CREATE_CATEGORY, UPDATE_CATEGORY, DELETE_CATEGORY } from "./graphql";

var Categories = function Categories() {
  var client = useApolloClient();
  var onCompleted = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.query({
              query: LIST_CATEGORIES_BY_NAME,
              fetchPolicy: "network-only"
            });

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), []);
  return /*#__PURE__*/React.createElement(CrudProvider, {
    delete: {
      mutation: DELETE_CATEGORY,
      options: {
        onCompleted: onCompleted
      }
    },
    read: READ_CATEGORY,
    create: {
      mutation: CREATE_CATEGORY,
      options: {
        onCompleted: onCompleted
      }
    },
    update: {
      mutation: UPDATE_CATEGORY,
      options: {
        onCompleted: onCompleted
      }
    },
    list: {
      query: LIST_CATEGORIES,
      variables: {
        sort: {
          savedOn: -1
        }
      }
    }
  }, function (_ref2) {
    var actions = _ref2.actions;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SplitView, null, /*#__PURE__*/React.createElement(LeftPanel, null, /*#__PURE__*/React.createElement(CategoriesDataList, null)), /*#__PURE__*/React.createElement(RightPanel, null, /*#__PURE__*/React.createElement(CategoriesForm, null))), /*#__PURE__*/React.createElement(FloatingActionButton, {
      onClick: actions.resetForm
    }));
  });
};

export default Categories;
//# sourceMappingURL=Categories.js.map