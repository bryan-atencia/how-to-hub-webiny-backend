import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useCallback } from "react";
import { useApolloClient } from "react-apollo";
import { useRouter } from "@webiny/react-router";
import { useHandler } from "@webiny/app/hooks/useHandler";
import { SplitView, LeftPanel, RightPanel } from "@webiny/app-admin/components/SplitView";
import { FloatingActionButton } from "@webiny/app-admin/components/FloatingActionButton";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CREATE_PAGE, LIST_PAGES } from "@webiny/app-page-builder/admin/graphql/pages";
import { useDataList } from "@webiny/app/hooks/useDataList";
import { CircularProgress } from "@webiny/ui/Progress";
import PagesDataList from "./PagesDataList";
import PageDetails from "./PageDetails";
import CategoriesDialog from "../Categories/CategoriesDialog";

var Pages = function Pages(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      creatingPage = _useState2[0],
      setCreatingPage = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showCategoriesDialog = _useState4[0],
      setCategoriesDialog = _useState4[1];

  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var dataList = useDataList({
    query: LIST_PAGES,
    variables: {
      sort: {
        savedOn: -1
      }
    }
  });
  var openDialog = useCallback(function () {
    return setCategoriesDialog(true);
  }, []);
  var closeDialog = useCallback(function () {
    return setCategoriesDialog(false);
  }, []);
  var createPageMutation = useHandler(props, function () {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(category) {
        var res, data;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                setCreatingPage(true);
                _context.next = 4;
                return client.mutate({
                  mutation: CREATE_PAGE,
                  variables: {
                    category: category
                  },
                  refetchQueries: ["PbListPages"],
                  awaitRefetchQueries: true
                });

              case 4:
                res = _context.sent;
                setCreatingPage(false);
                closeDialog();
                data = res.data.pageBuilder.page.data;
                history.push("/page-builder/editor/".concat(data.id));
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](0);
                showSnackbar(_context.t0.message);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 11]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  });
  var onSelect = useCallback(function (category) {
    createPageMutation(category.id);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CategoriesDialog, {
    open: showCategoriesDialog,
    onClose: closeDialog,
    onSelect: onSelect
  }, creatingPage && /*#__PURE__*/React.createElement(CircularProgress, {
    label: "Creating page..."
  })), /*#__PURE__*/React.createElement(SplitView, null, /*#__PURE__*/React.createElement(LeftPanel, {
    span: 4
  }, /*#__PURE__*/React.createElement(PagesDataList, {
    dataList: dataList
  })), /*#__PURE__*/React.createElement(RightPanel, {
    span: 8
  }, /*#__PURE__*/React.createElement(PageDetails, {
    refreshPages: dataList.refresh
  }))), /*#__PURE__*/React.createElement(FloatingActionButton, {
    "data-testid": "new-record-button",
    onClick: openDialog
  }));
};

export default Pages;
//# sourceMappingURL=Pages.js.map