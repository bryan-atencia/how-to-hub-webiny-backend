import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _get from "lodash/get";
import React, { useCallback } from "react";
import { Provider } from "react-redux";
import { useRouter } from "@webiny/react-router";
import { Query, useApolloClient } from "react-apollo";
import { Editor as PbEditor } from "@webiny/app-page-builder/editor";
import { createElement } from "@webiny/app-page-builder/editor/utils";
import { redux } from "@webiny/app-page-builder/editor/redux";
import { SETUP_EDITOR } from "@webiny/app-page-builder/editor/actions";
import { GET_PAGE } from "@webiny/app-page-builder/admin/graphql/pages";
import { useSavedElements } from "@webiny/app-page-builder/admin/hooks/useSavedElements";
import Snackbar from "@webiny/app-admin/plugins/Snackbar/Snackbar";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Typography } from "@webiny/ui/Typography";
import { LoadingEditor, LoadingTitle } from "./EditorStyled.js";
import editorMock from "@webiny/app-page-builder/admin/assets/editor-mock.png";

var getEmptyData = function getEmptyData() {
  var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var revisions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    ui: {
      activeElement: null,
      dragging: false,
      highlightElement: null,
      plugins: {},
      resizing: false
    },
    tmp: {},
    page: page,
    revisions: revisions
  };
};

var pageSet = null;

var Editor = function Editor() {
  var client = useApolloClient();

  var _useRouter = useRouter(),
      match = _useRouter.match,
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var ready = useSavedElements();
  var params = match.params;
  var renderEditor = useCallback(function (_ref) {
    var data = _ref.data,
        loading = _ref.loading;

    if (loading || !ready) {
      return /*#__PURE__*/React.createElement(LoadingEditor, null, /*#__PURE__*/React.createElement("img", {
        src: editorMock
      }), /*#__PURE__*/React.createElement(LoadingTitle, null, /*#__PURE__*/React.createElement(Typography, {
        tag: "div",
        use: "headline6"
      }, "Loading Editor", /*#__PURE__*/React.createElement("span", null, "."), /*#__PURE__*/React.createElement("span", null, "."), /*#__PURE__*/React.createElement("span", null, "."))));
    }

    if (!_get(data, "pageBuilder.page.data")) {
      return null;
    }

    if (!redux.store) {
      redux.initStore({}, {
        client: client
      });
    }

    if (!loading) {
      var _data$pageBuilder$pag = data.pageBuilder.page.data,
          revisions = _data$pageBuilder$pag.revisions,
          page = _objectWithoutProperties(_data$pageBuilder$pag, ["revisions"]);

      if (!page.content) {
        page.content = createElement("document");
      }

      if (pageSet !== page.id) {
        pageSet = page.id;
        redux.store.dispatch({
          type: SETUP_EDITOR,
          payload: getEmptyData(page, revisions)
        });
        redux.store.dispatch({
          type: "@@redux-undo/INIT"
        });
      }
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Provider, {
      store: redux.store
    }, /*#__PURE__*/React.createElement(PbEditor, null)), /*#__PURE__*/React.createElement("div", {
      style: {
        zIndex: 10,
        position: "absolute"
      }
    }, /*#__PURE__*/React.createElement(Snackbar, null)));
  }, [ready]);
  return /*#__PURE__*/React.createElement(Query, {
    query: GET_PAGE(),
    variables: {
      id: params.id
    },
    onCompleted: function onCompleted(data) {
      var error = _get(data, "pageBuilder.page.error.message");

      if (error) {
        history.push("/page-builder/pages");
        showSnackbar(error);
      }
    }
  }, renderEditor);
};

export default Editor;
//# sourceMappingURL=Editor.js.map