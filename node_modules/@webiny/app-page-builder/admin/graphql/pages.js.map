{"version":3,"sources":["../../../src/admin/graphql/pages.ts"],"names":["gql","getPlugins","error","sharedFields","CREATE_PAGE","LIST_PAGES","GET_PAGE","map","pl","fields","join","CREATE_REVISION_FORM","PUBLISH_REVISION","DELETE_REVISION","DELETE_PAGE","elementFields","LIST_ELEMENTS","CREATE_ELEMENT","UPDATE_ELEMENT"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAGA,IAAMC,KAAK,wCAAX;AAMA,IAAMC,YAAY,yJAAlB;AAcA,OAAO,IAAMC,WAAW,GAAGJ,GAAH,oBAONE,KAPM,CAAjB;AAaP,OAAO,IAAMG,UAAU,GAAGL,GAAH,qBAKDG,YALC,CAAhB;AA6BP,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAMN,GAAN,qBAKFG,YALE,EAUEF,UAAU,CAAC,yBAAD,CAAV,CACGM,GADH,CACO,UAACC,EAAD;AAAA,WAAoCA,EAAE,CAACC,MAAvC;AAAA,GADP,EAEGC,IAFH,CAEQ,IAFR,CAVF,EAoBEP,YApBF,EAuBND,KAvBM;AAAA,CAAjB;AA6BP,OAAO,IAAMS,oBAAoB,GAAGX,GAAH,qBAOfE,KAPe,CAA1B;AAaP,OAAO,IAAMU,gBAAgB,GAAGZ,GAAH,qBAKPG,YALO,EAOXD,KAPW,CAAtB;AAaP,OAAO,IAAMW,eAAe,GAAGb,GAAH,qBAKVE,KALU,CAArB;AAWP,OAAO,IAAMY,WAAW,GAAGd,GAAH,qBAKNE,KALM,CAAjB;AAWP,IAAMa,aAAa;AAAG;AAAH,4GAAnB;AAYA,OAAO,IAAMC,aAAa,GAAGhB,GAAH,qBAKJe,aALI,CAAnB;AAYP,OAAO,IAAME,cAAc,GAAGjB,GAAH,qBAKLe,aALK,EAOTb,KAPS,CAApB;AAaP,OAAO,IAAMgB,cAAc,GAAGlB,GAAH,sBAKLe,aALK,EAOTb,KAPS,CAApB","sourcesContent":["import gql from \"graphql-tag\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { PbEditorPageSettingsPlugin } from \"@webiny/app-page-builder/types\";\n\nconst error = `\nerror {\n    code\n    message\n}`;\n\nconst sharedFields = `\n    id\n    title\n    url\n    version\n    parent\n    published\n    isHomePage\n    isErrorPage\n    isNotFoundPage\n    locked\n    savedOn\n`;\n\nexport const CREATE_PAGE = gql`\n    mutation PbCreatePage($category: ID!) {\n        pageBuilder {\n            page: createPage(data: { category: $category }) {\n                data {\n                    id\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const LIST_PAGES = gql`\n    query PbListPages($sort: JSON, $search: String, $limit: Int, $after: String, $before: String) {\n        pageBuilder {\n            pages: listPages(sort: $sort, search: $search, limit: $limit, after: $after, before: $before) {\n                data {\n                    ${sharedFields}\n                    category {\n                        id\n                        name\n                    }\n                    createdBy {\n                        firstName\n                        lastName\n                    }\n                }\n                meta {\n                    cursors {\n                        next\n                        previous\n                    }\n                    hasNextPage\n                    hasPreviousPage\n                    totalCount\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_PAGE = () => gql`\n    query PbGetPage($id: ID!) {\n        pageBuilder {\n            page: getPage(id: $id) {\n                data {\n                    ${sharedFields}\n                    snippet\n                    content\n                    settings {\n                        _empty\n                        ${getPlugins(\"pb-editor-page-settings\")\n                            .map((pl: PbEditorPageSettingsPlugin) => pl.fields)\n                            .join(\"\\n\")}\n                    }\n                    category {\n                        id\n                        name\n                        url\n                    }\n                    revisions {\n                        ${sharedFields}\n                    }\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const CREATE_REVISION_FORM = gql`\n    mutation PbCreateRevisionFrom($revision: ID!) {\n        pageBuilder {\n            revision: createRevisionFrom(revision: $revision) {\n                data {\n                    id\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const PUBLISH_REVISION = gql`\n    mutation PbPublishRevision($id: ID!) {\n        pageBuilder {\n            publishRevision(id: $id) {\n                data {\n                    ${sharedFields}\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const DELETE_REVISION = gql`\n    mutation PbDeleteRevision($id: ID!) {\n        pageBuilder {\n            deleteRevision(id: $id) {\n                data\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const DELETE_PAGE = gql`\n    mutation PbDeletePage($id: ID!) {\n        pageBuilder {\n            deletePage(id: $id) {\n                data\n                ${error}\n            }\n        }\n    }\n`;\n\nconst elementFields = /*GraphQL*/ `\n    id\n    name\n    type\n    category\n    content\n    preview {\n        src\n        meta\n    }\n`;\n\nexport const LIST_ELEMENTS = gql`\n    query PbListElements {\n        pageBuilder {\n            elements: listElements(limit: 1000) {\n                data {\n                    ${elementFields}\n                }\n            }\n        }\n    }\n`;\n\nexport const CREATE_ELEMENT = gql`\n    mutation PbCreateElement($data: PbElementInput!) {\n        pageBuilder {\n            element: createElement(data: $data) {\n                data {\n                    ${elementFields}\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const UPDATE_ELEMENT = gql`\n    mutation PbUpdateElement($id: ID!, $data: PbUpdateElementInput!) {\n        pageBuilder {\n            element: updateElement(id: $id, data: $data) {\n                data {\n                    ${elementFields}\n                }\n                ${error}\n            }\n        }\n    }\n`;\n"],"file":"pages.js"}