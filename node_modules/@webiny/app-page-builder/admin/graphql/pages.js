import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject10() {
  var data = _taggedTemplateLiteral(["\n    mutation PbUpdateElement($id: ID!, $data: PbUpdateElementInput!) {\n        pageBuilder {\n            element: updateElement(id: $id, data: $data) {\n                data {\n                    ", "\n                }\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["\n    mutation PbCreateElement($data: PbElementInput!) {\n        pageBuilder {\n            element: createElement(data: $data) {\n                data {\n                    ", "\n                }\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["\n    query PbListElements {\n        pageBuilder {\n            elements: listElements(limit: 1000) {\n                data {\n                    ", "\n                }\n            }\n        }\n    }\n"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n    mutation PbDeletePage($id: ID!) {\n        pageBuilder {\n            deletePage(id: $id) {\n                data\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n    mutation PbDeleteRevision($id: ID!) {\n        pageBuilder {\n            deleteRevision(id: $id) {\n                data\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n    mutation PbPublishRevision($id: ID!) {\n        pageBuilder {\n            publishRevision(id: $id) {\n                data {\n                    ", "\n                }\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n    mutation PbCreateRevisionFrom($revision: ID!) {\n        pageBuilder {\n            revision: createRevisionFrom(revision: $revision) {\n                data {\n                    id\n                }\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    query PbGetPage($id: ID!) {\n        pageBuilder {\n            page: getPage(id: $id) {\n                data {\n                    ", "\n                    snippet\n                    content\n                    settings {\n                        _empty\n                        ", "\n                    }\n                    category {\n                        id\n                        name\n                        url\n                    }\n                    revisions {\n                        ", "\n                    }\n                }\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    query PbListPages($sort: JSON, $search: String, $limit: Int, $after: String, $before: String) {\n        pageBuilder {\n            pages: listPages(sort: $sort, search: $search, limit: $limit, after: $after, before: $before) {\n                data {\n                    ", "\n                    category {\n                        id\n                        name\n                    }\n                    createdBy {\n                        firstName\n                        lastName\n                    }\n                }\n                meta {\n                    cursors {\n                        next\n                        previous\n                    }\n                    hasNextPage\n                    hasPreviousPage\n                    totalCount\n                }\n            }\n        }\n    }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    mutation PbCreatePage($category: ID!) {\n        pageBuilder {\n            page: createPage(data: { category: $category }) {\n                data {\n                    id\n                }\n                ", "\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import gql from "graphql-tag";
import { getPlugins } from "@webiny/plugins";
var error = "\nerror {\n    code\n    message\n}";
var sharedFields = "\n    id\n    title\n    url\n    version\n    parent\n    published\n    isHomePage\n    isErrorPage\n    isNotFoundPage\n    locked\n    savedOn\n";
export var CREATE_PAGE = gql(_templateObject(), error);
export var LIST_PAGES = gql(_templateObject2(), sharedFields);
export var GET_PAGE = function GET_PAGE() {
  return gql(_templateObject3(), sharedFields, getPlugins("pb-editor-page-settings").map(function (pl) {
    return pl.fields;
  }).join("\n"), sharedFields, error);
};
export var CREATE_REVISION_FORM = gql(_templateObject4(), error);
export var PUBLISH_REVISION = gql(_templateObject5(), sharedFields, error);
export var DELETE_REVISION = gql(_templateObject6(), error);
export var DELETE_PAGE = gql(_templateObject7(), error);
var elementFields =
/*GraphQL*/
"\n    id\n    name\n    type\n    category\n    content\n    preview {\n        src\n        meta\n    }\n";
export var LIST_ELEMENTS = gql(_templateObject8(), elementFields);
export var CREATE_ELEMENT = gql(_templateObject9(), elementFields, error);
export var UPDATE_ELEMENT = gql(_templateObject10(), elementFields, error);
//# sourceMappingURL=pages.js.map