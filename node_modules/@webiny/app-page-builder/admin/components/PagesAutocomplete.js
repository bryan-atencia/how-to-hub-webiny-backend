import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    query listPublishedPages($search: String) {\n        pageBuilder {\n            pages: listPublishedPages(search: $search) {\n                data {\n                    parent\n                    published\n                    title\n                }\n            }\n        }\n    }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    query getPublishedPage($parent: ID) {\n        pageBuilder {\n            page: getPublishedPage(parent: $parent) {\n                data {\n                    parent\n                    published\n                    title\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import * as React from "react";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import gql from "graphql-tag";
import { Query } from "react-apollo";
import { useAutocomplete } from "@webiny/app/hooks/useAutocomplete"; // We utilize the same "listPages" GraphQL field.

var GET_PAGE = gql(_templateObject());
var LIST_PUBLISHED_PAGES = gql(_templateObject2());
export function PagesAutocomplete(props) {
  var autoComplete = useAutocomplete(LIST_PUBLISHED_PAGES);
  return /*#__PURE__*/React.createElement(Query, {
    skip: !props.value,
    variables: {
      parent: props.value
    },
    query: GET_PAGE
  }, function (_ref) {
    var data = _ref.data;

    var value = _get(data, "pageBuilder.page.data");

    return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, props, autoComplete, {
      valueProp: "parent",
      textProp: "title",
      value: value
    }));
  });
}
//# sourceMappingURL=PagesAutocomplete.js.map