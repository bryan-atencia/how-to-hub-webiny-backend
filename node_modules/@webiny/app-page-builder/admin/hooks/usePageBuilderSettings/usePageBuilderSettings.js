import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    query PbGetDomain {\n        pageBuilder {\n            getSettings {\n                id\n                data {\n                    domain\n                }\n            }\n        }\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import { useCallback } from "react";
import { useQuery } from "react-apollo";
import gql from "graphql-tag";
import getPagePreviewUrlFunction from "./getPagePreviewUrl";
export var DOMAIN_QUERY = gql(_templateObject());
export function usePageBuilderSettings() {
  var _useQuery = useQuery(DOMAIN_QUERY),
      data = _useQuery.data,
      loading = _useQuery.loading;

  var getDomain = function getDomain() {
    return _get(data, "pageBuilder.getSettings.data.domain");
  };

  var getPageUrl = useCallback(function (page) {
    if (loading) {
      return null;
    }

    return getDomain() + page.url;
  }, [data, loading]);
  var getPagePreviewUrl = useCallback(function (page) {
    if (loading) {
      return null;
    }

    return getPagePreviewUrlFunction({
      page: page,
      domain: getDomain()
    });
  }, [data, loading]);
  return {
    getDomain: getDomain,
    getPageUrl: getPageUrl,
    getPagePreviewUrl: getPagePreviewUrl,
    data: loading ? null : _get(data, "pageBuilder.getSettings.data")
  };
}
//# sourceMappingURL=usePageBuilderSettings.js.map