import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useCallback } from "react";
import { useQuery } from "react-apollo";
import { LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS } from "./graphql";
import get from "lodash.get";
import set from "lodash.set";
import createApolloClient from "./createApolloClient";
export var CmsContext = React.createContext({});
var apolloClientsCache = {};

var getCurrentEnvironmentFromLocalStorage = function getCurrentEnvironmentFromLocalStorage() {
  try {
    return JSON.parse(get(window, "localStorage.cms_environment"));
  } catch (_unused) {
    return null;
  }
};

export function CmsProvider(props) {
  var _useState = useState(function () {
    var environment = getCurrentEnvironmentFromLocalStorage();
    return environment && environment.id;
  }),
      _useState2 = _slicedToArray(_useState, 2),
      currentEnvironmentId = _useState2[0],
      setCurrentEnvironmentId = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      apolloClient = _useState4[0],
      setApolloClient = _useState4[1];

  var environmentsQuery = useQuery(LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS, {
    onCompleted: function onCompleted(response) {
      var _get = get(response, "cms.listEnvironments", {}),
          _get$data = _get.data,
          data = _get$data === void 0 ? [] : _get$data;

      if (currentEnvironmentId) {
        var existingEnvironment = data.find(function (item) {
          return item.id === currentEnvironmentId;
        });

        if (existingEnvironment) {
          selectEnvironment(existingEnvironment);
          return;
        }
      } // 1. Try to get production environment as the default one.
      // 2. If nothing was found, just use the first one in the list.


      var environmentToSelect = data.find(function (item) {
        return item.isProduction;
      });

      if (!environmentToSelect) {
        environmentToSelect = data[0];
      }

      selectEnvironment(environmentToSelect);
    }
  });
  var environments = get(environmentsQuery, "data.cms.listEnvironments.data") || [];
  environments.hash = environments.map(function (item) {
    return item.id;
  }).join("-");
  var selectEnvironment = useCallback(function (environment) {
    set(window, "localStorage.cms_environment", JSON.stringify({
      id: environment.id,
      name: environment.name,
      isProduction: environment.isProduction
    }));
    setCurrentEnvironmentId(environment.id);

    if (!apolloClientsCache[environment.id]) {
      apolloClientsCache[environment.id] = createApolloClient({
        uri: "".concat(process.env.REACT_APP_API_URL, "/cms/manage/").concat(environment.id)
      });
    }

    setApolloClient(apolloClientsCache[environment.id]);
  }, []);
  var isSelectedEnvironment = useCallback(function (environment) {
    return environment.id === currentEnvironmentId;
  }, [currentEnvironmentId]);
  var selectAvailableEnvironment = useCallback(function (blacklist) {
    var _loop = function _loop(i) {
      var current = environments[i];

      if (!blacklist.find(function (item) {
        return item.id === current.id;
      })) {
        selectEnvironment(current);
        return "break";
      }
    };

    for (var i = 0; i < environments.length; i++) {
      var _ret = _loop(i);

      if (_ret === "break") break;
    }
  }, [currentEnvironmentId, environments.hash]);
  var value = {
    environments: {
      apolloClient: apolloClient,
      selectEnvironment: selectEnvironment,
      isSelectedEnvironment: isSelectedEnvironment,
      selectAvailableEnvironment: selectAvailableEnvironment,
      environments: environments,

      get currentEnvironment() {
        return environments.find(function (item) {
          return item.id === currentEnvironmentId;
        });
      },

      refreshEnvironments: environmentsQuery.refetch
    }
  };
  return /*#__PURE__*/React.createElement(CmsContext.Provider, Object.assign({
    value: value
  }, props));
}
//# sourceMappingURL=index.js.map