{"version":3,"sources":["../../../../src/admin/contexts/Cms/index.tsx"],"names":["React","useState","useCallback","useQuery","LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS","get","set","createApolloClient","CmsContext","createContext","apolloClientsCache","getCurrentEnvironmentFromLocalStorage","JSON","parse","window","CmsProvider","props","environment","id","currentEnvironmentId","setCurrentEnvironmentId","apolloClient","setApolloClient","environmentsQuery","onCompleted","response","data","existingEnvironment","find","item","selectEnvironment","environmentToSelect","isProduction","environments","hash","map","join","stringify","name","uri","process","env","REACT_APP_API_URL","isSelectedEnvironment","selectAvailableEnvironment","blacklist","i","current","length","value","currentEnvironment","refreshEnvironments","refetch"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { useQuery } from \"react-apollo\";\nimport { LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS } from \"./graphql\";\nimport get from \"lodash.get\";\nimport set from \"lodash.set\";\nimport createApolloClient from \"./createApolloClient\";\n\nexport const CmsContext = React.createContext({});\n\nconst apolloClientsCache = {};\n\nconst getCurrentEnvironmentFromLocalStorage = () => {\n    try {\n        return JSON.parse(get(window, \"localStorage.cms_environment\"));\n    } catch {\n        return null;\n    }\n};\n\nexport function CmsProvider(props) {\n    const [currentEnvironmentId, setCurrentEnvironmentId] = useState(() => {\n        const environment = getCurrentEnvironmentFromLocalStorage();\n        return environment && environment.id;\n    });\n\n    const [apolloClient, setApolloClient] = useState();\n\n    const environmentsQuery = useQuery(LIST_ENVIRONMENTS_SELECTOR_ENVIRONMENTS, {\n        onCompleted: response => {\n            const { data = [] } = get(response, \"cms.listEnvironments\", {});\n\n            if (currentEnvironmentId) {\n                const existingEnvironment = data.find(item => item.id === currentEnvironmentId);\n                if (existingEnvironment) {\n                    selectEnvironment(existingEnvironment);\n                    return;\n                }\n            }\n\n            // 1. Try to get production environment as the default one.\n            // 2. If nothing was found, just use the first one in the list.\n            let environmentToSelect = data.find(item => item.isProduction);\n            if (!environmentToSelect) {\n                environmentToSelect = data[0];\n            }\n            selectEnvironment(environmentToSelect);\n        }\n    });\n\n    const environments = get(environmentsQuery, \"data.cms.listEnvironments.data\") || [];\n    environments.hash = environments.map(item => item.id).join(\"-\");\n\n    const selectEnvironment = useCallback(environment => {\n        set(\n            window,\n            \"localStorage.cms_environment\",\n            JSON.stringify({\n                id: environment.id,\n                name: environment.name,\n                isProduction: environment.isProduction\n            })\n        );\n\n        setCurrentEnvironmentId(environment.id);\n\n        if (!apolloClientsCache[environment.id]) {\n            apolloClientsCache[environment.id] = createApolloClient({\n                uri: `${process.env.REACT_APP_API_URL}/cms/manage/${environment.id}`\n            });\n        }\n\n        setApolloClient(apolloClientsCache[environment.id]);\n    }, []);\n\n    const isSelectedEnvironment = useCallback(\n        environment => {\n            return environment.id === currentEnvironmentId;\n        },\n        [currentEnvironmentId]\n    );\n\n    const selectAvailableEnvironment = useCallback(\n        blacklist => {\n            for (let i = 0; i < environments.length; i++) {\n                const current = environments[i];\n                if (!blacklist.find(item => item.id === current.id)) {\n                    selectEnvironment(current);\n                    break;\n                }\n            }\n        },\n        [currentEnvironmentId, environments.hash]\n    );\n\n    const value = {\n        environments: {\n            apolloClient,\n            selectEnvironment,\n            isSelectedEnvironment,\n            selectAvailableEnvironment,\n            environments,\n            get currentEnvironment() {\n                return environments.find(item => item.id === currentEnvironmentId);\n            },\n            refreshEnvironments: environmentsQuery.refetch\n        }\n    };\n\n    return <CmsContext.Provider value={value} {...props} />;\n}\n"],"file":"index.js"}