{"version":3,"sources":["../../../../../../src/admin/components/ContentModelEditor/Tabs/IndexesTab/IndexesTab.tsx"],"names":["React","useCallback","useState","css","useContentModelEditor","Elevation","List","ListActions","ListItem","ListItemMeta","ListItemText","ListItemTextPrimary","ListItemTextSecondary","ConfirmationDialog","DeleteIcon","ButtonDefault","ButtonIcon","NewIndexDialog","i18n","TimeAgo","Tooltip","useSnackbar","t","ns","style","previewWrapper","padding","backgroundColor","margin","boxSizing","listWrapper","marginBottom","display","flexDirection","borderBottom","addIndexButton","textAlign","width","noFieldsMessage","IndexesTab","data","setData","dialogOpen","setDialogOpen","showSnackbar","indexes","fields","isDefaultIdIndex","index","length","map","item","fieldsList","join","createdOn","time","showConfirmation","itemHash","sort","findIndex","current","currentHash","splice"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { css } from \"emotion\";\nimport { useContentModelEditor } from \"@webiny/app-headless-cms/admin/components/ContentModelEditor/Context\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport {\n    List,\n    ListActions,\n    ListItem,\n    ListItemMeta,\n    ListItemText,\n    ListItemTextPrimary,\n    ListItemTextSecondary\n} from \"@webiny/ui/List\";\nimport { ConfirmationDialog } from \"@webiny/ui/ConfirmationDialog\";\nimport { DeleteIcon } from \"@webiny/ui/List/DataList/icons\";\nimport { ButtonDefault, ButtonIcon } from \"@webiny/ui/Button\";\nimport { ReactComponent as AddIcon } from \"@webiny/app-admin/assets/icons/round-add-24px.svg\";\nimport NewIndexDialog from \"./NewIndexDialog\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport TimeAgo from \"timeago-react\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CmsEditorContentTab } from \"@webiny/app-headless-cms/types\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/components/editor/tabs/indexes\");\n\nconst style = {\n    previewWrapper: css({\n        padding: 40,\n        backgroundColor: \"var(--webiny-theme-color-surface, #fff) !important\",\n        margin: 40,\n        boxSizing: \"border-box\"\n    }),\n    listWrapper: css({\n        marginBottom: 10,\n        display: \"flex\",\n        flexDirection: \"column\",\n        \".mdc-list .mdc-list-item\": {\n            borderBottom: \"1px solid var(--mdc-theme-on-background)\"\n        },\n        \".mdc-list .mdc-list-item:last-child\": {\n            borderBottom: \"none\"\n        }\n    }),\n    addIndexButton: css({\n        textAlign: \"center\",\n        width: \"100%\"\n    }),\n    noFieldsMessage: css({\n        textAlign: \"center\"\n    })\n};\n\nexport const IndexesTab: CmsEditorContentTab = () => {\n    const { data, setData } = useContentModelEditor();\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const { showSnackbar } = useSnackbar();\n\n    const { indexes, fields } = data;\n\n    const isDefaultIdIndex = useCallback(index => {\n        return index.fields.length === 1 && index.fields[0] === \"id\";\n    }, []);\n\n    return (\n        <Elevation z={1} className={style.previewWrapper}>\n            {fields && fields.length ? (\n                <div className={style.listWrapper}>\n                    <React.Fragment>\n                        <div className={style.addIndexButton}>\n                            <ButtonDefault onClick={() => setDialogOpen(true)}>\n                                <ButtonIcon icon={<AddIcon />} />\n                                {t`Add index`}\n                            </ButtonDefault>\n                            <NewIndexDialog\n                                open={dialogOpen}\n                                onClose={() => setDialogOpen(false)}\n                            />\n                        </div>\n                        <List twoLine>\n                            {indexes.map(item => {\n                                const fieldsList = item.fields.join(\", \");\n                                return (\n                                    <ListItem key={fieldsList}>\n                                        <ListItemText>\n                                            <ListItemTextPrimary>{fieldsList}</ListItemTextPrimary>\n                                            <ListItemTextSecondary>\n                                                {item.createdOn\n                                                    ? t`Created: {time}`({\n                                                          time: (\n                                                              <TimeAgo datetime={item.createdOn} />\n                                                          )\n                                                      })\n                                                    : t`N/A`}\n                                            </ListItemTextSecondary>\n                                        </ListItemText>\n                                        <ListItemMeta>\n                                            <ListActions>\n                                                {isDefaultIdIndex(item) ? (\n                                                    <Tooltip\n                                                        placement={\"bottom\"}\n                                                        content={\n                                                            <span>{t`The index for the \"id\" field cannot be deleted.`}</span>\n                                                        }\n                                                    >\n                                                        <DeleteIcon disabled />\n                                                    </Tooltip>\n                                                ) : (\n                                                    <ConfirmationDialog\n                                                        title={t`Confirm index removal`}\n                                                        message={t`You are about to remove the {index} index. Are you sure you want to continue?`(\n                                                            {\n                                                                index: (\n                                                                    <strong>\n                                                                        {item.fields.join(\", \")}\n                                                                    </strong>\n                                                                )\n                                                            }\n                                                        )}\n                                                    >\n                                                        {({ showConfirmation }) => (\n                                                            <DeleteIcon\n                                                                onClick={() => {\n                                                                    showConfirmation(() => {\n                                                                        setData(data => {\n                                                                            const itemHash = item.fields\n                                                                                .sort()\n                                                                                .join();\n                                                                            const index = data.indexes.findIndex(\n                                                                                current => {\n                                                                                    const currentHash = current.fields\n                                                                                        .sort()\n                                                                                        .join();\n                                                                                    return (\n                                                                                        itemHash ===\n                                                                                        currentHash\n                                                                                    );\n                                                                                }\n                                                                            );\n\n                                                                            data.indexes.splice(\n                                                                                index,\n                                                                                1\n                                                                            );\n                                                                            return data;\n                                                                        });\n\n                                                                        showSnackbar(\n                                                                            t`Index removed. To apply the changes, please save the content model.`\n                                                                        );\n                                                                    });\n                                                                }}\n                                                            />\n                                                        )}\n                                                    </ConfirmationDialog>\n                                                )}\n                                            </ListActions>\n                                        </ListItemMeta>\n                                    </ListItem>\n                                );\n                            })}\n                        </List>\n                    </React.Fragment>\n                </div>\n            ) : (\n                <div className={style.noFieldsMessage}>\n                    {t`Before creating an index, please add at least one field to the content model.`}\n                </div>\n            )}\n        </Elevation>\n    );\n};\n"],"file":"IndexesTab.js"}