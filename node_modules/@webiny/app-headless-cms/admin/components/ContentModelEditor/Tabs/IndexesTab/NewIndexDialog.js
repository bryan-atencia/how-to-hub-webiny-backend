import _regeneratorRuntime from "@babel/runtime/regenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["Add index"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Choose fields"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["An index with the same combination of fields already exists."]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Create index"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Index added. To apply the changes, please save the content model."]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { css } from "emotion";
import { Form } from "@webiny/form";
import get from "lodash.get";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { i18n } from "@webiny/app/i18n";
import { ButtonDefault } from "@webiny/ui/Button";
import { useContentModelEditor } from "@webiny/app-headless-cms/admin/components/ContentModelEditor/Context";
import { Grid, Cell } from "@webiny/ui/Grid";
import { CheckboxGroup, Checkbox } from "@webiny/ui/Checkbox";
import { Dialog, DialogTitle, DialogContent, DialogActions } from "@webiny/ui/Dialog";
import { I18NValue } from "@webiny/app-i18n/components";
import { Typography } from "@webiny/ui/Typography";
import { Alert } from "@webiny/ui/Alert";
var t = i18n.ns("app-headless-cms/admin/components/editor/tabs/index");
var narrowDialog = /*#__PURE__*/css({
  ".mdc-dialog__surface": {
    width: 600,
    minWidth: 600
  }
}, "label:narrowDialog;");
var noPadding = /*#__PURE__*/css({
  padding: "5px !important"
}, "label:noPadding;");

var NewContentModelDialog = function NewContentModelDialog(_ref) {
  var open = _ref.open,
      onClose = _ref.onClose;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useContentModelEdito = useContentModelEditor(),
      data = _useContentModelEdito.data,
      setData = _useContentModelEdito.setData,
      getFieldPlugin = _useContentModelEdito.getFieldPlugin;

  return /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: onClose,
    className: narrowDialog,
    "data-testid": "cms-new-content-model-modal"
  }, /*#__PURE__*/React.createElement(Form, {
    onSubmit: /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(index, form) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return setData(function (data) {
                  data.indexes.push(index);
                  return data;
                });

              case 2:
                onClose();
                form.setState({
                  data: {}
                });
                showSnackbar(t(_templateObject()));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }()
  }, function (_ref3) {
    var Bind = _ref3.Bind,
        submit = _ref3.submit,
        formData = _ref3.data;
    var selectedFields = get(formData, "fields", []);
    var justIdSelected = selectedFields.length === 1 && selectedFields[0] === "id";
    var isExisting;
    var hash = selectedFields.sort().join();
    data.indexes.forEach(function (item) {
      var itemHash = get(item, "fields", []).sort().join();

      if (itemHash === hash) {
        isExisting = true;
        return false;
      }
    });
    var indexableFields = data.fields.map(function (field) {
      var fieldPlugin = getFieldPlugin({
        type: field.type
      });

      if (field.multipleValues) {
        if (!fieldPlugin.field.allowIndexes.multipleValues) {
          return null;
        }
      } else {
        if (!fieldPlugin.field.allowIndexes.singleValue) {
          return null;
        }
      }

      return field;
    }).filter(Boolean);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, null, t(_templateObject2())), /*#__PURE__*/React.createElement(DialogContent, null, isExisting && !justIdSelected && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Alert, {
      type: "warning",
      title: "Already existing"
    }, t(_templateObject3()))), /*#__PURE__*/React.createElement(Bind, {
      name: "fields"
    }, /*#__PURE__*/React.createElement(CheckboxGroup, {
      label: t(_templateObject4())
    }, function (_ref4) {
      var onChange = _ref4.onChange,
          getValue = _ref4.getValue;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {
        className: noPadding
      }, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Checkbox, {
        value: getValue("id"),
        onChange: onChange("id"),
        label: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, "id"))
      })), indexableFields.map(function (_ref5) {
        var label = _ref5.label,
            fieldId = _ref5.fieldId,
            type = _ref5.type;
        return /*#__PURE__*/React.createElement(Cell, {
          span: 6,
          key: fieldId
        }, /*#__PURE__*/React.createElement(Checkbox, {
          value: getValue(fieldId),
          onChange: onChange(fieldId),
          label: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(I18NValue, {
            value: label
          })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, {
            use: "caption"
          }, type)))
        }));
      })));
    }))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(ButtonDefault, {
      disabled: justIdSelected || isExisting,
      onClick: submit
    }, "+ ", t(_templateObject5()))));
  }));
};

export default NewContentModelDialog;
//# sourceMappingURL=NewIndexDialog.js.map