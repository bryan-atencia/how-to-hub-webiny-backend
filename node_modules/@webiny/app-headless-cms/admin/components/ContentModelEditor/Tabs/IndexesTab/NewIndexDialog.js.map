{"version":3,"sources":["../../../../../../src/admin/components/ContentModelEditor/Tabs/IndexesTab/NewIndexDialog.tsx"],"names":["React","css","Form","get","useSnackbar","i18n","ButtonDefault","useContentModelEditor","Grid","Cell","CheckboxGroup","Checkbox","Dialog","DialogTitle","DialogContent","DialogActions","I18NValue","Typography","Alert","t","ns","narrowDialog","width","minWidth","noPadding","padding","NewContentModelDialog","open","onClose","showSnackbar","data","setData","getFieldPlugin","index","form","indexes","push","setState","Bind","submit","formData","selectedFields","justIdSelected","length","isExisting","hash","sort","join","forEach","item","itemHash","indexableFields","fields","map","field","fieldPlugin","type","multipleValues","allowIndexes","singleValue","filter","Boolean","onChange","getValue","label","fieldId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport { Form } from \"@webiny/form\";\nimport get from \"lodash.get\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { ButtonDefault } from \"@webiny/ui/Button\";\nimport { useContentModelEditor } from \"@webiny/app-headless-cms/admin/components/ContentModelEditor/Context\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { CheckboxGroup, Checkbox } from \"@webiny/ui/Checkbox\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from \"@webiny/ui/Dialog\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Alert } from \"@webiny/ui/Alert\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/components/editor/tabs/index\");\n\nconst narrowDialog = css({\n    \".mdc-dialog__surface\": {\n        width: 600,\n        minWidth: 600\n    }\n});\n\nconst noPadding = css({\n    padding: \"5px !important\"\n});\n\nexport type NewContentModelDialogProps = {\n    open: boolean;\n    onClose: () => void;\n};\n\nconst NewContentModelDialog: React.FC<NewContentModelDialogProps> = ({ open, onClose }) => {\n    const { showSnackbar } = useSnackbar();\n    const { data, setData, getFieldPlugin } = useContentModelEditor();\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            className={narrowDialog}\n            data-testid=\"cms-new-content-model-modal\"\n        >\n            <Form\n                onSubmit={async (index, form) => {\n                    await setData(data => {\n                        data.indexes.push(index);\n                        return data;\n                    });\n\n                    onClose();\n                    form.setState({ data: {} });\n                    showSnackbar(\n                        t`Index added. To apply the changes, please save the content model.`\n                    );\n                }}\n            >\n                {({ Bind, submit, data: formData }) => {\n                    const selectedFields = get(formData, \"fields\", []);\n                    const justIdSelected =\n                        selectedFields.length === 1 && selectedFields[0] === \"id\";\n\n                    let isExisting;\n                    const hash = selectedFields.sort().join();\n                    data.indexes.forEach(item => {\n                        const itemHash = get(item, \"fields\", [])\n                            .sort()\n                            .join();\n                        if (itemHash === hash) {\n                            isExisting = true;\n                            return false;\n                        }\n                    });\n\n                    const indexableFields = data.fields\n                        .map(field => {\n                            const fieldPlugin = getFieldPlugin({ type: field.type });\n                            if (field.multipleValues) {\n                                if (!fieldPlugin.field.allowIndexes.multipleValues) {\n                                    return null;\n                                }\n                            } else {\n                                if (!fieldPlugin.field.allowIndexes.singleValue) {\n                                    return null;\n                                }\n                            }\n                            return field;\n                        })\n                        .filter(Boolean);\n\n                    return (\n                        <>\n                            <DialogTitle>{t`Create index`}</DialogTitle>\n                            <DialogContent>\n                                {isExisting && !justIdSelected && (\n                                    <>\n                                        <br />\n                                        <Alert type=\"warning\" title=\"Already existing\">\n                                            {t`An index with the same combination of fields already exists.`}\n                                        </Alert>\n                                    </>\n                                )}\n                                <Bind name=\"fields\">\n                                    <CheckboxGroup label={t`Choose fields`}>\n                                        {({ onChange, getValue }) => (\n                                            <>\n                                                <Grid className={noPadding}>\n                                                    <Cell span={12}>\n                                                        <Checkbox\n                                                            value={getValue(\"id\")}\n                                                            onChange={onChange(\"id\")}\n                                                            label={\n                                                                <>\n                                                                    <div>id</div>\n                                                                </>\n                                                            }\n                                                        />\n                                                    </Cell>\n\n                                                    {indexableFields.map(\n                                                        ({ label, fieldId, type }) => (\n                                                            <Cell span={6} key={fieldId}>\n                                                                <Checkbox\n                                                                    value={getValue(fieldId)}\n                                                                    onChange={onChange(fieldId)}\n                                                                    label={\n                                                                        <>\n                                                                            <div>\n                                                                                <I18NValue\n                                                                                    value={label}\n                                                                                />\n                                                                            </div>\n                                                                            <div>\n                                                                                <Typography\n                                                                                    use={\"caption\"}\n                                                                                >\n                                                                                    {type}\n                                                                                </Typography>\n                                                                            </div>\n                                                                        </>\n                                                                    }\n                                                                />\n                                                            </Cell>\n                                                        )\n                                                    )}\n                                                </Grid>\n                                            </>\n                                        )}\n                                    </CheckboxGroup>\n                                </Bind>\n                            </DialogContent>\n                            <DialogActions>\n                                <ButtonDefault\n                                    disabled={justIdSelected || isExisting}\n                                    onClick={submit}\n                                >\n                                    + {t`Add index`}\n                                </ButtonDefault>\n                            </DialogActions>\n                        </>\n                    );\n                }}\n            </Form>\n        </Dialog>\n    );\n};\n\nexport default NewContentModelDialog;\n"],"file":"NewIndexDialog.js"}