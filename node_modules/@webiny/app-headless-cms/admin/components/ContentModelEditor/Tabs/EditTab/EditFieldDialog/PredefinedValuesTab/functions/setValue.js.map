{"version":3,"sources":["../../../../../../../../../src/admin/components/ContentModelEditor/Tabs/EditTab/EditFieldDialog/PredefinedValuesTab/functions/setValue.ts"],"names":["cloneDeep","set","setValue","value","bind","locale","index","name","newValue","values","valueLocaleIndex","findIndex","item","Array","isArray","push","length","filter","onChange"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA0C;AAAA,MAAvCC,KAAuC,QAAvCA,KAAuC;AAAA,MAAhCC,IAAgC,QAAhCA,IAAgC;AAAA,MAA1BC,MAA0B,QAA1BA,MAA0B;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACvD,MAAMC,QAAQ,GAAGR,SAAS;AAAGS,IAAAA,MAAM,EAAE;AAAX,KAAkBL,IAAI,CAACD,KAAvB,EAA1B;AAEA,MAAIO,gBAAgB,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,SAAhB,CAA0B,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACP,MAAL,KAAgBA,MAApB;AAAA,GAA9B,CAAvB;;AAEA,MAAIC,KAAK,IAAI,CAAb,EAAgB;AACZ,QAAII,gBAAgB,IAAI,CAAxB,EAA2B;AACvB,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcN,QAAQ,CAACC,MAAT,CAAgBC,gBAAhB,EAAkCP,KAAhD,CAAL,EAA6D;AACzDK,QAAAA,QAAQ,CAACC,MAAT,CAAgBC,gBAAhB,EAAkCP,KAAlC,GAA0C,EAA1C;AACH;AACJ,KAJD,MAIO;AACHK,MAAAA,QAAQ,CAACC,MAAT,CAAgBM,IAAhB,CAAqB;AAAEV,QAAAA,MAAM,EAANA,MAAF;AAAUF,QAAAA,KAAK,EAAE;AAAjB,OAArB;AACAO,MAAAA,gBAAgB,GAAGF,QAAQ,CAACC,MAAT,CAAgBO,MAAhB,GAAyB,CAA5C;AACH;;AAEDf,IAAAA,GAAG,CAACO,QAAD,mBAAqBE,gBAArB,oBAA+CJ,KAA/C,cAAwDC,IAAxD,GAAgEJ,KAAhE,CAAH;AACH,GAXD,MAWO;AACH,QAAIO,gBAAgB,IAAI,CAAxB,EAA2B;AACvBF,MAAAA,QAAQ,CAACC,MAAT,CAAgBC,gBAAhB,EAAkCP,KAAlC,GAA0CA,KAA1C;AACH,KAFD,MAEO;AACHK,MAAAA,QAAQ,CAACC,MAAT,CAAgBM,IAAhB,CAAqB;AAAEV,QAAAA,MAAM,EAANA,MAAF;AAAUF,QAAAA,KAAK,EAALA;AAAV,OAArB;AACH;AACJ,GAtBsD,CAwBvD;;;AACAK,EAAAA,QAAQ,CAACC,MAAT,GAAkBD,QAAQ,CAACC,MAAT,CAAgBQ,MAAhB,CAAuB,UAAAL,IAAI;AAAA,WAAI,CAAC,CAACA,IAAI,CAACT,KAAX;AAAA,GAA3B,CAAlB;AACAC,EAAAA,IAAI,CAACc,QAAL,CAAcV,QAAd;AACH,CA3BD;;AA6BA,eAAeN,QAAf","sourcesContent":["import cloneDeep from \"lodash/cloneDeep\";\nimport set from \"lodash/set\";\n\nconst setValue = ({ value, bind, locale, index, name }) => {\n    const newValue = cloneDeep({ values: [], ...bind.value });\n\n    let valueLocaleIndex = newValue.values.findIndex(item => item.locale === locale);\n\n    if (index >= 0) {\n        if (valueLocaleIndex >= 0) {\n            if (!Array.isArray(newValue.values[valueLocaleIndex].value)) {\n                newValue.values[valueLocaleIndex].value = [];\n            }\n        } else {\n            newValue.values.push({ locale, value: [] });\n            valueLocaleIndex = newValue.values.length - 1;\n        }\n\n        set(newValue, `values.${valueLocaleIndex}.value.${index}.${name}`, value);\n    } else {\n        if (valueLocaleIndex >= 0) {\n            newValue.values[valueLocaleIndex].value = value;\n        } else {\n            newValue.values.push({ locale, value });\n        }\n    }\n\n    // Filter out redundant empty values.\n    newValue.values = newValue.values.filter(item => !!item.value);\n    bind.onChange(newValue);\n};\n\nexport default setValue;\n"],"file":"setValue.js"}