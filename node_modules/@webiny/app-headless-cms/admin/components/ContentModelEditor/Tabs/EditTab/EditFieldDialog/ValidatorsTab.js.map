{"version":3,"sources":["../../../../../../../src/admin/components/ContentModelEditor/Tabs/EditTab/EditFieldDialog/ValidatorsTab.tsx"],"names":["React","useMemo","getPlugins","Switch","SimpleForm","SimpleFormContent","SimpleFormHeader","useContentModelEditor","Form","Grid","Cell","I18NInput","useI18N","validation","onEnabledChange","i18n","data","validationValue","onChangeValidation","validator","index","findIndex","item","name","slice","settings","defaultSettings","message","values","locale","getDefaultLocale","id","value","defaultMessage","onFormChange","validatorIndex","newValidationValue","ValidatorsTab","props","getFieldPlugin","field","Bind","form","fieldPlugin","type","validators","map","plugin","includes","optional","filter","Boolean","sort","a","b","onChange","label","setValue","create","renderSettings","setMessage"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport {\n    SimpleForm,\n    SimpleFormContent,\n    SimpleFormHeader\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport { useContentModelEditor } from \"@webiny/app-headless-cms/admin/components/ContentModelEditor/Context\";\nimport { Form } from \"@webiny/form\";\nimport { cloneDeep, debounce } from \"lodash\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { I18NInput } from \"@webiny/app-i18n/admin/components\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { validation } from \"@webiny/validation\";\nimport { CmsEditorFieldValidatorPlugin } from \"@webiny/app-headless-cms/types\";\n\nconst onEnabledChange = ({ i18n, data, validationValue, onChangeValidation, validator }) => {\n    if (data) {\n        const index = validationValue.findIndex(item => item.name === validator.name);\n        onChangeValidation([\n            ...validationValue.slice(0, index),\n            ...validationValue.slice(index + 1)\n        ]);\n    } else {\n        onChangeValidation([\n            ...validationValue,\n            {\n                name: validator.name,\n                settings: validator.defaultSettings,\n                message: {\n                    values: [\n                        {\n                            locale: i18n.getDefaultLocale().id,\n                            value: validator.defaultMessage\n                        }\n                    ]\n                }\n            }\n        ]);\n    }\n};\n\nconst onFormChange = debounce(({ data, validationValue, onChangeValidation, validatorIndex }) => {\n    const newValidationValue = cloneDeep(validationValue);\n    newValidationValue[validatorIndex] = {\n        ...newValidationValue[validatorIndex],\n        ...cloneDeep(data)\n    };\n    onChangeValidation(newValidationValue);\n}, 200);\n\nconst ValidatorsTab = props => {\n    const i18n = useI18N();\n    const { getFieldPlugin } = useContentModelEditor();\n    const {\n        field,\n        form: { Bind }\n    } = props;\n\n    const fieldPlugin = getFieldPlugin({ type: field.type });\n\n    const validators = useMemo(() => {\n        return getPlugins<CmsEditorFieldValidatorPlugin>(\"cms-editor-field-validator\")\n            .map(plugin => plugin.validator)\n            .map(validator => {\n                if (fieldPlugin.field.validators.includes(validator.name)) {\n                    return { optional: true, validator };\n                } else if (fieldPlugin.field.validators.includes(`!${validator.name}`)) {\n                    return { optional: false, validator };\n                }\n                return null;\n            })\n            .filter(Boolean)\n            .sort((a, b) => {\n                if (!a.optional && b.optional) {\n                    return -1;\n                }\n\n                if (a.optional && !b.optional) {\n                    return 1;\n                }\n\n                return 0;\n            });\n    }, []);\n\n    return (\n        <Bind name={\"validation\"}>\n            {({ value: validationValue, onChange: onChangeValidation }) =>\n                validators.map(({ optional, validator }) => {\n                    const validatorIndex = validationValue.findIndex(\n                        item => item.name === validator.name\n                    );\n                    const data = validationValue[validatorIndex];\n\n                    return (\n                        <SimpleForm key={validator.name}>\n                            {/*TODO: @ts-adrian nema descriptiona?*/}\n                            <SimpleFormHeader title={validator.label}>\n                                {optional && (\n                                    <Switch\n                                        label=\"Enabled\"\n                                        value={validatorIndex >= 0}\n                                        onChange={() =>\n                                            onEnabledChange({\n                                                i18n,\n                                                data,\n                                                validationValue,\n                                                onChangeValidation,\n                                                validator\n                                            })\n                                        }\n                                    />\n                                )}\n                            </SimpleFormHeader>\n                            {data && (\n                                <Form\n                                    data={data}\n                                    onChange={data =>\n                                        onFormChange({\n                                            data,\n                                            validationValue,\n                                            onChangeValidation,\n                                            validatorIndex\n                                        })\n                                    }\n                                >\n                                    {({ Bind, setValue }) => (\n                                        <SimpleFormContent>\n                                            <Grid>\n                                                <Cell span={12}>\n                                                    {/*TODO: @ts-adrian kako ovo?*/}\n                                                    <Bind\n                                                        name={\"message\"}\n                                                        validators={validation.create(\"required\")}\n                                                    >\n                                                        <I18NInput\n                                                            label={\"Message\"}\n                                                            description={\n                                                                \"This message will be displayed to the user\"\n                                                            }\n                                                        />\n                                                    </Bind>\n                                                </Cell>\n                                            </Grid>\n\n                                            {typeof validator.renderSettings === \"function\" &&\n                                                validator.renderSettings({\n                                                    setValue,\n                                                    setMessage: message => {\n                                                        setValue(\"message\", {\n                                                            values: [\n                                                                {\n                                                                    locale: i18n.getDefaultLocale()\n                                                                        .id,\n                                                                    value: message\n                                                                }\n                                                            ]\n                                                        });\n                                                    },\n                                                    data,\n                                                    Bind\n                                                })}\n                                        </SimpleFormContent>\n                                    )}\n                                </Form>\n                            )}\n                        </SimpleForm>\n                    );\n                })\n            }\n        </Bind>\n    );\n};\n\nexport default ValidatorsTab;\n"],"file":"ValidatorsTab.js"}