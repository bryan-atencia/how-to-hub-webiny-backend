{"version":3,"sources":["../../../../../../../src/admin/components/ContentModelEditor/Tabs/EditTab/EditFieldDialog/AppearanceTab.tsx"],"names":["React","useEffect","getPlugins","Grid","Cell","i18n","Radio","RadioGroup","Typography","css","validation","t","ns","style","topLabel","marginBottom","noComponentsMessage","textAlign","padding","radioContainer","AppearanceTab","props","field","form","renderPlugins","filter","item","renderer","canUse","currentlySelectedRenderAvailable","find","rendererName","name","setValue","console","log","fieldId","length","Bind","create","onChange","getValue","map","description"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { CmsEditorFieldRendererPlugin } from \"@webiny/app-headless-cms/types\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Radio, RadioGroup } from \"@webiny/ui/Radio\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { css } from \"emotion\";\nimport { validation } from \"@webiny/validation\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/components/editor/tabs/edit-field-dialog/appearance-tab\");\n\nconst style = {\n    topLabel: css({\n        marginBottom: 25\n    }),\n    noComponentsMessage: css({\n        textAlign: \"center\",\n        padding: 25\n    }),\n    radioContainer: css({\n        marginBottom: 10\n    })\n};\n\nconst AppearanceTab = props => {\n    const { field, form } = props;\n\n    const renderPlugins = getPlugins<CmsEditorFieldRendererPlugin>(\n        \"cms-editor-field-renderer\"\n    ).filter(item => item.renderer.canUse({ field }));\n\n    useEffect(() => {\n        // If the currently selected render plugin is no longer available, select the first available one.\n        const currentlySelectedRenderAvailable = renderPlugins.find(\n            item => item.renderer.rendererName === field.renderer.name\n        );\n\n        if (!currentlySelectedRenderAvailable) {\n            if (renderPlugins[0]) {\n                form.setValue(\"renderer.name\", renderPlugins[0].renderer.rendererName);\n            } else {\n                console.log(`No renderers for field ${field.fieldId} found.`, field);\n            }\n        }\n    });\n\n    if (renderPlugins.length === 0) {\n        return (\n            <Grid>\n                <Cell\n                    span={12}\n                    className={style.noComponentsMessage}\n                >{t`There are no component that can render this field.`}</Cell>\n            </Grid>\n        );\n    }\n\n    const { Bind } = form;\n\n    return (\n        <Grid>\n            <Cell span={12}>\n                <div\n                    className={style.topLabel}\n                >{t`Choose a component that will render the field:`}</div>\n                <Bind name={\"renderer.name\"} validate={validation.create(\"required\")}>\n                    <RadioGroup>\n                        {({ onChange, getValue }) => (\n                            <React.Fragment>\n                                {renderPlugins.map(item => (\n                                    <div key={item.name} className={style.radioContainer}>\n                                        <Radio\n                                            value={getValue(item.renderer.rendererName)}\n                                            onChange={onChange(item.renderer.rendererName)}\n                                            label={\n                                                <>\n                                                    <div>{item.renderer.name}</div>\n                                                    <div>\n                                                        <Typography use={\"caption\"}>\n                                                            {item.renderer.description}\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            }\n                                        />\n                                    </div>\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </RadioGroup>\n                </Bind>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default AppearanceTab;\n"],"file":"AppearanceTab.js"}