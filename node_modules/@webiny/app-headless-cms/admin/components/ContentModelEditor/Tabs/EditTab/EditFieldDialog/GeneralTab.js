import _camelCase from "lodash/camelCase";
import React, { useEffect, useCallback, useRef, useMemo } from "react";
import { Input } from "@webiny/ui/Input";
import { Switch } from "@webiny/ui/Switch";
import { Grid, Cell } from "@webiny/ui/Grid";
import { useContentModelEditor } from "@webiny/app-headless-cms/admin/components/ContentModelEditor/Context";
import { I18NInput } from "@webiny/app-i18n/admin/components";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { validation } from "@webiny/validation";

var GeneralTab = function GeneralTab(_ref) {
  var field = _ref.field,
      form = _ref.form,
      fieldPlugin = _ref.fieldPlugin;
  var Bind = form.Bind,
      setValue = form.setValue;
  var inputRef = useRef(null);

  var _useContentModelEdito = useContentModelEditor(),
      getField = _useContentModelEdito.getField;

  var _useI18N = useI18N(),
      getValue = _useI18N.getValue; // Had problems with auto-focusing the "label" field. A couple of comments on this.
  // 1. It's probably caused by the Tabs component which wraps this component.
  // 2. It seems that the "autoFocus" prop on the Input does'nt work. I can't see it attached in the actual DOM.
  // 3. This works, but it's not 100%. Visually, the cursor is frozen, and that's probably caused by a bug / design
  //    in the RMWC / Material library. If you were to click somewhere on screen, and then apply focus, then
  //    it seems it's behaving correctly. ¯\_(ツ)_/¯


  useEffect(function () {
    setTimeout(function () {
      inputRef.current && inputRef.current.focus();
    }, 200);
  }, []);
  var afterChangeLabel = useCallback(function (value) {
    setValue("fieldId", _camelCase(getValue(value)));
  }, []);
  var uniqueFieldIdValidator = useCallback(function (fieldId) {
    var existingField = getField({
      fieldId: fieldId
    });

    if (!existingField) {
      return;
    }

    if (existingField._id === field._id) {
      return true;
    }

    throw new Error("Please enter a unique Field ID");
  }, undefined);
  var additionalSettings = null;

  if (typeof fieldPlugin.field.renderSettings === "function") {
    additionalSettings = fieldPlugin.field.renderSettings({
      form: form,
      afterChangeLabel: afterChangeLabel,
      uniqueFieldIdValidator: uniqueFieldIdValidator
    });
  }

  var predefinedValuesEnabled = useMemo(function () {
    return fieldPlugin.field.allowPredefinedValues && typeof fieldPlugin.field.renderPredefinedValues === "function";
  }, [field.fieldId]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "label",
    validators: validation.create("required"),
    afterChange: !field._id && afterChangeLabel
  }, /*#__PURE__*/React.createElement(I18NInput, {
    label: "Label",
    inputRef: inputRef
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "fieldId",
    validators: [validation.create("required"), uniqueFieldIdValidator]
  }, /*#__PURE__*/React.createElement(Input, {
    label: "Field ID",
    disabled: !!field._id
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "multipleValues"
  }, /*#__PURE__*/React.createElement(Switch, {
    label: fieldPlugin.field.multipleValuesLabel,
    disabled: !fieldPlugin.field.allowMultipleValues
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "predefinedValues.enabled"
  }, /*#__PURE__*/React.createElement(Switch, {
    label: "Use predefined values",
    disabled: !predefinedValuesEnabled
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "helpText"
  }, /*#__PURE__*/React.createElement(I18NInput, {
    label: "Help text",
    description: "Help text (optional)"
  })))), additionalSettings);
};

export default GeneralTab;
//# sourceMappingURL=GeneralTab.js.map