import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { useCallback, useRef, cloneElement } from "react";
import getValue from "./functions/getValue";
import setValue from "./functions/setValue";
export default function PredefinedValues(_ref) {
  var locale = _ref.locale,
      field = _ref.field,
      fieldPlugin = _ref.fieldPlugin,
      form = _ref.form;
  var memoizedBindComponents = useRef({});
  var BaseFormBind = form.Bind;
  var getBind = useCallback(function () {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    var memoKey = locale + index;

    if (memoizedBindComponents.current[memoKey]) {
      return memoizedBindComponents.current[memoKey];
    }

    memoizedBindComponents.current[memoKey] = function Bind(_ref2) {
      var children = _ref2.children,
          name = _ref2.name;
      return /*#__PURE__*/React.createElement(BaseFormBind, {
        name: "predefinedValues.values"
      }, function (bind) {
        var value = getValue({
          bind: bind,
          locale: locale,
          index: index,
          name: name
        });

        var onChange = function onChange(value) {
          return setValue({
            value: value,
            bind: bind,
            locale: locale,
            index: index,
            name: name
          });
        };

        var props = _objectSpread(_objectSpread({}, bind), {}, {
          value: value,
          onChange: onChange
        });

        if (typeof children === "function") {
          return children(props);
        }

        return /*#__PURE__*/cloneElement(children, props);
      });
    };

    return memoizedBindComponents.current[memoKey];
  }, [locale]);
  return fieldPlugin.field.renderPredefinedValues({
    field: field,
    getBind: getBind,
    locale: locale
  });
}
//# sourceMappingURL=PredefinedValues.js.map