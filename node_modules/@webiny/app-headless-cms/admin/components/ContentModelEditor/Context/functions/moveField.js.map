{"version":3,"sources":["../../../../../../src/admin/components/ContentModelEditor/Context/functions/moveField.ts"],"names":["getFieldPosition","cleanupEmptyRows","data","layout","filter","row","length","moveField","field","position","index","fieldId","_id","existingPosition","splice","params"],"mappings":"AAKA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA;;;;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,IAAI,EAAI;AAC7BA,EAAAA,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACC,MAAL,CAAYC,MAAZ,CAAmB,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,MAAJ,GAAa,CAAjB;AAAA,GAAtB,CAAd;AACH,CAFD;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA+B;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AAAA,MAAXP,IAAW,QAAXA,IAAW;AAAA,MACrCG,GADqC,GACtBI,QADsB,CACrCJ,GADqC;AAAA,MAChCK,KADgC,GACtBD,QADsB,CAChCC,KADgC;AAE7C,MAAMC,OAAO,GAAG,OAAOH,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACI,GAA1D;AAEA,MAAMC,gBAAgB,GAAGb,gBAAgB,CAAC;AAAEQ,IAAAA,KAAK,EAAEG,OAAT;AAAkBT,IAAAA,IAAI,EAAJA;AAAlB,GAAD,CAAzC;;AACA,MAAIW,gBAAJ,EAAsB;AAClBX,IAAAA,IAAI,CAACC,MAAL,CAAYU,gBAAgB,CAACR,GAA7B,EAAkCS,MAAlC,CAAyCD,gBAAgB,CAACH,KAA1D,EAAiE,CAAjE;AACH,GAP4C,CAS7C;;;AACA,MAAI,CAACR,IAAI,CAACC,MAAL,CAAYE,GAAZ,CAAL,EAAuB;AACnBH,IAAAA,IAAI,CAACC,MAAL,CAAYE,GAAZ,IAAmB,CAACM,OAAD,CAAnB;AACA;AACH,GAb4C,CAe7C;;;AACA,MAAID,KAAK,KAAK,IAAd,EAAoB;AAChB;AACAR,IAAAA,IAAI,CAACC,MAAL,CAAYW,MAAZ,CAAmBT,GAAnB,EAAwB,CAAxB,EAA2B,CAACM,OAAD,CAA3B;AACA;AACH;;AAEDT,EAAAA,IAAI,CAACC,MAAL,CAAYE,GAAZ,EAAiBS,MAAjB,CAAwBJ,KAAxB,EAA+B,CAA/B,EAAkCC,OAAlC;AACH,CAvBD;;AAyBA,gBAAe,UAACI,MAAD,EAIT;AACFR,EAAAA,SAAS,CAACQ,MAAD,CAAT;AACAd,EAAAA,gBAAgB,CAACc,MAAM,CAACb,IAAR,CAAhB;AACH,CAPD","sourcesContent":["import {\n    CmsEditorField,\n    CmsEditorFieldId,\n    FieldLayoutPositionType\n} from \"@webiny/app-headless-cms/types\";\nimport getFieldPosition from \"./getFieldPosition\";\n\n/**\n * Remove all rows that have zero fields in it.\n * @param data\n */\nconst cleanupEmptyRows = data => {\n    data.layout = data.layout.filter(row => row.length > 0);\n};\n\nconst moveField = ({ field, position, data }) => {\n    const { row, index } = position;\n    const fieldId = typeof field === \"string\" ? field : field._id;\n\n    const existingPosition = getFieldPosition({ field: fieldId, data });\n    if (existingPosition) {\n        data.layout[existingPosition.row].splice(existingPosition.index, 1);\n    }\n\n    // Setting a form field into a new non-existing row.\n    if (!data.layout[row]) {\n        data.layout[row] = [fieldId];\n        return;\n    }\n\n    // If row exists, we drop the field at the specified index.\n    if (index === null) {\n        // Create a new row with the new field at the given row index,\n        data.layout.splice(row, 0, [fieldId]);\n        return;\n    }\n\n    data.layout[row].splice(index, 0, fieldId);\n};\n\nexport default (params: {\n    field: CmsEditorFieldId | CmsEditorField;\n    position: FieldLayoutPositionType;\n    data: object;\n}) => {\n    moveField(params);\n    cleanupEmptyRows(params.data);\n};\n"],"file":"moveField.js"}