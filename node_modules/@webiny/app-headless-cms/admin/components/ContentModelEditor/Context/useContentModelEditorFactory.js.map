{"version":3,"sources":["../../../../../src/admin/components/ContentModelEditor/Context/useContentModelEditorFactory.ts"],"names":["React","shortid","GET_CONTENT_MODEL","UPDATE_CONTENT_MODEL","getFieldPosition","moveField","moveRow","deleteField","getPlugins","omit","ContentModelEditorContext","context","useContext","Error","state","dispatch","self","apollo","data","getContentModel","id","query","variables","response","error","setData","saveContentModel","rawData","indexes","map","item","mutate","mutation","setter","type","getFields","layout","fields","forEach","row","rowIndex","fieldId","fieldIndex","getField","_id","getFieldPlugin","find","field","key","insertField","position","generate","fieldPlugin","Array","isArray","push","source","destination","updateField","fieldData","i","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\nimport { get, cloneDeep, pick } from \"lodash\";\nimport { GET_CONTENT_MODEL, UPDATE_CONTENT_MODEL } from \"./graphql\";\nimport { getFieldPosition, moveField, moveRow, deleteField } from \"./functions\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport omit from \"lodash/omit\";\n\nimport {\n    CmsEditorFieldsLayout,\n    CmsEditorField,\n    CmsEditorFieldId,\n    FieldLayoutPositionType,\n    CmsEditorFieldTypePlugin\n} from \"@webiny/app-headless-cms/types\";\n\nexport default ContentModelEditorContext => {\n    return () => {\n        // TODO: @ts-adrian add proper type\n        const context = React.useContext<any>(ContentModelEditorContext);\n        if (!context) {\n            throw new Error(\n                \"useContentModelEditor must be used within a ContentModelEditorProvider\"\n            );\n        }\n\n        const { state, dispatch } = context;\n\n        const self = {\n            apollo: state.apollo,\n            data: state.data,\n            state,\n            async getContentModel(id: string) {\n                const response = await self.apollo.query({\n                    query: GET_CONTENT_MODEL,\n                    variables: { id }\n                });\n\n                const { data, error } = get(response, \"data.getContentModel\");\n                if (error) {\n                    throw new Error(error);\n                }\n\n                self.setData(() => cloneDeep(data), false);\n                return response;\n            },\n            saveContentModel: async (rawData = state.data) => {\n                const data = cloneDeep(rawData);\n                // Remove \"createdOn\" from entries in the \"indexes\" field.\n                data.indexes = data.indexes.map(item => omit(item, [\"createdOn\"]));\n\n                const response = await self.apollo.mutate({\n                    mutation: UPDATE_CONTENT_MODEL,\n                    variables: {\n                        id: data.id,\n                        data: pick(data, [\n                            \"layout\",\n                            \"fields\",\n                            \"name\",\n                            \"settings\",\n                            \"description\",\n                            \"titleFieldId\",\n                            \"indexes\"\n                        ])\n                    }\n                });\n\n                return get(response, \"data.updateContentModel\");\n            },\n            /**\n             * Set form data by providing a callback, which receives a fresh copy of data on which you can work on.\n             * Return new data once finished.\n             * @param setter\n             * @param saveContentModel\n             */\n            setData(setter: Function, saveContentModel = false) {\n                const data = setter(cloneDeep(self.data));\n                dispatch({ type: \"data\", data });\n                return saveContentModel !== false && self.saveContentModel(data);\n            },\n\n            /**\n             * Returns fields list or complete layout with fields data in it (not just field IDs).\n             * @param layout\n             * @returns {*}\n             */\n            getFields(layout = false): CmsEditorField[] | CmsEditorFieldsLayout {\n                if (!layout) {\n                    return state.data.fields;\n                }\n\n                // Replace every field ID with actual field object.\n                const fields = cloneDeep(state.data.layout);\n                fields.forEach((row, rowIndex) => {\n                    row.forEach((fieldId, fieldIndex) => {\n                        fields[rowIndex][fieldIndex] = self.getField({ _id: fieldId });\n                    });\n                });\n                return fields;\n            },\n\n            /**\n             * Return field plugin.\n             * @param query\n             * @returns {void|?CmsEditorField}\n             */\n            getFieldPlugin(query: object): CmsEditorFieldTypePlugin {\n                return getPlugins<CmsEditorFieldTypePlugin>(\"cms-editor-field-type\").find(\n                    ({ field }) => {\n                        for (const key in query) {\n                            if (!(key in field)) {\n                                return null;\n                            }\n\n                            if (field[key] !== query[key]) {\n                                return null;\n                            }\n                        }\n\n                        return true;\n                    }\n                );\n            },\n\n            /**\n             * Checks if field of given type already exists in the list of fields.\n             * @param query\n             * @returns {boolean}\n             */\n            getField(query: object): CmsEditorField {\n                return state.data.fields.find(field => {\n                    for (const key in query) {\n                        if (!(key in field)) {\n                            return null;\n                        }\n\n                        if (field[key] !== query[key]) {\n                            return null;\n                        }\n                    }\n\n                    return true;\n                });\n            },\n\n            /**\n             * Inserts a new field into the target position.\n             * @param data\n             * @param position\n             */\n            insertField(data: CmsEditorField, position: FieldLayoutPositionType) {\n                const field = cloneDeep(data);\n                if (!field._id) {\n                    field._id = shortid.generate();\n                }\n\n                if (!data.type) {\n                    throw new Error(`Field \"type\" missing.`);\n                }\n\n                const fieldPlugin = self.getFieldPlugin({ type: data.type });\n                if (!fieldPlugin) {\n                    throw new Error(`Invalid field \"type\".`);\n                }\n\n                self.setData(data => {\n                    if (!Array.isArray(data.fields)) {\n                        data.fields = [];\n                    }\n                    data.fields.push(field);\n\n                    moveField({ field, position, data });\n\n                    // We are dropping a new field at the specified index.\n                    return data;\n                });\n            },\n\n            /**\n             * Moves field to the given target position.\n             * @param field\n             * @param position\n             * @param data\n             */\n            moveField({\n                field,\n                position\n            }: {\n                field: CmsEditorFieldId | CmsEditorField;\n                position: FieldLayoutPositionType;\n            }) {\n                self.setData(data => {\n                    moveField({ field, position, data });\n                    return data;\n                });\n            },\n\n            /**\n             * Moves row to a destination row.\n             * @param source\n             * @param destination\n             */\n            moveRow(source: number, destination: number) {\n                self.setData(data => {\n                    moveRow({ data, source, destination });\n                    return data;\n                });\n            },\n\n            /**\n             * Updates field.\n             * @param fieldData\n             */\n            updateField(fieldData) {\n                const field = cloneDeep(fieldData);\n                self.setData(data => {\n                    for (let i = 0; i < data.fields.length; i++) {\n                        if (data.fields[i]._id === field._id) {\n                            data.fields[i] = field;\n                            break;\n                        }\n                    }\n                    return data;\n                });\n            },\n\n            /**\n             * Deletes a field (both from the list of field and the layout).\n             * @param field\n             */\n            deleteField(field: CmsEditorField) {\n                self.setData(data => {\n                    deleteField({ field, data });\n                    return data;\n                });\n            },\n\n            /**\n             * Returns row / index position for given field.\n             * @param field\n             * @returns {{index: number, row: number}|{index: null, row: null}}\n             */\n            getFieldPosition(field: CmsEditorFieldId | CmsEditorField) {\n                return getFieldPosition({ field, data: self.data });\n            }\n        };\n\n        return self;\n    };\n};\n"],"file":"useContentModelEditorFactory.js"}