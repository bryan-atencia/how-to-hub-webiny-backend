{"version":3,"sources":["../../../../src/admin/components/ContentModelEditor/Droppable.tsx"],"names":["React","useDrop","Droppable","memo","props","children","onDrop","isVisible","accept","collect","monitor","isOver","shallow","item","getItem","drop","isDragging","Boolean"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAgDC,OAAhD,QAA+D,WAA/D;AAkBA,IAAMC,SAAS,gBAAGF,KAAK,CAACG,IAAN,CAAW,UAACC,KAAD,EAA2B;AAAA,MAC5CC,QAD4C,GACCD,KADD,CAC5CC,QAD4C;AAAA,MAClCC,MADkC,GACCF,KADD,CAClCE,MADkC;AAAA,yBACCF,KADD,CAC1BG,SAD0B;AAAA,MAC1BA,SAD0B,iCACd;AAAA,WAAM,IAAN;AAAA,GADc;;AAAA,iBAGnBN,OAAO,CAAC;AACrCO,IAAAA,MAAM,EAAE,SAD6B;AAErCC,IAAAA,OAAO,EAAE,iBAAAC,OAAO;AAAA,aAAK;AACjBC,QAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,MAAoBD,OAAO,CAACC,MAAR,CAAe;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAf,CADX;AAEjBC,QAAAA,IAAI,EAAEH,OAAO,CAACI,OAAR;AAFW,OAAL;AAAA,KAFqB;AAMrCC,IAAAA,IANqC,gBAMhCF,IANgC,EAM1BH,OAN0B,EAMjB;AAChB,UAAI,OAAOJ,MAAP,KAAkB,UAAtB,EAAkC;AAC9BA,QAAAA,MAAM,CAACI,OAAO,CAACI,OAAR,EAAD,CAAN;AACH;AACJ;AAVoC,GAAD,CAHY;AAAA;AAAA;AAAA,MAG3CD,IAH2C,cAG3CA,IAH2C;AAAA,MAGrCF,MAHqC,cAGrCA,MAHqC;AAAA,MAG3BI,IAH2B;;AAgBpD,MAAIF,IAAI,IAAI,CAACN,SAAS,CAACM,IAAD,CAAtB,EAA8B;AAC1B,WAAO,IAAP;AACH;;AAED,SAAOR,QAAQ,CAAC;AAAEW,IAAAA,UAAU,EAAEC,OAAO,CAACJ,IAAD,CAArB;AAA6BF,IAAAA,MAAM,EAANA,MAA7B;AAAqCE,IAAAA,IAAI,EAAJA,IAArC;AAA2CE,IAAAA,IAAI,EAAJA;AAA3C,GAAD,CAAf;AACH,CArBiB,CAAlB;AAuBA,eAAeb,SAAf","sourcesContent":["import * as React from \"react\";\nimport { ConnectDropTarget, DragObjectWithType, useDrop } from \"react-dnd\";\n\nexport type DroppableChildrenFunction = (params: {\n    isDragging: boolean;\n    isOver: boolean;\n    item: any;\n    drop: ConnectDropTarget;\n}) => React.ReactElement;\n\nexport type DroppableProps = {\n    type?: string;\n    children: DroppableChildrenFunction;\n    isDragging?: boolean;\n    isDroppable?: (item: any) => boolean;\n    isVisible?: (params: { type: string; item: any; isDragging: boolean }) => boolean;\n    onDrop?: (item: DragObjectWithType) => void;\n};\n\nconst Droppable = React.memo((props: DroppableProps) => {\n    const { children, onDrop, isVisible = () => true } = props;\n\n    const [{ item, isOver }, drop] = useDrop({\n        accept: \"element\",\n        collect: monitor => ({\n            isOver: monitor.isOver() && monitor.isOver({ shallow: true }),\n            item: monitor.getItem()\n        }),\n        drop(item, monitor) {\n            if (typeof onDrop === \"function\") {\n                onDrop(monitor.getItem());\n            }\n        }\n    });\n\n    if (item && !isVisible(item)) {\n        return null;\n    }\n\n    return children({ isDragging: Boolean(item), isOver, item, drop });\n});\n\nexport default Droppable;\n"],"file":"Droppable.js"}