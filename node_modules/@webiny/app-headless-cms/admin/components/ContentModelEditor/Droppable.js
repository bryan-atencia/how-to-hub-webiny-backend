import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import * as React from "react";
import { useDrop } from "react-dnd";
var Droppable = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      onDrop = props.onDrop,
      _props$isVisible = props.isVisible,
      isVisible = _props$isVisible === void 0 ? function () {
    return true;
  } : _props$isVisible;

  var _useDrop = useDrop({
    accept: "element",
    collect: function collect(monitor) {
      return {
        isOver: monitor.isOver() && monitor.isOver({
          shallow: true
        }),
        item: monitor.getItem()
      };
    },
    drop: function drop(item, monitor) {
      if (typeof onDrop === "function") {
        onDrop(monitor.getItem());
      }
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      _useDrop2$ = _useDrop2[0],
      item = _useDrop2$.item,
      isOver = _useDrop2$.isOver,
      drop = _useDrop2[1];

  if (item && !isVisible(item)) {
    return null;
  }

  return children({
    isDragging: Boolean(item),
    isOver: isOver,
    item: item,
    drop: drop
  });
});
export default Droppable;
//# sourceMappingURL=Droppable.js.map