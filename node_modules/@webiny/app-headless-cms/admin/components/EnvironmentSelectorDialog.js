import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Manage environments"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["None"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Change environment"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { css } from "emotion";
import { i18n } from "@webiny/app/i18n";
import { Dialog, DialogTitle, DialogContent } from "@webiny/ui/Dialog";
import { useCms } from "@webiny/app-headless-cms/admin/hooks";
import { ButtonDefault, ButtonIcon } from "@webiny/ui/Button";
import { useRouter } from "@webiny/react-router";
import { ReactComponent as DoneIcon } from "@svgr/webpack!@webiny/app-headless-cms/admin/icons/done-24px.svg";
import { ReactComponent as ForwardIcon } from "@svgr/webpack!@webiny/app-headless-cms/admin/icons/arrow_forward-24px.svg";
import { List, ListItem, ListItemText, ListItemTextPrimary, ListItemTextSecondary, ListItemGraphic } from "@webiny/ui/List";
var t = i18n.ns("app-headless-cms/admin/components/environment-selector-dialog");
var narrowDialog = /*#__PURE__*/css({
  ".mdc-dialog__surface": {
    width: 400,
    minWidth: 400
  }
}, "label:narrowDialog;");
var centeredBottomButton = /*#__PURE__*/css({
  textAlign: "center",
  width: "100%"
}, "label:centeredBottomButton;");
var listWrapper = /*#__PURE__*/css({
  marginBottom: 10,
  display: "flex",
  flexDirection: "column",
  ".mdc-list .mdc-list-item": {
    borderBottom: "1px solid var(--mdc-theme-on-background)"
  },
  ".mdc-list .mdc-list-item:last-child": {
    borderBottom: "none"
  }
}, "label:listWrapper;");

var NewContentModelDialog = function NewContentModelDialog(_ref) {
  var open = _ref.open,
      onClose = _ref.onClose,
      onSelectViewAll = _ref.onSelectViewAll,
      onSelectEnvironment = _ref.onSelectEnvironment;

  var _useCms = useCms(),
      _useCms$environments = _useCms.environments,
      currentEnvironment = _useCms$environments.currentEnvironment,
      environments = _useCms$environments.environments,
      selectEnvironment = _useCms$environments.selectEnvironment;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  return /*#__PURE__*/React.createElement(Dialog, {
    open: open,
    onClose: onClose,
    className: narrowDialog,
    "data-testid": "environment-selector-modal"
  }, /*#__PURE__*/React.createElement(DialogTitle, null, t(_templateObject())), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement("div", {
    className: listWrapper
  }, /*#__PURE__*/React.createElement(List, {
    twoLine: true
  }, environments.map(function (item) {
    var selected = currentEnvironment && item.id === currentEnvironment.id;
    return /*#__PURE__*/React.createElement(ListItem, {
      key: item.id,
      onClick: function onClick() {
        if (selected) {
          return;
        }

        if (typeof onSelectEnvironment === "function") {
          onSelectEnvironment({
            onClose: onClose
          });
        } else {
          selectEnvironment(item);
          onClose();
        }
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, selected && /*#__PURE__*/React.createElement(DoneIcon, {
      style: {
        color: "var(--mdc-theme-primary)"
      }
    })), /*#__PURE__*/React.createElement(ListItemText, null, /*#__PURE__*/React.createElement(ListItemTextPrimary, null, item.name), /*#__PURE__*/React.createElement(ListItemTextSecondary, null, "Alias:", " ", item.environmentAlias ? item.environmentAlias.name : t(_templateObject2()))));
  }))), /*#__PURE__*/React.createElement("div", {
    className: centeredBottomButton
  }, /*#__PURE__*/React.createElement(ButtonDefault, {
    onClick: function onClick() {
      if (typeof onSelectViewAll === "function") {
        onSelectViewAll({
          onClose: onClose,
          redirect: function redirect() {
            return history.push("/settings/cms/environments");
          }
        });
      } else {
        onClose(); // Give the dialog a chance to close properly.

        setTimeout(function () {
          return history.push("/settings/cms/environments");
        }, 250);
      }
    }
  }, /*#__PURE__*/React.createElement(ButtonIcon, {
    icon: /*#__PURE__*/React.createElement(ForwardIcon, null)
  }), t(_templateObject3())))));
};

export default NewContentModelDialog;
//# sourceMappingURL=EnvironmentSelectorDialog.js.map