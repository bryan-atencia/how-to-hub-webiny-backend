import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _pick from "lodash/pick";
import _cloneDeep from "lodash/cloneDeep";
import React from "react";
import { I18NValue } from "@webiny/app-i18n/components";
import { getPlugins } from "@webiny/plugins";
import { ContentFormRender } from "./ContentFormRender";
export var ContentModelForm = function ContentModelForm(props) {
  var contentModelRaw = props.contentModel;

  var contentModel = _cloneDeep(contentModelRaw);

  var layout = contentModel.layout,
      fields = contentModel.fields;

  var getFieldById = function getFieldById(id) {
    return fields.find(function (field) {
      return field._id === id;
    });
  };

  var getFields = function getFields() {
    var returnFields = [];

    if (layout) {
      returnFields = _cloneDeep(layout);
    } else {
      // If no layout provided, just render all fields one below other.
      returnFields = _toConsumableArray(fields.map(function (item) {
        return [item._id];
      }));
    }

    var validatorPlugins = getPlugins("form-field-validator");
    returnFields.forEach(function (row) {
      row.forEach(function (id, idIndex) {
        row[idIndex] = getFieldById(id);

        if (Array.isArray(row[idIndex].validation)) {
          row[idIndex].validators = row[idIndex].validation.map(function (item) {
            var validatorPlugin = validatorPlugins.find(function (plugin) {
              return plugin.validator.name === item.name;
            });

            if (!validatorPlugin || typeof validatorPlugin.validator.validate !== "function") {
              return;
            }

            return /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
                var isInvalid, result;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return validatorPlugin.validator.validate(value, item);

                      case 3:
                        result = _context.sent;
                        isInvalid = result === false;
                        _context.next = 10;
                        break;

                      case 7:
                        _context.prev = 7;
                        _context.t0 = _context["catch"](0);
                        isInvalid = true;

                      case 10:
                        if (!isInvalid) {
                          _context.next = 12;
                          break;
                        }

                        throw new Error(I18NValue({
                          value: item.message
                        }) || "Invalid value.");

                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 7]]);
              }));

              return function (_x) {
                return _ref.apply(this, arguments);
              };
            }();
          }).filter(Boolean);
        }
      });
    });
    return returnFields;
  };

  var getDefaultValues = function getDefaultValues() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var values = {}; // TODO: finish default values.

    /*fields.forEach(field => {
        const fieldId = field.fieldId;
         if (
            fieldId &&
            "defaultValue" in field.settings &&
            typeof field.settings.defaultValue !== "undefined"
        ) {
            values[fieldId] = field.settings.defaultValue;
        }
    });*/

    return _objectSpread(_objectSpread({}, values), overrides);
  };

  var content = props.content,
      onSubmit = props.onSubmit,
      onChange = props.onChange,
      locale = props.locale,
      onForm = props.onForm;
  return /*#__PURE__*/React.createElement(ContentFormRender, {
    onForm: onForm,
    locale: locale,
    getFields: getFields,
    getDefaultValues: getDefaultValues,
    content: content,
    contentModel: contentModel,
    onChange: onChange,
    onSubmit: /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {
        var fieldsIds;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fieldsIds = contentModel.fields.map(function (item) {
                  return item.fieldId;
                });
                return _context2.abrupt("return", onSubmit(_pick(data, _toConsumableArray(fieldsIds))));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()
  });
};
//# sourceMappingURL=index.js.map