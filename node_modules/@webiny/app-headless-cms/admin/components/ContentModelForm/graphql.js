import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject9() {
  var data = _taggedTemplateLiteral(["\n        mutation Unpublish", "($revision: ID!) {\n            content: unpublish", "(revision: $revision) {\n                data {\n                    id\n                    meta {\n                        ", "\n                        revisions {\n                            id\n                            meta {\n                                ", "\n                            }\n                        }\n                    }\n                }\n                error ", "\n            }\n        }"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["\n        mutation Publish", "($revision: ID!) {\n            content: publish", "(revision: $revision) {\n                data {\n                    id\n                    meta {\n                        ", "\n                        revisions {\n                            id\n                            meta {\n                                ", "\n                            }\n                        }\n                    }\n                }\n                error ", "\n            }\n        }"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n        mutation Update", "($id: ID!, $data: ", "Input!) {\n            content: update", "(where: { id: $id }, data: $data) {\n                data {\n                    id\n                    ", "\n                    savedOn\n                    meta { ", " }\n                }\n                error ", "\n            }\n        }\n    "]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n        mutation Create", "From($revision: ID!, $data: ", "Input) {\n            content: create", "From(revision: $revision, data: $data) {\n                data {\n                    id\n                    savedOn\n                    meta {\n                        ", "\n                    }\n                }\n                error ", "\n            }\n        }"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n        mutation Create", "($data: ", "Input!) {\n            content: create", "(data: $data) {\n                data {\n                    id\n                    savedOn\n                    ", "\n                    meta {\n                        ", "\n                    }\n                }\n                error ", "\n            }\n        }\n    "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n        mutation Delete", "($revision: ID!) {\n            content: delete", "(where: { id: $revision }) {\n                data\n                error ", "\n            }\n        }\n    "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n        query list", "($where: ", "ListWhereInput, $sort: [", "ListSorter], $limit: Int, $after: String, $before: String) {\n            content: list", "(\n                where: $where\n                sort: $sort\n                limit: $limit\n                after: $after\n                before: $before\n            ) {\n                data {\n                    id\n                    savedOn\n                    meta {\n                        title {\n                            value\n                        }\n                        published\n                        version\n                        parent\n                        status\n                    }\n                }\n                error ", "\n            }\n        }\n    "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n        query List", "Revisions($id: ID!) {\n            content: get", "(where: { id: $id }) {\n                data {\n                    id\n                    meta {\n                        revisions {\n                            id\n                            savedOn\n                            meta {\n                                ", "\n                            }\n                        }\n                    }\n                }\n                error ", "\n            }\n        }\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        query get", "($id: ID!) {\n            content: get", "(where: { id: $id }) {\n                data {\n                    id\n                    ", "\n                    savedOn\n                    meta {\n                        ", "\n                    }\n                }\n                error ", "\n            }\n        }\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import upperFirst from "lodash/upperFirst";
import gql from "graphql-tag";
import { getPlugins } from "@webiny/plugins";
var I18N_FIELD =
/* GraphQL */
"\n    {\n        values {\n            value\n            locale\n        }\n    }\n";
var ERROR_FIELD =
/* GraphQL */
"\n    {\n        message\n        code\n        data\n    }\n";
var CONTENT_META_FIELDS =
/* GraphQL */
"\n    title {\n        value\n    }\n    published\n    version\n    locked\n    parent\n    status\n";

var createFieldsList = function createFieldsList(contentModel) {
  var fields = contentModel.fields.map(function (field) {
    var fieldPlugin = getPlugins("cms-editor-field-type").find(function (item) {
      return item.field.type === field.type;
    });

    if (fieldPlugin.field.graphql && fieldPlugin.field.graphql.queryField) {
      return "".concat(field.fieldId, " ").concat(fieldPlugin.field.graphql.queryField);
    }

    return "".concat(field.fieldId, " ").concat(I18N_FIELD);
  });
  return fields.join("\n");
};

export var createReadQuery = function createReadQuery(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject(), ucFirstModelId, ucFirstModelId, createFieldsList(model), CONTENT_META_FIELDS, ERROR_FIELD);
};
export var createListRevisionsQuery = function createListRevisionsQuery(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject2(), ucFirstModelId, ucFirstModelId, CONTENT_META_FIELDS, ERROR_FIELD);
};
export var createListQuery = function createListQuery(model) {
  var ucFirstPluralizedModelId = upperFirst(model.pluralizedModelId);
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject3(), ucFirstPluralizedModelId, ucFirstModelId, ucFirstModelId, ucFirstPluralizedModelId, ERROR_FIELD);
};
export var createDeleteMutation = function createDeleteMutation(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject4(), ucFirstModelId, ucFirstModelId, ERROR_FIELD);
};
export var createCreateMutation = function createCreateMutation(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject5(), ucFirstModelId, ucFirstModelId, ucFirstModelId, createFieldsList(model), CONTENT_META_FIELDS, ERROR_FIELD);
};
export var createCreateFromMutation = function createCreateFromMutation(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject6(), ucFirstModelId, ucFirstModelId, ucFirstModelId, CONTENT_META_FIELDS, ERROR_FIELD);
};
export var createUpdateMutation = function createUpdateMutation(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject7(), ucFirstModelId, ucFirstModelId, ucFirstModelId, createFieldsList(model), CONTENT_META_FIELDS, ERROR_FIELD);
};
export var createPublishMutation = function createPublishMutation(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject8(), ucFirstModelId, ucFirstModelId, CONTENT_META_FIELDS, CONTENT_META_FIELDS, ERROR_FIELD);
};
export var createUnpublishMutation = function createUnpublishMutation(model) {
  var ucFirstModelId = upperFirst(model.modelId);
  return gql(_templateObject9(), ucFirstModelId, ucFirstModelId, CONTENT_META_FIELDS, CONTENT_META_FIELDS, ERROR_FIELD);
};
//# sourceMappingURL=graphql.js.map