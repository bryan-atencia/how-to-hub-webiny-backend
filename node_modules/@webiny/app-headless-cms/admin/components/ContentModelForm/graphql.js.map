{"version":3,"sources":["../../../../src/admin/components/ContentModelForm/graphql.ts"],"names":["upperFirst","gql","getPlugins","I18N_FIELD","ERROR_FIELD","CONTENT_META_FIELDS","createFieldsList","contentModel","fields","map","field","fieldPlugin","find","item","type","graphql","queryField","fieldId","join","createReadQuery","model","ucFirstModelId","modelId","createListRevisionsQuery","createListQuery","ucFirstPluralizedModelId","pluralizedModelId","createDeleteMutation","createCreateMutation","createCreateFromMutation","createUpdateMutation","createPublishMutation","createUnpublishMutation"],"mappings":"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","sourcesContent":["import upperFirst from \"lodash/upperFirst\";\nimport gql from \"graphql-tag\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { CmsEditorFieldTypePlugin } from \"@webiny/app-headless-cms/types\";\n\nconst I18N_FIELD = /* GraphQL */ `\n    {\n        values {\n            value\n            locale\n        }\n    }\n`;\n\nconst ERROR_FIELD = /* GraphQL */ `\n    {\n        message\n        code\n        data\n    }\n`;\n\nconst CONTENT_META_FIELDS = /* GraphQL */ `\n    title {\n        value\n    }\n    published\n    version\n    locked\n    parent\n    status\n`;\n\nconst createFieldsList = contentModel => {\n    const fields = contentModel.fields.map(field => {\n        const fieldPlugin = getPlugins<CmsEditorFieldTypePlugin>(`cms-editor-field-type`).find(\n            item => {\n                return item.field.type === field.type;\n            }\n        );\n\n        if (fieldPlugin.field.graphql && fieldPlugin.field.graphql.queryField) {\n            return `${field.fieldId} ${fieldPlugin.field.graphql.queryField}`;\n        }\n\n        return `${field.fieldId} ${I18N_FIELD}`;\n    });\n\n    return fields.join(\"\\n\");\n};\n\nexport const createReadQuery = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        query get${ucFirstModelId}($id: ID!) {\n            content: get${ucFirstModelId}(where: { id: $id }) {\n                data {\n                    id\n                    ${createFieldsList(model)}\n                    savedOn\n                    meta {\n                        ${CONTENT_META_FIELDS}\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }\n    `;\n};\n\nexport const createListRevisionsQuery = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        query List${ucFirstModelId}Revisions($id: ID!) {\n            content: get${ucFirstModelId}(where: { id: $id }) {\n                data {\n                    id\n                    meta {\n                        revisions {\n                            id\n                            savedOn\n                            meta {\n                                ${CONTENT_META_FIELDS}\n                            }\n                        }\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }\n    `;\n};\n\nexport const createListQuery = model => {\n    const ucFirstPluralizedModelId = upperFirst(model.pluralizedModelId);\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        query list${ucFirstPluralizedModelId}($where: ${ucFirstModelId}ListWhereInput, $sort: [${ucFirstModelId}ListSorter], $limit: Int, $after: String, $before: String) {\n            content: list${ucFirstPluralizedModelId}(\n                where: $where\n                sort: $sort\n                limit: $limit\n                after: $after\n                before: $before\n            ) {\n                data {\n                    id\n                    savedOn\n                    meta {\n                        title {\n                            value\n                        }\n                        published\n                        version\n                        parent\n                        status\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }\n    `;\n};\n\nexport const createDeleteMutation = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        mutation Delete${ucFirstModelId}($revision: ID!) {\n            content: delete${ucFirstModelId}(where: { id: $revision }) {\n                data\n                error ${ERROR_FIELD}\n            }\n        }\n    `;\n};\n\nexport const createCreateMutation = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        mutation Create${ucFirstModelId}($data: ${ucFirstModelId}Input!) {\n            content: create${ucFirstModelId}(data: $data) {\n                data {\n                    id\n                    savedOn\n                    ${createFieldsList(model)}\n                    meta {\n                        ${CONTENT_META_FIELDS}\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }\n    `;\n};\n\nexport const createCreateFromMutation = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        mutation Create${ucFirstModelId}From($revision: ID!, $data: ${ucFirstModelId}Input) {\n            content: create${ucFirstModelId}From(revision: $revision, data: $data) {\n                data {\n                    id\n                    savedOn\n                    meta {\n                        ${CONTENT_META_FIELDS}\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }`;\n};\n\nexport const createUpdateMutation = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        mutation Update${ucFirstModelId}($id: ID!, $data: ${ucFirstModelId}Input!) {\n            content: update${ucFirstModelId}(where: { id: $id }, data: $data) {\n                data {\n                    id\n                    ${createFieldsList(model)}\n                    savedOn\n                    meta { ${CONTENT_META_FIELDS} }\n                }\n                error ${ERROR_FIELD}\n            }\n        }\n    `;\n};\n\nexport const createPublishMutation = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        mutation Publish${ucFirstModelId}($revision: ID!) {\n            content: publish${ucFirstModelId}(revision: $revision) {\n                data {\n                    id\n                    meta {\n                        ${CONTENT_META_FIELDS}\n                        revisions {\n                            id\n                            meta {\n                                ${CONTENT_META_FIELDS}\n                            }\n                        }\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }`;\n};\n\nexport const createUnpublishMutation = model => {\n    const ucFirstModelId = upperFirst(model.modelId);\n\n    return gql`\n        mutation Unpublish${ucFirstModelId}($revision: ID!) {\n            content: unpublish${ucFirstModelId}(revision: $revision) {\n                data {\n                    id\n                    meta {\n                        ${CONTENT_META_FIELDS}\n                        revisions {\n                            id\n                            meta {\n                                ${CONTENT_META_FIELDS}\n                            }\n                        }\n                    }\n                }\n                error ${ERROR_FIELD}\n            }\n        }`;\n};\n"],"file":"graphql.js"}