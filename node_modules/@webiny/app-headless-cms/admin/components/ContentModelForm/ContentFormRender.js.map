{"version":3,"sources":["../../../../src/admin/components/ContentModelForm/ContentFormRender.tsx"],"names":["React","useEffect","useRef","useMemo","Form","Grid","Cell","CircularProgress","getPlugins","RenderFieldElement","styled","FormWrapper","height","overflow","ContentFormRender","getFields","getDefaultValues","loading","content","contentModel","onSubmit","onChange","locale","onForm","fields","ref","current","renderPlugins","Bind","map","row","rowIndex","field","Math","floor","length","_id"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,OAAnC,QAAkD,OAAlD;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,kBAAP,MAA+B,wCAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,WAAW,gBAAGD,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AAC9BE,EAAAA,MAAM,EAAE,MADsB;AAE9BC,EAAAA,QAAQ,EAAE;AAFoB,CAAjB,CAAjB;AAKA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAU3B;AAAA,MATFC,SASE,QATFA,SASE;AAAA,MARFC,gBAQE,QARFA,gBAQE;AAAA,0BAPFC,OAOE;AAAA,MAPFA,OAOE,6BAPQ,KAOR;AAAA,MANFC,OAME,QANFA,OAME;AAAA,MALFC,YAKE,QALFA,YAKE;AAAA,MAJFC,QAIE,QAJFA,QAIE;AAAA,MAHFC,QAGE,QAHFA,QAGE;AAAA,MAFFC,MAEE,QAFFA,MAEE;AAAA,yBADFC,MACE;AAAA,MADFA,MACE,4BADO,IACP;AACF;AACA,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,MAAMU,GAAG,GAAGvB,MAAM,CAAC,IAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAOsB,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACE,GAAG,CAACC,OAAL,CAAtC;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAMC,aAAa,GAAGxB,OAAO,CACzB;AAAA,WAAMK,UAAU,CAA+B,2BAA/B,CAAhB;AAAA,GADyB,EAEzB,EAFyB,CAA7B;AAKA,sBACI,oBAAC,IAAD;AACI,IAAA,QAAQ,EAAEa,QADd;AAEI,IAAA,QAAQ,EAAED,QAFd;AAGI,IAAA,IAAI,EAAEF,OAAO,GAAGA,OAAH,GAAaF,gBAAgB,EAH9C;AAII,IAAA,GAAG,EAAES;AAJT,KAMK;AAAA,QAAGG,IAAH,SAAGA,IAAH;AAAA,wBACG,oBAAC,WAAD;AAAa,qBAAa;AAA1B,OACKX,OAAO,iBAAI,oBAAC,gBAAD,OADhB,eAEI,oBAAC,IAAD,QAEKO,MAAM,CAACK,GAAP,CAAW,UAACC,GAAD,EAAMC,QAAN;AAAA,0BACR,oBAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,EAAEA;AAArB,SACKD,GAAG,CAACD,GAAJ,CAAQ,UAAAG,KAAK;AAAA,4BACV,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKJ,GAAG,CAACK,MAApB,CAAZ;AAAyC,UAAA,GAAG,EAAEH,KAAK,CAACI;AAApD,wBACI,oBAAC,kBAAD;AACI,UAAA,KAAK,EAAEJ,KADX;AAEI,UAAA,IAAI,EAAEJ,IAFV;AAGI,UAAA,MAAM,EAAEN,MAHZ;AAII,UAAA,aAAa,EAAEK,aAJnB;AAKI,UAAA,YAAY,EAAER;AALlB,UADJ,CADU;AAAA,OAAb,CADL,CADQ;AAAA,KAAX,CAFL,CAFJ,CADH;AAAA,GANL,CADJ;AAgCH,CAxDM","sourcesContent":["import React, { useEffect, useRef, useMemo } from \"react\";\nimport { Form } from \"@webiny/form\";\nimport { CmsEditorFieldRendererPlugin } from \"@webiny/app-headless-cms/types\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport RenderFieldElement from \"./ContentFormRender/RenderFieldElement\";\nimport styled from \"@emotion/styled\";\n\nconst FormWrapper = styled(\"div\")({\n    height: \"70vh\",\n    overflow: \"auto\"\n});\n\nexport const ContentFormRender = ({\n    getFields,\n    getDefaultValues,\n    loading = false,\n    content,\n    contentModel,\n    onSubmit,\n    onChange,\n    locale,\n    onForm = null\n}) => {\n    // All form fields - an array of rows where each row is an array that contain fields.\n    const fields = getFields();\n    const ref = useRef(null);\n\n    useEffect(() => {\n        typeof onForm === \"function\" && onForm(ref.current);\n    }, []);\n\n    const renderPlugins = useMemo(\n        () => getPlugins<CmsEditorFieldRendererPlugin>(\"cms-editor-field-renderer\"),\n        []\n    );\n\n    return (\n        <Form\n            onChange={onChange}\n            onSubmit={onSubmit}\n            data={content ? content : getDefaultValues()}\n            ref={ref}\n        >\n            {({ Bind }) => (\n                <FormWrapper data-testid={\"cms-content-form\"}>\n                    {loading && <CircularProgress />}\n                    <Grid>\n                        {/* Let's render all form fields. */}\n                        {fields.map((row, rowIndex) => (\n                            <React.Fragment key={rowIndex}>\n                                {row.map(field => (\n                                    <Cell span={Math.floor(12 / row.length)} key={field._id}>\n                                        <RenderFieldElement\n                                            field={field}\n                                            Bind={Bind}\n                                            locale={locale}\n                                            renderPlugins={renderPlugins}\n                                            contentModel={contentModel}\n                                        />\n                                    </Cell>\n                                ))}\n                            </React.Fragment>\n                        ))}\n                    </Grid>\n                </FormWrapper>\n            )}\n        </Form>\n    );\n};\n"],"file":"ContentFormRender.js"}