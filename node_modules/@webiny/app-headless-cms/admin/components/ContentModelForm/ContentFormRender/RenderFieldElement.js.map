{"version":3,"sources":["../../../../../src/admin/components/ContentModelForm/ContentFormRender/RenderFieldElement.tsx"],"names":["React","useRef","useCallback","cloneElement","get","i18n","getValue","setValue","Label","t","ns","RenderFieldElement","props","renderPlugins","field","BaseFormBind","Bind","locale","contentModel","renderPlugin","find","plugin","renderer","rendererName","memoizedBindComponents","getBind","index","memoKey","fieldId","multipleValues","current","name","validators","defaultValue","undefined","multipleValuesValidation","validation","children","bind","value","onChange","removeValue","slice","appendValue","newValue","prependValue","appendValues","newValues","fieldName","render"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, cloneElement } from \"react\";\nimport {\n    CmsEditorField,\n    CmsEditorFieldRendererPlugin,\n    CmsEditorContentModel\n} from \"@webiny/app-headless-cms/types\";\nimport get from \"lodash.get\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport getValue from \"./functions/getValue\";\nimport setValue from \"./functions/setValue\";\nimport Label from \"./components/Label\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/components/content-form\");\n\nconst RenderFieldElement = (props: {\n    field: CmsEditorField;\n    Bind: any;\n    locale: any;\n    contentModel: CmsEditorContentModel;\n    renderPlugins: CmsEditorFieldRendererPlugin[];\n}) => {\n    const { renderPlugins, field, Bind: BaseFormBind, locale, contentModel } = props;\n    const renderPlugin = renderPlugins.find(\n        plugin => plugin.renderer.rendererName === get(field, \"renderer.name\")\n    );\n\n    const memoizedBindComponents = useRef({});\n\n    const getBind = useCallback(\n        (index = -1) => {\n            const memoKey = field.fieldId + field.multipleValues + index + locale;\n            if (memoizedBindComponents.current[memoKey]) {\n                return memoizedBindComponents.current[memoKey];\n            }\n\n            const name = field.fieldId;\n            let validators,\n                defaultValue = undefined;\n\n            if (field.multipleValues) {\n                defaultValue = [];\n                validators = field.multipleValuesValidation;\n                if (index >= 0) {\n                    validators = field.validation;\n                }\n            } else {\n                validators = field.validation;\n            }\n\n            memoizedBindComponents.current[memoKey] = function Bind({ children }) {\n                return (\n                    <BaseFormBind name={name} validators={validators} defaultValue={defaultValue}>\n                        {bind => {\n                            const value = getValue({ bind, locale, field, index });\n                            const onChange = value =>\n                                setValue({ value, bind, locale, field, index });\n\n                            const props = {\n                                ...bind,\n                                value,\n                                onChange\n                            };\n\n                            // Multiple-values functions below.\n                            if (field.multipleValues) {\n                                if (index >= 0) {\n                                    props.removeValue = () => {\n                                        if (index >= 0) {\n                                            let value = getValue({\n                                                bind,\n                                                locale,\n                                                field,\n                                                index: -1\n                                            });\n                                            value = [\n                                                ...value.slice(0, index),\n                                                ...value.slice(index + 1)\n                                            ];\n\n                                            setValue({ value, bind, locale, field, index: -1 });\n                                        }\n                                    };\n                                } else {\n                                    props.appendValue = newValue => onChange([...value, newValue]);\n                                    props.prependValue = newValue => onChange([newValue, ...value]);\n                                    props.appendValues = newValues =>\n                                        onChange([...value, ...newValues]);\n                                }\n                            }\n\n                            if (typeof children === \"function\") {\n                                return children(props);\n                            }\n\n                            return cloneElement(children, props);\n                        }}\n                    </BaseFormBind>\n                );\n            };\n\n            return memoizedBindComponents.current[memoKey];\n        },\n        [field.fieldId, locale]\n    );\n\n    if (!renderPlugin) {\n        return t`Cannot render \"{fieldName}\" field - field renderer missing.`({\n            fieldName: <strong>{field.fieldId}</strong>\n        });\n    }\n\n    return renderPlugin.renderer.render({ field, getBind, Label, contentModel, locale });\n};\n\nexport default RenderFieldElement;\n"],"file":"RenderFieldElement.js"}