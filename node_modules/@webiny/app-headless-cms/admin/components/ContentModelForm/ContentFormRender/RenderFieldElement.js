import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";

function _templateObject() {
  var data = _taggedTemplateLiteral(["Cannot render \"{fieldName}\" field - field renderer missing."]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useRef, useCallback, cloneElement } from "react";
import get from "lodash.get";
import { i18n } from "@webiny/app/i18n";
import getValue from "./functions/getValue";
import setValue from "./functions/setValue";
import Label from "./components/Label";
var t = i18n.ns("app-headless-cms/admin/components/content-form");

var RenderFieldElement = function RenderFieldElement(props) {
  var renderPlugins = props.renderPlugins,
      field = props.field,
      BaseFormBind = props.Bind,
      locale = props.locale,
      contentModel = props.contentModel;
  var renderPlugin = renderPlugins.find(function (plugin) {
    return plugin.renderer.rendererName === get(field, "renderer.name");
  });
  var memoizedBindComponents = useRef({});
  var getBind = useCallback(function () {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    var memoKey = field.fieldId + field.multipleValues + index + locale;

    if (memoizedBindComponents.current[memoKey]) {
      return memoizedBindComponents.current[memoKey];
    }

    var name = field.fieldId;
    var validators,
        defaultValue = undefined;

    if (field.multipleValues) {
      defaultValue = [];
      validators = field.multipleValuesValidation;

      if (index >= 0) {
        validators = field.validation;
      }
    } else {
      validators = field.validation;
    }

    memoizedBindComponents.current[memoKey] = function Bind(_ref) {
      var children = _ref.children;
      return /*#__PURE__*/React.createElement(BaseFormBind, {
        name: name,
        validators: validators,
        defaultValue: defaultValue
      }, function (bind) {
        var value = getValue({
          bind: bind,
          locale: locale,
          field: field,
          index: index
        });

        var onChange = function onChange(value) {
          return setValue({
            value: value,
            bind: bind,
            locale: locale,
            field: field,
            index: index
          });
        };

        var props = _objectSpread(_objectSpread({}, bind), {}, {
          value: value,
          onChange: onChange
        }); // Multiple-values functions below.


        if (field.multipleValues) {
          if (index >= 0) {
            props.removeValue = function () {
              if (index >= 0) {
                var _value = getValue({
                  bind: bind,
                  locale: locale,
                  field: field,
                  index: -1
                });

                _value = [].concat(_toConsumableArray(_value.slice(0, index)), _toConsumableArray(_value.slice(index + 1)));
                setValue({
                  value: _value,
                  bind: bind,
                  locale: locale,
                  field: field,
                  index: -1
                });
              }
            };
          } else {
            props.appendValue = function (newValue) {
              return onChange([].concat(_toConsumableArray(value), [newValue]));
            };

            props.prependValue = function (newValue) {
              return onChange([newValue].concat(_toConsumableArray(value)));
            };

            props.appendValues = function (newValues) {
              return onChange([].concat(_toConsumableArray(value), _toConsumableArray(newValues)));
            };
          }
        }

        if (typeof children === "function") {
          return children(props);
        }

        return /*#__PURE__*/cloneElement(children, props);
      });
    };

    return memoizedBindComponents.current[memoKey];
  }, [field.fieldId, locale]);

  if (!renderPlugin) {
    return t(_templateObject())({
      fieldName: /*#__PURE__*/React.createElement("strong", null, field.fieldId)
    });
  }

  return renderPlugin.renderer.render({
    field: field,
    getBind: getBind,
    Label: Label,
    contentModel: contentModel,
    locale: locale
  });
};

export default RenderFieldElement;
//# sourceMappingURL=RenderFieldElement.js.map