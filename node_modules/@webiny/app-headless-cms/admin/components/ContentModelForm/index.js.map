{"version":3,"sources":["../../../../src/admin/components/ContentModelForm/index.tsx"],"names":["React","I18NValue","getPlugins","ContentFormRender","ContentModelForm","props","contentModelRaw","contentModel","layout","fields","getFieldById","id","find","field","_id","getFields","returnFields","map","item","validatorPlugins","forEach","row","idIndex","Array","isArray","validation","validators","validatorPlugin","plugin","validator","name","validate","value","result","isInvalid","Error","message","filter","Boolean","getDefaultValues","overrides","values","content","onSubmit","onChange","locale","onForm","data","fieldsIds","fieldId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { getPlugins } from \"@webiny/plugins\";\nimport { cloneDeep, pick } from \"lodash\";\nimport { ContentFormRender } from \"./ContentFormRender\";\n\nimport {\n    CmsContentModelFormProps,\n    CmsFormFieldValidatorPlugin\n} from \"@webiny/app-headless-cms/types\";\n\nexport const ContentModelForm: React.FC<CmsContentModelFormProps> = props => {\n    const { contentModel: contentModelRaw } = props;\n\n    const contentModel = cloneDeep(contentModelRaw);\n    const { layout, fields } = contentModel;\n\n    const getFieldById = id => {\n        return fields.find(field => field._id === id);\n    };\n\n    const getFields = () => {\n        let returnFields = [];\n        if (layout) {\n            returnFields = cloneDeep(layout);\n        } else {\n            // If no layout provided, just render all fields one below other.\n            returnFields = [...fields.map(item => [item._id])];\n        }\n\n        const validatorPlugins: CmsFormFieldValidatorPlugin[] = getPlugins(\"form-field-validator\");\n\n        returnFields.forEach(row => {\n            row.forEach((id, idIndex) => {\n                row[idIndex] = getFieldById(id);\n\n                if (Array.isArray(row[idIndex].validation)) {\n                    row[idIndex].validators = row[idIndex].validation\n                        .map(item => {\n                            const validatorPlugin = validatorPlugins.find(\n                                plugin => plugin.validator.name === item.name\n                            );\n\n                            if (\n                                !validatorPlugin ||\n                                typeof validatorPlugin.validator.validate !== \"function\"\n                            ) {\n                                return;\n                            }\n\n                            return async value => {\n                                let isInvalid;\n                                try {\n                                    const result = await validatorPlugin.validator.validate(\n                                        value,\n                                        item\n                                    );\n                                    isInvalid = result === false;\n                                } catch (e) {\n                                    isInvalid = true;\n                                }\n\n                                if (isInvalid) {\n                                    throw new Error(\n                                        I18NValue({ value: item.message }) || \"Invalid value.\"\n                                    );\n                                }\n                            };\n                        })\n                        .filter(Boolean);\n                }\n            });\n        });\n\n        return returnFields;\n    };\n\n    const getDefaultValues = (overrides = {}) => {\n        const values = {};\n        // TODO: finish default values.\n        /*fields.forEach(field => {\n            const fieldId = field.fieldId;\n\n            if (\n                fieldId &&\n                \"defaultValue\" in field.settings &&\n                typeof field.settings.defaultValue !== \"undefined\"\n            ) {\n                values[fieldId] = field.settings.defaultValue;\n            }\n        });*/\n        return { ...values, ...overrides };\n    };\n\n    const { content, onSubmit, onChange, locale, onForm } = props;\n\n    return (\n        <ContentFormRender\n            onForm={onForm}\n            locale={locale}\n            getFields={getFields}\n            getDefaultValues={getDefaultValues}\n            content={content}\n            contentModel={contentModel}\n            onChange={onChange}\n            onSubmit={async data => {\n                const fieldsIds = contentModel.fields.map(item => item.fieldId);\n                return onSubmit(pick(data, [...fieldsIds]));\n            }}\n        />\n    );\n};\n"],"file":"index.js"}