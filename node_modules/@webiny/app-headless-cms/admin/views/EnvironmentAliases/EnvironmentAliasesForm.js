import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject8() {
  var data = _taggedTemplateLiteral(["Save environment alias"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["Choose an existing environment to which this alias will point to."]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["Environment"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["No environment selected."]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Description"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Environment with slug \"{slug}\" already exists."]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Will be used as part of the GraphQL API URL."]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["New environment alias"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Input } from "@webiny/ui/Input";
import { ButtonPrimary } from "@webiny/ui/Button";
import { CircularProgress } from "@webiny/ui/Progress";
import { useCrud } from "@webiny/app-admin/hooks/useCrud";
import { i18n } from "@webiny/app/i18n";
import { useApolloClient } from "react-apollo";
import get from "lodash.get";
import { GET_ENVIRONMENT_ALIAS_BY_SLUG } from "./graphql";
import NameSlug from "../../components/NameSlug";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import { useCms } from "@webiny/app-headless-cms/admin/hooks";
import { SimpleFormHeader, SimpleForm, SimpleFormFooter, SimpleFormContent } from "@webiny/app-admin/components/SimpleForm";
var t = i18n.ns("app-headless-cms/admin/environmentAliases/form");

function EnvironmentAliasesForm() {
  var _useCrud = useCrud(),
      crudForm = _useCrud.form;

  var _useCms = useCms(),
      environmentsOptions = _useCms.environments.environments;

  var apolloClient = useApolloClient();
  return /*#__PURE__*/React.createElement(Form, crudForm, function (_ref) {
    var data = _ref.data,
        form = _ref.form,
        Bind = _ref.Bind,
        setValue = _ref.setValue;
    return /*#__PURE__*/React.createElement(SimpleForm, {
      "data-testid": "pb-environmentAliases-form"
    }, crudForm.loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
      title: data.name ? data.name : t(_templateObject())
    }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(NameSlug, {
      newEntry: !crudForm.id,
      Bind: Bind,
      setValue: setValue,
      slug: {
        description: t(_templateObject2())
      },
      validateSlugUniqueness: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var getEnvironmentAliasBySlug, existingEnvironmentAlias;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!data.id) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.next = 4;
                return apolloClient.query({
                  query: GET_ENVIRONMENT_ALIAS_BY_SLUG,
                  variables: {
                    slug: data.slug
                  }
                });

              case 4:
                getEnvironmentAliasBySlug = _context.sent;
                existingEnvironmentAlias = get(getEnvironmentAliasBySlug, "data.cms.getEnvironmentAlias.data");

                if (!existingEnvironmentAlias) {
                  _context.next = 8;
                  break;
                }

                throw new Error(t(_templateObject3())({
                  slug: data.slug
                }));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))
    }), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "description"
    }, function (props) {
      return /*#__PURE__*/React.createElement(Input, Object.assign({}, props, {
        rows: 4,
        maxLength: 200,
        characterCount: true,
        label: t(_templateObject4())
      }));
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "environment"
    }, function (props) {
      return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, props, {
        placeholder: t(_templateObject5()),
        label: t(_templateObject6()),
        options: environmentsOptions,
        description: t(_templateObject7())
      }));
    })))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: form.submit
    }, t(_templateObject8()))));
  });
}

export default EnvironmentAliasesForm;
//# sourceMappingURL=EnvironmentAliasesForm.js.map