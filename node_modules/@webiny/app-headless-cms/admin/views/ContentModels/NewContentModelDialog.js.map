{"version":3,"sources":["../../../../src/admin/views/ContentModels/NewContentModelDialog.tsx"],"names":["React","css","useRouter","Form","Input","Select","CREATE_CONTENT_MODEL","LIST_MENU_CONTENT_GROUPS_MODELS","get","useSnackbar","CircularProgress","validation","useQuery","useMutation","i18n","ButtonDefault","Dialog","DialogTitle","DialogContent","DialogActions","Grid","Cell","t","ns","narrowDialog","width","minWidth","noPadding","padding","NewContentModelDialog","open","onClose","contentModelsDataList","useState","loading","setLoading","showSnackbar","history","createContentModel","skip","data","contentModelGroups","map","item","value","id","label","name","group","variables","awaitRefetchQueries","refetchQueries","response","error","message","refresh","push","Bind","submit","create","props"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { Form } from \"@webiny/form\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { CREATE_CONTENT_MODEL, LIST_MENU_CONTENT_GROUPS_MODELS } from \"../../viewsGraphql\";\nimport get from \"lodash.get\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { validation } from \"@webiny/validation\";\nimport { useQuery, useMutation } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { ButtonDefault } from \"@webiny/ui/Button\";\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogOnClose\n} from \"@webiny/ui/Dialog\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/views/content-models/new-content-model-dialog\");\n\nconst narrowDialog = css({\n    \".mdc-dialog__surface\": {\n        width: 600,\n        minWidth: 600\n    }\n});\n\nconst noPadding = css({\n    padding: \"5px !important\"\n});\n\nexport type NewContentModelDialogProps = {\n    open: boolean;\n    onClose: DialogOnClose;\n    contentModelsDataList: any;\n};\n\nconst NewContentModelDialog: React.FC<NewContentModelDialogProps> = ({\n    open,\n    onClose,\n    contentModelsDataList\n}) => {\n    const [loading, setLoading] = React.useState(false);\n    const { showSnackbar } = useSnackbar();\n    const { history } = useRouter();\n\n    const [createContentModel] = useMutation(CREATE_CONTENT_MODEL);\n    const { data } = useQuery(LIST_MENU_CONTENT_GROUPS_MODELS, {\n        skip: !open\n    });\n\n    const contentModelGroups = get(data, \"listContentModelGroups.data\", []).map(item => {\n        return { value: item.id, label: item.name };\n    });\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            className={narrowDialog}\n            data-testid=\"cms-new-content-model-modal\"\n        >\n            {open && (\n                <Form\n                    data={{\n                        group: get(contentModelGroups, \"0.value\")\n                    }}\n                    onSubmit={async data => {\n                        setLoading(true);\n                        const response = get(\n                            await createContentModel({\n                                variables: { data },\n                                awaitRefetchQueries: true,\n                                refetchQueries: [\n                                    \"HeadlessCmsListContentModels\",\n                                    \"HeadlessCmsListMenuContentGroupsModels\"\n                                ]\n                            }),\n                            \"data.createContentModel\"\n                        );\n\n                        if (response.error) {\n                            setLoading(false);\n                            return showSnackbar(response.error.message);\n                        }\n\n                        await contentModelsDataList.refresh();\n                        history.push(\"/cms/content-models/\" + response.data.id);\n                    }}\n                >\n                    {({ Bind, submit }) => (\n                        <>\n                            {loading && <CircularProgress />}\n                            <DialogTitle>{t`New Content Model`}</DialogTitle>\n                            <DialogContent>\n                                <Grid className={noPadding}>\n                                    <Cell span={12}>\n                                        <Bind\n                                            name={\"name\"}\n                                            validators={validation.create(\"required,maxLength:100\")}\n                                        >\n                                            <Input\n                                                label={t`Name`}\n                                                description={t`The name of the content model`}\n                                            />\n                                        </Bind>\n                                    </Cell>\n                                    <Cell span={12}>\n                                        <Bind\n                                            name={\"group\"}\n                                            validators={validation.create(\"required\")}\n                                        >\n                                            <Select\n                                                description={t`Choose a content model group`}\n                                                label={t`Content model group`}\n                                                options={contentModelGroups}\n                                            />\n                                        </Bind>\n                                    </Cell>\n                                    <Cell span={12}>\n                                        <Bind name=\"description\">\n                                            {props => (\n                                                <Input\n                                                    {...props}\n                                                    rows={4}\n                                                    maxLength={200}\n                                                    characterCount\n                                                    label={t`Description`}\n                                                />\n                                            )}\n                                        </Bind>\n                                    </Cell>\n                                </Grid>\n                            </DialogContent>\n                            <DialogActions>\n                                <ButtonDefault onClick={submit}>+ {t`Create`}</ButtonDefault>\n                            </DialogActions>\n                        </>\n                    )}\n                </Form>\n            )}\n        </Dialog>\n    );\n};\n\nexport default NewContentModelDialog;\n"],"file":"NewContentModelDialog.js"}