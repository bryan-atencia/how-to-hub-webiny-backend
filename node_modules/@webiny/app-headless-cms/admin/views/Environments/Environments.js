import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Record deleted successfully."]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Record deleted successfully. Switched to first available environment."]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { SplitView, LeftPanel, RightPanel } from "@webiny/app-admin/components/SplitView";
import { FloatingActionButton } from "@webiny/app-admin/components/FloatingActionButton";
import EnvironmentsDataList from "./EnvironmentsDataList";
import EnvironmentsForm from "./EnvironmentsForm";
import { CrudProvider } from "@webiny/app-admin/contexts/Crud";
import { useCms } from "@webiny/app-headless-cms/admin/hooks";
import { READ_ENVIRONMENT, LIST_ENVIRONMENTS, CREATE_ENVIRONMENT, UPDATE_ENVIRONMENT, DELETE_ENVIRONMENT } from "./graphql";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-headless-cms/admin/environments");

function Environments() {
  var _useCms = useCms(),
      _useCms$environments = _useCms.environments,
      refreshEnvironments = _useCms$environments.refreshEnvironments,
      isSelectedEnvironment = _useCms$environments.isSelectedEnvironment;

  return /*#__PURE__*/React.createElement(CrudProvider, {
    delete: {
      mutation: DELETE_ENVIRONMENT,
      snackbar: function snackbar(item) {
        if (isSelectedEnvironment(item)) {
          return t(_templateObject());
        }

        return t(_templateObject2());
      }
    },
    read: READ_ENVIRONMENT,
    create: {
      mutation: CREATE_ENVIRONMENT,
      options: {
        onCompleted: refreshEnvironments
      }
    },
    update: {
      mutation: UPDATE_ENVIRONMENT
    },
    list: {
      query: LIST_ENVIRONMENTS,
      variables: {
        sort: {
          savedOn: -1
        }
      }
    }
  }, function (_ref) {
    var actions = _ref.actions;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SplitView, null, /*#__PURE__*/React.createElement(LeftPanel, {
      span: 4
    }, /*#__PURE__*/React.createElement(EnvironmentsDataList, null)), /*#__PURE__*/React.createElement(RightPanel, {
      span: 8
    }, /*#__PURE__*/React.createElement(EnvironmentsForm, null))), /*#__PURE__*/React.createElement(FloatingActionButton, {
      "data-testid": "new-record-button",
      onClick: actions.resetForm
    }));
  });
}

export default Environments;
//# sourceMappingURL=Environments.js.map