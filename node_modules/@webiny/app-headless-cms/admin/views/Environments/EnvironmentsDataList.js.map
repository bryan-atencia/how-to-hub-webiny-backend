{"version":3,"sources":["../../../../src/admin/views/Environments/EnvironmentsDataList.tsx"],"names":["React","i18n","DeleteIcon","useCrud","Typography","useCms","DataList","List","ListItem","ListItemText","ListItemTextSecondary","ListItemMeta","ListActions","Link","ConfirmationDialogWithInput","t","ns","EnvironmentsDataList","actions","list","environments","refreshEnvironments","selectAvailableEnvironment","isSelectedEnvironment","label","sorters","createdOn","name","data","isSelected","select","map","item","id","default","environmentAlias","e","stopPropagation","verb","showConfirmation","delete"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { DeleteIcon } from \"@webiny/ui/List/DataList/icons\";\nimport { useCrud } from \"@webiny/app-admin/hooks/useCrud\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { useCms } from \"@webiny/app-headless-cms/admin/hooks\";\nimport {\n    DataList,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemTextSecondary,\n    ListItemMeta,\n    ListActions\n} from \"@webiny/ui/List\";\nimport { Link } from \"@webiny/react-router\";\nimport { ConfirmationDialogWithInput } from \"./ConfirmationDialogWithInput\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/environments/data-list\");\n\nconst EnvironmentsDataList = () => {\n    const { actions, list } = useCrud();\n\n    const {\n        environments: { refreshEnvironments, selectAvailableEnvironment, isSelectedEnvironment }\n    } = useCms();\n\n    return (\n        <DataList\n            {...list}\n            title={t`Environments`}\n            sorters={[\n                {\n                    label: t`Newest to oldest`,\n                    sorters: { createdOn: -1 }\n                },\n                {\n                    label: t`Oldest to newest`,\n                    sorters: { createdOn: 1 }\n                },\n                {\n                    label: t`Name A-Z`,\n                    sorters: { name: 1 }\n                },\n                {\n                    label: t`Name Z-A`,\n                    sorters: { name: -1 }\n                }\n            ]}\n        >\n            {({ data, isSelected, select }) => {\n                return (\n                    <List data-testid=\"default-data-list\">\n                        {data.map(item => (\n                            <ListItem key={item.id} selected={isSelected(item)}>\n                                <ListItemText onClick={() => select(item)}>\n                                    {item.name}{\" \"}\n                                    {item.default && (\n                                        <Typography use={\"overline\"}>{t`(default)`}</Typography>\n                                    )}\n                                    <ListItemTextSecondary>\n                                        {item.environmentAlias\n                                            ? t`Assigned to: {environmentAlias}`({\n                                                  environmentAlias: (\n                                                      <Link\n                                                          onClick={e => e.stopPropagation()}\n                                                          to={`/settings/cms/environments/aliases?id=${item.environmentAlias.id}`}\n                                                          title={t`This environment is linked with the \"{environmentAlias}\" alias.`(\n                                                              {\n                                                                  environmentAlias:\n                                                                      item.environmentAlias.name\n                                                              }\n                                                          )}\n                                                      >\n                                                          {item.environmentAlias.name}\n                                                      </Link>\n                                                  )\n                                              })\n                                            : t`Not linked with an alias.`}\n                                    </ListItemTextSecondary>\n                                </ListItemText>\n\n                                <ListItemMeta>\n                                    <ListActions>\n                                        <ConfirmationDialogWithInput\n                                            title={\"Remove environment\"}\n                                            message={t`This action {verb} be undone. This will permanently delete the {name} environment and all of the created content.`(\n                                                { name: <b>{item.name}</b>, verb: <b>cannot</b> }\n                                            )}\n                                            resourceName={item.name}\n                                        >\n                                            {({ showConfirmation }) => (\n                                                <DeleteIcon\n                                                    onClick={() => {\n                                                        showConfirmation(async () => {\n                                                            // If we deleted the environment that was currently selected,\n                                                            // let's automatically switch to the first available one.\n                                                            await actions.delete(item);\n\n                                                            if (isSelectedEnvironment(item)) {\n                                                                selectAvailableEnvironment([item]);\n                                                            }\n\n                                                            refreshEnvironments();\n                                                        });\n                                                    }}\n                                                />\n                                            )}\n                                        </ConfirmationDialogWithInput>\n                                    </ListActions>\n                                </ListItemMeta>\n                            </ListItem>\n                        ))}\n                    </List>\n                );\n            }}\n        </DataList>\n    );\n};\n\nexport default EnvironmentsDataList;\n"],"file":"EnvironmentsDataList.js"}