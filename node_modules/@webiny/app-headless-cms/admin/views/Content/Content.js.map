{"version":3,"sources":["../../../../src/admin/views/Content/Content.tsx"],"names":["React","useMemo","useState","SplitView","LeftPanel","RightPanel","useDataList","ContentDataList","ContentDetails","createListQuery","get","useApolloClient","useQuery","GET_CONTENT_MODEL_BY_MODEL_ID","FloatingActionButton","useRouter","useSnackbar","i18n","t","ns","ContentRender","contentModel","apolloClient","history","LIST_QUERY","modelId","query","URLSearchParams","location","search","variables","searchField","titleFieldId","where","dataList","client","getData","response","getMeta","getError","delete","push","toString","Content","match","setContentModel","showSnackbar","skip","onCompleted","data"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { SplitView, LeftPanel, RightPanel } from \"@webiny/app-admin/components/SplitView\";\nimport { useDataList } from \"@webiny/app/hooks/useDataList\";\nimport ContentDataList from \"./ContentDataList\";\nimport ContentDetails from \"./ContentDetails\";\nimport { createListQuery } from \"@webiny/app-headless-cms/admin/components/ContentModelForm/graphql\";\nimport get from \"lodash.get\";\nimport { useApolloClient, useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { GET_CONTENT_MODEL_BY_MODEL_ID } from \"./graphql\";\nimport { FloatingActionButton } from \"@webiny/app-admin/components/FloatingActionButton\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { i18n } from \"@webiny/app/i18n\";\nconst t = i18n.ns(\"app-headless-cms/admin/content\");\n\nconst ContentRender = ({ contentModel }) => {\n    const apolloClient = useApolloClient();\n    const { history } = useRouter();\n\n    const LIST_QUERY = useMemo(() => createListQuery(contentModel), [contentModel.modelId]);\n\n    const query = new URLSearchParams(location.search);\n\n    let variables = {};\n    if (query.get(\"search\")) {\n        // We use the title field with the \"contains\" operator for doing basic searches.\n        const searchField = contentModel.titleFieldId + \"_contains\";\n        variables = {\n            where: {\n                [searchField]: query.get(\"search\")\n            }\n        };\n    }\n\n    const dataList = useDataList({\n        client: apolloClient,\n        query: LIST_QUERY,\n        variables,\n        getData: response => {\n            return get(response, \"content.data\");\n        },\n        getMeta: response => {\n            return get(response, \"content.meta\");\n        },\n        getError: response => {\n            return get(response, \"content.error\");\n        }\n    });\n\n    return (\n        <React.Fragment>\n            <SplitView>\n                <LeftPanel span={4}>\n                    <ContentDataList dataList={dataList} contentModel={contentModel} />\n                </LeftPanel>\n                <RightPanel span={8}>\n                    <ContentDetails dataList={dataList} contentModel={contentModel} />\n                </RightPanel>\n            </SplitView>\n            <FloatingActionButton\n                data-testid=\"new-record-button\"\n                onClick={() => {\n                    const query = new URLSearchParams(location.search);\n                    query.delete(\"id\");\n                    history.push({ search: query.toString() });\n                }}\n            />\n        </React.Fragment>\n    );\n};\n\nconst Content = () => {\n    const { match } = useRouter();\n    const [contentModel, setContentModel] = useState();\n    const { history } = useRouter();\n    const modelId = get(match, \"params.modelId\");\n    const { showSnackbar } = useSnackbar();\n\n    useQuery(GET_CONTENT_MODEL_BY_MODEL_ID, {\n        skip: !modelId,\n        variables: { modelId },\n        onCompleted: data => {\n            const contentModel = get(data, \"getContentModel.data\");\n            if (contentModel) {\n                return setContentModel(contentModel);\n            }\n\n            history.push(\"/cms/content-models\");\n            showSnackbar(\n                t`Could not load content for \"{modelId}\" model. Redirecting...`({\n                    modelId\n                })\n            );\n        }\n    });\n\n    if (!contentModel) {\n        return null;\n    }\n\n    // Added \"key\" prop which somehow fixes the \"Internal Error: may not update existing query string in store\" error\n    // that would occur when doing a search on a different content model (via the global search bar).\n    // Didn't find what was actually causing the issue, nor the Google returned any results for the error above.\n    return <ContentRender contentModel={contentModel} key={contentModel.modelId} />;\n};\n\nexport default Content;\n"],"file":"Content.js"}