import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import React, { useCallback, useMemo, useState } from "react";
import { useRouter } from "@webiny/react-router";
import styled from "@emotion/styled";
import { renderPlugins } from "@webiny/app/plugins";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useQuery } from "@webiny/app-headless-cms/admin/hooks";
import { createReadQuery, createListRevisionsQuery } from "@webiny/app-headless-cms/admin/components/ContentModelForm/graphql";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
var DetailsContainer = /*#__PURE__*/styled("div", {
  target: "e46f7jz0",
  label: "DetailsContainer"
})({
  overflow: "hidden",
  position: "relative",
  nav: {
    backgroundColor: "var(--mdc-theme-surface)"
  }
});

var ContentDetails = function ContentDetails(_ref) {
  var contentModel = _ref.contentModel,
      dataList = _ref.dataList;

  var _useRouter = useRouter(),
      history = _useRouter.history,
      location = _useRouter.location;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var i18n = useI18N();

  var _useState3 = useState(i18n.getLocale().id),
      _useState4 = _slicedToArray(_useState3, 2),
      locale = _useState4[0],
      setLocale = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      loading = _useState6[0],
      setLoading = _useState6[1];

  var query = new URLSearchParams(location.search);
  var contentId = query.get("id");

  var _useMemo = useMemo(function () {
    return {
      READ_CONTENT: createReadQuery(contentModel),
      LIST_REVISIONS: createListRevisionsQuery(contentModel)
    };
  }, [contentModel.modelId]),
      READ_CONTENT = _useMemo.READ_CONTENT,
      LIST_REVISIONS = _useMemo.LIST_REVISIONS;

  var _useQuery = useQuery(READ_CONTENT, {
    variables: {
      id: contentId
    },
    skip: !contentId,
    onCompleted: function onCompleted(data) {
      var error = _get(data, "content.error.message");

      if (error) {
        query.delete("id");
        history.push({
          search: query.toString()
        });
        showSnackbar(error);
      }
    }
  }),
      data = _useQuery.data,
      readQueryLoading = _useQuery.loading;

  var getLocale = useCallback(function () {
    return locale;
  }, [locale]);
  var getLoading = useCallback(function () {
    return readQueryLoading || loading;
  }, [loading, readQueryLoading]);
  var content = _get(data, "content.data") || {};

  var contentParent = _get(content, "meta.parent");

  var revisionsList = useQuery(LIST_REVISIONS, {
    skip: !contentParent,
    variables: {
      id: contentParent
    }
  });
  return /*#__PURE__*/React.createElement(DetailsContainer, null, /*#__PURE__*/React.createElement("test-id", {
    "data-testid": "cms-content-details"
  }, renderPlugins("cms-content-details", {
    getLocale: getLocale,
    setLocale: setLocale,
    setLoading: setLoading,
    getLoading: getLoading,
    dataList: dataList,
    content: content,
    contentModel: contentModel,
    revisionsList: revisionsList,
    state: state,
    setState: setState
  })));
};

export default ContentDetails;
//# sourceMappingURL=ContentDetails.js.map