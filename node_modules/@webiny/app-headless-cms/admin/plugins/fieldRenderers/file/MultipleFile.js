import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject() {
  var data = _taggedTemplateLiteral(["Select a file\""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useState, useEffect, useCallback } from "react";
import FileUpload from "./FileUpload";
import fileIcon from "../../fields/icons/round_insert_drive_file-24px.svg";
import { createRenderImagePreview, imageWrapperStyles, imageExtensions } from "./utils";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-headless-cms/admin/fields/file");
var imagePreviewProps = {
  transform: {
    width: 300
  },
  style: {
    width: "100%",
    height: 232,
    objectFit: "cover"
  }
};

var MultipleFile = function MultipleFile(props) {
  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isImage = _useState2[0],
      setIsImage = _useState2[1]; // Update `previewURL`


  useEffect(function () {
    if (props.bind.value && props.bind.value.includes("http")) {
      var key = props.bind.value.split("/").pop();

      if (props.previewURLs[key] === undefined) {
        props.setPreviewURLs(_objectSpread(_objectSpread({}, props.previewURLs), {}, _defineProperty({}, key, null)));
      }
    }
  }, [props.bind.value, props.previewURLs]); // Update `isImage`

  useEffect(function () {
    if (props.bind.value) {
      setIsImage(imageExtensions.some(function (extension) {
        return props.bind.value.includes(extension);
      }));
    }
  }, [props.bind.value]);
  var getImageSrc = useCallback(function () {
    if (imageExtensions.some(function (extension) {
      return props.bind.value.includes(extension);
    })) {
      return props.bind.value;
    }

    return fileIcon;
  }, [props.bind.value]);
  var getValue = useCallback(function () {
    if (!props.bind.value) {
      return props.bind.value;
    }

    return {
      src: props.previewURLs[props.bind.value] || getImageSrc()
    };
  }, [props.previewURLs, props.bind.value]);
  return /*#__PURE__*/React.createElement(FileUpload, Object.assign({}, props.bind, {
    onChange: function onChange(value) {
      if (value !== null) {
        var keys = value.map(function (file) {
          return file.key;
        });

        var newPreviewURLs = _objectSpread({}, props.previewURLs);

        if (keys.length === 1) {
          props.bind.onChange(keys[0]);
          newPreviewURLs[keys[0]] = value[0].src;
        } else {
          props.appendValue(keys);
          value.forEach(function (file) {
            newPreviewURLs[file.key] = file.src;
          });
        }

        props.setPreviewURLs(newPreviewURLs);
      } else {
        props.removeValue();
        props.setPreviewURLs(_objectSpread(_objectSpread({}, props.previewURLs), {}, _defineProperty({}, props.bind.value, null)));
      }
    },
    value: getValue(),
    imagePreviewProps: imagePreviewProps,
    multiple: props.field.multipleValues,
    placeholder: t(_templateObject()),
    className: imageWrapperStyles,
    renderImagePreview: !isImage && createRenderImagePreview({
      value: props.bind.value,
      imagePreviewProps: imagePreviewProps
    })
  }));
};

export default MultipleFile;
//# sourceMappingURL=MultipleFile.js.map