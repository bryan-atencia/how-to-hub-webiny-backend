import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function _templateObject() {
  var data = _taggedTemplateLiteral(["Select a file\""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useState, useEffect, useCallback } from "react";
import { createRenderImagePreview, imageExtensions } from "./utils";
import FileUpload from "./FileUpload";
import fileIcon from "../../fields/icons/round_insert_drive_file-24px.svg";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-headless-cms/admin/fields/file");
var imagePreviewProps = {
  transform: {
    width: 300
  },
  style: {
    width: "100%",
    height: 300,
    objectFit: "contain"
  }
};

var SingleFile = function SingleFile(props) {
  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      previewURL = _useState2[0],
      setPreviewURL = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      isImage = _useState4[0],
      setIsImage = _useState4[1]; // Update `previewURL`


  useEffect(function () {
    if (props.bind.value && props.bind.value.includes("http")) {
      setPreviewURL(null);
    }
  }, [props.bind.value]); // Update `isImage`

  useEffect(function () {
    if (props.bind.value) {
      setIsImage(imageExtensions.some(function (extension) {
        return props.bind.value.includes(extension);
      }));
    }
  }, [props.bind.value]);
  var getImageSrc = useCallback(function () {
    if (imageExtensions.some(function (extension) {
      return props.bind.value.includes(extension);
    })) {
      return props.bind.value;
    }

    return fileIcon;
  }, [props.bind.value]);
  var getValue = useCallback(function () {
    if (!props.bind.value) {
      return props.bind.value;
    }

    return {
      src: previewURL || getImageSrc()
    };
  }, [previewURL, props.bind.value]);
  return /*#__PURE__*/React.createElement(FileUpload, Object.assign({}, props.bind, {
    onChange: function onChange(value) {
      if (value !== null) {
        props.bind.onChange(value.key);
        setPreviewURL(value.src);
      } else {
        props.bind.onChange(value);
        setPreviewURL(value);
      }
    },
    value: getValue(),
    imagePreviewProps: imagePreviewProps,
    placeholder: t(_templateObject()),
    renderImagePreview: !isImage && createRenderImagePreview({
      value: props.bind.value,
      imagePreviewProps: imagePreviewProps
    })
  }));
};

export default SingleFile;
//# sourceMappingURL=SingleFile.js.map