import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["+ Add value"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { I18NValue } from "@webiny/app-i18n/components";
import { ButtonDefault } from "@webiny/ui/Button";
import { i18n } from "@webiny/app/i18n";
import { Cell, Grid } from "@webiny/ui/Grid";
import { css } from "emotion";
var t = i18n.ns("app-headless-cms/admin/fields/text");
var style = {
  addButton: /*#__PURE__*/css({
    textAlign: "center",
    width: "100%"
  }, "label:addButton;")
};

var DynamicListMultipleValues = function DynamicListMultipleValues(_ref) {
  var field = _ref.field,
      getBind = _ref.getBind,
      Label = _ref.Label,
      children = _ref.children;
  var Bind = getBind();
  var FirstFieldBind = getBind(0);
  return /*#__PURE__*/React.createElement(Bind, null, function (bindField) {
    var value = bindField.value,
        appendValue = bindField.appendValue;
    return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, field.label && /*#__PURE__*/React.createElement(Label, null, /*#__PURE__*/React.createElement(I18NValue, {
      value: field.label
    })), /*#__PURE__*/React.createElement(FirstFieldBind, null, function (bindIndex) {
      return children({
        field: field,
        bind: {
          index: bindIndex,
          field: bindField
        },
        index: 0
      });
    })), bindField.value.slice(1).map(function (item, index) {
      var realIndex = index + 1;
      var BindField = getBind(realIndex);
      return /*#__PURE__*/React.createElement(Cell, {
        span: 12,
        key: realIndex
      }, /*#__PURE__*/React.createElement(BindField, null, function (bindIndex) {
        return children({
          field: field,
          bind: {
            index: bindIndex,
            field: bindField
          },
          index: realIndex
        });
      }));
    }), /*#__PURE__*/React.createElement(Cell, {
      span: 12,
      className: style.addButton
    }, /*#__PURE__*/React.createElement(ButtonDefault, {
      disabled: value[0] === undefined,
      onClick: function onClick() {
        return appendValue("");
      }
    }, t(_templateObject()))));
  });
};

export default DynamicListMultipleValues;
//# sourceMappingURL=DynamicListMultipleValues.js.map