import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Value {number}"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Value {number}"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Renders inputs for various formats of dates and times."]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Date/Time Inputs"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { Input } from "@webiny/ui/Input";
import DateTimeWithoutTimezone from "./DateTimeWithoutTimezone";
import DateTimeWithTimezone from "./DateTimeWithTimezone";
import Time from "./Time";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-headless-cms/admin/fields/date-time");
import get from "lodash/get";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!@webiny/app-headless-cms/admin/icons/close.svg";
import DynamicListMultipleValues from "@webiny/app-headless-cms/admin/plugins/fieldRenderers/DynamicListMultipleValues";
var plugin = {
  type: "cms-editor-field-renderer",
  name: "cms-editor-field-renderer-date-times",
  renderer: {
    rendererName: "date-time-inputs",
    name: t(_templateObject()),
    description: t(_templateObject2()),
    canUse: function canUse(_ref) {
      var field = _ref.field;
      return field.type === "datetime" && field.multipleValues && !get(field, "predefinedValues.enabled");
    },
    render: function render(props) {
      var field = props.field;
      return /*#__PURE__*/React.createElement(DynamicListMultipleValues, props, function (_ref2) {
        var bind = _ref2.bind,
            index = _ref2.index;
        var trailingIcon = index > 0 && {
          icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
          onClick: bind.index.removeValue
        };

        if (field.settings.type === "dateTimeWithoutTimezone") {
          return /*#__PURE__*/React.createElement(DateTimeWithoutTimezone, {
            field: field,
            bind: bind.index,
            trailingIcon: trailingIcon
          });
        }

        if (field.settings.type === "dateTimeWithTimezone") {
          return /*#__PURE__*/React.createElement(DateTimeWithTimezone, {
            field: field,
            bind: bind.index,
            trailingIcon: trailingIcon
          });
        }

        if (field.settings.type === "time") {
          return /*#__PURE__*/React.createElement(Time, {
            field: field,
            bind: bind.index,
            label: t(_templateObject3())({
              number: index + 1
            }),
            trailingIcon: trailingIcon
          });
        }

        return /*#__PURE__*/React.createElement(Input, Object.assign({}, bind.index, {
          type: field.settings.type,
          label: t(_templateObject4())({
            number: index + 1
          }),
          trailingIcon: trailingIcon
        }));
      });
    }
  }
};
export default plugin;
//# sourceMappingURL=dateTimeFields.js.map