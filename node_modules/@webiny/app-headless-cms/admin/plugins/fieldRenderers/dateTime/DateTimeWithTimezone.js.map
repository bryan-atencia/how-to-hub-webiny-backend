{"version":3,"sources":["../../../../../src/admin/plugins/fieldRenderers/dateTime/DateTimeWithTimezone.tsx"],"names":["React","Input","Select","Grid","Cell","UTC_TIMEZONES","DEFAULT_TIME","DEFAULT_DATE","DEFAULT_TIMEZONE","appendTextToLabel","RemoveFieldButton","DateTimeWithTimezone","props","useState","date","setDate","time","setTime","timezone","setTimezone","useEffect","bind","value","split","isoDate","rest","sign","includes","fullTime","zone","formattedDate","formattedTime","formattedTimezone","cellSize","trailingIcon","onChange","field","label","map","t"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SACIC,aADJ,EAEIC,YAFJ,EAGIC,YAHJ,EAIIC,gBAJJ,EAKIC,iBALJ,EAMIC,iBANJ,QAOO,SAPP;;AASA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,KAAK,EAAI;AAClC;AADkC,wBAEVZ,KAAK,CAACa,QAAN,CAAe,EAAf,CAFU;AAAA;AAAA,MAE3BC,IAF2B;AAAA,MAErBC,OAFqB;;AAAA,yBAGVf,KAAK,CAACa,QAAN,CAAe,EAAf,CAHU;AAAA;AAAA,MAG3BG,IAH2B;AAAA,MAGrBC,OAHqB;;AAAA,yBAIFjB,KAAK,CAACa,QAAN,CAAe,EAAf,CAJE;AAAA;AAAA,MAI3BK,QAJ2B;AAAA,MAIjBC,WAJiB;;AAMlCnB,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AAClB,QAAIR,KAAK,CAACS,IAAN,CAAWC,KAAX,KAAqB,IAAzB,EAA+B;AAC3B;AACAP,MAAAA,OAAO,CAACR,YAAD,CAAP;AACAU,MAAAA,OAAO,CAACX,YAAD,CAAP;AACAa,MAAAA,WAAW,CAACX,gBAAD,CAAX;AACA;AACH;;AAPiB,gCAQMI,KAAK,CAACS,IAAN,CAAWC,KAAX,CAAiBC,KAAjB,CAAuB,GAAvB,CARN;AAAA;AAAA,QAQXC,OARW;AAAA,QAQFC,IARE;;AASlB,QAAMC,IAAI,GAAGD,IAAI,CAACE,QAAL,CAAc,GAAd,IAAqB,GAArB,GAA2B,GAAxC;;AATkB,sBAUOF,IAAI,CAACF,KAAL,CAAWG,IAAX,CAVP;AAAA;AAAA,QAUXE,QAVW;AAAA,QAUDC,IAVC;;AAYlB,QAAMC,aAAa,GAAGN,OAAtB;AACA,QAAMO,aAAa,GAAGH,QAAtB;AACA,QAAMI,iBAAiB,GAAGN,IAAI,GAAGG,IAAjC,CAdkB,CAgBlB;;AACA,QAAIf,IAAI,KAAKgB,aAAb,EAA4B;AACxBf,MAAAA,OAAO,CAACe,aAAD,CAAP;AACH;;AACD,QAAId,IAAI,KAAKe,aAAb,EAA4B;AACxBd,MAAAA,OAAO,CAACc,aAAD,CAAP;AACH;;AACD,QAAIb,QAAQ,KAAKc,iBAAjB,EAAoC;AAChCb,MAAAA,WAAW,CAACa,iBAAD,CAAX;AACH;AACJ,GA1BD,EA0BG,CAACpB,KAAK,CAACS,IAAN,CAAWC,KAAZ,CA1BH;AA4BA,MAAMW,QAAQ,GAAGrB,KAAK,CAACsB,YAAN,GAAqB,CAArB,GAAyB,CAA1C;AAEA,sBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,KAAD;AACI,IAAA,IAAI,kCACGtB,KAAK,CAACS,IADT;AAEAC,MAAAA,KAAK,EAAER,IAFP;AAGAqB,MAAAA,QAAQ,EAAE,kBAAAb,KAAK,EAAI;AACfP,QAAAA,OAAO,CAACO,KAAD,CAAP;AACA,eAAOV,KAAK,CAACS,IAAN,CAAWc,QAAX,WAAuBb,KAAvB,cAAgCN,IAAhC,SAAuCE,QAAvC,EAAP;AACH;AAND,MADR;AASI,IAAA,KAAK,kCACEN,KAAK,CAACwB,KADR;AAEDC,MAAAA,KAAK,EAAE5B,iBAAiB,CAACG,KAAK,CAACwB,KAAN,CAAYC,KAAb,EAAoB,OAApB;AAFvB,MATT;AAaI,IAAA,IAAI,EAAE;AAbV,IADJ,CADJ,eAkBI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,KAAD;AACI,IAAA,IAAI,kCACGzB,KAAK,CAACS,IADT;AAEAC,MAAAA,KAAK,EAAEN,IAFP;AAGAmB,MAAAA,QAAQ,EAAE,kBAAAb,KAAK,EAAI;AACfL,QAAAA,OAAO,CAACK,KAAD,CAAP;AACA,eAAOV,KAAK,CAACS,IAAN,CAAWc,QAAX,WAAuBrB,IAAvB,cAA+BQ,KAA/B,SAAuCJ,QAAvC,EAAP;AACH;AAND,MADR;AASI,IAAA,KAAK,kCACEN,KAAK,CAACwB,KADR;AAEDC,MAAAA,KAAK,EAAE5B,iBAAiB,CAACG,KAAK,CAACwB,KAAN,CAAYC,KAAb,EAAoB,OAApB;AAFvB,MATT;AAaI,IAAA,IAAI,EAAE,MAbV;AAcI,IAAA,IAAI,EAAE;AAdV,IADJ,CAlBJ,eAoCI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEJ;AAAZ,kBACI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,UADV;AAEI,IAAA,KAAK,EAAEf,QAFX;AAGI,IAAA,QAAQ,EAAE,kBAAAI,KAAK,EAAI;AACfH,MAAAA,WAAW,CAACG,KAAD,CAAX;AACA,aAAOV,KAAK,CAACS,IAAN,CAAWc,QAAX,WAAuBrB,IAAvB,cAA+BE,IAA/B,SAAsCM,KAAtC,EAAP;AACH,KANL;AAOI,IAAA,OAAO,EAAEjB,aAAa,CAACiC,GAAd,CAAkB,UAAAC,CAAC;AAAA,aAAK;AAAEjB,QAAAA,KAAK,EAAEiB,CAAC,CAACjB,KAAX;AAAkBe,QAAAA,KAAK,EAAEE,CAAC,CAACF;AAA3B,OAAL;AAAA,KAAnB;AAPb,IADJ,CApCJ,eA+CI,oBAAC,iBAAD;AAAmB,IAAA,YAAY,EAAEzB,KAAK,CAACsB;AAAvC,IA/CJ,CADJ;AAmDH,CAvFD;;AAyFA,eAAevB,oBAAf","sourcesContent":["import React from \"react\";\nimport Input from \"./Input\";\nimport Select from \"./Select\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport {\n    UTC_TIMEZONES,\n    DEFAULT_TIME,\n    DEFAULT_DATE,\n    DEFAULT_TIMEZONE,\n    appendTextToLabel,\n    RemoveFieldButton\n} from \"./utils\";\n\nconst DateTimeWithTimezone = props => {\n    // \"2020-05-18T09:00+10:00\"\n    const [date, setDate] = React.useState(\"\");\n    const [time, setTime] = React.useState(\"\");\n    const [timezone, setTimezone] = React.useState(\"\");\n\n    React.useEffect(() => {\n        if (props.bind.value === null) {\n            // Set initial values\n            setDate(DEFAULT_DATE);\n            setTime(DEFAULT_TIME);\n            setTimezone(DEFAULT_TIMEZONE);\n            return;\n        }\n        const [isoDate, rest] = props.bind.value.split(\"T\");\n        const sign = rest.includes(\"+\") ? \"+\" : \"-\";\n        const [fullTime, zone] = rest.split(sign);\n\n        const formattedDate = isoDate;\n        const formattedTime = fullTime;\n        const formattedTimezone = sign + zone;\n\n        // Set previously saved values\n        if (date !== formattedDate) {\n            setDate(formattedDate);\n        }\n        if (time !== formattedTime) {\n            setTime(formattedTime);\n        }\n        if (timezone !== formattedTimezone) {\n            setTimezone(formattedTimezone);\n        }\n    }, [props.bind.value]);\n\n    const cellSize = props.trailingIcon ? 3 : 4;\n\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Input\n                    bind={{\n                        ...props.bind,\n                        value: date,\n                        onChange: value => {\n                            setDate(value);\n                            return props.bind.onChange(`${value}T${time}${timezone}`);\n                        }\n                    }}\n                    field={{\n                        ...props.field,\n                        label: appendTextToLabel(props.field.label, \" date\")\n                    }}\n                    type={\"date\"}\n                />\n            </Cell>\n            <Cell span={4}>\n                <Input\n                    bind={{\n                        ...props.bind,\n                        value: time,\n                        onChange: value => {\n                            setTime(value);\n                            return props.bind.onChange(`${date}T${value}${timezone}`);\n                        }\n                    }}\n                    field={{\n                        ...props.field,\n                        label: appendTextToLabel(props.field.label, \" time\")\n                    }}\n                    type={\"time\"}\n                    step={5}\n                />\n            </Cell>\n            <Cell span={cellSize}>\n                <Select\n                    label=\"Timezone\"\n                    value={timezone}\n                    onChange={value => {\n                        setTimezone(value);\n                        return props.bind.onChange(`${date}T${time}${value}`);\n                    }}\n                    options={UTC_TIMEZONES.map(t => ({ value: t.value, label: t.label }))}\n                />\n            </Cell>\n            <RemoveFieldButton trailingIcon={props.trailingIcon} />\n        </Grid>\n    );\n};\n\nexport default DateTimeWithTimezone;\n"],"file":"DateTimeWithTimezone.js"}