import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React from "react";
import Input from "./Input";
import Select from "./Select";
import { Grid, Cell } from "@webiny/ui/Grid";
import { UTC_TIMEZONES, DEFAULT_TIME, DEFAULT_DATE, DEFAULT_TIMEZONE, appendTextToLabel, RemoveFieldButton } from "./utils";

var DateTimeWithTimezone = function DateTimeWithTimezone(props) {
  // "2020-05-18T09:00+10:00"
  var _React$useState = React.useState(""),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      date = _React$useState2[0],
      setDate = _React$useState2[1];

  var _React$useState3 = React.useState(""),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      time = _React$useState4[0],
      setTime = _React$useState4[1];

  var _React$useState5 = React.useState(""),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      timezone = _React$useState6[0],
      setTimezone = _React$useState6[1];

  React.useEffect(function () {
    if (props.bind.value === null) {
      // Set initial values
      setDate(DEFAULT_DATE);
      setTime(DEFAULT_TIME);
      setTimezone(DEFAULT_TIMEZONE);
      return;
    }

    var _props$bind$value$spl = props.bind.value.split("T"),
        _props$bind$value$spl2 = _slicedToArray(_props$bind$value$spl, 2),
        isoDate = _props$bind$value$spl2[0],
        rest = _props$bind$value$spl2[1];

    var sign = rest.includes("+") ? "+" : "-";

    var _rest$split = rest.split(sign),
        _rest$split2 = _slicedToArray(_rest$split, 2),
        fullTime = _rest$split2[0],
        zone = _rest$split2[1];

    var formattedDate = isoDate;
    var formattedTime = fullTime;
    var formattedTimezone = sign + zone; // Set previously saved values

    if (date !== formattedDate) {
      setDate(formattedDate);
    }

    if (time !== formattedTime) {
      setTime(formattedTime);
    }

    if (timezone !== formattedTimezone) {
      setTimezone(formattedTimezone);
    }
  }, [props.bind.value]);
  var cellSize = props.trailingIcon ? 3 : 4;
  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 4
  }, /*#__PURE__*/React.createElement(Input, {
    bind: _objectSpread(_objectSpread({}, props.bind), {}, {
      value: date,
      onChange: function onChange(value) {
        setDate(value);
        return props.bind.onChange("".concat(value, "T").concat(time).concat(timezone));
      }
    }),
    field: _objectSpread(_objectSpread({}, props.field), {}, {
      label: appendTextToLabel(props.field.label, " date")
    }),
    type: "date"
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 4
  }, /*#__PURE__*/React.createElement(Input, {
    bind: _objectSpread(_objectSpread({}, props.bind), {}, {
      value: time,
      onChange: function onChange(value) {
        setTime(value);
        return props.bind.onChange("".concat(date, "T").concat(value).concat(timezone));
      }
    }),
    field: _objectSpread(_objectSpread({}, props.field), {}, {
      label: appendTextToLabel(props.field.label, " time")
    }),
    type: "time",
    step: 5
  })), /*#__PURE__*/React.createElement(Cell, {
    span: cellSize
  }, /*#__PURE__*/React.createElement(Select, {
    label: "Timezone",
    value: timezone,
    onChange: function onChange(value) {
      setTimezone(value);
      return props.bind.onChange("".concat(date, "T").concat(time).concat(value));
    },
    options: UTC_TIMEZONES.map(function (t) {
      return {
        value: t.value,
        label: t.label
      };
    })
  })), /*#__PURE__*/React.createElement(RemoveFieldButton, {
    trailingIcon: props.trailingIcon
  }));
};

export default DateTimeWithTimezone;
//# sourceMappingURL=DateTimeWithTimezone.js.map