{"version":3,"sources":["../../../../../../src/admin/plugins/fieldRenderers/ref/components/ContentEntriesAutocomplete.tsx"],"names":["React","useState","useMemo","useEffect","AutoComplete","useQuery","get","debounce","useI18N","I18NValue","createListQuery","createGetQuery","GET_CONTENT_MODEL","i18n","Link","t","ns","ContentEntriesAutocomplete","bind","field","value","search","setSearch","getValue","onChange","refContentModelQuery","variables","where","modelId","settings","refContentModel","LIST_CONTENT","GET_CONTENT","id","titleFieldId","listContentQuery","skip","getContentQuery","options","map","item","name","meta","title","published","loading","unpublishedEntryInfo","publishItLink","label","helpText"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { createListQuery, createGetQuery, GET_CONTENT_MODEL } from \"./graphql\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Link } from \"@webiny/react-router\";\nconst t = i18n.ns(\"app-headless-cms/admin/fields/ref\");\n\nfunction ContentEntriesAutocomplete({ bind, field }) {\n    // Value can be an object (received from API) or an ID (set by the Autocomplete component).\n    const value = get(bind, \"value.id\", bind.value);\n    const [search, setSearch] = useState(\"\");\n    const { getValue } = useI18N();\n\n    // Format value coming from API.\n    useEffect(() => {\n        if (typeof bind.value !== \"string\") {\n            // We only need IDs to send back in request to API.\n            bind.onChange(get(bind.value, \"id\", bind.value));\n        }\n    }, [bind.value]);\n\n    // Fetch ref content model data, so that we can its title field.\n    const refContentModelQuery = useQuery(GET_CONTENT_MODEL, {\n        variables: { where: { modelId: field.settings.modelId } }\n    });\n\n    const refContentModel = get(refContentModelQuery, `data.getContentModel.data`, {});\n\n    // Once we have the refContentModel loaded, this will construct proper list and get queries.\n    const { LIST_CONTENT, GET_CONTENT } = useMemo(\n        () => ({\n            LIST_CONTENT: createListQuery(refContentModel),\n            GET_CONTENT: createGetQuery(refContentModel)\n        }),\n        [field.settings.modelId, refContentModel.id]\n    );\n\n    // Once the query in the input has changed, this query will be triggered.\n    const { titleFieldId } = refContentModel;\n    const listContentQuery = useQuery(LIST_CONTENT, {\n        skip: !search || !titleFieldId,\n        variables: { where: { [`${titleFieldId}_contains`]: search } }\n    });\n\n    // Once we have a valid ID, we load the data.\n    const getContentQuery = useQuery(GET_CONTENT, {\n        skip: !value || !titleFieldId,\n        variables: { where: { id: value } }\n    });\n\n    // Format options for the Autocomplete component.\n    const options = get(listContentQuery, \"data.content.data\", []).map(item => ({\n        id: item.id,\n        name: getValue(item.meta.title)\n    }));\n\n    // Calculate a couple of props for the Autocomplete component.\n    const id = get(getContentQuery, \"data.content.data.id\");\n    const published = get(getContentQuery, \"data.content.data.meta.published\");\n    const name = getValue(get(getContentQuery, \"data.content.data.meta.title\"));\n    const loading =\n        listContentQuery.loading || refContentModelQuery.loading || getContentQuery.loading;\n\n    const unpublishedEntryInfo =\n        published === false &&\n        t`Selected content entry is not published. Make sure to {publishItLink} before publishing the main content entry.`(\n            {\n                publishItLink: (\n                    <Link\n                        to={`/cms/content-models/manage/${refContentModel.modelId}?id=${id}`}\n                    >{t`publish it`}</Link>\n                )\n            }\n        );\n\n    return (\n        <AutoComplete\n            {...bind}\n            loading={loading}\n            value={{ id, name }}\n            options={options}\n            label={<I18NValue value={field.label} />}\n            description={\n                <>\n                    <I18NValue value={field.helpText} />\n                    {unpublishedEntryInfo}\n                </>\n            }\n            onInput={debounce(search => search && setSearch(search), 250)}\n        />\n    );\n}\n\nexport default ContentEntriesAutocomplete;\n"],"file":"ContentEntriesAutocomplete.js"}