{"version":3,"sources":["../../../../../../src/admin/plugins/fieldRenderers/ref/components/ContentEntriesMultiAutoComplete.tsx"],"names":["React","useEffect","useState","useMemo","I18NValue","MultiAutoComplete","useQuery","useI18N","get","debounce","createListQuery","GET_CONTENT_MODEL","i18n","Link","t","ns","ContentEntriesMultiAutocomplete","bind","field","value","map","item","search","setSearch","some","v","onChange","getValue","refContentModelQuery","variables","where","modelId","settings","refContentModel","LIST_CONTENT","id","titleFieldId","listContentQuery","skip","listContentQueryFilterById","options","name","meta","title","valueForAutoComplete","published","loading","unpublishedEntriesInfo","filter","length","entries","index","values","label","helpText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport { MultiAutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport { createListQuery, GET_CONTENT_MODEL } from \"./graphql\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Link } from \"@webiny/react-router\";\nconst t = i18n.ns(\"app-headless-cms/admin/fields/ref\");\n\nfunction ContentEntriesMultiAutocomplete({ bind, field }) {\n    // Value can be an array of object (received from API) or an array of ID (set by the Autocomplete component).\n    const value = bind.value.map(item => {\n        return get(item, \"id\", item);\n    });\n    const [search, setSearch] = useState(\"\");\n\n    // Format value coming from API\n    useEffect(() => {\n        if (bind.value.some(v => typeof v !== \"string\")) {\n            // We only need IDs to send back in request to API\n            bind.onChange(\n                bind.value.map(item => {\n                    return get(item, \"id\", item);\n                })\n            );\n        }\n    }, [bind.value]);\n\n    const { getValue } = useI18N();\n\n    // Fetch ref content model data, so that we can its title field.\n    const refContentModelQuery = useQuery(GET_CONTENT_MODEL, {\n        variables: { where: { modelId: field.settings.modelId } }\n    });\n\n    const refContentModel = get(refContentModelQuery, `data.getContentModel.data`, {});\n\n    // Once we have the refContentModel loaded, this will construct proper list and get queries.\n    const { LIST_CONTENT } = useMemo(\n        () => ({\n            LIST_CONTENT: createListQuery(refContentModel)\n        }),\n        [field.settings.modelId, refContentModel.id]\n    );\n\n    // Once the query in the input has changed, this query will be triggered.\n    const { titleFieldId } = refContentModel;\n    const listContentQuery = useQuery(LIST_CONTENT, {\n        skip: !search || !titleFieldId,\n        variables: { where: { [`${titleFieldId}_contains`]: search } }\n    });\n\n    // Once we have a valid IDs, we load the data.\n    const listContentQueryFilterById = useQuery(LIST_CONTENT, {\n        skip: !value || !titleFieldId,\n        variables: { where: { [\"id_in\"]: value } }\n    });\n\n    // Format options for the Autocomplete component.\n    const options = get(listContentQuery, \"data.content.data\", []).map(item => ({\n        id: item.id,\n        name: getValue(item.meta.title)\n    }));\n\n    // Format value prop for the Autocomplete component.\n    const valueForAutoComplete = get(listContentQueryFilterById, \"data.content.data\", []).map(\n        item => ({\n            id: item.id,\n            published: item.meta.published,\n            name: getValue(item.meta.title)\n        })\n    );\n\n    // Calculate loading prop for the Autocomplete component.\n    const loading =\n        listContentQuery.loading ||\n        refContentModelQuery.loading ||\n        listContentQueryFilterById.loading;\n\n    let unpublishedEntriesInfo = valueForAutoComplete.filter(item => item.published === false);\n    if (unpublishedEntriesInfo.length) {\n        unpublishedEntriesInfo = t`Before publishing the main content entry, make sure to publish the\n                            following referenced entries: {entries}`({\n            entries: (\n                <>\n                    {unpublishedEntriesInfo.map(\n                        ({ id, name, published }, index) =>\n                            !published && (\n                                <React.Fragment key={id}>\n                                    {index > 0 && \", \"}\n                                    <Link\n                                        to={`/cms/content-models/manage/${refContentModel.modelId}?id=${id}`}\n                                    >\n                                        {name}\n                                    </Link>\n                                </React.Fragment>\n                            )\n                    )}\n                </>\n            )\n        });\n    }\n\n    return (\n        <MultiAutoComplete\n            {...bind}\n            onChange={values => {\n                // We only need IDs to send back in request to API\n                bind.onChange(values.map(item => get(item, \"id\", item)));\n            }}\n            loading={loading}\n            value={valueForAutoComplete}\n            options={options}\n            label={<I18NValue value={field.label} />}\n            onInput={debounce(search => search && setSearch(search), 250)}\n            description={\n                <>\n                    <I18NValue value={field.helpText} />\n                    {unpublishedEntriesInfo}\n                </>\n            }\n        />\n    );\n}\n\nexport default ContentEntriesMultiAutocomplete;\n"],"file":"ContentEntriesMultiAutoComplete.js"}