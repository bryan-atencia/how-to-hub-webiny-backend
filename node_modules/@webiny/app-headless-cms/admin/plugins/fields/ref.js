import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["Cannot be changed later"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Content Model"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Use as a list of references"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Reference existing content entries. For example, a book can reference one or more authors."]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Reference"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from "react";
import { ReactComponent as RefIcon } from "@svgr/webpack!./icons/round-link-24px.svg";
import { useQuery } from "@webiny/app-headless-cms/admin/hooks";
import { LIST_CONTENT_MODELS } from "../../viewsGraphql";
import { validation } from "@webiny/validation";
import { Grid, Cell } from "@webiny/ui/Grid";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import { CircularProgress } from "@webiny/ui/Progress";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import get from "lodash/get";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-headless-cms/admin/fields");
var plugin = {
  type: "cms-editor-field-type",
  name: "cms-editor-field-type-ref",
  field: {
    type: "ref",
    validators: [],
    label: t(_templateObject()),
    description: t(_templateObject2()),
    icon: /*#__PURE__*/React.createElement(RefIcon, null),
    allowMultipleValues: true,
    allowPredefinedValues: false,
    allowIndexes: {
      singleValue: false,
      multipleValues: false
    },
    multipleValuesLabel: t(_templateObject3()),
    createField: function createField() {
      return {
        type: this.type,
        settings: {
          modelId: ""
        },
        validation: [],
        renderer: {
          name: ""
        }
      };
    },
    renderSettings: function renderSettings(_ref) {
      var Bind = _ref.form.Bind;

      var _useQuery = useQuery(LIST_CONTENT_MODELS),
          data = _useQuery.data,
          loading = _useQuery.loading,
          error = _useQuery.error;

      var _useSnackbar = useSnackbar(),
          showSnackbar = _useSnackbar.showSnackbar;

      if (error) {
        showSnackbar(error.message);
        return null;
      } // Format options for the Autocomplete component.


      var options = get(data, "listContentModels.data", []).map(function (item) {
        return {
          id: item.modelId,
          name: item.name
        };
      });
      return /*#__PURE__*/React.createElement(Grid, null, loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "settings.modelId",
        validators: validation.create("required")
      }, function (bind) {
        var id = get(bind, "value.id", bind.value); // Format value prop for AutoComplete component.

        var formattedValueForAutoComplete = options.find(function (option) {
          return option.id === id;
        });
        return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, bind, {
          value: formattedValueForAutoComplete,
          onChange: bind.onChange,
          label: t(_templateObject4()),
          description: t(_templateObject5()),
          options: options
        }));
      })));
    },
    graphql: {
      queryField:
      /* GraphQL */
      "\n                {\n                    values {\n                        value {\n                            id\n                            meta {\n                                title {\n                                    value\n                                }\n                            }\n                        }\n                        locale\n                    }\n                }\n            "
    }
  }
};
export default plugin;
//# sourceMappingURL=ref.js.map