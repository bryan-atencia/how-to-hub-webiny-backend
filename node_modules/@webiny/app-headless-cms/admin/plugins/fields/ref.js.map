{"version":3,"sources":["../../../../src/admin/plugins/fields/ref.tsx"],"names":["React","useQuery","LIST_CONTENT_MODELS","validation","Grid","Cell","AutoComplete","CircularProgress","useSnackbar","get","i18n","t","ns","plugin","type","name","field","validators","label","description","icon","allowMultipleValues","allowPredefinedValues","allowIndexes","singleValue","multipleValues","multipleValuesLabel","createField","settings","modelId","renderer","renderSettings","Bind","form","data","loading","error","showSnackbar","message","options","map","item","id","create","bind","value","formattedValueForAutoComplete","find","option","onChange","graphql","queryField"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ReactComponent as RefIcon } from \"./icons/round-link-24px.svg\";\nimport { useQuery } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { LIST_CONTENT_MODELS } from \"../../viewsGraphql\";\nimport { validation } from \"@webiny/validation\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CmsEditorFieldTypePlugin } from \"@webiny/app-headless-cms/types\";\nimport get from \"lodash/get\";\n\nimport { i18n } from \"@webiny/app/i18n\";\nconst t = i18n.ns(\"app-headless-cms/admin/fields\");\n\nconst plugin: CmsEditorFieldTypePlugin = {\n    type: \"cms-editor-field-type\",\n    name: \"cms-editor-field-type-ref\",\n    field: {\n        type: \"ref\",\n        validators: [],\n        label: t`Reference`,\n        description: t`Reference existing content entries. For example, a book can reference one or more authors.`,\n        icon: <RefIcon />,\n        allowMultipleValues: true,\n        allowPredefinedValues: false,\n        allowIndexes: {\n            singleValue: false,\n            multipleValues: false\n        },\n        multipleValuesLabel: t`Use as a list of references`,\n        createField() {\n            return {\n                type: this.type,\n                settings: {\n                    modelId: \"\"\n                },\n                validation: [],\n                renderer: {\n                    name: \"\"\n                }\n            };\n        },\n        renderSettings({ form: { Bind } }) {\n            const { data, loading, error } = useQuery(LIST_CONTENT_MODELS);\n            const { showSnackbar } = useSnackbar();\n\n            if (error) {\n                showSnackbar(error.message);\n                return null;\n            }\n            // Format options for the Autocomplete component.\n            const options = get(data, \"listContentModels.data\", []).map(item => {\n                return { id: item.modelId, name: item.name };\n            });\n\n            return (\n                <Grid>\n                    {loading && <CircularProgress />}\n                    <Cell span={12}>\n                        <Bind name={\"settings.modelId\"} validators={validation.create(\"required\")}>\n                            {bind => {\n                                const id = get(bind, \"value.id\", bind.value);\n                                // Format value prop for AutoComplete component.\n                                const formattedValueForAutoComplete = options.find(\n                                    option => option.id === id\n                                );\n\n                                return (\n                                    <AutoComplete\n                                        {...bind}\n                                        value={formattedValueForAutoComplete}\n                                        onChange={bind.onChange}\n                                        label={t`Content Model`}\n                                        description={t`Cannot be changed later`}\n                                        options={options}\n                                    />\n                                );\n                            }}\n                        </Bind>\n                    </Cell>\n                </Grid>\n            );\n        },\n        graphql: {\n            queryField: /* GraphQL */ `\n                {\n                    values {\n                        value {\n                            id\n                            meta {\n                                title {\n                                    value\n                                }\n                            }\n                        }\n                        locale\n                    }\n                }\n            `\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"ref.js"}