{"version":3,"sources":["../../../../src/admin/plugins/fields/PredefinedValuesDynamicFieldset.tsx"],"names":["React","Grid","Cell","GridInner","i18n","DynamicFieldset","Typography","ButtonPrimary","ButtonSecondary","Input","styled","css","t","ns","Fieldset","position","width","marginBottom","display","right","top","controlButtons","alignItems","justifyContent","marginRight","emptyStyles","textAlign","Header","PredefinedValuesDynamicFieldset","getBind","renderValueInput","Bind","actions","header","row","empty","index","add","remove"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Cell, GridInner } from \"@webiny/ui/Grid\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { DynamicFieldset } from \"@webiny/ui/DynamicFieldset\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { ButtonPrimary, ButtonSecondary } from \"@webiny/ui/Button\";\nimport { Input } from \"@webiny/ui/Input\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/fields/dynamic-fieldset-predefined-values\");\n\nconst Fieldset = styled(\"div\")({\n    position: \"relative\",\n    width: \"100%\",\n    marginBottom: 15,\n    \".webiny-ui-button\": {\n        position: \"absolute\",\n        display: \"block\",\n        right: 10,\n        top: 13\n    }\n});\n\nconst controlButtons = css({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    \">button\": {\n        marginRight: 15\n    }\n});\n\nconst emptyStyles = css({\n    textAlign: \"center\"\n});\n\nconst Header = styled(\"div\")({\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginBottom: 15\n});\n\nfunction PredefinedValuesDynamicFieldset({ getBind, renderValueInput = null }) {\n    const Bind = getBind();\n\n    return (\n        <Grid>\n            <Cell span={12}>\n                <Bind>\n                    <DynamicFieldset>\n                        {({ actions, header, row, empty }) => (\n                            <React.Fragment>\n                                {row(({ index }) => {\n                                    const Bind = getBind(index);\n\n                                    return (\n                                        <React.Fragment>\n                                            <GridInner>\n                                                <Cell span={5}>\n                                                    <Fieldset>\n                                                        <Bind name={\"label\"}>\n                                                            <Input label={t`Label`} />\n                                                        </Bind>\n                                                    </Fieldset>\n                                                </Cell>\n                                                <Cell span={5}>\n                                                    <Fieldset>\n                                                        {renderValueInput ? (\n                                                            renderValueInput(Bind)\n                                                        ) : (\n                                                            <Bind name={\"value\"}>\n                                                                <Input label={t`Value`} />\n                                                            </Bind>\n                                                        )}\n                                                    </Fieldset>\n                                                </Cell>\n\n                                                <Cell span={2} className={controlButtons}>\n                                                    <ButtonPrimary\n                                                        small\n                                                        onClick={actions.add(index)}\n                                                    >\n                                                        +\n                                                    </ButtonPrimary>\n                                                    <ButtonSecondary\n                                                        small\n                                                        onClick={actions.remove(index)}\n                                                    >\n                                                        -\n                                                    </ButtonSecondary>\n                                                </Cell>\n                                            </GridInner>\n                                        </React.Fragment>\n                                    );\n                                })}\n                                {empty(() => (\n                                    <React.Fragment>\n                                        <Header>\n                                            <Typography\n                                                use={\"overline\"}\n                                            >{t`Predefined values`}</Typography>\n                                        </Header>\n\n                                        <GridInner className={emptyStyles}>\n                                            <Cell span={12}>\n                                                <Typography use={\"subtitle1\"}>\n                                                    {t`For current locale, there are no predefined values added yet.`}\n                                                </Typography>\n                                            </Cell>\n                                            <Cell span={12}>\n                                                <ButtonPrimary\n                                                    onClick={actions.add()}\n                                                >{t`Add predefined value`}</ButtonPrimary>\n                                            </Cell>\n                                        </GridInner>\n                                    </React.Fragment>\n                                ))}\n                                {header(() => (\n                                    <Header>\n                                        <Typography\n                                            use={\"overline\"}\n                                        >{t`Predefined values`}</Typography>\n                                    </Header>\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </DynamicFieldset>\n                </Bind>\n            </Cell>\n        </Grid>\n    );\n}\n\nexport default PredefinedValuesDynamicFieldset;\n"],"file":"PredefinedValuesDynamicFieldset.js"}