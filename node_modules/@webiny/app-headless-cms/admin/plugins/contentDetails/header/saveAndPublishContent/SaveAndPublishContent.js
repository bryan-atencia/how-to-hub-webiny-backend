import _regeneratorRuntime from "@babel/runtime/regenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Save & Publish"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["You are about to publish a new revision. Are you sure you want to continue?"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Publish content"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Content published successfully."]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useCallback, useMemo } from "react";
import { i18n } from "@webiny/app/i18n";
import { ButtonPrimary } from "@webiny/ui/Button";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { createPublishMutation } from "@webiny/app-headless-cms/admin/components/ContentModelForm/graphql";
import { useMutation } from "@webiny/app-headless-cms/admin/hooks";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { css } from "emotion";
var t = i18n.ns("app-headless-cms/admin/plugins/content-details/header/publish-revision");
var buttonStyles = /*#__PURE__*/css({
  marginLeft: 16
}, "label:buttonStyles;");

var SaveAndPublishButton = function SaveAndPublishButton(_ref) {
  var content = _ref.content,
      contentModel = _ref.contentModel,
      getLoading = _ref.getLoading,
      setLoading = _ref.setLoading,
      revisionsList = _ref.revisionsList,
      state = _ref.state;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useMemo = useMemo(function () {
    return {
      PUBLISH_CONTENT: createPublishMutation(contentModel)
    };
  }, [contentModel.modelId]),
      PUBLISH_CONTENT = _useMemo.PUBLISH_CONTENT;

  var _useMutation = useMutation(PUBLISH_CONTENT),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      publishContentMutation = _useMutation2[0];

  var onPublish = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {
      var response, contentData;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _context.next = 3;
              return publishContentMutation({
                variables: {
                  revision: id || content.id
                }
              });

            case 3:
              response = _context.sent;
              contentData = _get(response, "data.content");
              setLoading(false);

              if (!contentData.error) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", showSnackbar(contentData.error.message));

            case 8:
              showSnackbar(t(_templateObject()));
              revisionsList.refetch();

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [content.id]);

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject2()),
    message: /*#__PURE__*/React.createElement("p", null, t(_templateObject3()))
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  return /*#__PURE__*/React.createElement(ButtonPrimary, {
    className: buttonStyles,
    onClick: function onClick() {
      showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var response, id;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return state.contentForm.submit();

              case 2:
                response = _context2.sent;

                if (!response.data.content.error) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return");

              case 5:
                id = response.data.content.data.id;
                _context2.next = 8;
                return onPublish(id);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    },
    disabled: getLoading()
  }, t(_templateObject4()));
};

export default SaveAndPublishButton;
//# sourceMappingURL=SaveAndPublishContent.js.map