import _regeneratorRuntime from "@babel/runtime/regenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Publish"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["You are about to publish a new revision. Are you sure you want to continue?"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Publish content"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Content published successfully."]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { useCallback, useMemo } from "react";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as PublishIcon } from "@svgr/webpack!@webiny/app-headless-cms/admin/icons/publish.svg";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { createPublishMutation } from "@webiny/app-headless-cms/admin/components/ContentModelForm/graphql";
import { useMutation } from "@webiny/app-headless-cms/admin/hooks";
import { i18n } from "@webiny/app/i18n";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
var t = i18n.ns("app-headless-cms/admin/plugins/content-details/header/publish-revision");

var PublishRevision = function PublishRevision(_ref) {
  var content = _ref.content,
      contentModel = _ref.contentModel,
      getLoading = _ref.getLoading,
      setLoading = _ref.setLoading,
      revisionsList = _ref.revisionsList;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useMemo = useMemo(function () {
    return {
      PUBLISH_CONTENT: createPublishMutation(contentModel)
    };
  }, [contentModel.modelId]),
      PUBLISH_CONTENT = _useMemo.PUBLISH_CONTENT;

  var _useMutation = useMutation(PUBLISH_CONTENT),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      publishContentMutation = _useMutation2[0];

  var onPublish = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var response, contentData;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            setLoading(true);
            _context.next = 3;
            return publishContentMutation({
              variables: {
                revision: content.id
              }
            });

          case 3:
            response = _context.sent;
            contentData = _get(response, "data.content");
            setLoading(false);

            if (!contentData.error) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", showSnackbar(contentData.error.message));

          case 8:
            showSnackbar(t(_templateObject()));
            revisionsList.refetch();

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [content.id]);

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject2()),
    message: /*#__PURE__*/React.createElement("p", null, t(_templateObject3()))
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: t(_templateObject4()),
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    icon: /*#__PURE__*/React.createElement(PublishIcon, null),
    onClick: function onClick() {
      return showConfirmation(onPublish);
    },
    disabled: !content.id || getLoading()
  })));
};

export default PublishRevision;
//# sourceMappingURL=PublishRevision.js.map