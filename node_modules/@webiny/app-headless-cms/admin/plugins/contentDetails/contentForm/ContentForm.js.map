{"version":3,"sources":["../../../../../src/admin/plugins/contentDetails/contentForm/ContentForm.tsx"],"names":["React","ContentModelForm","useRouter","createCreateFromMutation","createCreateMutation","createListQuery","createUpdateMutation","useMutation","useCallback","useMemo","get","useSnackbar","cloneDeep","ContentForm","contentModel","content","getLocale","setLoading","getLoading","setState","query","URLSearchParams","location","search","history","showSnackbar","LIST_CONTENT","CREATE_CONTENT","UPDATE_CONTENT","CREATE_CONTENT_FROM","modelId","createMutation","updateMutation","createFromMutation","createContent","data","variables","update","cache","response","error","readQuery","writeQuery","message","id","set","push","toString","updateContent","createContentFrom","revision","previousItemIndex","findIndex","item","splice","revisionId","contentForm"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ContentModelForm } from \"@webiny/app-headless-cms/admin/components/ContentModelForm\";\nimport { useRouter } from \"@webiny/react-router\";\nimport {\n    createCreateFromMutation,\n    createCreateMutation,\n    createListQuery,\n    createUpdateMutation\n} from \"@webiny/app-headless-cms/admin/components/ContentModelForm/graphql\";\nimport { useMutation } from \"@webiny/app-headless-cms/admin/hooks\";\nimport { useCallback, useMemo } from \"react\";\nimport get from \"lodash/get\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\nconst ContentForm = ({ contentModel, content, getLocale, setLoading, getLoading, setState }) => {\n    const query = new URLSearchParams(location.search);\n    const { history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n\n    const { CREATE_CONTENT, UPDATE_CONTENT, CREATE_CONTENT_FROM, LIST_CONTENT } = useMemo(() => {\n        return {\n            LIST_CONTENT: createListQuery(contentModel),\n            CREATE_CONTENT: createCreateMutation(contentModel),\n            UPDATE_CONTENT: createUpdateMutation(contentModel),\n            CREATE_CONTENT_FROM: createCreateFromMutation(contentModel)\n        };\n    }, [contentModel.modelId]);\n\n    const [createMutation] = useMutation(CREATE_CONTENT);\n    const [updateMutation] = useMutation(UPDATE_CONTENT);\n    const [createFromMutation] = useMutation(CREATE_CONTENT_FROM);\n\n    const createContent = useCallback(\n        async data => {\n            setLoading(true);\n            const response = await createMutation({\n                variables: { data },\n                update(cache, response) {\n                    if (response.data.content.error) {\n                        return;\n                    }\n\n                    // Prepend the newly created item to the content list.\n                    const data = cloneDeep(\n                        cache.readQuery<any>({\n                            query: LIST_CONTENT\n                        })\n                    );\n                    data.content.data = [response.data.content.data, ...data.content.data];\n                    cache.writeQuery({ query: LIST_CONTENT, data: data });\n                }\n            });\n            setLoading(false);\n\n            if (response.data.content.error) {\n                return showSnackbar(response.data.content.message);\n            }\n\n            showSnackbar(\"Content created successfully.\");\n            const { id } = response.data.content.data;\n            query.set(\"id\", id);\n            history.push({ search: query.toString() });\n            return response;\n        },\n        [contentModel.modelId]\n    );\n\n    const updateContent = useCallback(\n        async (id, data) => {\n            setLoading(true);\n            const response = await updateMutation({\n                variables: { id, data }\n            });\n            setLoading(false);\n\n            if (response.data.content.error) {\n                return showSnackbar(response.data.content.message);\n            }\n\n            showSnackbar(\"Content saved successfully.\");\n            return response;\n        },\n        [contentModel.modelId]\n    );\n\n    const createContentFrom = useCallback(\n        async (id, data) => {\n            setLoading(true);\n            const response = await createFromMutation({\n                variables: { revision: id, data },\n                update(cache, response) {\n                    if (response.data.content.error) {\n                        return;\n                    }\n\n                    const data = cloneDeep(\n                        cache.readQuery<any>({ query: LIST_CONTENT })\n                    );\n                    const previousItemIndex = data.content.data.findIndex(item => item.id === id);\n                    data.content.data.splice(previousItemIndex, 1, response.data.content.data);\n                    cache.writeQuery({ query: LIST_CONTENT, data });\n                }\n            });\n            setLoading(false);\n\n            if (response.data.content.error) {\n                return showSnackbar(response.data.content.message);\n            }\n\n            showSnackbar(\"A new revision was created.\");\n            const { id: revisionId } = response.data.content.data;\n            query.set(\"id\", revisionId);\n            history.push({ search: query.toString() });\n\n            return response;\n        },\n        [contentModel.modelId]\n    );\n\n    return (\n        <ContentModelForm\n            locale={getLocale()}\n            loading={getLoading()}\n            contentModel={contentModel}\n            content={content}\n            onForm={contentForm => setState({ contentForm })}\n            onSubmit={async data => {\n                if (content.id) {\n                    if (get(content, \"meta.locked\")) {\n                        return createContentFrom(content.id, data);\n                    }\n                    return updateContent(content.id, data);\n                }\n                return createContent(data);\n            }}\n        />\n    );\n};\n\nexport default ContentForm;\n"],"file":"ContentForm.js"}