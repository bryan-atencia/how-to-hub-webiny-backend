import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import * as React from "react";
import { ContentModelForm } from "@webiny/app-headless-cms/admin/components/ContentModelForm";
import { useRouter } from "@webiny/react-router";
import { createCreateFromMutation, createCreateMutation, createListQuery, createUpdateMutation } from "@webiny/app-headless-cms/admin/components/ContentModelForm/graphql";
import { useMutation } from "@webiny/app-headless-cms/admin/hooks";
import { useCallback, useMemo } from "react";
import get from "lodash/get";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import cloneDeep from "lodash/cloneDeep";

var ContentForm = function ContentForm(_ref) {
  var contentModel = _ref.contentModel,
      content = _ref.content,
      getLocale = _ref.getLocale,
      setLoading = _ref.setLoading,
      getLoading = _ref.getLoading,
      setState = _ref.setState;
  var query = new URLSearchParams(location.search);

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useMemo = useMemo(function () {
    return {
      LIST_CONTENT: createListQuery(contentModel),
      CREATE_CONTENT: createCreateMutation(contentModel),
      UPDATE_CONTENT: createUpdateMutation(contentModel),
      CREATE_CONTENT_FROM: createCreateFromMutation(contentModel)
    };
  }, [contentModel.modelId]),
      CREATE_CONTENT = _useMemo.CREATE_CONTENT,
      UPDATE_CONTENT = _useMemo.UPDATE_CONTENT,
      CREATE_CONTENT_FROM = _useMemo.CREATE_CONTENT_FROM,
      LIST_CONTENT = _useMemo.LIST_CONTENT;

  var _useMutation = useMutation(CREATE_CONTENT),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      createMutation = _useMutation2[0];

  var _useMutation3 = useMutation(UPDATE_CONTENT),
      _useMutation4 = _slicedToArray(_useMutation3, 1),
      updateMutation = _useMutation4[0];

  var _useMutation5 = useMutation(CREATE_CONTENT_FROM),
      _useMutation6 = _slicedToArray(_useMutation5, 1),
      createFromMutation = _useMutation6[0];

  var createContent = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var response, id;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _context.next = 3;
              return createMutation({
                variables: {
                  data: data
                },
                update: function update(cache, response) {
                  if (response.data.content.error) {
                    return;
                  } // Prepend the newly created item to the content list.


                  var data = cloneDeep(cache.readQuery({
                    query: LIST_CONTENT
                  }));
                  data.content.data = [response.data.content.data].concat(_toConsumableArray(data.content.data));
                  cache.writeQuery({
                    query: LIST_CONTENT,
                    data: data
                  });
                }
              });

            case 3:
              response = _context.sent;
              setLoading(false);

              if (!response.data.content.error) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", showSnackbar(response.data.content.message));

            case 7:
              showSnackbar("Content created successfully.");
              id = response.data.content.data.id;
              query.set("id", id);
              history.push({
                search: query.toString()
              });
              return _context.abrupt("return", response);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [contentModel.modelId]);
  var updateContent = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, data) {
      var response;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              setLoading(true);
              _context2.next = 3;
              return updateMutation({
                variables: {
                  id: id,
                  data: data
                }
              });

            case 3:
              response = _context2.sent;
              setLoading(false);

              if (!response.data.content.error) {
                _context2.next = 7;
                break;
              }

              return _context2.abrupt("return", showSnackbar(response.data.content.message));

            case 7:
              showSnackbar("Content saved successfully.");
              return _context2.abrupt("return", response);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }(), [contentModel.modelId]);
  var createContentFrom = useCallback( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id, data) {
      var response, revisionId;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              setLoading(true);
              _context3.next = 3;
              return createFromMutation({
                variables: {
                  revision: id,
                  data: data
                },
                update: function update(cache, response) {
                  if (response.data.content.error) {
                    return;
                  }

                  var data = cloneDeep(cache.readQuery({
                    query: LIST_CONTENT
                  }));
                  var previousItemIndex = data.content.data.findIndex(function (item) {
                    return item.id === id;
                  });
                  data.content.data.splice(previousItemIndex, 1, response.data.content.data);
                  cache.writeQuery({
                    query: LIST_CONTENT,
                    data: data
                  });
                }
              });

            case 3:
              response = _context3.sent;
              setLoading(false);

              if (!response.data.content.error) {
                _context3.next = 7;
                break;
              }

              return _context3.abrupt("return", showSnackbar(response.data.content.message));

            case 7:
              showSnackbar("A new revision was created.");
              revisionId = response.data.content.data.id;
              query.set("id", revisionId);
              history.push({
                search: query.toString()
              });
              return _context3.abrupt("return", response);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref4.apply(this, arguments);
    };
  }(), [contentModel.modelId]);
  return /*#__PURE__*/React.createElement(ContentModelForm, {
    locale: getLocale(),
    loading: getLoading(),
    contentModel: contentModel,
    content: content,
    onForm: function onForm(contentForm) {
      return setState({
        contentForm: contentForm
      });
    },
    onSubmit: /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!content.id) {
                  _context4.next = 4;
                  break;
                }

                if (!get(content, "meta.locked")) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return", createContentFrom(content.id, data));

              case 3:
                return _context4.abrupt("return", updateContent(content.id, data));

              case 4:
                return _context4.abrupt("return", createContent(data));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x6) {
        return _ref5.apply(this, arguments);
      };
    }()
  });
};

export default ContentForm;
//# sourceMappingURL=ContentForm.js.map