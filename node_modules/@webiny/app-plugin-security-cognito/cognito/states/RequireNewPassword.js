import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import Auth from "@aws-amplify/auth";
import debug from "../debug";

var RequireNewPassword = /*#__PURE__*/function (_React$Component) {
  _inherits(RequireNewPassword, _React$Component);

  var _super = _createSuper(RequireNewPassword);

  function RequireNewPassword() {
    var _this;

    _classCallCheck(this, RequireNewPassword);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "authStates", ["requireNewPassword"]);

    _defineProperty(_assertThisInitialized(_this), "checkContact", function (user) {
      var changeState = _this.props.changeState;
      Auth.verifiedContact(user).then(function (data) {
        if (data.verified) {
          changeState("signedIn", user);
        } else {
          changeState("verifyContact", _objectSpread(_objectSpread({}, user), data));
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "confirm", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var password, requiredAttributes, _this$props, changeState, authData, user;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                password = _ref.password, requiredAttributes = _objectWithoutProperties(_ref, ["password"]);
                _this$props = _this.props, changeState = _this$props.changeState, authData = _this$props.authData;
                _context.prev = 2;
                _context.next = 5;
                return Auth.completeNewPassword(authData, password, requiredAttributes);

              case 5:
                user = _context.sent;
                debug("complete new password", user);

                if (user.challengeName === "SMS_MFA") {
                  changeState("confirmSignIn", user);
                } else if (user.challengeName === "MFA_SETUP") {
                  debug("TOTP setup", user.challengeParam);
                  changeState("TOTPSetup", user);
                } else {
                  _this.checkContact(user);
                }

                _context.next = 13;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](2);
                debug(_context.t0);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 10]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());

    return _this;
  }

  _createClass(RequireNewPassword, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          authProps = _objectWithoutProperties(_this$props2, ["children"]);

      var authData = authProps.authData,
          authState = authProps.authState,
          changeState = authProps.changeState;

      if (!this.authStates.includes(authState)) {
        return null;
      }

      return /*#__PURE__*/React.cloneElement(children, {
        authProps: authProps,
        confirm: this.confirm,
        changeState: changeState,
        requiredAttributes: authData.challengeParam.requiredAttributes || []
      });
    }
  }]);

  return RequireNewPassword;
}(React.Component);

export default RequireNewPassword;
//# sourceMappingURL=RequireNewPassword.js.map