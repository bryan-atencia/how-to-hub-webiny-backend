{"version":3,"sources":["../../../src/cognito/states/RequireNewPassword.ts"],"names":["React","Auth","debug","RequireNewPassword","user","changeState","props","verifiedContact","then","data","verified","password","requiredAttributes","authData","completeNewPassword","challengeName","challengeParam","checkContact","children","authProps","authState","authStates","includes","cloneElement","confirm","Component"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;IAiBMC,kB;;;;;;;;;;;;;;;;iEAEW,CAAC,oBAAD,C;;mEAEE,UAAAC,IAAI,EAAI;AAAA,UACXC,WADW,GACK,MAAKC,KADV,CACXD,WADW;AAEnBJ,MAAAA,IAAI,CAACM,eAAL,CAAqBH,IAArB,EAA2BI,IAA3B,CAAgC,UAAAC,IAAI,EAAI;AACpC,YAAIA,IAAI,CAACC,QAAT,EAAmB;AACfL,UAAAA,WAAW,CAAC,UAAD,EAAaD,IAAb,CAAX;AACH,SAFD,MAEO;AACHC,UAAAA,WAAW,CAAC,eAAD,kCAAuBD,IAAvB,GAAgCK,IAAhC,EAAX;AACH;AACJ,OAND;AAOH,K;;;2EAES;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASE,gBAAAA,QAAT,QAASA,QAAT,EAAsBC,kBAAtB;AAAA,8BAC4B,MAAKN,KADjC,EACED,WADF,eACEA,WADF,EACeQ,QADf,eACeA,QADf;AAAA;AAAA;AAAA,uBAIiBZ,IAAI,CAACa,mBAAL,CAAyBD,QAAzB,EAAmCF,QAAnC,EAA6CC,kBAA7C,CAJjB;;AAAA;AAIIR,gBAAAA,IAJJ;AAKFF,gBAAAA,KAAK,CAAC,uBAAD,EAA0BE,IAA1B,CAAL;;AACA,oBAAIA,IAAI,CAACW,aAAL,KAAuB,SAA3B,EAAsC;AAClCV,kBAAAA,WAAW,CAAC,eAAD,EAAkBD,IAAlB,CAAX;AACH,iBAFD,MAEO,IAAIA,IAAI,CAACW,aAAL,KAAuB,WAA3B,EAAwC;AAC3Cb,kBAAAA,KAAK,CAAC,YAAD,EAAeE,IAAI,CAACY,cAApB,CAAL;AACAX,kBAAAA,WAAW,CAAC,WAAD,EAAcD,IAAd,CAAX;AACH,iBAHM,MAGA;AACH,wBAAKa,YAAL,CAAkBb,IAAlB;AACH;;AAbC;AAAA;;AAAA;AAAA;AAAA;AAeFF,gBAAAA,KAAK,aAAL;;AAfE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;6BAmBD;AAAA,yBAC8B,KAAKI,KADnC;AAAA,UACGY,QADH,gBACGA,QADH;AAAA,UACgBC,SADhB;;AAAA,UAEGN,QAFH,GAEwCM,SAFxC,CAEGN,QAFH;AAAA,UAEaO,SAFb,GAEwCD,SAFxC,CAEaC,SAFb;AAAA,UAEwBf,WAFxB,GAEwCc,SAFxC,CAEwBd,WAFxB;;AAGL,UAAI,CAAC,KAAKgB,UAAL,CAAgBC,QAAhB,CAAyBF,SAAzB,CAAL,EAA0C;AACtC,eAAO,IAAP;AACH;;AAED,0BAAOpB,KAAK,CAACuB,YAAN,CAAmBL,QAAnB,EAA6B;AAChCC,QAAAA,SAAS,EAATA,SADgC;AAEhCK,QAAAA,OAAO,EAAE,KAAKA,OAFkB;AAGhCnB,QAAAA,WAAW,EAAXA,WAHgC;AAIhCO,QAAAA,kBAAkB,EAAEC,QAAQ,CAACG,cAAT,CAAwBJ,kBAAxB,IAA8C;AAJlC,OAA7B,CAAP;AAMH;;;;EA/C4BZ,KAAK,CAACyB,S;;AAkDvC,eAAetB,kBAAf","sourcesContent":["import React from \"react\";\nimport Auth from \"@aws-amplify/auth\";\nimport debug from \"../debug\";\nimport { AuthChangeState, AuthProps } from \"../Authenticator\";\n\nexport type RequireNewPasswordChildrenProps = {\n    authProps: AuthProps;\n    confirm(params: {\n        password: string;\n        requiredAttributes: { [key: string]: string };\n    }): Promise<void>;\n    changeState: AuthChangeState;\n    requiredAttributes: string[];\n};\n\nexport type RequireNewPasswordProps = Omit<AuthProps, \"checkingUser\"> & {\n    children: React.ReactElement;\n};\n\nclass RequireNewPassword extends React.Component<RequireNewPasswordProps> {\n    // States when this view should be visible\n    authStates = [\"requireNewPassword\"];\n\n    checkContact = user => {\n        const { changeState } = this.props;\n        Auth.verifiedContact(user).then(data => {\n            if (data.verified) {\n                changeState(\"signedIn\", user);\n            } else {\n                changeState(\"verifyContact\", { ...user, ...data });\n            }\n        });\n    };\n\n    confirm = async ({ password, ...requiredAttributes }) => {\n        const { changeState, authData } = this.props;\n\n        try {\n            const user = await Auth.completeNewPassword(authData, password, requiredAttributes);\n            debug(\"complete new password\", user);\n            if (user.challengeName === \"SMS_MFA\") {\n                changeState(\"confirmSignIn\", user);\n            } else if (user.challengeName === \"MFA_SETUP\") {\n                debug(\"TOTP setup\", user.challengeParam);\n                changeState(\"TOTPSetup\", user);\n            } else {\n                this.checkContact(user);\n            }\n        } catch (err) {\n            debug(err);\n        }\n    };\n\n    render() {\n        const { children, ...authProps } = this.props;\n        const { authData, authState, changeState } = authProps;\n        if (!this.authStates.includes(authState)) {\n            return null;\n        }\n\n        return React.cloneElement(children, {\n            authProps,\n            confirm: this.confirm,\n            changeState,\n            requiredAttributes: authData.challengeParam.requiredAttributes || []\n        } as RequireNewPasswordChildrenProps);\n    }\n}\n\nexport default RequireNewPassword;\n"],"file":"RequireNewPassword.js"}