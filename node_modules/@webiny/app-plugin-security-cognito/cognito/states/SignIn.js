import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import Auth from "@aws-amplify/auth";
import debug from "../debug";

var SignIn = /*#__PURE__*/function (_React$Component) {
  _inherits(SignIn, _React$Component);

  var _super = _createSuper(SignIn);

  function SignIn() {
    var _this;

    _classCallCheck(this, SignIn);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "authStates", ["signIn", "signedOut", "signedUp"]);

    _defineProperty(_assertThisInitialized(_this), "state", {
      error: null,
      loading: false
    });

    _defineProperty(_assertThisInitialized(_this), "checkContact", function (user) {
      var changeState = _this.props.changeState;
      Auth.verifiedContact(user).then(function (data) {
        if (data.verified) {
          changeState("signedIn", user);
        } else {
          changeState("verifyContact", _objectSpread(_objectSpread({}, user), data));
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "signIn", function (input) {
      _this.setState({
        loading: true
      });

      var username = input.username,
          password = input.password;
      var changeState = _this.props.changeState;
      Auth.signIn(username.toLowerCase(), password).then(function (user) {
        _this.setState({
          loading: false
        });

        debug("User %O", user);

        if (user.challengeName === "SMS_MFA" || user.challengeName === "SOFTWARE_TOKEN_MFA") {
          debug("confirm user with %s", user.challengeName);
          changeState("confirmSignIn", user);
        } else if (user.challengeName === "NEW_PASSWORD_REQUIRED") {
          debug("require new password %s", user.challengeParam);
          changeState("requireNewPassword", user);
        } else if (user.challengeName === "MFA_SETUP") {
          debug("TOTP setup %s", user.challengeParam);
          changeState("TOTPSetup", user);
        } else {
          _this.checkContact(user);
        }
      }).catch(function (err) {
        _this.setState({
          loading: false
        });

        if (err.code === "UserNotConfirmedException") {
          debug("the user is not confirmed");
          changeState("confirmSignUp", {
            username: username
          });
        } else if (err.code === "PasswordResetRequiredException") {
          debug("password reset required", err);
          changeState("forgotPassword", {
            username: username,
            system: true
          });
        } else {
          _this.setState({
            error: err
          });
        }
      });
    });

    return _this;
  }

  _createClass(SignIn, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          authProps = _objectWithoutProperties(_this$props, ["children"]);

      var authState = authProps.authState,
          changeState = authProps.changeState;

      if (!this.authStates.includes(authState)) {
        return null;
      }

      return /*#__PURE__*/React.cloneElement(children, {
        authProps: authProps,
        signIn: this.signIn,
        changeState: changeState,
        error: this.state.error,
        loading: this.state.loading
      });
    }
  }]);

  return SignIn;
}(React.Component);

export default SignIn;
//# sourceMappingURL=SignIn.js.map