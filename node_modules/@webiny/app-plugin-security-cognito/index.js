import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from "react";
import Auth from "@aws-amplify/auth";
import Authentication from "./Authentication";

var factory = function factory(config) {
  // Configure Amplify Auth
  Auth.configure(config);
  return {
    name: "security-authentication-provider-cognito",
    type: "security-authentication-provider",
    securityProviderHook: function securityProviderHook(_ref) {
      var onIdToken = _ref.onIdToken;

      var renderAuthentication = function renderAuthentication() {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref2$viewProps = _ref2.viewProps,
            viewProps = _ref2$viewProps === void 0 ? {} : _ref2$viewProps;

        return /*#__PURE__*/React.createElement(Authentication, Object.assign({
          onIdToken: onIdToken
        }, viewProps));
      };

      var logout = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return Auth.signOut();

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function logout() {
          return _ref3.apply(this, arguments);
        };
      }();

      var getIdToken = /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          var cognitoUser, idToken;
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return Auth.currentSession();

                case 2:
                  cognitoUser = _context2.sent;
                  idToken = cognitoUser.getIdToken();
                  return _context2.abrupt("return", cognitoUser ? idToken.getJwtToken() : null);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function getIdToken() {
          return _ref4.apply(this, arguments);
        };
      }();

      return {
        getIdToken: getIdToken,
        renderAuthentication: renderAuthentication,
        logout: logout
      };
    }
  };
};

export default factory;
//# sourceMappingURL=index.js.map