{"version":3,"sources":["../../src/AutoComplete/AutoComplete.tsx"],"names":["React","Downshift","Input","classNames","Elevation","Typography","keycode","autoCompleteStyle","suggestionList","getOptionValue","getOptionText","MaterialSpinner","Spinner","process","env","REACT_APP_ENV","AutoComplete","inputValue","createRef","previousProps","props","value","options","previousValue","item","find","option","downshift","current","selectItem","isOpen","highlightedIndex","selectedItem","getMenuProps","getItemProps","renderItem","filtered","filter","state","toLowerCase","includes","length","map","index","itemValue","itemClassNames","selected","className","call","onChange","valueProp","textProp","onInput","validation","isValid","otherInputProps","downshiftProps","itemToString","defaultSelectedItem","selection","getInputProps","openMenu","rest","rawOnChange","trailingIcon","loading","e","onBlur","onFocus","onKeyDown","keyCode","onKeyUp","target","setState","renderOptions","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Downshift from \"downshift\";\nimport { Input } from \"@webiny/ui/Input\";\nimport classNames from \"classnames\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport keycode from \"keycode\";\nimport { autoCompleteStyle, suggestionList } from \"./styles\";\nimport { AutoCompleteBaseProps } from \"./types\";\nimport { getOptionValue, getOptionText } from \"./utils\";\nimport { isEqual } from \"lodash\";\nimport MaterialSpinner from \"react-spinner-material\";\n\nexport type AutoCompleteProps = AutoCompleteBaseProps & {\n    /* A callback that is executed each time a value is changed. */\n    onChange?: (value: any, selection: any) => void;\n\n    /* If true, will show a loading spinner on the right side of the input. */\n    loading?: boolean;\n};\n\ntype State = {\n    inputValue: string;\n};\n\nfunction Spinner() {\n    if (process.env.REACT_APP_ENV === \"ssr\") {\n        return null;\n    }\n\n    return <MaterialSpinner size={24} spinnerColor={\"#fa5723\"} spinnerWidth={2} visible />;\n}\n\nclass AutoComplete extends React.Component<AutoCompleteProps, State> {\n    static defaultProps = {\n        valueProp: \"id\",\n        textProp: \"name\",\n        options: [],\n        renderItem(item: any) {\n            return <Typography use={\"body2\"}>{getOptionText(item, this.props)}</Typography>;\n        }\n    };\n\n    state = {\n        inputValue: \"\"\n    };\n\n    /**\n     * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.\n     */\n    downshift: any = React.createRef();\n\n    componentDidUpdate(previousProps: any) {\n        const { value, options } = this.props;\n        const { value: previousValue } = previousProps;\n\n        if (!isEqual(value, previousValue)) {\n            let item = null;\n\n            if (value) {\n                if (typeof value === \"object\") {\n                    item = value;\n                } else {\n                    item =\n                        options.find(option => {\n                            return value === getOptionValue(option, this.props);\n                        }) || null;\n                }\n            }\n\n            const { current: downshift } = this.downshift;\n            downshift && downshift.selectItem(item);\n        }\n    }\n\n    /**\n     * Renders options - based on user's input. It will try to match input text with available options.\n     */\n    renderOptions({\n        options,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getMenuProps,\n        getItemProps\n    }: any) {\n        if (!isOpen) {\n            return null;\n        }\n\n        const { renderItem } = this.props;\n\n        const filtered = options.filter(item => {\n            // 2) At the end, we want to show only options that are matched by typed text.\n            if (!this.state.inputValue) {\n                return true;\n            }\n\n            return getOptionText(item, this.props)\n                .toLowerCase()\n                .includes(this.state.inputValue.toLowerCase());\n        });\n\n        if (!filtered.length) {\n            return (\n                <Elevation z={1}>\n                    <ul {...getMenuProps()}>\n                        <li>\n                            <Typography use={\"body2\"}>No results.</Typography>\n                        </li>\n                    </ul>\n                </Elevation>\n            );\n        }\n\n        return (\n            <Elevation z={1}>\n                <ul {...getMenuProps()}>\n                    {filtered.map((item, index) => {\n                        const itemValue = getOptionValue(item, this.props);\n\n                        // Base classes.\n                        const itemClassNames = {\n                            [suggestionList]: true,\n                            highlighted: highlightedIndex === index,\n                            selected: false\n                        };\n\n                        // Add \"selected\" class if the item is selected.\n                        if (\n                            selectedItem &&\n                            getOptionValue(selectedItem, this.props) === itemValue\n                        ) {\n                            itemClassNames.selected = true;\n                        }\n\n                        // Render the item.\n                        return (\n                            <li\n                                key={itemValue}\n                                {...getItemProps({\n                                    index,\n                                    item,\n                                    className: classNames(itemClassNames)\n                                })}\n                            >\n                                {renderItem.call(this, item, index)}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Elevation>\n        );\n    }\n\n    render() {\n        const {\n            options,\n            onChange,\n            value, // eslint-disable-line\n            valueProp, // eslint-disable-line\n            textProp, // eslint-disable-line\n            onInput,\n            validation = { isValid: null },\n            ...otherInputProps\n        } = this.props;\n\n        // Downshift related props.\n        const downshiftProps = {\n            className: autoCompleteStyle,\n            itemToString: item => getOptionText(item, this.props),\n            defaultSelectedItem: value,\n            onChange: selection => {\n                if (!selection || !onChange) {\n                    return;\n                }\n                onChange(getOptionValue(selection, this.props), selection);\n            }\n        };\n\n        return (\n            <div className={autoCompleteStyle}>\n                <Downshift {...downshiftProps} ref={this.downshift}>\n                    {({ getInputProps, openMenu, ...rest }) => (\n                        <div>\n                            <Input\n                                {...getInputProps({\n                                    ...otherInputProps,\n                                    // @ts-ignore\n                                    validation,\n                                    rawOnChange: true,\n                                    trailingIcon: this.props.loading && <Spinner />,\n                                    onChange: e => e,\n                                    onBlur: e => e,\n                                    onFocus: e => {\n                                        openMenu();\n                                        otherInputProps.onFocus && otherInputProps.onFocus(e);\n                                    },\n                                    onKeyDown: (e: React.KeyboardEvent<HTMLElement>) => {\n                                        // @ts-ignore\n                                        const keyCode = keycode(e);\n\n                                        if (keyCode === \"backspace\") {\n                                            onChange(null);\n                                        }\n                                    },\n                                    onKeyUp: (e: React.KeyboardEvent<HTMLElement>) => {\n                                        // @ts-ignore\n                                        const keyCode = keycode(e);\n                                        const target: any = e.target;\n                                        const inputValue = target.value || \"\";\n\n                                        // If user pressed 'esc', 'enter' or similar...\n                                        if (keyCode.length > 1) {\n                                            return;\n                                        }\n\n                                        // If values are the same, exit, do not update current search term.\n                                        if (inputValue === this.state.inputValue) {\n                                            return;\n                                        }\n\n                                        this.setState(\n                                            state => ({\n                                                ...state,\n                                                inputValue\n                                            }),\n                                            () => {\n                                                onInput && onInput(inputValue);\n                                            }\n                                        );\n                                    }\n                                })}\n                            />\n                            {this.renderOptions({ ...rest, options })}\n                        </div>\n                    )}\n                </Downshift>\n            </div>\n        );\n    }\n}\n\nexport { AutoComplete };\n"],"file":"AutoComplete.js"}