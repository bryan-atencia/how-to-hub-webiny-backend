{"version":3,"sources":["../../src/AutoComplete/MultiAutoComplete.tsx"],"names":["React","Downshift","MaterialSpinner","Input","Chips","Chip","getOptionValue","getOptionText","classNames","Elevation","Typography","autoCompleteStyle","suggestionList","Spinner","process","env","REACT_APP_ENV","MultiAutoComplete","inputValue","createRef","set","selection","props","unique","value","allowFreeInput","useSimpleValues","options","filtered","filter","item","values","Array","isArray","find","state","toLowerCase","includes","existingValue","unshift","textProp","isOpen","highlightedIndex","getMenuProps","getItemProps","length","renderItem","map","index","itemValue","itemClassNames","className","call","onChange","disabled","newValue","splice","rawOptions","valueProp","onInput","validation","isValid","otherInputProps","getOptions","downshift","assignedValueAfterClearing","current","clearSelection","getInputProps","openMenu","rest","rawOnChange","trailingIcon","loading","e","onBlur","onKeyUp","target","setState","onFocus","renderOptions","renderMultipleSelection","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Downshift from \"downshift\";\nimport MaterialSpinner from \"react-spinner-material\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Chips, Chip } from \"@webiny/ui/Chips\";\nimport { getOptionValue, getOptionText } from \"./utils\";\n\nimport { ReactComponent as BaselineCloseIcon } from \"./icons/baseline-close-24px.svg\";\nimport classNames from \"classnames\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { autoCompleteStyle, suggestionList } from \"./styles\";\n\nimport { AutoCompleteBaseProps } from \"./types\";\n\nexport type MultiAutoCompleteProps = AutoCompleteBaseProps & {\n    /**\n     * Prevents adding the same item to the list twice.\n     */\n    unique: boolean;\n\n    /**\n     * Set if custom values (not from list of suggestions) are allowed.\n     */\n    allowFreeInput?: boolean;\n\n    /* If true, will show a loading spinner on the right side of the input. */\n    loading?: boolean;\n};\n\ntype State = {\n    inputValue: string;\n};\n\nfunction Spinner() {\n    if (process.env.REACT_APP_ENV === \"ssr\") {\n        return null;\n    }\n\n    return <MaterialSpinner size={24} spinnerColor={\"#fa5723\"} spinnerWidth={2} visible />;\n}\n\nexport class MultiAutoComplete extends React.Component<MultiAutoCompleteProps, State> {\n    static defaultProps = {\n        valueProp: \"id\",\n        textProp: \"name\",\n        unique: true,\n        options: [],\n        useSimpleValues: false,\n        renderItem(item: any) {\n            return <Typography use={\"body2\"}>{getOptionText(item, this.props)}</Typography>;\n        }\n    };\n\n    state = {\n        inputValue: \"\"\n    };\n\n    /**\n     * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.\n     */\n    downshift: any = React.createRef();\n\n    assignedValueAfterClearing = {\n        set: false,\n        selection: null\n    };\n\n    getOptions() {\n        const { unique, value, allowFreeInput, useSimpleValues, options } = this.props;\n\n        const filtered = options.filter(item => {\n            // We need to filter received options.\n            // 1) If \"unique\" prop was passed, we don't want to show already picked options again.\n            if (unique) {\n                const values = value;\n                if (Array.isArray(values)) {\n                    if (\n                        values.find(\n                            value =>\n                                getOptionValue(value, this.props) ===\n                                getOptionValue(item, this.props)\n                        )\n                    ) {\n                        return false;\n                    }\n                }\n            }\n\n            // 2) At the end, we want to show only options that are matched by typed text.\n            if (!this.state.inputValue) {\n                return true;\n            }\n\n            return getOptionText(item, this.props)\n                .toLowerCase()\n                .includes(this.state.inputValue.toLowerCase());\n        });\n\n        // If free input is allowed, prepend typed value to the list.\n        if (allowFreeInput && this.state.inputValue) {\n            if (useSimpleValues) {\n                const existingValue = filtered.includes(this.state.inputValue);\n                if (!existingValue) {\n                    filtered.unshift(this.state.inputValue);\n                }\n            } else {\n                const existingValue = filtered.find(\n                    item => this.state.inputValue === getOptionText(item, this.props)\n                );\n                if (!existingValue) {\n                    filtered.unshift({ [this.props.textProp]: this.state.inputValue });\n                }\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * Renders options - based on user's input. It will try to match input text with available options.\n     * @param options\n     * @param isOpen\n     * @param highlightedIndex\n     * @param selectedItem\n     * @param getMenuProps\n     * @param getItemProps\n     * @returns {*}\n     */\n    renderOptions({ options, isOpen, highlightedIndex, getMenuProps, getItemProps }: any) {\n        if (!isOpen) {\n            return null;\n        }\n\n        if (!options.length) {\n            return (\n                <Elevation z={1}>\n                    <ul {...getMenuProps()}>\n                        <li>\n                            <Typography use={\"body2\"}>No results.</Typography>\n                        </li>\n                    </ul>\n                </Elevation>\n            );\n        }\n\n        const { renderItem } = this.props;\n        return (\n            <Elevation z={1}>\n                <ul {...getMenuProps()}>\n                    {options.map((item, index) => {\n                        const itemValue = getOptionValue(item, this.props);\n\n                        // Base classes.\n                        const itemClassNames = {\n                            [suggestionList]: true,\n                            highlighted: highlightedIndex === index,\n                            selected: false\n                        };\n\n                        // Render the item.\n                        return (\n                            <li\n                                key={itemValue + index}\n                                {...getItemProps({\n                                    index,\n                                    item,\n                                    className: classNames(itemClassNames)\n                                })}\n                            >\n                                {renderItem.call(this, item, index)}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Elevation>\n        );\n    }\n\n    /**\n     * Once added, items can also be removed by clicking on the ✕ icon. This is the method that is responsible for\n     * rendering selected items (we are using already existing \"Chips\" component).\n     * @returns {*}\n     */\n    renderMultipleSelection() {\n        const { value, onChange, disabled } = this.props;\n\n        return (\n            <React.Fragment>\n                {Array.isArray(value) && value.length ? (\n                    <Chips disabled={disabled}>\n                        {value.map((item, index) => (\n                            <Chip\n                                label={getOptionText(item, this.props)}\n                                key={`${getOptionValue(item, this.props)}-${index}`}\n                                trailingIcon={<BaselineCloseIcon />}\n                                onRemove={() => {\n                                    // On removal, let's update the value and call \"onChange\" callback.\n                                    if (onChange) {\n                                        const newValue = [...value];\n                                        newValue.splice(index, 1);\n                                        onChange(newValue);\n                                    }\n                                }}\n                            />\n                        ))}\n                    </Chips>\n                ) : null}\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const {\n            props,\n            props: {\n                options: rawOptions, // eslint-disable-line\n                allowFreeInput, // eslint-disable-line\n                useSimpleValues, // eslint-disable-line\n                unique,\n                value,\n                onChange,\n                valueProp, // eslint-disable-line\n                textProp, // eslint-disable-line\n                onInput,\n                validation = { isValid: null },\n                ...otherInputProps\n            }\n        } = this;\n\n        const options = this.getOptions();\n\n        return (\n            <div className={autoCompleteStyle}>\n                <Downshift\n                    defaultSelectedItem={null}\n                    // @ts-ignore\n                    className={autoCompleteStyle}\n                    itemToString={item => item && getOptionText(item, props)}\n                    ref={this.downshift}\n                    onChange={selection => {\n                        if (!this.assignedValueAfterClearing.set) {\n                            this.assignedValueAfterClearing = {\n                                set: true,\n                                selection\n                            };\n                            this.downshift.current.clearSelection();\n                            return;\n                        }\n\n                        if (this.assignedValueAfterClearing.set) {\n                            this.assignedValueAfterClearing.set = false;\n                            if (Array.isArray(value)) {\n                                onChange &&\n                                    onChange([...value, this.assignedValueAfterClearing.selection]);\n                            } else {\n                                onChange && onChange([this.assignedValueAfterClearing.selection]);\n                            }\n                        }\n                    }}\n                >\n                    {/* \"getInputProps\" and \"openMenu\" are not needed in renderOptions method. */}\n                    {({ getInputProps, openMenu, ...rest }) => (\n                        <div>\n                            <Input\n                                {...getInputProps({\n                                    ...otherInputProps,\n                                    // @ts-ignore\n                                    validation,\n                                    rawOnChange: true,\n                                    trailingIcon: this.props.loading && <Spinner />,\n                                    onChange: e => e,\n                                    onBlur: e => e,\n                                    onKeyUp: (e: any) => {\n                                        const inputValue = e.target.value || \"\";\n\n                                        // Set current input value into state and trigger onInput if different.\n                                        if (inputValue !== this.state.inputValue) {\n                                            this.setState({ inputValue }, () => {\n                                                onInput && onInput(inputValue);\n                                            });\n                                        }\n                                    },\n                                    onFocus: e => {\n                                        openMenu();\n                                        otherInputProps.onFocus && otherInputProps.onFocus(e);\n                                    }\n                                })}\n                            />\n                            {this.renderOptions({ ...rest, unique, options })}\n                            {this.renderMultipleSelection()}\n                        </div>\n                    )}\n                </Downshift>\n            </div>\n        );\n    }\n}\n"],"file":"MultiAutoComplete.js"}