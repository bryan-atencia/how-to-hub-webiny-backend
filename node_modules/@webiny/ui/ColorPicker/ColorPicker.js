import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { SketchPicker } from "react-color";
import { css } from "emotion";
import { FormElementMessage } from "../FormElementMessage";
import classNames from "classnames";
var classes = {
  label: /*#__PURE__*/css({
    marginBottom: "10px !important"
  }, "label:label;"),
  color: /*#__PURE__*/css({
    width: "36px",
    height: "14px",
    borderRadius: "2px"
  }, "label:color;"),
  swatch: /*#__PURE__*/css({
    padding: "5px",
    background: "#fff",
    borderRadius: "1px",
    boxShadow: "0 0 0 1px rgba(0,0,0,.1)",
    display: "inline-block",
    cursor: "pointer"
  }, "label:swatch;"),
  // @ts-ignore
  popover: /*#__PURE__*/css({
    position: "absolute",
    zIndex: "2"
  }, "label:popover;"),
  classNames: /*#__PURE__*/css({
    position: "fixed",
    top: "0px",
    right: "0px",
    bottom: "0px",
    left: "0px"
  }, "label:classNames;"),
  disable: /*#__PURE__*/css({
    opacity: 0.7,
    pointerEvents: "none"
  }, "label:disable;")
};

/**
 * Use ColorPicker component to display a list of choices, once the handler is triggered.
 */
var ColorPicker = /*#__PURE__*/function (_React$Component) {
  _inherits(ColorPicker, _React$Component);

  var _super = _createSuper(ColorPicker);

  function ColorPicker() {
    var _this;

    _classCallCheck(this, ColorPicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      showColorPicker: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      _this.setState({
        showColorPicker: !_this.state.showColorPicker
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      _this.setState({
        showColorPicker: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (color) {
      var onChange = _this.props.onChange;
      onChange && onChange(color.hex);
    });

    return _this;
  }

  _createClass(ColorPicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          label = _this$props.label,
          disable = _this$props.disable,
          description = _this$props.description,
          validation = _this$props.validation;
      var backgroundColorStyle = null;

      if (value) {
        backgroundColorStyle = {
          background: "".concat(value)
        };
      }

      return /*#__PURE__*/React.createElement("div", {
        className: classNames(_defineProperty({}, classes.disable, disable))
      }, label && /*#__PURE__*/React.createElement("div", {
        className: classNames("mdc-text-field-helper-text mdc-text-field-helper-text--persistent", classes.label)
      }, label), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
        className: classes.swatch,
        onClick: this.handleClick
      }, /*#__PURE__*/React.createElement("div", {
        className: classes.color,
        style: backgroundColorStyle
      })), this.state.showColorPicker ? /*#__PURE__*/React.createElement("div", {
        className: classes.popover
      }, /*#__PURE__*/React.createElement("div", {
        className: classes.classNames,
        onClick: this.handleClose
      }), /*#__PURE__*/React.createElement(SketchPicker, {
        color: value || "",
        onChange: this.handleChange
      })) : null), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
    }
  }]);

  return ColorPicker;
}(React.Component);

_defineProperty(ColorPicker, "defaultProps", {
  validation: {
    isValid: null
  }
});

export { ColorPicker };
//# sourceMappingURL=ColorPicker.js.map