{"version":3,"sources":["../../src/Radio/Radio.tsx"],"names":["React","Radio","RmwcRadio","FormElementMessage","e","props","onChange","target","checked","value","label","disabled","description","validation","Boolean","isValid","message","Component"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAK,IAAIC,SAAlB,QAAmC,aAAnC;AAEA,SAASC,kBAAT,QAAmC,uBAAnC;;AAaA;;;;IAIMF,K;;;;;;;;;;;;;;;;+DAKS,UAACG,CAAD,EAA+C;AACtD,YAAKC,KAAL,CAAWC,QAAX,IAAuB,MAAKD,KAAL,CAAWC,QAAX,CAAqBF,CAAC,CAACG,MAAH,CAAkBC,OAAtC,CAAvB;AACH,K;;;;;;;6BAEQ;AAAA,wBACuD,KAAKH,KAD5D;AAAA,UACGI,KADH,eACGA,KADH;AAAA,UACUC,KADV,eACUA,KADV;AAAA,UACiBC,QADjB,eACiBA,QADjB;AAAA,UAC2BC,WAD3B,eAC2BA,WAD3B;AAAA,UACwCC,UADxC,eACwCA,UADxC;AAEL,0BACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,SAAD;AACI,QAAA,QAAQ,EAAEF,QADd;AAEI,QAAA,OAAO,EAAEG,OAAO,CAACL,KAAD,CAFpB;AAGI,QAAA,QAAQ,EAAE,KAAKH,QAHnB,CAII;AAJJ;AAKI,QAAA,KAAK,EAAEI;AALX,QADJ,EAQKG,UAAU,CAACE,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,QAAA,KAAK;AAAzB,SAA2BF,UAAU,CAACG,OAAtC,CATR,EAYKH,UAAU,CAACE,OAAX,KAAuB,KAAvB,IAAgCH,WAAhC,iBACG,oBAAC,kBAAD,QAAqBA,WAArB,CAbR,CADJ;AAkBH;;;;EA7BeZ,KAAK,CAACiB,S;;gBAApBhB,K,kBACoB;AAClBY,EAAAA,UAAU,EAAE;AAAEE,IAAAA,OAAO,EAAE;AAAX;AADM,C;;AA+B1B,eAAed,KAAf","sourcesContent":["import * as React from \"react\";\nimport { Radio as RmwcRadio } from \"@rmwc/radio\";\nimport { FormComponentProps } from \"./../types\";\nimport { FormElementMessage } from \"../FormElementMessage\";\n\ntype Props = FormComponentProps & {\n    // Component label.\n    label?: React.ReactNode;\n\n    // Is radio disabled?\n    disabled?: boolean;\n\n    // Description beneath the radio.\n    description?: string;\n};\n\n/**\n * Wrap Radio components with RadioGroup to create a set of options.\n * Each Radio component must receive value and onChange callback via props.\n */\nclass Radio extends React.Component<Props> {\n    static defaultProps = {\n        validation: { isValid: null }\n    };\n\n    onChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        this.props.onChange && this.props.onChange((e.target as any).checked);\n    };\n\n    render() {\n        const { value, label, disabled, description, validation } = this.props;\n        return (\n            <React.Fragment>\n                <RmwcRadio\n                    disabled={disabled}\n                    checked={Boolean(value)}\n                    onChange={this.onChange}\n                    // @ts-ignore Although the label is React.ReactNode internally, an error is still thrown.\n                    label={label}\n                />\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Radio;\n"],"file":"Radio.js"}