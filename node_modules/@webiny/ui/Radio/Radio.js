import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { Radio as RmwcRadio } from "@rmwc/radio";
import { FormElementMessage } from "../FormElementMessage";

/**
 * Wrap Radio components with RadioGroup to create a set of options.
 * Each Radio component must receive value and onChange callback via props.
 */
var Radio = /*#__PURE__*/function (_React$Component) {
  _inherits(Radio, _React$Component);

  var _super = _createSuper(Radio);

  function Radio() {
    var _this;

    _classCallCheck(this, Radio);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      _this.props.onChange && _this.props.onChange(e.target.checked);
    });

    return _this;
  }

  _createClass(Radio, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          label = _this$props.label,
          disabled = _this$props.disabled,
          description = _this$props.description,
          validation = _this$props.validation;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RmwcRadio, {
        disabled: disabled,
        checked: Boolean(value),
        onChange: this.onChange // @ts-ignore Although the label is React.ReactNode internally, an error is still thrown.
        ,
        label: label
      }), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
    }
  }]);

  return Radio;
}(React.Component);

_defineProperty(Radio, "defaultProps", {
  validation: {
    isValid: null
  }
});

export default Radio;
//# sourceMappingURL=Radio.js.map