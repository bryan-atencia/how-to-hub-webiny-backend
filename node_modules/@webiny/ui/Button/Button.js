import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import * as React from "react";
import * as R from "@rmwc/button";
import { Fab } from "@rmwc/fab";
import { Icon } from "../Icon/Icon";
import classNames from "classnames";

/**
 * Shows a default button, used typically when action is not of high priority.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ButtonDefault = function ButtonDefault(props) {
  var disabled = props.disabled,
      onClick = props.onClick,
      children = props.children,
      small = props.small,
      _props$ripple = props.ripple,
      ripple = _props$ripple === void 0 ? true : _props$ripple,
      _props$className = props.className,
      className = _props$className === void 0 ? "" : _props$className,
      style = props.style;
  return /*#__PURE__*/React.createElement(R.Button, {
    style: style,
    disabled: disabled,
    dense: small,
    onClick: onClick,
    ripple: ripple,
    className: classNames("webiny-ui-button", className),
    "data-testid": props["data-testid"]
  }, children);
};
/**
 * Shows primary button, eg. for submitting forms.
 * @param props
 * @returns {*}
 * @constructor
 */

export var ButtonPrimary = function ButtonPrimary(props) {
  var disabled = props.disabled,
      onClick = props.onClick,
      children = props.children,
      _props$small = props.small,
      small = _props$small === void 0 ? false : _props$small,
      _props$flat = props.flat,
      flat = _props$flat === void 0 ? false : _props$flat,
      _props$ripple2 = props.ripple,
      ripple = _props$ripple2 === void 0 ? true : _props$ripple2,
      _props$style = props.style,
      style = _props$style === void 0 ? null : _props$style,
      _props$className2 = props.className,
      className = _props$className2 === void 0 ? null : _props$className2;
  return /*#__PURE__*/React.createElement(R.Button, {
    raised: !flat,
    dense: small,
    disabled: disabled,
    unelevated: flat,
    ripple: ripple,
    onClick: onClick,
    style: style,
    className: classNames("webiny-ui-button webiny-ui-button--primary", className),
    "data-testid": props["data-testid"]
  }, children);
};
/**
 * Shows a secondary button - eg. for doing a reset on a form.
 * @param props
 * @returns {*}
 * @constructor
 */

export var ButtonSecondary = function ButtonSecondary(props) {
  var disabled = props.disabled,
      onClick = props.onClick,
      children = props.children,
      _props$small2 = props.small,
      small = _props$small2 === void 0 ? false : _props$small2,
      _props$ripple3 = props.ripple,
      ripple = _props$ripple3 === void 0 ? true : _props$ripple3,
      _props$className3 = props.className,
      className = _props$className3 === void 0 ? null : _props$className3,
      _props$style2 = props.style,
      style = _props$style2 === void 0 ? null : _props$style2;
  return /*#__PURE__*/React.createElement(R.Button, {
    disabled: disabled,
    outlined: true,
    dense: small,
    ripple: ripple,
    onClick: onClick,
    style: style,
    className: classNames("webiny-ui-button webiny-ui-button--secondary", className),
    "data-testid": props["data-testid"]
  }, children);
};

/**
 * A floating button, shown on the side of the screen, typically used for creating new content or accessing settings.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ButtonFloating = function ButtonFloating(props) {
  var disabled = props.disabled,
      icon = props.icon,
      onClick = props.onClick,
      _props$small3 = props.small,
      small = _props$small3 === void 0 ? false : _props$small3,
      _props$label = props.label,
      label = _props$label === void 0 ? false : _props$label,
      _props$ripple4 = props.ripple,
      ripple = _props$ripple4 === void 0 ? true : _props$ripple4,
      _props$className4 = props.className,
      className = _props$className4 === void 0 ? null : _props$className4,
      rest = _objectWithoutProperties(props, ["disabled", "icon", "onClick", "small", "label", "ripple", "className"]);

  return /*#__PURE__*/React.createElement(Fab, Object.assign({
    "data-testid": props["data-testid"],
    disabled: disabled,
    mini: small,
    onClick: onClick,
    label: label,
    ripple: ripple,
    icon: icon,
    className: classNames("webiny-ui-button--floating", className)
  }, rest));
};
/**
 * Shows an icon, suitable to be shown inside of a button.
 * @param props
 * @returns {*}
 * @constructor
 */

export var ButtonIcon = function ButtonIcon(props) {
  return /*#__PURE__*/React.createElement(Icon, props);
};
//# sourceMappingURL=Button.js.map