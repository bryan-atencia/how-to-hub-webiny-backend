{"version":3,"sources":["../../src/Avatar/Avatar.tsx"],"names":["React","css","classNames","avatar","borderRadius","display","width","height","position","top","right","overflow","background","color","div","textAlign","alignContent","justifyContent","flexDirection","fontSize","span","paddingBottom","img","Avatar","props","className","src","alt","fallbackText","renderImage","rest","renderedImage","imageProps","style","split","map","word","charAt","join","toUpperCase","defaultProps"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,IAAMC,MAAM,gBAAGF,GAAG,CAAC;AACfG,EAAAA,YAAY,EAAE,KADC;AAEfC,EAAAA,OAAO,EAAE,OAFM;AAGf;AACA;AACAC,EAAAA,KAAK,EAAE,EALQ;AAMfC,EAAAA,MAAM,EAAE,EANO;AAOfC,EAAAA,QAAQ,EAAE,UAPK;AAQfC,EAAAA,GAAG,EAAE,CAAC,CARS;AASfC,EAAAA,KAAK,EAAE,CATQ;AAUfC,EAAAA,QAAQ,EAAE,QAVK;AAWfC,EAAAA,UAAU,EAAE,6BAXG;AAYfC,EAAAA,KAAK,EAAE,+CAZQ;AAafC,EAAAA,GAAG,EAAE;AACDC,IAAAA,SAAS,EAAE,QADV;AAEDV,IAAAA,OAAO,EAAE,MAFR;AAGDW,IAAAA,YAAY,EAAE,QAHb;AAIDC,IAAAA,cAAc,EAAE,QAJf;AAKDC,IAAAA,aAAa,EAAE,QALd;AAMDZ,IAAAA,KAAK,EAAE,EANN;AAODC,IAAAA,MAAM,EAAE,EAPP;AAQDY,IAAAA,QAAQ,EAAE,MART;AASDC,IAAAA,IAAI,EAAE;AACFC,MAAAA,aAAa,EAAE;AADb;AATL,GAbU;AA0BfC,EAAAA,GAAG,EAAE;AACDhB,IAAAA,KAAK,EAAE,iBADN;AAEDC,IAAAA,MAAM,EAAE;AAFP;AA1BU,CAAD,kBAAlB;;AA2EA;;;AAGA,OAAO,IAAMgB,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAwB;AAAA,MAClCC,SADkC,GACyCD,KADzC,CAClCC,SADkC;AAAA,MACvBnB,KADuB,GACyCkB,KADzC,CACvBlB,KADuB;AAAA,MAChBC,MADgB,GACyCiB,KADzC,CAChBjB,MADgB;AAAA,MACRmB,GADQ,GACyCF,KADzC,CACRE,GADQ;AAAA,MACHC,GADG,GACyCH,KADzC,CACHG,GADG;AAAA,MACEC,YADF,GACyCJ,KADzC,CACEI,YADF;AAAA,MACgBC,WADhB,GACyCL,KADzC,CACgBK,WADhB;AAAA,MACgCC,IADhC,4BACyCN,KADzC;;AAG1C,MAAIO,aAAa,GAAG,IAApB;AACA,MAAMC,UAAU,GAAG;AAAEN,IAAAA,GAAG,EAAHA,GAAF;AAAOC,IAAAA,GAAG,EAAHA;AAAP,GAAnB;;AACA,MAAI,OAAOE,WAAP,KAAuB,UAA3B,EAAuC;AACnCE,IAAAA,aAAa,GAAGF,WAAW,CAACG,UAAD,CAA3B;AACH,GAFD,MAEO;AACHD,IAAAA,aAAa,gBAAG,2BAASC,UAAT,CAAhB;AACH;;AAED,sBACI,6CACQF,IADR;AAEI,IAAA,SAAS,EAAE5B,UAAU,CAACC,MAAD,EAASsB,SAAT,CAFzB;AAGI,IAAA,KAAK,kCAAOD,KAAK,CAACS,KAAb;AAAoB3B,MAAAA,KAAK,EAALA,KAApB;AAA2BC,MAAAA,MAAM,EAANA;AAA3B;AAHT,MAKKiB,KAAK,CAACE,GAAN,GACGK,aADH,gBAGG,8CACI,kCACKH,YAAY,CACRM,KADJ,CACU,GADV,EAEIC,GAFJ,CAEQ,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAJ;AAAA,GAFZ,EAGIC,IAHJ,CAGS,EAHT,EAIIC,WAJJ,EADL,CADJ,CARR,CADJ;AAqBH,CAhCM;AAkCPhB,MAAM,CAACiB,YAAP,GAAsB;AAClBlC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB","sourcesContent":["import * as React from \"react\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nconst avatar = css({\n    borderRadius: \"50%\",\n    display: \"block\",\n    //alignItems: \"center\",\n    //justifyContent: \"center\",\n    width: 38,\n    height: 38,\n    position: \"relative\",\n    top: -7,\n    right: 7,\n    overflow: \"hidden\",\n    background: \"var(--mdc-theme-background)\",\n    color: \"var(--mdc-theme-text-secondary-on-background)\",\n    div: {\n        textAlign: \"center\",\n        display: \"flex\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        width: 38,\n        height: 38,\n        fontSize: \"1rem\",\n        span: {\n            paddingBottom: 2\n        }\n    },\n    img: {\n        width: \"100% !important\",\n        height: \"100% !important\"\n    }\n});\n\nexport type AvatarProps = {\n    /**\n     * CSS class name.\n     */\n    className?: string;\n\n    /**\n     * Style object.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Avatar image source.\n     */\n    src: string;\n\n    /**\n     * \"alt\" text.\n     */\n    alt?: string;\n\n    /**\n     * Width.\n     */\n    width?: number;\n\n    /**\n     * Height.\n     */\n    height?: number;\n\n    /**\n     * Pass a custom image component to be rendered instead of a simple <img> element.\n     * @param props\n     */\n    renderImage?: (props: { src: string; alt?: string }) => React.ReactElement;\n\n    /**\n     * Text that will be shown when there is no image (usually user's initials).\n     */\n    fallbackText: string;\n};\n\n/**\n * Use Avatar component to display user's avatar.\n */\nexport const Avatar = (props: AvatarProps) => {\n    const { className, width, height, src, alt, fallbackText, renderImage, ...rest } = props;\n\n    let renderedImage = null;\n    const imageProps = { src, alt };\n    if (typeof renderImage === \"function\") {\n        renderedImage = renderImage(imageProps);\n    } else {\n        renderedImage = <img {...imageProps} />;\n    }\n\n    return (\n        <div\n            {...rest}\n            className={classNames(avatar, className)}\n            style={{ ...props.style, width, height }}\n        >\n            {props.src ? (\n                renderedImage\n            ) : (\n                <div>\n                    <span>\n                        {fallbackText\n                            .split(\" \")\n                            .map(word => word.charAt(0))\n                            .join(\"\")\n                            .toUpperCase()}\n                    </span>\n                </div>\n            )}\n        </div>\n    );\n};\n\nAvatar.defaultProps = {\n    width: 38,\n    height: 38\n};\n"],"file":"Avatar.js"}