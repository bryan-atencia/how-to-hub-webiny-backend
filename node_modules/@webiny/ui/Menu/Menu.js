import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import ReactDOM from "react-dom";
import { Menu as BaseMenu, MenuItem as BaseMenuItem, MenuSurface, MenuSurfaceAnchor } from "@rmwc/menu";
import { css } from "emotion";
import classNames from "classnames";
var style = {
  disabledMenuItem: /*#__PURE__*/css({
    opacity: 0.5,
    pointerEvents: "none"
  }, "label:disabledMenuItem;")
};
var el = null;

var getElement = function getElement() {
  if (!el) {
    el = document.createElement("div");
    el.id = "menu-container";
    el.style.position = "fixed";
    el.style.top = "0";
    el.style.zIndex = "10";
    document.body.appendChild(el);
  }

  return el;
};
/**
 * Use Menu component to display a list of choices, once the handler is triggered.
 */


var Menu = /*#__PURE__*/function (_React$Component) {
  _inherits(Menu, _React$Component);

  var _super = _createSuper(Menu);

  function Menu() {
    var _this;

    _classCallCheck(this, Menu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      menuIsOpen: false
    });

    _defineProperty(_assertThisInitialized(_this), "anchorRef", /*#__PURE__*/React.createRef());

    _defineProperty(_assertThisInitialized(_this), "menuRef", /*#__PURE__*/React.createRef());

    _defineProperty(_assertThisInitialized(_this), "openMenu", function () {
      _this.setState({
        menuIsOpen: true
      }, function () {
        return _this.props.onOpen && _this.props.onOpen();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "closeMenu", function () {
      _this.setState({
        menuIsOpen: false
      }, function () {
        return _this.props.onClose && _this.props.onClose();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderMenuWithPortal", function () {
      return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement("div", {
        ref: _this.menuRef
      }, /*#__PURE__*/React.createElement(BaseMenu, {
        anchorCorner: _this.props.anchor,
        open: _this.state.menuIsOpen,
        className: _this.props.className,
        onClose: _this.closeMenu,
        onSelect: _this.props.onSelect
      }, _this.props.children)), getElement());
    });

    _defineProperty(_assertThisInitialized(_this), "renderCustomContent", function () {
      var children = _this.props.children;
      return /*#__PURE__*/React.createElement(MenuSurface, {
        open: _this.state.menuIsOpen,
        onClose: _this.closeMenu
      }, typeof children === "function" ? children({
        closeMenu: _this.closeMenu
      }) : children);
    });

    _defineProperty(_assertThisInitialized(_this), "renderMenuContent", function () {
      return Array.isArray(_this.props.children) ? _this.renderMenuWithPortal() : _this.renderCustomContent();
    });

    return _this;
  }

  _createClass(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (!this.menuRef.current || !this.anchorRef.current) {
        return;
      }

      var menu = this.menuRef.current; // @ts-ignore

      var anchorRect = this.anchorRef.current.getBoundingClientRect();
      menu.style.position = "absolute";
      menu.style.left = anchorRect.left - 60 + "px";
      menu.style.top = anchorRect.top + "px";
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(MenuSurfaceAnchor, {
        ref: this.anchorRef,
        "data-testid": this.props["data-testid"]
      }, this.renderMenuContent(), this.props.handle && /*#__PURE__*/React.cloneElement(this.props.handle, {
        onClick: this.openMenu
      }));
    }
  }]);

  return Menu;
}(React.Component);

_defineProperty(Menu, "defaultProps", {
  handle: null,
  anchor: "topStart"
});

var MenuDivider = function MenuDivider() {
  return /*#__PURE__*/React.createElement("li", {
    className: "mdc-list-divider",
    role: "separator"
  });
};

var MenuItem = function MenuItem(_ref) {
  var disabled = _ref.disabled,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ["disabled", "className"]);

  return /*#__PURE__*/React.createElement(BaseMenuItem, Object.assign({}, rest, {
    className: classNames(className, _defineProperty({}, style.disabledMenuItem, disabled))
  }));
};

export { Menu, MenuItem, MenuDivider };
//# sourceMappingURL=Menu.js.map