{"version":3,"sources":["../../src/Menu/Menu.tsx"],"names":["React","ReactDOM","Menu","BaseMenu","MenuItem","BaseMenuItem","MenuSurface","MenuSurfaceAnchor","css","classNames","style","disabledMenuItem","opacity","pointerEvents","el","getElement","document","createElement","id","position","top","zIndex","body","appendChild","menuIsOpen","createRef","setState","props","onOpen","onClose","createPortal","menuRef","anchor","state","className","closeMenu","onSelect","children","Array","isArray","renderMenuWithPortal","renderCustomContent","current","anchorRef","menu","anchorRect","getBoundingClientRect","left","renderMenuContent","handle","cloneElement","onClick","openMenu","Component","MenuDivider","disabled","rest"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    Menu as BaseMenu,\n    MenuProps as RmwcMenuProps,\n    MenuItem as BaseMenuItem,\n    MenuItemProps as BaseMenuItemProps,\n    MenuSurface,\n    MenuSurfaceAnchor\n} from \"@rmwc/menu\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\n\nconst style = {\n    disabledMenuItem: css({\n        opacity: 0.5,\n        pointerEvents: \"none\"\n    })\n};\n\ntype MenuProps = RmwcMenuProps & {\n    // One or more MenuItem components.\n    children: React.ReactNode;\n\n    // A handler which triggers the menu, eg. button or link.\n    handle?: React.ReactElement;\n\n    // Position the menu to one of anchor corners.\n    // 'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'\n    anchor?:\n        | \"bottomEnd\"\n        | \"bottomLeft\"\n        | \"bottomRight\"\n        | \"bottomStart\"\n        | \"topEnd\"\n        | \"topLeft\"\n        | \"topRight\"\n        | \"topStart\";\n\n    // Class that will be added to the Menu element.\n    className?: string;\n\n    onOpen?: () => void;\n    onClose?: () => void;\n\n    // For testing purposes.\n    \"data-testid\"?: string;\n};\n\ntype State = {\n    menuIsOpen: boolean;\n};\n\nlet el = null;\nconst getElement = () => {\n    if (!el) {\n        el = document.createElement(\"div\");\n        el.id = \"menu-container\";\n        el.style.position = \"fixed\";\n        el.style.top = \"0\";\n        el.style.zIndex = \"10\";\n        document.body.appendChild(el);\n    }\n\n    return el;\n};\n\n/**\n * Use Menu component to display a list of choices, once the handler is triggered.\n */\nclass Menu extends React.Component<MenuProps, State> {\n    static defaultProps = {\n        handle: null,\n        anchor: \"topStart\"\n    };\n\n    state = {\n        menuIsOpen: false\n    };\n\n    anchorRef = React.createRef();\n    menuRef = React.createRef();\n\n    componentDidUpdate() {\n        if (!this.menuRef.current || !this.anchorRef.current) {\n            return;\n        }\n\n        const menu: any = this.menuRef.current;\n\n        // @ts-ignore\n        const anchorRect = this.anchorRef.current.getBoundingClientRect();\n\n        menu.style.position = \"absolute\";\n        menu.style.left = anchorRect.left - 60 + \"px\";\n        menu.style.top = anchorRect.top + \"px\";\n    }\n\n    openMenu = () => {\n        this.setState({ menuIsOpen: true }, () => this.props.onOpen && this.props.onOpen());\n    };\n\n    closeMenu = () => {\n        this.setState({ menuIsOpen: false }, () => this.props.onClose && this.props.onClose());\n    };\n\n    renderMenuWithPortal = () => {\n        return ReactDOM.createPortal(\n            <div ref={this.menuRef as React.RefObject<HTMLDivElement>}>\n                <BaseMenu\n                    anchorCorner={this.props.anchor}\n                    open={this.state.menuIsOpen}\n                    className={this.props.className}\n                    onClose={this.closeMenu}\n                    onSelect={this.props.onSelect}\n                >\n                    {this.props.children}\n                </BaseMenu>\n            </div>,\n            getElement()\n        );\n    };\n\n    renderCustomContent = () => {\n        const { children } = this.props;\n        return (\n            <MenuSurface open={this.state.menuIsOpen} onClose={this.closeMenu}>\n                {typeof children === \"function\"\n                    ? children({ closeMenu: this.closeMenu })\n                    : children}\n            </MenuSurface>\n        );\n    };\n\n    renderMenuContent = () => {\n        return Array.isArray(this.props.children)\n            ? this.renderMenuWithPortal()\n            : this.renderCustomContent();\n    };\n\n    render() {\n        return (\n            <MenuSurfaceAnchor ref={this.anchorRef} data-testid={this.props[\"data-testid\"]}>\n                {this.renderMenuContent()}\n                {this.props.handle &&\n                    React.cloneElement(this.props.handle, { onClick: this.openMenu })}\n            </MenuSurfaceAnchor>\n        );\n    }\n}\n\nconst MenuDivider = () => {\n    return <li className=\"mdc-list-divider\" role=\"separator\" />;\n};\n\ninterface MenuItemProps extends BaseMenuItemProps {\n    children: React.ReactNode;\n    className?: string;\n    onClick?: (event: React.MouseEvent) => void;\n    \"data-testid\"?: string;\n}\n\nconst MenuItem = ({ disabled, className, ...rest }: MenuItemProps) => {\n    return (\n        <BaseMenuItem\n            {...rest}\n            className={classNames(className, { [style.disabledMenuItem]: disabled })}\n        />\n    );\n};\n\nexport { Menu, MenuItem, MenuDivider };\n"],"file":"Menu.js"}