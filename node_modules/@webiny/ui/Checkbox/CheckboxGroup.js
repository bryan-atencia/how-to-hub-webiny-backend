import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import * as React from "react";
import { webinyCheckboxTitle } from "./Checkbox.styles";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";

var CheckboxGroup = /*#__PURE__*/function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup() {
    _classCallCheck(this, CheckboxGroup);

    return _super.apply(this, arguments);
  }

  _createClass(CheckboxGroup, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          description = _this$props.description,
          label = _this$props.label,
          _this$props$validatio = _this$props.validation,
          validation = _this$props$validatio === void 0 ? {
        isValid: null,
        message: null
      } : _this$props$validatio;
      return /*#__PURE__*/React.createElement(React.Fragment, null, label && /*#__PURE__*/React.createElement("div", {
        className: "mdc-text-field-helper-text mdc-text-field-helper-text--persistent " + webinyCheckboxTitle
      }, label), this.props.children({
        onChange: function onChange(value) {
          return function () {
            var values = Array.isArray(_this.props.value) ? _this.props.value : [];
            var index = values.indexOf(value);

            if (index > -1) {
              values.splice(index, 1);
            } else {
              values.push(value);
            }

            _this.props.onChange && _this.props.onChange(values);
          };
        },
        getValue: function getValue(id) {
          var values = Array.isArray(_this.props.value) ? _this.props.value : [];
          return values.includes(id);
        }
      }), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
    }
  }]);

  return CheckboxGroup;
}(React.Component);

export default CheckboxGroup;
//# sourceMappingURL=CheckboxGroup.js.map