{"version":3,"sources":["../../src/Checkbox/Checkbox.tsx"],"names":["React","Checkbox","RmwcCheckbox","FormElementMessage","e","props","onChange","target","checked","value","label","disabled","indeterminate","description","validation","onClick","Boolean","isValid","message","Component"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAQ,IAAIC,YAArB,QAAyC,gBAAzC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;;AAoBA;;;;;;IAMMF,Q;;;;;;;;;;;;;;;;+DAKS,UAACG,CAAD,EAA+C;AACtD,YAAKC,KAAL,CAAWC,QAAX,IAAuB,MAAKD,KAAL,CAAWC,QAAX,CAAqBF,CAAC,CAACG,MAAH,CAAkBC,OAAtC,CAAvB;AACH,K;;;;;;;6BAEQ;AAAA,wBASD,KAAKH,KATJ;AAAA,UAEDI,KAFC,eAEDA,KAFC;AAAA,UAGDC,KAHC,eAGDA,KAHC;AAAA,UAIDC,QAJC,eAIDA,QAJC;AAAA,UAKDC,aALC,eAKDA,aALC;AAAA,UAMDC,WANC,eAMDA,WANC;AAAA,UAODC,UAPC,eAODA,UAPC;AAAA,UAQDC,QARC,eAQDA,OARC;AAUL,0BACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,YAAD;AACI,QAAA,aAAa,EAAEH,aADnB;AAEI,QAAA,QAAQ,EAAED,QAFd;AAGI,QAAA,OAAO,EAAEK,OAAO,CAACP,KAAD,CAHpB;AAII,QAAA,QAAQ,EAAE,KAAKH,QAJnB;AAKI,QAAA,OAAO,EAAE;AAAA,iBAAM,OAAOS,QAAP,KAAmB,UAAnB,IAAiCA,QAAO,CAACC,OAAO,CAACP,KAAD,CAAR,CAA9C;AAAA,SALb,CAMI;AANJ;AAOI,QAAA,KAAK,EAAEC;AAPX,QADJ,EAUKI,UAAU,CAACG,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,QAAA,KAAK;AAAzB,SAA2BH,UAAU,CAACI,OAAtC,CAXR,EAcKJ,UAAU,CAACG,OAAX,KAAuB,KAAvB,IAAgCJ,WAAhC,iBACG,oBAAC,kBAAD,QAAqBA,WAArB,CAfR,CADJ;AAoBH;;;;EAvCkBb,KAAK,CAACmB,S;;gBAAvBlB,Q,kBACoB;AAClBa,EAAAA,UAAU,EAAE;AAAEG,IAAAA,OAAO,EAAE;AAAX;AADM,C;;AAyC1B,eAAehB,QAAf","sourcesContent":["import * as React from \"react\";\nimport { Checkbox as RmwcCheckbox } from \"@rmwc/checkbox\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { FormComponentProps } from \"./../types\";\n\ntype Props = FormComponentProps & {\n    // Component label.\n    label?: React.ReactNode;\n\n    // Is checkbox disabled?\n    disabled?: boolean;\n\n    // onClick callback.\n    onClick?: Function;\n\n    // Use when checkbox is not checked nor unchecked.\n    indeterminate?: boolean;\n\n    // Description beneath the checkbox.\n    description?: string;\n};\n\n/**\n * Single Checkbox component can be used to store simple boolean values.\n *\n * Grouping multiple Checkbox components with CheckboxGroup will allow to store an array of selected values.\n * In that case, each Checkbox component must receive value and onChange callback via props.\n */\nclass Checkbox extends React.Component<Props> {\n    static defaultProps = {\n        validation: { isValid: null }\n    };\n\n    onChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        this.props.onChange && this.props.onChange((e.target as any).checked);\n    };\n\n    render() {\n        const {\n            value,\n            label,\n            disabled,\n            indeterminate,\n            description,\n            validation,\n            onClick\n        } = this.props;\n        return (\n            <React.Fragment>\n                <RmwcCheckbox\n                    indeterminate={indeterminate}\n                    disabled={disabled}\n                    checked={Boolean(value)}\n                    onChange={this.onChange}\n                    onClick={() => typeof onClick === \"function\" && onClick(Boolean(value))}\n                    // @ts-ignore Although the label is React.ReactNode internally, an error is still thrown.\n                    label={label}\n                />\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Checkbox;\n"],"file":"Checkbox.js"}