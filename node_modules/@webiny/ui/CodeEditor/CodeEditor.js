import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { css } from "emotion";
import AceEditor from "react-ace";
import "brace/theme/github";
import "brace/theme/twilight";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
/**
 * Controls the helper text below the checkbox.
 * @type {string}
 */

var webinyCheckboxHelperText = /*#__PURE__*/css({}, {
  "&.mdc-text-field-helper-text": {
    paddingTop: 5
  }
}, "label:webinyCheckboxHelperText;");

/**
 * CodeEditor component can be used to store simple boolean values.
 */
var CodeEditor = /*#__PURE__*/function (_React$Component) {
  _inherits(CodeEditor, _React$Component);

  var _super = _createSuper(CodeEditor);

  function CodeEditor() {
    var _this;

    _classCallCheck(this, CodeEditor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onChange", function (value) {
      _this.props.onChange && _this.props.onChange(value);
    });

    return _this;
  }

  _createClass(CodeEditor, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          description = _this$props.description,
          validation = _this$props.validation,
          _this$props$theme = _this$props.theme,
          theme = _this$props$theme === void 0 ? "github" : _this$props$theme,
          rest = _objectWithoutProperties(_this$props, ["value", "description", "validation", "theme"]);

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AceEditor, Object.assign({
        value: value ? String(value) : "",
        theme: theme,
        onChange: this.onChange
      }, rest, {
        width: "100%",
        className: "mdc-text-field"
      })), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true,
        className: webinyCheckboxHelperText
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, {
        className: webinyCheckboxHelperText
      }, description));
    }
  }]);

  return CodeEditor;
}(React.Component);

_defineProperty(CodeEditor, "defaultProps", {
  validation: {
    isValid: null
  }
});

export { CodeEditor };
//# sourceMappingURL=CodeEditor.js.map