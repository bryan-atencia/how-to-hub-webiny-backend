{"version":3,"sources":["../../src/CodeEditor/CodeEditor.tsx"],"names":["React","css","AceEditor","FormElementMessage","webinyCheckboxHelperText","paddingTop","CodeEditor","value","props","onChange","description","validation","theme","rest","String","isValid","message","Component"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,GAAT,QAAoB,SAApB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,oBAAP;AACA,OAAO,sBAAP;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA;;;;;AAIA,IAAMC,wBAAwB,gBAAGH,GAAG,CAChC,EADgC,EAEhC;AACI,kCAAgC;AAC5BI,IAAAA,UAAU,EAAE;AADgB;AADpC,CAFgC,oCAApC;;AAkBA;;;IAGMC,U;;;;;;;;;;;;;;;;+DAKS,UAACC,KAAD,EAAmB;AAC1B,YAAKC,KAAL,CAAWC,QAAX,IAAuB,MAAKD,KAAL,CAAWC,QAAX,CAAoBF,KAApB,CAAvB;AACH,K;;;;;;;6BAEQ;AAAA,wBACiE,KAAKC,KADtE;AAAA,UACGD,KADH,eACGA,KADH;AAAA,UACUG,WADV,eACUA,WADV;AAAA,UACuBC,UADvB,eACuBA,UADvB;AAAA,0CACmCC,KADnC;AAAA,UACmCA,KADnC,kCAC2C,QAD3C;AAAA,UACwDC,IADxD;;AAGL,0BACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEN,KAAK,GAAGO,MAAM,CAACP,KAAD,CAAT,GAAmB,EADnC;AAEI,QAAA,KAAK,EAAEK,KAFX;AAGI,QAAA,QAAQ,EAAE,KAAKH;AAHnB,SAIQI,IAJR;AAKI,QAAA,KAAK,EAAC,MALV;AAMI,QAAA,SAAS,EAAE;AANf,SADJ,EAUKF,UAAU,CAACI,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,QAAA,KAAK,MAAzB;AAA0B,QAAA,SAAS,EAAEX;AAArC,SACKO,UAAU,CAACK,OADhB,CAXR,EAgBKL,UAAU,CAACI,OAAX,KAAuB,KAAvB,IAAgCL,WAAhC,iBACG,oBAAC,kBAAD;AAAoB,QAAA,SAAS,EAAEN;AAA/B,SACKM,WADL,CAjBR,CADJ;AAwBH;;;;EApCoBV,KAAK,CAACiB,S;;gBAAzBX,U,kBACoB;AAClBK,EAAAA,UAAU,EAAE;AAAEI,IAAAA,OAAO,EAAE;AAAX;AADM,C;;AAsC1B,SAAST,UAAT","sourcesContent":["import * as React from \"react\";\nimport { FormComponentProps } from \"./../types\";\nimport { css } from \"emotion\";\n\nimport AceEditor from \"react-ace\";\nimport \"brace/theme/github\";\nimport \"brace/theme/twilight\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\n\n/**\n * Controls the helper text below the checkbox.\n * @type {string}\n */\nconst webinyCheckboxHelperText = css(\n    {},\n    {\n        \"&.mdc-text-field-helper-text\": {\n            paddingTop: 5\n        }\n    }\n);\n\ntype Props = FormComponentProps & {\n    mode: string;\n\n    theme: string;\n\n    // Description beneath the input.\n    description?: React.ReactNode;\n};\n\n/**\n * CodeEditor component can be used to store simple boolean values.\n */\nclass CodeEditor extends React.Component<Props> {\n    static defaultProps = {\n        validation: { isValid: null }\n    };\n\n    onChange = (value: string) => {\n        this.props.onChange && this.props.onChange(value);\n    };\n\n    render() {\n        const { value, description, validation, theme = \"github\", ...rest } = this.props;\n\n        return (\n            <React.Fragment>\n                <AceEditor\n                    value={value ? String(value) : \"\"}\n                    theme={theme}\n                    onChange={this.onChange}\n                    {...rest}\n                    width=\"100%\"\n                    className={\"mdc-text-field\"}\n                />\n\n                {validation.isValid === false && (\n                    <FormElementMessage error className={webinyCheckboxHelperText}>\n                        {validation.message}\n                    </FormElementMessage>\n                )}\n\n                {validation.isValid !== false && description && (\n                    <FormElementMessage className={webinyCheckboxHelperText}>\n                        {description}\n                    </FormElementMessage>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport { CodeEditor };\n"],"file":"CodeEditor.js"}