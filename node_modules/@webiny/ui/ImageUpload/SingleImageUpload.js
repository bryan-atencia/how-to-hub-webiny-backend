import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import BrowseFiles from "react-butterfiles";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import styled from "@emotion/styled";
import classNames from "classnames";
import Image from "./Image";
import ImageEditorDialog from "./ImageEditorDialog";
var ImageUploadWrapper = /*#__PURE__*/styled("div", {
  target: "e96x95k0",
  label: "ImageUploadWrapper"
})({
  position: "relative",
  ".disabled": {
    opacity: 0.75,
    pointerEvents: "none"
  },
  ".mdc-floating-label--float-above": {
    transform: "scale(0.75)",
    top: 10,
    left: 10,
    color: "var(--mdc-theme-text-secondary-on-background)"
  },
  ".mdc-text-field-helper-text": {
    color: "var(--mdc-theme-text-secondary-on-background)"
  }
});
// Do not apply editing for following image types.
var noImageEditingTypes = ["image/svg+xml", "image/gif"];
export var SingleImageUpload = /*#__PURE__*/function (_React$Component) {
  _inherits(SingleImageUpload, _React$Component);

  var _super = _createSuper(SingleImageUpload);

  function SingleImageUpload() {
    var _this;

    _classCallCheck(this, SingleImageUpload);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: false,
      error: null,
      imageEditor: {
        open: false,
        image: null
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFiles", function (images) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          imageEditor = _this$props.imageEditor;
      var image = {
        name: images[0].name,
        type: images[0].type,
        size: images[0].size,
        src: images[0].src.base64
      };

      _this.setState({
        error: null
      }, function () {
        if (imageEditor && !noImageEditingTypes.includes(image.type)) {
          _this.setState({
            imageEditor: {
              image: image,
              open: true
            }
          });
        } else {
          onChange && onChange(image);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleErrors", function (errors) {
      var _errors = _slicedToArray(errors, 1),
          error = _errors[0];

      _this.setState({
        error: error
      });
    });

    return _this;
  }

  _createClass(SingleImageUpload, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          className = _this$props2.className,
          value = _this$props2.value,
          validation = _this$props2.validation,
          label = _this$props2.label,
          description = _this$props2.description,
          accept = _this$props2.accept,
          maxSize = _this$props2.maxSize,
          onChange = _this$props2.onChange,
          imageEditor = _this$props2.imageEditor,
          showRemoveImageButton = _this$props2.showRemoveImageButton,
          renderImagePreview = _this$props2.renderImagePreview;
      var imageEditorImageSrc = "";

      if (this.state.imageEditor.image) {
        imageEditorImageSrc = this.state.imageEditor.image.src;
      }

      var src = value ? value.src : null;
      return /*#__PURE__*/React.createElement(ImageUploadWrapper, {
        className: classNames(className)
      }, label && !src && /*#__PURE__*/React.createElement("div", {
        className: "mdc-floating-label mdc-floating-label--float-above"
      }, label), /*#__PURE__*/React.createElement(ImageEditorDialog, {
        options: imageEditor,
        open: this.state.imageEditor.open,
        src: imageEditorImageSrc,
        onClose: function onClose() {
          _this2.setState(function (state) {
            state.imageEditor.open = false;
            return state;
          });
        },
        onAccept: function onAccept(src) {
          // We wrapped everything into setTimeout - prevents dialog freeze when larger image is selected.
          setTimeout(function () {
            _this2.setState({
              loading: true
            }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.t0 = onChange;

                      if (!_context.t0) {
                        _context.next = 4;
                        break;
                      }

                      _context.next = 4;
                      return onChange(_objectSpread(_objectSpread({}, _this2.state.imageEditor.image), {}, {
                        src: src
                      }));

                    case 4:
                      _this2.setState({
                        loading: false,
                        imageEditor: {
                          image: null,
                          open: false
                        }
                      });

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })));
          });
        }
      }), /*#__PURE__*/React.createElement(BrowseFiles, {
        accept: accept,
        maxSize: maxSize,
        convertToBase64: true,
        onSuccess: this.handleFiles,
        onError: this.handleErrors
      }, function (_ref2) {
        var browseFiles = _ref2.browseFiles,
            getDropZoneProps = _ref2.getDropZoneProps;
        return /*#__PURE__*/React.createElement("div", getDropZoneProps(), /*#__PURE__*/React.createElement(Image, {
          renderImagePreview: renderImagePreview,
          loading: _this2.state.loading,
          value: value,
          removeImage: showRemoveImageButton ? onChange : null,
          uploadImage: browseFiles,
          editImage: browseFiles
        }));
      }), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description), this.state.error && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, this.props.errorMessages[this.state.error.type] || this.props.errorMessages.default));
    }
  }]);

  return SingleImageUpload;
}(React.Component);

_defineProperty(SingleImageUpload, "defaultProps", {
  validation: {
    isValid: null
  },
  maxSize: "10mb",
  imageEditor: {},
  accept: ["image/jpeg", "image/png", "image/gif", "image/svg+xml"],
  showRemoveImageButton: true,
  errorMessages: {
    maxSizeExceeded: "Max size exceeded.",
    multipleMaxSizeExceeded: "Selected fields exceed max file size.",
    multipleNotAllowed: "Multiple selection not allowed.",
    unsupportedFileType: "Unsupported file type.",
    default: "An error occurred."
  }
});
//# sourceMappingURL=SingleImageUpload.js.map