import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import classNames from "classnames";
import { ReactComponent as AddImageIcon } from "@svgr/webpack!./icons/round-add_photo_alternate-24px.svg";
import { ReactComponent as RemoveImageIcon } from "@svgr/webpack!./icons/round-close-24px.svg";
import { ReactComponent as EditImageIcon } from "@svgr/webpack!./icons/round-edit-24px.svg";
import { Typography } from "@webiny/ui/Typography";
import { CircularProgress } from "@webiny/ui/Progress";
import { AddImageIconWrapper, AddImageWrapper, AddImageWrapperRound, EditImage, ImagePreviewWrapper, RemoveImage } from "./styled";

var Image = /*#__PURE__*/function (_React$Component) {
  _inherits(Image, _React$Component);

  var _super = _createSuper(Image);

  function Image() {
    _classCallCheck(this, Image);

    return _super.apply(this, arguments);
  }

  _createClass(Image, [{
    key: "renderBlank",
    value: function renderBlank() {
      var _this$props = this.props,
          uploadImage = _this$props.uploadImage,
          round = _this$props.round;
      var ImageWrapper = round ? AddImageWrapperRound : AddImageWrapper;
      return /*#__PURE__*/React.createElement(ImageWrapper, {
        "data-role": "select-image",
        onClick: function onClick() {
          uploadImage();
        }
      }, /*#__PURE__*/React.createElement(AddImageIconWrapper, null, /*#__PURE__*/React.createElement(AddImageIcon, null), /*#__PURE__*/React.createElement(Typography, {
        use: "caption"
      }, this.props.placeholder)));
    }
  }, {
    key: "renderImg",
    value: function renderImg() {
      var _this$props2 = this.props,
          removeImage = _this$props2.removeImage,
          editImage = _this$props2.editImage,
          uploadImage = _this$props2.uploadImage,
          value = _this$props2.value,
          renderImagePreview = _this$props2.renderImagePreview;
      var imagePreviewProps = {
        src: value ? value.src : null,
        style: this.props.style ? this.props.style : null,
        onClick: function onClick() {
          return uploadImage();
        }
      };

      if (!imagePreviewProps.style) {
        imagePreviewProps.style = {};
      }

      if (!imagePreviewProps.style.width && !imagePreviewProps.style.height) {
        imagePreviewProps.style.width = "100%";
        imagePreviewProps.style.height = "100%";
      }

      var imagePreview = null;

      if (typeof renderImagePreview === "function") {
        imagePreview = renderImagePreview(imagePreviewProps);
      } else {
        imagePreview = /*#__PURE__*/React.createElement("img", imagePreviewProps);
      }

      return /*#__PURE__*/React.createElement(ImagePreviewWrapper, null, imagePreview, typeof removeImage === "function" && /*#__PURE__*/React.createElement(RemoveImage, {
        onClick: function onClick() {
          return removeImage(null);
        }
      }, /*#__PURE__*/React.createElement(RemoveImageIcon, null)), typeof editImage === "function" && /*#__PURE__*/React.createElement(EditImage, {
        onClick: function onClick() {
          return editImage(value);
        }
      }, /*#__PURE__*/React.createElement(EditImageIcon, null)), /*#__PURE__*/React.createElement(AddImageWrapper, {
        "data-role": "select-image",
        onClick: function onClick() {
          uploadImage();
        }
      }, /*#__PURE__*/React.createElement(AddImageIconWrapper, null, /*#__PURE__*/React.createElement(AddImageIcon, null), /*#__PURE__*/React.createElement(Typography, {
        use: "caption"
      }, this.props.placeholder))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          value = _this$props3.value,
          disabled = _this$props3.disabled;
      return /*#__PURE__*/React.createElement("div", {
        className: classNames({
          disabled: disabled
        }),
        style: {
          height: "100%"
        }
      }, this.props.loading && /*#__PURE__*/React.createElement(CircularProgress, null), value && value.src ? this.renderImg() : this.renderBlank());
    }
  }]);

  return Image;
}(React.Component);

_defineProperty(Image, "defaultProps", {
  placeholder: "Select an image"
});

export default Image;
//# sourceMappingURL=Image.js.map