{"version":3,"sources":["../../src/Tags/Tags.tsx"],"names":["React","Input","Chips","Chip","css","keycode","FormElementMessage","tagsStyle","position","width","left","top","zIndex","maxHeight","overflowY","backgroundColor","ul","listStyle","padding","li","Tags","inputValue","props","validation","value","disabled","onChange","description","otherInputProps","inputProps","state","setState","onKeyDown","e","newValue","Array","isArray","push","length","splice","isValid","message","map","item","index","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Chips, Chip } from \"@webiny/ui/Chips\";\nimport { FormComponentProps } from \"./../types\";\nimport { css } from \"emotion\";\nimport keycode from \"keycode\";\nimport { ReactComponent as BaselineCloseIcon } from \"./icons/baseline-close-24px.svg\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\n\ntype Props = FormComponentProps & {\n    /**\n     * Component label.\n     */\n    label?: string;\n\n    /**\n     * Are input and chosen tags disabled?\n     */\n    disabled?: boolean;\n\n    /**\n     * Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label.\n     */\n    placeholder?: string;\n\n    /**\n     * Description beneath the input.\n     */\n    description?: string;\n\n    /**\n     * A className for the root element.\n     */\n    className?: string;\n\n    /**\n     * Default structure of value, an object consisting of \"id\" and \"name\" keys. Different keys can be set using \"valueProp\" and \"textProp\" props.\n     */\n    value?: { id: string; name: string };\n\n    /**\n     * Callback that gets executed on change of input value.\n     */\n    onInput?: Function;\n\n    /**\n     * Callback that gets executed when the input is focused.\n     */\n    onFocus?: Function;\n\n    /**\n     * Automatically focus on the tags input.\n     */\n    autoFocus?: boolean;\n};\n\ntype State = {\n    inputValue: string;\n};\n\nconst tagsStyle = css({\n    position: \"relative\",\n    \".mdc-elevation--z1\": {\n        position: \"absolute\",\n        width: \"calc(100% - 2px)\",\n        left: 1,\n        top: 56,\n        zIndex: 10,\n        maxHeight: 200,\n        overflowY: \"scroll\",\n        backgroundColor: \"var(--mdc-theme-surface)\"\n    },\n    ul: {\n        listStyle: \"none\",\n        width: \"100%\",\n        padding: 0,\n        li: {\n            padding: 10\n        }\n    }\n});\n\nexport class Tags extends React.Component<Props, State> {\n    state = {\n        inputValue: \"\"\n    };\n\n    static defaultProps = {\n        validation: { isValid: null }\n    };\n\n    render() {\n        const {\n            validation,\n            value,\n            disabled,\n            onChange,\n            description,\n            ...otherInputProps\n        } = this.props;\n\n        const inputProps = {\n            ...otherInputProps,\n            value: this.state.inputValue,\n            onChange: inputValue => {\n                this.setState({ inputValue });\n            },\n            onKeyDown: e => {\n                if (!onChange) {\n                    return;\n                }\n\n                const newValue = Array.isArray(value) ? [...value] : [];\n                const inputValue = this.state.inputValue || \"\";\n\n                switch (keycode(e)) {\n                    case \"enter\":\n                        if (inputValue) {\n                            newValue.push(inputValue);\n                            onChange(newValue);\n                            this.setState({ inputValue: \"\" });\n                        }\n                        break;\n                    case \"backspace\":\n                        if (newValue.length && !inputValue) {\n                            newValue.splice(-1, 1);\n                            onChange(newValue);\n                            break;\n                        }\n                }\n            }\n        };\n\n        return (\n            <div className={tagsStyle}>\n                <div>\n                    <Input {...inputProps} />\n\n                    {validation.isValid === false && (\n                        <FormElementMessage error>{validation.message}</FormElementMessage>\n                    )}\n                    {validation.isValid !== false && description && (\n                        <FormElementMessage>{description}</FormElementMessage>\n                    )}\n\n                    {Array.isArray(value) && value.length ? (\n                        <Chips disabled={disabled}>\n                            {value.map((item, index) => (\n                                <Chip\n                                    label={item}\n                                    trailingIcon={<BaselineCloseIcon />}\n                                    key={`${item}-${index}`}\n                                    onRemove={() => {\n                                        // On removal, let's update the value and call \"onChange\" callback.\n                                        if (onChange) {\n                                            const newValue = [...value];\n                                            newValue.splice(index, 1);\n                                            onChange(newValue);\n                                        }\n                                    }}\n                                />\n                            ))}\n                        </Chips>\n                    ) : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tags;\n"],"file":"Tags.js"}