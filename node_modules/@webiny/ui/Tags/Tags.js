import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import { Input } from "@webiny/ui/Input";
import { Chips, Chip } from "@webiny/ui/Chips";
import { css } from "emotion";
import keycode from "keycode";
import { ReactComponent as BaselineCloseIcon } from "@svgr/webpack!./icons/baseline-close-24px.svg";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
var tagsStyle = /*#__PURE__*/css({
  position: "relative",
  ".mdc-elevation--z1": {
    position: "absolute",
    width: "calc(100% - 2px)",
    left: 1,
    top: 56,
    zIndex: 10,
    maxHeight: 200,
    overflowY: "scroll",
    backgroundColor: "var(--mdc-theme-surface)"
  },
  ul: {
    listStyle: "none",
    width: "100%",
    padding: 0,
    li: {
      padding: 10
    }
  }
}, "label:tagsStyle;");
export var Tags = /*#__PURE__*/function (_React$Component) {
  _inherits(Tags, _React$Component);

  var _super = _createSuper(Tags);

  function Tags() {
    var _this;

    _classCallCheck(this, Tags);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      inputValue: ""
    });

    return _this;
  }

  _createClass(Tags, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          validation = _this$props.validation,
          value = _this$props.value,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange,
          description = _this$props.description,
          otherInputProps = _objectWithoutProperties(_this$props, ["validation", "value", "disabled", "onChange", "description"]);

      var inputProps = _objectSpread(_objectSpread({}, otherInputProps), {}, {
        value: this.state.inputValue,
        onChange: function onChange(inputValue) {
          _this2.setState({
            inputValue: inputValue
          });
        },
        onKeyDown: function onKeyDown(e) {
          if (!onChange) {
            return;
          }

          var newValue = Array.isArray(value) ? _toConsumableArray(value) : [];
          var inputValue = _this2.state.inputValue || "";

          switch (keycode(e)) {
            case "enter":
              if (inputValue) {
                newValue.push(inputValue);
                onChange(newValue);

                _this2.setState({
                  inputValue: ""
                });
              }

              break;

            case "backspace":
              if (newValue.length && !inputValue) {
                newValue.splice(-1, 1);
                onChange(newValue);
                break;
              }

          }
        }
      });

      return /*#__PURE__*/React.createElement("div", {
        className: tagsStyle
      }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Input, inputProps), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description), Array.isArray(value) && value.length ? /*#__PURE__*/React.createElement(Chips, {
        disabled: disabled
      }, value.map(function (item, index) {
        return /*#__PURE__*/React.createElement(Chip, {
          label: item,
          trailingIcon: /*#__PURE__*/React.createElement(BaselineCloseIcon, null),
          key: "".concat(item, "-").concat(index),
          onRemove: function onRemove() {
            // On removal, let's update the value and call "onChange" callback.
            if (onChange) {
              var newValue = _toConsumableArray(value);

              newValue.splice(index, 1);
              onChange(newValue);
            }
          }
        });
      })) : null));
    }
  }]);

  return Tags;
}(React.Component);

_defineProperty(Tags, "defaultProps", {
  validation: {
    isValid: null
  }
});

export default Tags;
//# sourceMappingURL=Tags.js.map