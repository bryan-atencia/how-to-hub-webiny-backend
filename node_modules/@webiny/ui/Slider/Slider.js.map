{"version":3,"sources":["../../src/Slider/Slider.tsx"],"names":["React","Slider","RmwcSlider","styled","FormElementMessage","Wrapper","width","left","e","props","onChange","detail","value","onInput","label","description","validation","sliderValue","min","isValid","message","Component"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAM,IAAIC,UAAnB,QAAqC,cAArC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AA+BA;AACA,IAAMC,OAAO,gBAAGF,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AAC1BG,EAAAA,KAAK,EAAE,MADmB;AAE1B,8CAA4C;AACxCC,IAAAA,IAAI,EAAE;AADkC;AAFlB,CAAjB,CAAb;AAOA;;;;IAGMN,M;;;;;;;;;;;;;;;;+DAGS,UAACO,CAAD,EAAsC;AAC7C,YAAKC,KAAL,CAAWC,QAAX,IAAuB,MAAKD,KAAL,CAAWC,QAAX,CAAoBF,CAAC,CAACG,MAAF,CAASC,KAA7B,CAAvB;AACH,K;;8DAES,UAACJ,CAAD,EAAsC;AAC5C,YAAKC,KAAL,CAAWI,OAAX,IAAsB,MAAKJ,KAAL,CAAWI,OAAX,CAAmBL,CAAC,CAACG,MAAF,CAASC,KAA5B,CAAtB;AACH,K;;;;;;;6BAEQ;AAAA,wBAC6C,KAAKH,KADlD;AAAA,UACGG,KADH,eACGA,KADH;AAAA,UACUE,KADV,eACUA,KADV;AAAA,UACiBC,WADjB,eACiBA,WADjB;AAAA,UAC8BC,UAD9B,eAC8BA,UAD9B;AAGL,UAAIC,WAAW,GAAGL,KAAlB;;AACA,UAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;AAChDK,QAAAA,WAAW,GAAG,KAAKR,KAAL,CAAWS,GAAX,IAAkB,CAAhC;AACH;;AAED,0BACI,oBAAC,KAAD,CAAO,QAAP,QACKJ,KAAK,iBACF;AAAK,QAAA,SAAS,EAAC;AAAf,SACKA,KADL,CAFR,eAOI,oBAAC,OAAD,qBACI,oBAAC,UAAD,oBACQ,KAAKL,KADb;AAEI,QAAA,KAAK,EAAEQ,WAFX;AAGI,QAAA,QAAQ,EAAE,KAAKP,QAHnB;AAII,QAAA,OAAO,EAAE,KAAKG;AAJlB,SADJ,CAPJ,EAgBKG,UAAU,CAACG,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,QAAA,KAAK;AAAzB,SAA2BH,UAAU,CAACI,OAAtC,CAjBR,EAoBKJ,UAAU,CAACG,OAAX,KAAuB,KAAvB,IAAgCJ,WAAhC,iBACG,oBAAC,kBAAD,QAAqBA,WAArB,CArBR,CADJ;AA0BH;;;;EA7CgBf,KAAK,CAACqB,S;;gBAArBpB,M,kBACoB;AAAEe,EAAAA,UAAU,EAAE;AAAEG,IAAAA,OAAO,EAAE;AAAX;AAAd,C;;AA+C1B,eAAelB,MAAf","sourcesContent":["import * as React from \"react\";\nimport { Slider as RmwcSlider } from \"@rmwc/slider\";\nimport { FormComponentProps } from \"./../types\";\nimport styled from \"@emotion/styled\";\nimport { FormElementMessage } from \"../FormElementMessage\";\n\ntype Props = FormComponentProps & {\n    // Component label.\n    label?: string;\n\n    // Is checkbox disabled?\n    disabled?: boolean;\n\n    // Description beneath the slider.\n    description?: string;\n\n    // The minimum value of the Slider.\n    min: number | string;\n\n    // The maximum value of the Slider.\n    max: number | string;\n\n    // A step to quantize values by.\n    step?: number | string;\n\n    // Displays the exact value of the Slider on the knob.\n    discrete?: boolean;\n\n    // Displays the individual step markers on the Slider track.\n    displayMarkers?: boolean;\n\n    // Function that gets triggered on each input.\n    onInput?: Function;\n};\n\n// wrapper fixes a bug in slider where the slider handle is rendered outside the bounds of the slider box\nconst Wrapper = styled(\"div\")({\n    width: \"100%\",\n    \".mdc-slider .mdc-slider__thumb-container\": {\n        left: 5\n    }\n});\n\n/**\n * Slider component lets users choose a value from given range.\n */\nclass Slider extends React.Component<Props> {\n    static defaultProps = { validation: { isValid: null } };\n\n    onChange = (e: { detail: { value: number } }) => {\n        this.props.onChange && this.props.onChange(e.detail.value);\n    };\n\n    onInput = (e: { detail: { value: number } }) => {\n        this.props.onInput && this.props.onInput(e.detail.value);\n    };\n\n    render() {\n        const { value, label, description, validation } = this.props;\n\n        let sliderValue = value;\n        if (value === null || typeof value === \"undefined\") {\n            sliderValue = this.props.min || 0;\n        }\n\n        return (\n            <React.Fragment>\n                {label && (\n                    <div className=\"mdc-text-field-helper-text mdc-text-field-helper-text--persistent\">\n                        {label}\n                    </div>\n                )}\n\n                <Wrapper>\n                    <RmwcSlider\n                        {...this.props}\n                        value={sliderValue}\n                        onChange={this.onChange}\n                        onInput={this.onInput}\n                    />\n                </Wrapper>\n\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Slider;\n"],"file":"Slider.js"}