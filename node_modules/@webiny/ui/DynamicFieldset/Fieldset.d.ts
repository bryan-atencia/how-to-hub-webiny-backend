import * as React from "react";
interface ChildrenRenderProp {
    actions: {
        add: Function;
        remove: Function;
    };
    header: Function;
    row: Function;
    empty: Function;
}
declare type FieldsetProps = {
    value?: Array<Object>;
    description?: string;
    validation?: {
        isValid: null | boolean;
        message?: string;
    };
    onChange?: Function;
    children: (props: ChildrenRenderProp) => React.ReactNode;
};
declare class Fieldset extends React.Component<FieldsetProps> {
    static defaultProps: {
        value: any[];
        description: any;
    };
    header: React.ReactNode;
    rows: React.ReactNode;
    empty: React.ReactNode;
    actions: {
        add: (index?: number) => () => void;
        remove: (index?: number) => () => void;
    };
    removeData: (index: number) => void;
    addData: (index?: number) => void;
    renderHeader: (cb: () => React.ReactNode) => void;
    renderRow: (cb: (params: Object) => React.ReactNode) => void;
    renderEmpty: (cb: () => React.ReactNode) => void;
    renderComponent(): {};
    render(): JSX.Element;
}
export default Fieldset;
