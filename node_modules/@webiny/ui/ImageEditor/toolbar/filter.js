import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _debounce from "lodash/debounce";
import React from "react";
import { ReactComponent as FilterIcon } from "@svgr/webpack!./icons/filter.svg";
import { Slider } from "@webiny/ui/Slider";
import { IconButton, ButtonDefault } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import styled from "@emotion/styled";
var Wrapper = /*#__PURE__*/styled("div", {
  target: "e1cnct9n0",
  label: "Wrapper"
})({
  ul: {
    textAlign: "center",
    li: {
      display: "inline-block",
      width: 180,
      padding: 10
    }
  },
  ".buttons": {
    textAlign: "center"
  }
});
var sliders = [{
  key: "brightness",
  label: "Brightness",
  min: -100
}, {
  key: "vibrance",
  label: "Vibrance",
  min: -100
}, {
  key: "hue",
  label: "Hue",
  min: -100
}, {
  key: "gamma",
  label: "Gamma"
}, {
  key: "clip",
  label: "Clip"
}, {
  key: "stackBlur",
  label: "Blur"
}, {
  key: "contrast",
  label: "Contrast",
  min: -100
}, {
  key: "saturation",
  label: "Saturation",
  min: -100
}, {
  key: "exposure",
  label: "Exposure",
  min: -100
}, {
  key: "sepia",
  label: "Sepia"
}, {
  key: "noise",
  label: "Noise"
}, {
  key: "sharpen",
  label: "Sharpen"
}];

var RenderForm = /*#__PURE__*/function (_React$Component) {
  _inherits(RenderForm, _React$Component);

  var _super = _createSuper(RenderForm);

  function RenderForm() {
    var _this;

    _classCallCheck(this, RenderForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      processing: false,
      values: {}
    });

    _defineProperty(_assertThisInitialized(_this), "applyFilters", _debounce(function () {
      var canvas = _this.props.canvas;
      var values = _this.state.values; // eslint-disable-next-line @typescript-eslint/no-this-alias

      var component = _assertThisInitialized(_this); // @ts-ignore


      Caman(canvas.current, function () {
        var _this2 = this;

        this.revert(false);
        Object.keys(values).forEach(function (key) {
          return values[key] !== 0 && _this2[key] && _this2[key](values[key]);
        });
        this.render();
        component.setState({
          processing: false
        });
      });
    }, 200));

    _defineProperty(_assertThisInitialized(_this), "resetFiltersValues", function () {
      _this.setState(function (state) {
        sliders.reduce(function (output, current) {
          state.values[current.key] = 0;
          return output;
        }, {});
        return state;
      });
    });

    return _this;
  }

  _createClass(RenderForm, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.resetFiltersValues();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement("ul", null, sliders.map(function (props) {
        return /*#__PURE__*/React.createElement("li", {
          key: props.key
        }, /*#__PURE__*/React.createElement(Slider, Object.assign({
          value: _this3.state.values[props.key],
          min: 0,
          max: 100,
          disabled: _this3.state.processing,
          onInput: function onInput(value) {
            _this3.setState(function (state) {
              var values = _objectSpread({}, state.values);

              values[props.key] = value;
              return _objectSpread(_objectSpread({}, state), {}, {
                processing: true,
                values: values
              });
            }, _this3.applyFilters);
          }
        }, props)));
      })), /*#__PURE__*/React.createElement("div", {
        style: {
          textAlign: "center"
        }
      }, /*#__PURE__*/React.createElement(ButtonDefault, {
        onClick: function onClick() {
          _this3.setState({
            processing: true
          }, function () {
            _this3.resetFiltersValues();

            _this3.applyFilters();

            _this3.setState({
              processing: false
            });
          });
        }
      }, "Reset filters")));
    }
  }]);

  return RenderForm;
}(React.Component);

var tool = {
  name: "filter",
  icon: function icon(_ref) {
    var activateTool = _ref.activateTool;
    return /*#__PURE__*/React.createElement(Tooltip, {
      placement: "bottom",
      content: "Filter"
    }, /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(FilterIcon, null),
      onClick: activateTool
    }));
  },
  renderForm: function renderForm(props) {
    return /*#__PURE__*/React.createElement(RenderForm, props);
  },
  cancel: function cancel(_ref2) {
    var canvas = _ref2.canvas;
    // @ts-ignore
    Caman(canvas.current, function () {
      this.revert(false);
      this.render();
    });
  }
};
export default tool;
//# sourceMappingURL=filter.js.map