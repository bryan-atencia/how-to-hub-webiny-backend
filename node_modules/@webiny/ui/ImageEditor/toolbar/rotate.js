import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import { ReactComponent as RotateRight } from "@svgr/webpack!./icons/rotateRight.svg";
import { Slider } from "@webiny/ui/Slider";
import { Tooltip } from "@webiny/ui/Tooltip";
import { IconButton } from "@webiny/ui/Button";
import Cropper from "cropperjs";
import "cropperjs/dist/cropper.css";
var cropper = null;

var RenderForm = /*#__PURE__*/function (_React$Component) {
  _inherits(RenderForm, _React$Component);

  var _super = _createSuper(RenderForm);

  function RenderForm() {
    var _this;

    _classCallCheck(this, RenderForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      rangeInput: 0
    });

    return _this;
  }

  _createClass(RenderForm, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement("div", {
        style: {
          width: "500px",
          margin: "0 auto"
        }
      }, /*#__PURE__*/React.createElement(Slider, {
        label: "Range Input",
        value: this.state.rangeInput,
        min: 0,
        max: 360,
        step: 10,
        discrete: true,
        displayMarkers: true,
        onInput: function onInput(value) {
          _this2.setState({
            rangeInput: value
          }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (cropper) {
                      cropper.rotateTo(parseInt(value, 10));
                    }

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));
        }
      }));
    }
  }]);

  return RenderForm;
}(React.Component);

var tool = {
  name: "rotate",
  icon: function icon(_ref2) {
    var activateTool = _ref2.activateTool;
    return /*#__PURE__*/React.createElement(Tooltip, {
      placement: "bottom",
      content: "Rotate"
    }, /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(RotateRight, null),
      onClick: activateTool
    }));
  },
  renderForm: function renderForm(props) {
    return /*#__PURE__*/React.createElement(RenderForm, props);
  },
  onActivate: function onActivate(_ref3) {
    var canvas = _ref3.canvas;
    cropper = new Cropper(canvas.current, {
      background: false,
      modal: false,
      guides: false,
      dragMode: "none",
      highlight: false,
      autoCrop: false
    });
  },
  cancel: function cancel() {
    return cropper && cropper.destroy();
  },
  apply: function apply(_ref4) {
    var canvas = _ref4.canvas;
    return new Promise(function (resolve) {
      if (!cropper) {
        resolve();
        return;
      }

      var current = canvas.current;
      var src = cropper.getCroppedCanvas().toDataURL();

      if (current) {
        var image = new window.Image();
        var ctx = current.getContext("2d");

        image.onload = function () {
          ctx.drawImage(image, 0, 0);
          current.width = image.width;
          current.height = image.height;
          ctx.drawImage(image, 0, 0);
        };

        image.src = src;
        resolve();
      }

      cropper.destroy();
    });
  }
};
export default tool;
//# sourceMappingURL=rotate.js.map