import * as React from "react";
import { ImageEditorTool } from "./toolbar/types";
export declare type ToolbarTool = "crop" | "flip" | "rotate" | "filter";
declare type RenderPropArgs = {
    render: Function;
    getCanvasDataUrl: () => string;
    activeTool?: ImageEditorTool;
    applyActiveTool: Function;
    cancelActiveTool: Function;
};
declare type Props = {
    src: string;
    tools: ToolbarTool[];
    options?: {
        [key: string]: any;
    };
    onToolActivate?: Function;
    onToolDeactivate?: Function;
    children?: (props: RenderPropArgs) => React.ReactNode;
};
declare type State = {
    tool?: {
        [key: string]: any;
    };
    src: string;
};
declare class ImageEditor extends React.Component<Props, State> {
    static defaultProps: {
        tools: string[];
    };
    state: {
        tool: any;
        src: string;
    };
    canvas: React.RefObject<unknown>;
    image: any;
    componentDidMount(): void;
    updateCanvas: () => void;
    activateTool: (tool: string | ImageEditorTool) => void;
    deactivateTool: () => void;
    getCanvasDataUrl: () => string;
    applyActiveTool: () => Promise<void>;
    cancelActiveTool: () => Promise<void>;
    getToolOptions: (tool: ImageEditorTool) => any;
    render(): {};
}
export { ImageEditor };
