import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import * as React from "react";
import { List as RmwcList, ListItem as RmwcListItem, ListItemText as RmwcListItemText, ListItemPrimaryText as RmwcListItemPrimaryText, ListItemSecondaryText as RmwcListItemSecondaryText, SimpleListItem as RmwcSimpleListItem } from "@rmwc/list";
import { Typography } from "@webiny/ui/Typography";
import classNames from "classnames";
import styled from "@emotion/styled";

/**
 * ListItem components are placed as direct children to List component.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListItem = function ListItem(props) {
  return /*#__PURE__*/React.createElement(RmwcListItem, props);
};

/**
 * Use List component to display data and offer additional actions if needed.
 */
export var List = /*#__PURE__*/function (_React$Component) {
  _inherits(List, _React$Component);

  var _super = _createSuper(List);

  function List() {
    _classCallCheck(this, List);

    return _super.apply(this, arguments);
  }

  _createClass(List, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(RmwcList, this.props, this.props.children);
    }
  }]);

  return List;
}(React.Component);

/**
 * Used to show regular text in list items.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListItemText = function ListItemText(props) {
  return /*#__PURE__*/React.createElement(RmwcListItemText, props, props.children);
};
export var ListItemTextPrimary = function ListItemTextPrimary(props) {
  return /*#__PURE__*/React.createElement(RmwcListItemPrimaryText, null, props.children);
};

/**
 * Used to show secondary text in list items.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListItemTextSecondary = function ListItemTextSecondary(props) {
  return /*#__PURE__*/React.createElement(RmwcListItemSecondaryText, null, props.children);
};

/**
 * Can be used to show an icon or any other custom element. Rendered on the left side.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListItemGraphic = function ListItemGraphic(props) {
  return /*#__PURE__*/React.createElement("div", Object.assign({}, props, {
    className: classNames("mdc-list-item__graphic", props.className)
  }), props.children);
};

/**
 * Can be used to show an icon or any other custom element. Rendered on the right side.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListItemMeta = function ListItemMeta(props) {
  return /*#__PURE__*/React.createElement("span", Object.assign({}, props, {
    className: classNames("mdc-list-item__meta", props.className)
  }), props.children);
};

/**
 * Can be used to show a top caption inside ListItemMeta component.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListTopCaption = function ListTopCaption(props) {
  return /*#__PURE__*/React.createElement("span", Object.assign({}, props, {
    className: "webiny-list-top-caption"
  }), /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, props.children));
};

/**
 * Can be used to show a bottom caption inside ListItemMeta component.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListBottomCaption = function ListBottomCaption(props) {
  return /*#__PURE__*/React.createElement("span", Object.assign({}, props, {
    className: "webiny-list-bottom-caption"
  }), /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, props.children));
};

/**
 * Can be used to show an overline text inside ListItem component.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListTextOverline = function ListTextOverline(props) {
  return /*#__PURE__*/React.createElement("span", Object.assign({}, props, {
    className: "webiny-list-text-overline"
  }), /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, props.children));
};

/**
 * Used to contain the actions inside ListItemMate component.
 * @param props
 * @returns {*}
 * @constructor
 */
export var ListActions = function ListActions(props) {
  return /*#__PURE__*/React.createElement("span", Object.assign({}, props, {
    className: "webiny-list-actions"
  }), props.children);
};
var SelectBoxWrapper = /*#__PURE__*/styled("div", {
  target: "entzw6n0",
  label: "SelectBoxWrapper"
})({
  overflow: "hidden",
  width: 25,
  height: 25,
  display: "flex",
  position: "relative",
  alignItems: "center",
  justifyContent: "center"
});

/**
 * Used to hold the Checkbox element for multi-select options.
 * @param {*} props
 */
export var ListSelectBox = function ListSelectBox(props) {
  return /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(SelectBoxWrapper, null, props.children));
};
export var SimpleListItem = function SimpleListItem(props) {
  return /*#__PURE__*/React.createElement(RmwcSimpleListItem, props);
};
//# sourceMappingURL=List.js.map