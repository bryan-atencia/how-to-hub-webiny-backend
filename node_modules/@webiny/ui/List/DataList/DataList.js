import * as React from "react";
import styled from "@emotion/styled";
import classNames from "classnames";
import Loader from "./Loader";
import NoData from "./NoData";
import { Typography } from "@webiny/ui/Typography";
import { css } from "emotion";
import noop from "lodash/noop";
import isEmpty from "lodash/isEmpty";
import { Checkbox } from "@webiny/ui/Checkbox";
import { Menu, MenuItem } from "@webiny/ui/Menu";
import { Grid, Cell } from "@webiny/ui/Grid";
import { RefreshIcon, SortIcon, PreviousPageIcon, NextPageIcon, OptionsIcon } from "./icons";
import { List } from "@webiny/ui/List";
var ListContainer = /*#__PURE__*/styled("div", {
  target: "e14cccao0",
  label: "ListContainer"
})({
  position: "relative",
  ".mdc-list": {
    paddingBottom: 0,
    paddingTop: 0
  },
  ".mdc-list-item": {
    borderBottom: "1px solid var(--mdc-theme-on-background)",
    padding: "10px 20px 10px 20px",
    height: "auto",
    minHeight: 40,
    ".mdc-list-item__text, .mdc-list-item__secondary-text, .webiny-list-text-overline": {
      display: "block"
    },
    ".mdc-list-item__graphic": {
      marginRight: 20
    },
    ".mdc-list-item__text": {
      width: "100%",
      margin: "-20px 0",
      padding: "20px 0"
    },
    ".mdc-list-item__meta": {
      alignItems: "center",
      display: "flex",
      justifyContent: "space-between",
      flexDirection: "column",
      position: "relative",
      padding: "5px 0",
      boxSizing: "border-box",
      height: "100%",
      whiteSpace: "nowrap",
      marginTop: -10,
      marginBottom: -10,
      ".webiny-list-actions": {
        display: "none"
      },
      ".webiny-list-top-caption, .webiny-list-bottom-caption": {
        //position: 'absolute',
        width: "100%",
        textAlign: "right"
      },
      ".webiny-list-top-caption": {
        marginBottom: 20
      }
    },
    "&:hover": {
      ".mdc-list-item__meta": {
        ".webiny-list-top-caption, .webiny-list-bottom-caption": {
          display: "none"
        },
        ".webiny-list-actions": {
          display: "flex",
          height: "100%",
          alignItems: "center"
        }
      }
    }
  }
});
var listHeader = /*#__PURE__*/css({
  borderBottom: "1px solid var(--mdc-theme-on-background)",
  color: "var(--mdc-theme-text-primary-on-background)",
  width: "100%"
}, "label:listHeader;");
var listSubHeader = /*#__PURE__*/css({
  width: "100%",
  "&.mdc-layout-grid": {
    borderBottom: "1px solid var(--mdc-theme-on-background)",
    padding: "10px 24px 10px 12px",
    color: "var(--mdc-theme-text-primary-on-background)"
  }
}, "label:listSubHeader;");
var ListHeaderItem = /*#__PURE__*/styled("div", {
  target: "e14cccao1",
  label: "ListHeaderItem"
})({
  display: "inline-block",
  verticalAlign: "middle",
  "&.disabled": {
    opacity: 0.5,
    pointerEvents: "none"
  }
});
var listTitle = /*#__PURE__*/css({
  display: "flex",
  alignItems: "center"
}, "label:listTitle;");
var listActions = /*#__PURE__*/css({
  textAlign: "right"
}, "label:listActions;");
var scrollList = /*#__PURE__*/css({
  overflow: "scroll",
  height: "calc(100vh - 235px)"
}, "label:scrollList;"); // This was copied from "./types" so that it can be outputted in docs.

var MultiSelectAll = function MultiSelectAll(props) {
  var multiSelectActions = props.multiSelectActions;

  if (!multiSelectActions) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, typeof props.multiSelectAll === "function" && /*#__PURE__*/React.createElement(ListHeaderItem, null, /*#__PURE__*/React.createElement(Checkbox, {
    indeterminate: !props.isAllMultiSelected() && !props.isNoneMultiSelected(),
    value: props.isAllMultiSelected(),
    onClick: function onClick() {
      props.multiSelectAll(!props.isAllMultiSelected());
    }
  })));
};

var MultiSelectActions = function MultiSelectActions(props) {
  var multiSelectActions = props.multiSelectActions;

  if (!multiSelectActions) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ListHeaderItem, null, multiSelectActions);
};

var RefreshButton = function RefreshButton(props) {
  var refresh = props.refresh;

  if (!refresh) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ListHeaderItem, null, /*#__PURE__*/React.createElement(RefreshIcon, {
    onClick: function onClick() {
      return refresh();
    }
  }));
};

var Sorters = function Sorters(props) {
  var sorters = props.sorters;

  if (!sorters) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ListHeaderItem, null, /*#__PURE__*/React.createElement(Menu, {
    handle: /*#__PURE__*/React.createElement(SortIcon, null)
  }, sorters.map(function (sorter) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: sorter.label,
      onClick: function onClick() {
        if (sorters && props.setSorters) {
          props.setSorters(sorter.sorters);
        }
      }
    }, sorter.label);
  })));
};

var Pagination = function Pagination(props) {
  var meta = props.meta;

  if (!meta) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, props.setPreviousPage && props.setNextPage && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListHeaderItem, {
    className: classNames({
      disabled: !meta.hasPreviousPage
    })
  }, /*#__PURE__*/React.createElement(PreviousPageIcon, {
    onClick: function onClick() {
      if (props.setPreviousPage && meta.hasPreviousPage) {
        props.setPreviousPage(meta.cursors.previous);
      }
    }
  })), /*#__PURE__*/React.createElement(ListHeaderItem, {
    className: classNames({
      disabled: !meta.hasNextPage
    })
  }, /*#__PURE__*/React.createElement(NextPageIcon, {
    onClick: function onClick() {
      if (props.setNextPage && meta.hasNextPage) {
        props.setNextPage(meta.cursors.next);
      }
    }
  }))), props.setPerPage && Array.isArray(props.perPageOptions) && /*#__PURE__*/React.createElement(ListHeaderItem, null, /*#__PURE__*/React.createElement(Menu, {
    handle: /*#__PURE__*/React.createElement(OptionsIcon, null)
  }, props.setPerPage && props.perPageOptions.map(function (perPage) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: perPage,
      onClick: function onClick() {
        return props.setPerPage && props.setPerPage(perPage);
      }
    }, perPage);
  }))));
};

export var DataList = function DataList(props) {
  var render = null;

  if (props.loading) {
    render = props.loader;
  } else {
    if (isEmpty(props.data)) {
      render = props.noData;
    } else {
      if (typeof props.children === "function") {
        render = props.children(props);
      }
    }
  }

  return /*#__PURE__*/React.createElement(ListContainer, {
    className: "webiny-data-list"
  }, (props.title || props.actions) && /*#__PURE__*/React.createElement(Grid, {
    className: listHeader
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 6,
    className: listTitle
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "headline5"
  }, props.title)), /*#__PURE__*/React.createElement(Cell, {
    span: 6,
    className: listActions
  }, props.actions)), Object.keys(props.showOptions).length > 0 && /*#__PURE__*/React.createElement(Grid, {
    className: listSubHeader
  }, /*#__PURE__*/React.createElement(Cell, {
    span: props.showOptions.pagination ? 5 : 12
  }, /*#__PURE__*/React.createElement(MultiSelectAll, props), props.showOptions.refresh && /*#__PURE__*/React.createElement(RefreshButton, props), props.showOptions.sorters && /*#__PURE__*/React.createElement(Sorters, props), /*#__PURE__*/React.createElement(MultiSelectActions, props)), props.showOptions.pagination && /*#__PURE__*/React.createElement(Cell, {
    span: 7,
    style: {
      textAlign: "right"
    }
  }, /*#__PURE__*/React.createElement(Pagination, props))), render);
};
DataList.defaultProps = {
  children: null,
  title: null,
  data: null,
  meta: null,
  loading: false,
  refresh: null,
  setPage: null,
  setPerPage: null,
  perPageOptions: [10, 25, 50],
  sorters: null,
  setSorters: null,
  actions: null,
  multiSelectAll: noop,
  isAllMultiSelected: function isAllMultiSelected() {
    return false;
  },
  isNoneMultiSelected: function isNoneMultiSelected() {
    return false;
  },
  loader: /*#__PURE__*/React.createElement(Loader, null),
  noData: /*#__PURE__*/React.createElement(NoData, null),
  showOptions: {
    refresh: true,
    pagination: true,
    sorters: true
  }
};
export var ScrollList = function ScrollList(props) {
  return /*#__PURE__*/React.createElement(List, Object.assign({}, props, {
    className: scrollList
  }), props.children);
};
//# sourceMappingURL=DataList.js.map