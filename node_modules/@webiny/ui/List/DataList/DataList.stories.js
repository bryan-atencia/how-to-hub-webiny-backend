import React from "react";
import { storiesOf } from "@storybook/react";
import { Story, StoryReadme, StorySandboxCode, StorySandbox, StorySandboxExample } from "@webiny/storybook-utils/Story";
import readme from "./../DataList/README.md";
import { withKnobs, boolean, text, object, array } from "@storybook/addon-knobs";
import { DataList } from "./DataList";
import { DeleteIcon, EditIcon } from "./icons";
import { List, ListItem, ListItemText, ListItemTextSecondary, ListItemMeta, ListItemGraphic } from "./../List";
var story = storiesOf("Components/List", module);
story.addDecorator(withKnobs);
story.add("data list", function () {
  var generalOptionsAndCallbacks = {
    refresh: function refresh() {
      console.log("Implement \"refresh\" method.");
    },
    loading: boolean("Loading", false, "Basic"),
    title: text("Title", "A list of all users", "Basic"),
    multiActions: boolean("Multi actions", false, "Basic"),
    setNextPage: function setNextPage(cursor) {
      console.log("Implement setNextPage method (selected ".concat(cursor, ")."));
    },
    setPreviousPage: function setPreviousPage(cursor) {
      console.log("Implement setPreviousPage method (selected ".concat(cursor, ")."));
    },
    // @ts-ignore
    perPageOptions: array("perPageOptions", [10, 25, 50], ",", "Basic"),
    setPerPage: function setPerPage(perPage) {
      console.log("Implement setPerPage method (selected ".concat(perPage, ")."));
    },
    setSorters: function setSorters(sorter) {
      console.log("Implement setSorters method (selected ".concat(JSON.stringify(sorter), ")."));
    }
  };
  var dataProp = object("Data", [{
    id: "A",
    firstName: "John",
    lastName: "Doe",
    email: "john.doe@webiny.com"
  }, {
    id: "B",
    firstName: "Jane",
    lastName: "Doe",
    email: "jane.doe@webiny.com"
  }, {
    id: "C",
    firstName: "Foo",
    lastName: "Bar",
    email: "foo.bar@webiny.com"
  }], "Data");
  var metaProp = object("Meta", {
    totalPages: 1,
    totalCount: 3,
    from: 1,
    to: 3,
    previousPage: null,
    nextPage: null
  }, "Meta");
  var sortersProp = {
    list: object("Sorters", [{
      label: "Newest to oldest",
      sorters: {
        createdOn: -1
      }
    }, {
      label: "Oldest to newest",
      sorters: {
        createdOn: 1
      }
    }, {
      label: "Name A-Z",
      sorters: {
        name: 1
      }
    }, {
      label: "Name Z-A",
      sorters: {
        name: -1
      }
    }], "Sorters")
  };
  return /*#__PURE__*/React.createElement(Story, null, /*#__PURE__*/React.createElement(StoryReadme, null, readme), /*#__PURE__*/React.createElement(StorySandbox, null, /*#__PURE__*/React.createElement(StorySandboxExample, null, /*#__PURE__*/React.createElement(DataList, Object.assign({}, generalOptionsAndCallbacks, {
    data: dataProp,
    meta: metaProp,
    sorters: sortersProp.list
  }), function (_ref) {
    var data = _ref.data;
    return /*#__PURE__*/React.createElement(List, null, data.map(function (item) {
      return /*#__PURE__*/React.createElement(ListItem, {
        key: item.id
      }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement("img", {
        src: "http://i.pravatar.cc/100?id=" + item.id
      })), /*#__PURE__*/React.createElement(ListItemText, null, item.firstName, " ", item.lastName, /*#__PURE__*/React.createElement(ListItemTextSecondary, null, item.email)), /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(DeleteIcon, {
        onClick: function onClick() {
          console.log("Redirect user to form.");
        }
      }), /*#__PURE__*/React.createElement(EditIcon, {
        onClick: function onClick() {
          console.log("Show confirmation dialog.");
        }
      })));
    }));
  })), /*#__PURE__*/React.createElement(StorySandboxCode, null, "\n                        <DataList\n                        {...generalOptionsAndCallbacks}\n                        data={".concat(JSON.stringify(dataProp, null, 2), "}\n                        meta={").concat(JSON.stringify(metaProp, null, 2), "}\n                        sorters={").concat(JSON.stringify(sortersProp.list, null, 2), "}\n                    >\n                      {({ data }) => (\n                            <List>\n                                {data.map(item => (\n                                    <ListItem key={item.id}>\n                                        <ListItemGraphic>\n                                            <img\n                                                src={\n                                                    \"//www.gravatar.com/avatar/\" +\n                                                    item.gravatar +\n                                                    \"?s=48\"\n                                                }\n                                            />\n                                        </ListItemGraphic>\n                                        <ListItemText>\n                                            {item.firstName} {item.lastName}\n                                            <ListItemTextSecondary>\n                                                {item.email}\n                                            </ListItemTextSecondary>\n                                        </ListItemText>\n                                        <ListItemMeta>\n                                                <DeleteIcon\n                                                    onClick={() => {\n                                                        console.log(\"Redirect user to form.\");\n                                                    }}\n                                                />\n                                                <EditIcon\n                                                    onClick={() => {\n                                                        console.log(\"Show confirmation dialog.\");\n                                                    }}\n                                                />\n                                        </ListItemMeta>\n                                    </ListItem>\n                                ))}\n                            </List>\n                        )}\n                    </DataList>\n                    "))));
}, {
  info: {
    propTables: [List, ListItem, ListItemText, ListItemTextSecondary, ListItemMeta, ListItemGraphic]
  }
});
//# sourceMappingURL=DataList.stories.js.map