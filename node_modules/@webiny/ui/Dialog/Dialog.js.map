{"version":3,"sources":["../../src/Dialog/Dialog.tsx"],"names":["React","ReactDOM","Dialog","RmwcDialog","DialogContent","RmwcDialogContent","DialogTitle","RmwcDialogTitle","DialogActions","RmwcDialogActions","DialogButton","RmwcDialogButton","getClasses","props","container","document","getElementById","createElement","setAttribute","body","appendChild","children","createPortal","Component","DialogCancel","DialogAccept"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACIC,MAAM,IAAIC,UADd,EAGIC,aAAa,IAAIC,iBAHrB,EAKIC,WAAW,IAAIC,eALnB,EAOIC,aAAa,IAAIC,iBAPrB,EASIC,YAAY,IAAIC,gBATpB,QAWO,cAXP;AAYA,SAASC,UAAT,QAA2B,oBAA3B;AAmBA,WAAaV,MAAb;AAAA;;AAAA;;AAGI,kBAAYW,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe;;AAGf,UAAKC,SAAL,GAAiBC,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAjB;;AAEA,QAAI,CAAC,MAAKF,SAAV,EAAqB;AACjB,YAAKA,SAAL,GAAiBC,QAAQ,CAACE,aAAT,CAAuB,KAAvB,CAAjB;;AACA,YAAKH,SAAL,CAAeI,YAAf,CAA4B,IAA5B,EAAkC,kBAAlC;;AACA,UAAMJ,SAAkB,GAAG,MAAKA,SAAhC;AACAC,MAAAA,QAAQ,CAACI,IAAT,IAAiBJ,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,SAA1B,CAAjB;AACH;;AAVc;AAWlB;;AAdL;AAAA;AAAA,6BAgBa;AAAA,wBAC0B,KAAKD,KAD/B;AAAA,UACGQ,QADH,eACGA,QADH;AAAA,UACgBR,KADhB;;AAEL,UAAMC,SAAkB,GAAG,KAAKA,SAAhC,CAFK,CAIL;;AACA,0BAAOb,QAAQ,CAACqB,YAAT,eACH,oBAAC,UAAD,EAAgBV,UAAU,CAACC,KAAD,EAAQ,kBAAR,CAA1B,EAAwDQ,QAAxD,CADG,EAEHP,SAFG,CAAP;AAIH;AAzBL;;AAAA;AAAA,EAA4Bd,KAAK,CAACuB,SAAlC;;AAmCA;;;AAGA,OAAO,IAAMjB,WAAW,GAAG,SAAdA,WAAc,CAACO,KAAD;AAAA,sBACvB,oBAAC,eAAD,EAAqBD,UAAU,CAACC,KAAD,EAAQ,yBAAR,CAA/B,CADuB;AAAA,CAApB;;AAaP;;;AAGA,OAAO,IAAMT,aAAa,GAAG,SAAhBA,aAAgB,CAACS,KAAD;AAAA,sBACzB,oBAAC,iBAAD,EAAuBD,UAAU,CAACC,KAAD,EAAQ,2BAAR,CAAjC,CADyB;AAAA,CAAtB;;AAaP;;;AAGA,OAAO,IAAML,aAAa,GAAG,SAAhBA,aAAgB,CAACK,KAAD;AAAA,sBACzB,oBAAC,iBAAD,EAAuBD,UAAU,CAACC,KAAD,EAAQ,2BAAR,CAAjC,CADyB;AAAA,CAAtB;;AAaP;;;AAGA,OAAO,IAAMH,YAAY,GAAG,SAAfA,YAAe,CAACG,KAAD;AAAA,sBACxB,oBAAC,gBAAD,EAAsBD,UAAU,CAACC,KAAD,EAAQ,0BAAR,CAAhC,CADwB;AAAA,CAArB;;AAgBP;;;AAGA,OAAO,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAACX,KAAD,EAA8B;AACtD,sBACI,oBAAC,YAAD,oBACQD,UAAU,CAACC,KAAD,EAAQ,2DAAR,CADlB;AAEI,IAAA,MAAM,EAAC;AAFX,MAIKA,KAAK,CAACQ,QAJX,CADJ;AAQH,CATM;;AAuBP;;;AAGA,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACZ,KAAD,EAA8B;AACtD,sBACI,oBAAC,YAAD,oBACQD,UAAU,CAACC,KAAD,EAAQ,2DAAR,CADlB;AAEI,IAAA,MAAM,EAAC;AAFX,MAIKA,KAAK,CAACQ,QAJX,CADJ;AAQH,CATM","sourcesContent":["import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    Dialog as RmwcDialog,\n    DialogOnCloseEventT,\n    DialogContent as RmwcDialogContent,\n    DialogContentProps as RmwcDialogContentProps,\n    DialogTitle as RmwcDialogTitle,\n    DialogTitleProps as RmwcDialogTitleProps,\n    DialogActions as RmwcDialogActions,\n    DialogActionsProps as RmwcDialogActionsProps,\n    DialogButton as RmwcDialogButton,\n    DialogButtonProps as RmwcDialogButtonProps\n} from \"@rmwc/dialog\";\nimport { getClasses } from \"@webiny/ui/Helpers\";\n\nexport type DialogOnClose = (event: DialogOnCloseEventT) => void;\n\nexport type DialogProps = {\n    children: any;\n\n    className?: string;\n\n    style?: { [key: string]: any };\n\n    // If true, dialog will be permanently fixed inside of a view (works for temporary and persistent modes).\n    open?: boolean;\n\n    onClose?: (evt: DialogOnCloseEventT) => void;\n\n    preventOutsideDismiss?: boolean;\n};\n\nexport class Dialog extends React.Component<DialogProps> {\n    container?: Element;\n\n    constructor(props) {\n        super(props);\n\n        this.container = document.getElementById(\"dialog-container\");\n\n        if (!this.container) {\n            this.container = document.createElement(\"div\");\n            this.container.setAttribute(\"id\", \"dialog-container\");\n            const container: Element = this.container;\n            document.body && document.body.appendChild(container);\n        }\n    }\n\n    render() {\n        const { children, ...props } = this.props;\n        const container: Element = this.container;\n\n        // Let's pass \"permanent\" / \"persistent\" / \"temporary\" flags as \"mode\" prop instead.\n        return ReactDOM.createPortal(\n            <RmwcDialog {...getClasses(props, \"webiny-ui-dialog\")}>{children}</RmwcDialog>,\n            container\n        );\n    }\n}\n\nexport type DialogTitleProps = RmwcDialogTitleProps & {\n    /**\n     * Title text.\n     */\n    children: React.ReactNode[] | React.ReactNode;\n};\n\n/**\n * Dialog's header, which can accept DialogHeaderTitle component or any other set of components.\n */\nexport const DialogTitle = (props: DialogTitleProps) => (\n    <RmwcDialogTitle {...getClasses(props, \"webiny-ui-dialog__title\")} />\n);\n\nexport type DialogContentProps = RmwcDialogContentProps & {\n    /**\n     * Dialog content.\n     */\n    children: React.ReactNode[] | React.ReactNode;\n\n    className?: string;\n};\n\n/**\n * A simple component for showing dialog's body.\n */\nexport const DialogContent = (props: DialogContentProps) => (\n    <RmwcDialogContent {...getClasses(props, \"webiny-ui-dialog__content\")} />\n);\n\nexport type DialogActionsProps = RmwcDialogActionsProps & {\n    /**\n     * Action buttons.\n     */\n    children: React.ReactNode[] | React.ReactNode;\n\n    style?: object;\n};\n\n/**\n * Can be used to show accept and cancel buttons.\n */\nexport const DialogActions = (props: DialogActionsProps) => (\n    <RmwcDialogActions {...getClasses(props, \"webiny-ui-dialog__actions\")} />\n);\n\ntype DialogButtonProps = RmwcDialogButtonProps & {\n    /**\n     * Callback to execute then button is clicked.\n     */\n    onClick?: (e: React.MouseEvent) => void;\n\n    className?: string;\n};\n\n/**\n * Use this to show a simple button.\n */\nexport const DialogButton = (props: DialogButtonProps) => (\n    <RmwcDialogButton {...getClasses(props, \"webiny-ui-dialog__button\")} />\n);\n\ntype DialogCancelProps = RmwcDialogButtonProps & {\n    /**\n     * Children elements.\n     */\n    children: React.ReactNode;\n\n    /**\n     * Callback to execute then button is clicked.\n     */\n    onClick?: (e: React.MouseEvent) => void;\n};\n\n/**\n * Use this to close the dialog without taking any additional action.\n */\nexport const DialogCancel = (props: DialogCancelProps) => {\n    return (\n        <DialogButton\n            {...getClasses(props, \"webiny-ui-dialog__button webiny-ui-dialog__button--cancel\")}\n            action=\"close\"\n        >\n            {props.children}\n        </DialogButton>\n    );\n};\n\ntype DialogAcceptProps = RmwcDialogButtonProps & {\n    /**\n     * Children elements.\n     */\n    children: React.ReactNode;\n\n    /**\n     * Callback to execute then button is clicked.\n     */\n    onClick?: (e: React.MouseEvent) => void;\n};\n\n/**\n * Use this to close the dialog without taking any additional action.\n */\nexport const DialogAccept = (props: DialogAcceptProps) => {\n    return (\n        <DialogButton\n            {...getClasses(props, \"webiny-ui-dialog__button webiny-ui-dialog__button--accept\")}\n            action=\"accept\"\n        >\n            {props.children}\n        </DialogButton>\n    );\n};\n"],"file":"Dialog.js"}