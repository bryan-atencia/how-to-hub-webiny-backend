import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import * as React from "react";
import ReactDOM from "react-dom";
import { Dialog as RmwcDialog, DialogContent as RmwcDialogContent, DialogTitle as RmwcDialogTitle, DialogActions as RmwcDialogActions, DialogButton as RmwcDialogButton } from "@rmwc/dialog";
import { getClasses } from "@webiny/ui/Helpers";
export var Dialog = /*#__PURE__*/function (_React$Component) {
  _inherits(Dialog, _React$Component);

  var _super = _createSuper(Dialog);

  function Dialog(props) {
    var _this;

    _classCallCheck(this, Dialog);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _this.container = document.getElementById("dialog-container");

    if (!_this.container) {
      _this.container = document.createElement("div");

      _this.container.setAttribute("id", "dialog-container");

      var container = _this.container;
      document.body && document.body.appendChild(container);
    }

    return _this;
  }

  _createClass(Dialog, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["children"]);

      var container = this.container; // Let's pass "permanent" / "persistent" / "temporary" flags as "mode" prop instead.

      return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(RmwcDialog, getClasses(props, "webiny-ui-dialog"), children), container);
    }
  }]);

  return Dialog;
}(React.Component);

/**
 * Dialog's header, which can accept DialogHeaderTitle component or any other set of components.
 */
export var DialogTitle = function DialogTitle(props) {
  return /*#__PURE__*/React.createElement(RmwcDialogTitle, getClasses(props, "webiny-ui-dialog__title"));
};

/**
 * A simple component for showing dialog's body.
 */
export var DialogContent = function DialogContent(props) {
  return /*#__PURE__*/React.createElement(RmwcDialogContent, getClasses(props, "webiny-ui-dialog__content"));
};

/**
 * Can be used to show accept and cancel buttons.
 */
export var DialogActions = function DialogActions(props) {
  return /*#__PURE__*/React.createElement(RmwcDialogActions, getClasses(props, "webiny-ui-dialog__actions"));
};

/**
 * Use this to show a simple button.
 */
export var DialogButton = function DialogButton(props) {
  return /*#__PURE__*/React.createElement(RmwcDialogButton, getClasses(props, "webiny-ui-dialog__button"));
};

/**
 * Use this to close the dialog without taking any additional action.
 */
export var DialogCancel = function DialogCancel(props) {
  return /*#__PURE__*/React.createElement(DialogButton, Object.assign({}, getClasses(props, "webiny-ui-dialog__button webiny-ui-dialog__button--cancel"), {
    action: "close"
  }), props.children);
};

/**
 * Use this to close the dialog without taking any additional action.
 */
export var DialogAccept = function DialogAccept(props) {
  return /*#__PURE__*/React.createElement(DialogButton, Object.assign({}, getClasses(props, "webiny-ui-dialog__button webiny-ui-dialog__button--accept"), {
    action: "accept"
  }), props.children);
};
//# sourceMappingURL=Dialog.js.map