{"version":3,"sources":["../../src/Input/Input.tsx"],"names":["React","TextField","FormElementMessage","pick","Input","e","props","onChange","rawOnChange","target","value","validate","onBlur","persist","autoFocus","label","description","placeholder","rows","validation","icon","trailingIcon","onEnter","inputValue","rmwcProps","key","onKeyDown","rest","Boolean","undefined","isValid","message","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { TextField, TextFieldProps } from \"@rmwc/textfield\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport pick from \"lodash/pick\";\nimport { FormComponentProps } from \"./../types\";\nimport { ReactElement } from \"react\";\n\nexport type InputProps = FormComponentProps &\n    TextFieldProps & {\n        // Should this input be filled with browser values\n        autoComplete?: string;\n\n        // If true, will pass native `event` to the `onChange` callback\n        rawOnChange?: boolean;\n\n        // Auto-focus input\n        autoFocus?: boolean;\n\n        // Input placeholder\n        placeholder?: string;\n\n        // Description beneath the input.\n        description?: string | ReactElement;\n\n        // Converts input into a text area with given number of rows.\n        rows?: number;\n\n        maxLength?: number;\n\n        // A trailing icon. Use `<InputIcon/>` component.\n        leadingIcon?: React.ReactNode;\n\n        // A callback that is executed when input focus is lost.\n        onBlur?: (e: React.SyntheticEvent<HTMLInputElement>) => any;\n\n        onKeyDown?: (e: React.SyntheticEvent<HTMLInputElement>) => any;\n\n        // A callback that gets triggered when the user presses the \"Enter\" key.\n        onEnter?: () => any;\n\n        // CSS class name\n        className?: string;\n    };\n\n/**\n * Use Input component to store short string values, like first name, last name, e-mail etc.\n * Additionally, with rows prop, it can also be turned into a text area, to store longer strings.\n */\n\nexport class Input extends React.Component<InputProps> {\n    static defaultProps = {\n        rawOnChange: false,\n        validation: { isValid: null, message: null }\n    };\n\n    // IconProps directly passed to RMWC\n    static rmwcProps = [\n        \"label\",\n        \"type\",\n        \"step\",\n        \"disabled\",\n        \"placeholder\",\n        \"outlined\",\n        \"onKeyDown\",\n        \"onKeyPress\",\n        \"onKeyUp\",\n        \"onFocus\",\n        \"rootProps\",\n        \"fullwidth\",\n        \"inputRef\",\n        \"className\",\n        \"maxLength\",\n        \"characterCount\"\n    ];\n\n    onChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        const { onChange, rawOnChange } = this.props;\n        if (!onChange) {\n            return;\n        }\n\n        // @ts-ignore\n        onChange(rawOnChange ? e : e.target.value);\n    };\n\n    onBlur = async (e: React.SyntheticEvent<HTMLInputElement>) => {\n        const { validate, onBlur } = this.props;\n        if (validate) {\n            // Since we are accessing event in an async operation, we need to persist it.\n            // See https://reactjs.org/docs/events.html#event-pooling.\n            e.persist();\n            await validate();\n        }\n        onBlur && onBlur(e);\n    };\n\n    render() {\n        const {\n            autoFocus,\n            value,\n            label,\n            description,\n            placeholder,\n            rows,\n            validation,\n            icon,\n            trailingIcon,\n            onEnter,\n            ...props\n        } = this.props;\n\n        let inputValue = value;\n        if (value === null || typeof value === \"undefined\") {\n            inputValue = \"\";\n        }\n\n        return (\n            <React.Fragment>\n                <TextField\n                    {...pick(props, Input.rmwcProps)}\n                    onKeyDown={(e, ...rest) => {\n                        if (typeof onEnter === \"function\" && e.key === \"Enter\") {\n                            onEnter();\n                        }\n\n                        if (typeof props.onKeyDown === \"function\") {\n                            return props.onKeyDown(e, ...rest);\n                        }\n                    }}\n                    autoFocus={autoFocus}\n                    textarea={Boolean(rows)}\n                    value={inputValue}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    label={label}\n                    icon={icon}\n                    placeholder={(!label && placeholder) || undefined}\n                    trailingIcon={trailingIcon}\n                    rows={this.props.rows}\n                />\n\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n"],"file":"Input.js"}