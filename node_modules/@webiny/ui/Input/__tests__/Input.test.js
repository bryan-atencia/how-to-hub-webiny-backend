import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
// @ts-nocheck
import React from "react";
import { Input } from "../index";
import "jest-dom/extend-expect";
import { render, cleanup } from "react-testing-library";
afterEach(cleanup);
describe("Input tests", function () {
  test("passes expected props to render prop", function () {
    var _setup = setup(),
        renderArg = _setup.renderArg;

    expect(renderArg).toContainKeys(["value", "validation", "onChange", "onBlur"]);
  });
  test("updates value via onChange", function () {
    var _setup2 = setup(),
        renderArg = _setup2.renderArg;

    expect(renderArg.value).toBe("init-value");
    renderArg.onChange("new-value");
    expect(renderArg.value).toBe("new-value");
    renderArg.onChange("third-value");
    expect(renderArg.value).toBe("third-value");
  });
});

function setup() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var renderArg = {};
  var renderProp = jest.fn(function (controllerArg) {
    Object.assign(renderArg, controllerArg);
    return null;
  });

  var Test = /*#__PURE__*/function (_React$Component) {
    _inherits(Test, _React$Component);

    var _super = _createSuper(Test);

    function Test() {
      var _this;

      _classCallCheck(this, Test);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "state", {
        value: "init-value"
      });

      _defineProperty(_assertThisInitialized(_this), "onChange", function (value) {
        _this.setState({
          value: value
        });
      });

      return _this;
    }

    _createClass(Test, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(Input, Object.assign({}, props, {
          value: this.state.value,
          onChange: callAll(props.onChange, this.onChange)
        }), renderProp);
      }
    }]);

    return Test;
  }(React.Component);

  var utils = render( /*#__PURE__*/React.createElement(Test, null));
  return _objectSpread({
    renderArg: renderArg
  }, utils);
}
/**
 * This return a function that will call all the given functions with
 * the arguments with which it's called. It does a null-check before
 * attempting to call the functions and can take any number of functions.
 * @param {...Function} fns the functions to call
 * @return {Function} the function that calls all the functions
 */


function callAll() {
  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    fns[_key3] = arguments[_key3];
  }

  return function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    fns.forEach(function (fn) {
      fn && fn.apply(void 0, args);
    });
  };
}
//# sourceMappingURL=Input.test.js.map