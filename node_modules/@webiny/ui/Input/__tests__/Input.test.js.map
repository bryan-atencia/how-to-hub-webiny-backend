{"version":3,"sources":["../../../src/Input/__tests__/Input.test.tsx"],"names":["React","Input","render","cleanup","afterEach","describe","test","setup","renderArg","expect","toContainKeys","value","toBe","onChange","props","renderProp","jest","fn","controllerArg","Object","assign","Test","setState","state","callAll","Component","utils","fns","args","forEach"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAO,wBAAP;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,uBAAhC;AAEAC,SAAS,CAACD,OAAD,CAAT;AAEAE,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC1BC,EAAAA,IAAI,CAAC,sCAAD,EAAyC,YAAM;AAAA,iBACzBC,KAAK,EADoB;AAAA,QACvCC,SADuC,UACvCA,SADuC;;AAG/CC,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,aAAlB,CAAgC,CAAC,OAAD,EAAU,YAAV,EAAwB,UAAxB,EAAoC,QAApC,CAAhC;AACH,GAJG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,4BAAD,EAA+B,YAAM;AAAA,kBACfC,KAAK,EADU;AAAA,QAC7BC,SAD6B,WAC7BA,SAD6B;;AAErCC,IAAAA,MAAM,CAACD,SAAS,CAACG,KAAX,CAAN,CAAwBC,IAAxB,CAA6B,YAA7B;AACAJ,IAAAA,SAAS,CAACK,QAAV,CAAmB,WAAnB;AACAJ,IAAAA,MAAM,CAACD,SAAS,CAACG,KAAX,CAAN,CAAwBC,IAAxB,CAA6B,WAA7B;AACAJ,IAAAA,SAAS,CAACK,QAAV,CAAmB,aAAnB;AACAJ,IAAAA,MAAM,CAACD,SAAS,CAACG,KAAX,CAAN,CAAwBC,IAAxB,CAA6B,aAA7B;AACH,GAPG,CAAJ;AAQH,CAfO,CAAR;;AAiBA,SAASL,KAAT,GAA2B;AAAA,MAAZO,KAAY,uEAAJ,EAAI;AACvB,MAAIN,SAAS,GAAG,EAAhB;AACA,MAAMO,UAAU,GAAGC,IAAI,CAACC,EAAL,CAAQ,UAAAC,aAAa,EAAI;AACxCC,IAAAA,MAAM,CAACC,MAAP,CAAcZ,SAAd,EAAyBU,aAAzB;AACA,WAAO,IAAP;AACH,GAHkB,CAAnB;;AAFuB,MAOjBG,IAPiB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,8DAQX;AAAEV,QAAAA,KAAK,EAAE;AAAT,OARW;;AAAA,iEAUR,UAAAA,KAAK,EAAI;AAChB,cAAKW,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAALA;AAAF,SAAd;AACH,OAZkB;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAcV;AACL,4BACI,oBAAC,KAAD,oBACQG,KADR;AAEI,UAAA,KAAK,EAAE,KAAKS,KAAL,CAAWZ,KAFtB;AAGI,UAAA,QAAQ,EAAEa,OAAO,CAACV,KAAK,CAACD,QAAP,EAAiB,KAAKA,QAAtB;AAHrB,YAKKE,UALL,CADJ;AASH;AAxBkB;;AAAA;AAAA,IAOJf,KAAK,CAACyB,SAPF;;AA2BvB,MAAMC,KAAK,GAAGxB,MAAM,eAAC,oBAAC,IAAD,OAAD,CAApB;AAEA;AAASM,IAAAA,SAAS,EAATA;AAAT,KAAuBkB,KAAvB;AACH;AAED;;;;;;;;;AAOA,SAASF,OAAT,GAAyB;AAAA,qCAALG,GAAK;AAALA,IAAAA,GAAK;AAAA;;AACrB,SAAO,YAAa;AAAA,uCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAChBD,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAAZ,EAAE,EAAI;AACdA,MAAAA,EAAE,IAAIA,EAAE,MAAF,SAAMW,IAAN,CAAN;AACH,KAFD;AAGH,GAJD;AAKH","sourcesContent":["// @ts-nocheck\nimport React from \"react\";\nimport { Input } from \"../index\";\nimport \"jest-dom/extend-expect\";\nimport { render, cleanup } from \"react-testing-library\";\n\nafterEach(cleanup);\n\ndescribe(\"Input tests\", () => {\n    test(\"passes expected props to render prop\", () => {\n        const { renderArg } = setup();\n\n        expect(renderArg).toContainKeys([\"value\", \"validation\", \"onChange\", \"onBlur\"]);\n    });\n\n    test(\"updates value via onChange\", () => {\n        const { renderArg } = setup();\n        expect(renderArg.value).toBe(\"init-value\");\n        renderArg.onChange(\"new-value\");\n        expect(renderArg.value).toBe(\"new-value\");\n        renderArg.onChange(\"third-value\");\n        expect(renderArg.value).toBe(\"third-value\");\n    });\n});\n\nfunction setup(props = {}) {\n    let renderArg = {};\n    const renderProp = jest.fn(controllerArg => {\n        Object.assign(renderArg, controllerArg);\n        return null;\n    });\n\n    class Test extends React.Component {\n        state = { value: \"init-value\" };\n\n        onChange = value => {\n            this.setState({ value });\n        };\n\n        render() {\n            return (\n                <Input\n                    {...props}\n                    value={this.state.value}\n                    onChange={callAll(props.onChange, this.onChange)}\n                >\n                    {renderProp}\n                </Input>\n            );\n        }\n    }\n\n    const utils = render(<Test />);\n\n    return { renderArg, ...utils };\n}\n\n/**\n * This return a function that will call all the given functions with\n * the arguments with which it's called. It does a null-check before\n * attempting to call the functions and can take any number of functions.\n * @param {...Function} fns the functions to call\n * @return {Function} the function that calls all the functions\n */\nfunction callAll(...fns) {\n    return (...args) => {\n        fns.forEach(fn => {\n            fn && fn(...args);\n        });\n    };\n}\n"],"file":"Input.test.js"}