{"version":3,"sources":["../../src/Select/Select.tsx"],"names":["React","Select","RmwcSelect","FormElementMessage","css","classNames","noLabel","height","paddingTop","skipProps","getRmwcProps","props","newProps","Object","keys","filter","name","includes","forEach","value","description","validation","other","className","label","e","onChange","target","isValid","message","defaultProps"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAM,IAAIC,UAAnB,QAAqE,cAArE;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AA6BA,IAAMC,OAAO,gBAAGF,GAAG,CAAC;AAChB,kBAAgB;AACZG,IAAAA,MAAM,EAAE,EADI;AAEZ,mCAA+B;AAC3BC,MAAAA,UAAU,EAAE;AADe,KAFnB;AAKZ,yBAAqB;AACjB,qCAA+B;AAC3BD,QAAAA,MAAM,EAAE,EADmB;AAE3BC,QAAAA,UAAU,EAAE;AAFe;AADd;AALT;AADA,CAAD,mBAAnB;AAeA;;;;AAGA,IAAMC,SAAS,GAAG,CAAC,UAAD,CAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC1B,MAAMC,QAAQ,GAAG,EAAjB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EACKI,MADL,CACY,UAAAC,IAAI;AAAA,WAAI,CAACP,SAAS,CAACQ,QAAV,CAAmBD,IAAnB,CAAL;AAAA,GADhB,EAEKE,OAFL,CAEa,UAAAF,IAAI;AAAA,WAAKJ,QAAQ,CAACI,IAAD,CAAR,GAAiBL,KAAK,CAACK,IAAD,CAA3B;AAAA,GAFjB;AAIA,SAAOJ,QAAP;AACH,CAPD;;AASA,OAAO,IAAMX,MAAM,GAAG,SAATA,MAAS,CAACU,KAAD,EAAwB;AAAA,MAClCQ,KADkC,GACWR,KADX,CAClCQ,KADkC;AAAA,MAC3BC,WAD2B,GACWT,KADX,CAC3BS,WAD2B;AAAA,MACdC,UADc,GACWV,KADX,CACdU,UADc;AAAA,MACCC,KADD,4BACWX,KADX;;AAG1C,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,UAAD,oBACQD,YAAY,CAACY,KAAD,CADpB;AAEI,IAAA,KAAK,EAAEH,KAFX;AAGI,IAAA,SAAS,EAAEd,UAAU,CAAC,kBAAD,EAAqBM,KAAK,CAACY,SAA3B,sBAChBjB,OADgB,EACN,CAACK,KAAK,CAACa,KADD,EAHzB;AAMI,IAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACXd,MAAAA,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAgBD,CAAC,CAACE,MAAH,CAAkBR,KAAjC,CAAlB;AACH;AARL,KADJ,EAYKE,UAAU,CAACO,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,IAAA,KAAK;AAAzB,KAA2BP,UAAU,CAACQ,OAAtC,CAbR,EAgBKR,UAAU,CAACO,OAAX,KAAuB,KAAvB,IAAgCR,WAAhC,iBACG,oBAAC,kBAAD,QAAqBA,WAArB,CAjBR,CADJ;AAsBH,CAzBM;AA2BPnB,MAAM,CAAC6B,YAAP,GAAsB;AAClBT,EAAAA,UAAU,EAAE;AAAEO,IAAAA,OAAO,EAAE;AAAX;AADM,CAAtB;AAIA,eAAe3B,MAAf","sourcesContent":["import * as React from \"react\";\nimport { Select as RmwcSelect, SelectProps as RmwcSelectProps } from \"@rmwc/select\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { FormComponentProps } from \"./../types\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\n\ntype SelectProps = FormComponentProps &\n    RmwcSelectProps & {\n        // Component label.\n        label?: string;\n\n        // Is checkbox disabled?\n        disabled?: boolean;\n\n        // Description beneath the select.\n        description?: string;\n\n        // Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label.\n        placeholder?: string;\n\n        // Makes the Select have a visual box.\n        box?: string;\n\n        // One or more <option> or <optgroup> elements.\n        children?: Array<React.ReactElement<\"option\"> | React.ReactElement<\"optgroup\">>;\n\n        // IconProps for the root element. By default, additional props spread to the native select element.\n        rootProps?: Object;\n\n        // A className for the root element.\n        className?: string;\n    };\n\nconst noLabel = css({\n    \"&.mdc-select\": {\n        height: 35,\n        \".mdc-select__native-control\": {\n            paddingTop: 0\n        },\n        \"&.mdc-select--box\": {\n            \".mdc-select__native-control\": {\n                height: 35,\n                paddingTop: 5\n            }\n        }\n    }\n});\n\n/**\n * Select component lets users choose a value from given set of options.\n */\nconst skipProps = [\"validate\"];\n\nconst getRmwcProps = props => {\n    const newProps = {};\n    Object.keys(props)\n        .filter(name => !skipProps.includes(name))\n        .forEach(name => (newProps[name] = props[name]));\n\n    return newProps;\n};\n\nexport const Select = (props: SelectProps) => {\n    const { value, description, validation, ...other } = props;\n\n    return (\n        <React.Fragment>\n            <RmwcSelect\n                {...getRmwcProps(other)}\n                value={value}\n                className={classNames(\"webiny-ui-select\", props.className, {\n                    [noLabel]: !props.label\n                })}\n                onChange={e => {\n                    props.onChange && props.onChange((e.target as any).value);\n                }}\n            />\n\n            {validation.isValid === false && (\n                <FormElementMessage error>{validation.message}</FormElementMessage>\n            )}\n\n            {validation.isValid !== false && description && (\n                <FormElementMessage>{description}</FormElementMessage>\n            )}\n        </React.Fragment>\n    );\n};\n\nSelect.defaultProps = {\n    validation: { isValid: null }\n};\n\nexport default Select;\n"],"file":"Select.js"}