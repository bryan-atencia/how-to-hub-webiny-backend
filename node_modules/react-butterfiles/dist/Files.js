"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _bytes = _interopRequireDefault(require("bytes"));

var _readFileContent = _interopRequireDefault(require("./utils/readFileContent"));

var _generateId = _interopRequireDefault(require("./utils/generateId"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Files =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Files, _React$Component);

  function Files() {
    var _this;

    (0, _classCallCheck2.default)(this, Files);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Files).call(this));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "input", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "browseFilesPassedParams", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "validateFiles", function (files) {
      var _this$props = _this.props,
          multiple = _this$props.multiple,
          multipleMaxSize = _this$props.multipleMaxSize,
          multipleMaxCount = _this$props.multipleMaxCount,
          accept = _this$props.accept,
          maxSize = _this$props.maxSize;
      var errors = [];
      var multipleFileSize = 0;

      if (!multiple && files.length > 1) {
        errors.push({
          id: (0, _generateId.default)(),
          type: "multipleNotAllowed"
        });
        return errors;
      }

      for (var index = 0; index < files.length; index++) {
        var file = files[index];

        if (Array.isArray(accept) && accept.length && accept.indexOf(file.type) === -1) {
          errors.push({
            id: (0, _generateId.default)(),
            index: index,
            file: file,
            type: "unsupportedFileType"
          });
        } else if (maxSize) {
          if (file.size > (0, _bytes.default)(maxSize)) {
            errors.push({
              id: (0, _generateId.default)(),
              index: index,
              file: file,
              type: "maxSizeExceeded"
            });
          }
        }

        if (multiple) {
          multipleFileSize += file.size;
        }
      }

      if (multiple) {
        if (multipleMaxSize && multipleFileSize > (0, _bytes.default)(multipleMaxSize)) {
          errors.push({
            id: (0, _generateId.default)(),
            type: "multipleMaxSizeExceeded",
            multipleFileSize: multipleFileSize,
            multipleMaxSize: (0, _bytes.default)(multipleMaxSize)
          });
        }

        if (multipleMaxCount && files.length > multipleMaxCount) {
          errors.push({
            id: (0, _generateId.default)(),
            type: "multipleMaxCountExceeded",
            multipleCount: files.length,
            multipleMaxCount: multipleMaxCount
          });
        }
      }

      return errors;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "processSelectedFiles",
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(eventFiles) {
        var _this$props2, convertToBase64, onSuccess, onError, _assertThisInitialize, browseFilesPassedParams, callbacks, files, errors, i, file;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(eventFiles.length === 0)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _this$props2 = _this.props, convertToBase64 = _this$props2.convertToBase64, onSuccess = _this$props2.onSuccess, onError = _this$props2.onError;
                _assertThisInitialize = (0, _assertThisInitialized2.default)(_this), browseFilesPassedParams = _assertThisInitialize.browseFilesPassedParams;
                callbacks = {
                  onSuccess: onSuccess,
                  onError: onError
                };

                if (browseFilesPassedParams && browseFilesPassedParams.onSuccess) {
                  callbacks.onSuccess = browseFilesPassedParams.onSuccess;
                }

                if (browseFilesPassedParams && browseFilesPassedParams.onError) {
                  callbacks.onError = browseFilesPassedParams.onError;
                }

                files = (0, _toConsumableArray2.default)(eventFiles).map(function (file) {
                  return {
                    id: (0, _generateId.default)(),
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    src: {
                      file: file,
                      base64: null
                    }
                  };
                });
                errors = _this.validateFiles(files);

                if (!errors.length) {
                  _context.next = 13;
                  break;
                }

                callbacks.onError && callbacks.onError(errors, files);
                _context.next = 24;
                break;

              case 13:
                if (!convertToBase64) {
                  _context.next = 23;
                  break;
                }

                i = 0;

              case 15:
                if (!(i < files.length)) {
                  _context.next = 23;
                  break;
                }

                file = files[i].src.file;
                _context.next = 19;
                return (0, _readFileContent.default)(file);

              case 19:
                files[i].src.base64 = _context.sent;

              case 20:
                i++;
                _context.next = 15;
                break;

              case 23:
                callbacks.onSuccess && callbacks.onSuccess(files);

              case 24:
                // Reset the browseFiles arguments.
                _this.input.value = "";
                _this.browseFilesPassedParams = null;

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDropFilesHandler",
    /*#__PURE__*/
    function () {
      var _ref3 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(_ref2) {
        var e, onSuccess, onError;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                e = _ref2.e, onSuccess = _ref2.onSuccess, onError = _ref2.onError;
                _this.browseFilesPassedParams = {
                  onSuccess: onSuccess,
                  onError: onError
                };
                _context2.t0 = e.dataTransfer && e.dataTransfer.files;

                if (!_context2.t0) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 6;
                return _this.processSelectedFiles(e.dataTransfer.files);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "browseFilesHandler", function (_ref4) {
      var onSuccess = _ref4.onSuccess,
          onError = _ref4.onError;
      _this.browseFilesPassedParams = {
        onSuccess: onSuccess,
        onError: onError
      };
      _this.input && _this.input.click();
    });
    _this.input = null;
    _this.browseFilesPassedParams = null;
    _this.id = (0, _generateId.default)();
    return _this;
  }

  (0, _createClass2.default)(Files, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          multiple = _this$props3.multiple,
          accept = _this$props3.accept,
          id = _this$props3.id;
      return React.createElement(React.Fragment, null, this.props.children({
        getLabelProps: function getLabelProps(props) {
          return _objectSpread({}, props, {
            htmlFor: id || _this2.id
          });
        },
        validateFiles: this.validateFiles,
        browseFiles: function browseFiles() {
          var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              onSuccess = _ref5.onSuccess,
              onError = _ref5.onError;

          _this2.browseFilesHandler({
            onSuccess: onSuccess,
            onError: onError
          });
        },
        getDropZoneProps: function getDropZoneProps() {
          var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              onSuccess = _ref6.onSuccess,
              onError = _ref6.onError,
              _onDragOver = _ref6.onDragOver,
              _onDrop = _ref6.onDrop,
              rest = (0, _objectWithoutProperties2.default)(_ref6, ["onSuccess", "onError", "onDragOver", "onDrop"]);

          return _objectSpread({}, rest, {
            onDragOver: function onDragOver(e) {
              e.preventDefault();
              typeof _onDragOver === "function" && _onDragOver();
            },
            onDrop: function () {
              var _onDrop2 = (0, _asyncToGenerator2.default)(
              /*#__PURE__*/
              _regenerator.default.mark(function _callee3(e) {
                return _regenerator.default.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        e.preventDefault();
                        typeof _onDrop === "function" && _onDrop();

                        _this2.onDropFilesHandler({
                          e: e,
                          onSuccess: onSuccess,
                          onError: onError
                        });

                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              function onDrop(_x3) {
                return _onDrop2.apply(this, arguments);
              }

              return onDrop;
            }()
          });
        }
      }), React.createElement("input", {
        id: id || this.id,
        ref: function ref(_ref7) {
          if (_ref7) {
            _this2.input = _ref7;
          }
        },
        accept: accept,
        style: {
          display: "none"
        },
        type: "file",
        multiple: multiple,
        onChange: function onChange(e) {
          return _this2.processSelectedFiles(e.target.files);
        }
      }));
    }
  }]);
  return Files;
}(React.Component);

(0, _defineProperty2.default)(Files, "defaultProps", {
  accept: [],
  multiple: false,
  maxSize: "2mb",
  multipleMaxSize: "10mb",
  multipleMaxCount: null,
  convertToBase64: false
});
var _default = Files;
exports.default = _default;
//# sourceMappingURL=Files.js.map