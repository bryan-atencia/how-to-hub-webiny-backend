{"version":3,"sources":["../src/Files.js"],"names":["Files","files","props","multiple","multipleMaxSize","multipleMaxCount","accept","maxSize","errors","multipleFileSize","length","push","id","type","index","file","Array","isArray","indexOf","size","multipleCount","eventFiles","convertToBase64","onSuccess","onError","browseFilesPassedParams","callbacks","map","name","src","base64","validateFiles","i","input","value","e","dataTransfer","processSelectedFiles","click","children","getLabelProps","htmlFor","browseFiles","browseFilesHandler","getDropZoneProps","onDragOver","onDrop","rest","preventDefault","onDropFilesHandler","ref","display","target","React","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport bytes from \"bytes\";\nimport readFileContent from \"./utils/readFileContent\";\nimport generateId from \"./utils/generateId\";\n\nexport type SelectedFile = {\n    id: string,\n    name: string,\n    type: string,\n    size: number,\n    src: {\n        file: ?File,\n        base64: ?string\n    }\n};\n\nexport type FileError = {\n    id: string,\n    type:\n        | \"unsupportedFileType\"\n        | \"maxSizeExceeded\"\n        | \"multipleMaxSizeExceeded\"\n        | \"multipleMaxCountExceeded\"\n        | \"multipleNotAllowed\",\n    file?: SelectedFile | File\n};\n\nexport type BrowseFilesParams = {\n    onSuccess?: (files: Array<SelectedFile>) => void,\n    onError?: (errors: Array<FileError>, files: Array<SelectedFile>) => void\n};\n\nexport type RenderPropParams = {\n    browseFiles: BrowseFilesParams => void,\n    getDropZoneProps: (additionalProps: ?Object) => Object,\n    getLabelProps: (additionalProps: ?Object) => Object\n};\n\nexport type FilesRules = {\n    accept: Array<string>,\n    multiple: boolean,\n    maxSize: string,\n    multipleMaxSize: string,\n    multipleMaxCount: ?number,\n    convertToBase64: boolean,\n    onSuccess?: (files: Array<SelectedFile>) => void,\n    onError?: (errors: Array<FileError>, files: Array<SelectedFile>) => void\n};\n\nexport type Props = FilesRules & {\n    children: RenderPropParams => React.Node,\n    id?: string\n};\n\nclass Files extends React.Component<Props> {\n    static defaultProps = {\n        accept: [],\n        multiple: false,\n        maxSize: \"2mb\",\n        multipleMaxSize: \"10mb\",\n        multipleMaxCount: null,\n        convertToBase64: false\n    };\n\n    input: any;\n    browseFilesPassedParams: ?BrowseFilesParams;\n    id: string;\n    constructor() {\n        super();\n        this.input = null;\n        this.browseFilesPassedParams = null;\n        this.id = generateId();\n    }\n\n    validateFiles = (files: Array<SelectedFile> | Array<File>): Array<FileError> => {\n        const { multiple, multipleMaxSize, multipleMaxCount, accept, maxSize } = this.props;\n\n        const errors: Array<FileError> = [];\n        let multipleFileSize = 0;\n\n        if (!multiple && files.length > 1) {\n            errors.push({\n                id: generateId(),\n                type: \"multipleNotAllowed\"\n            });\n\n            return errors;\n        }\n\n        for (let index = 0; index < files.length; index++) {\n            let file = files[index];\n\n            if (Array.isArray(accept) && accept.length && accept.indexOf(file.type) === -1) {\n                errors.push({\n                    id: generateId(),\n                    index,\n                    file,\n                    type: \"unsupportedFileType\"\n                });\n            } else if (maxSize) {\n                if (file.size > bytes(maxSize)) {\n                    errors.push({\n                        id: generateId(),\n                        index,\n                        file,\n                        type: \"maxSizeExceeded\"\n                    });\n                }\n            }\n\n            if (multiple) {\n                multipleFileSize += file.size;\n            }\n        }\n\n        if (multiple) {\n            if (multipleMaxSize && multipleFileSize > bytes(multipleMaxSize)) {\n                errors.push({\n                    id: generateId(),\n                    type: \"multipleMaxSizeExceeded\",\n                    multipleFileSize,\n                    multipleMaxSize: bytes(multipleMaxSize)\n                });\n            }\n\n            if (multipleMaxCount && files.length > multipleMaxCount) {\n                errors.push({\n                    id: generateId(),\n                    type: \"multipleMaxCountExceeded\",\n                    multipleCount: files.length,\n                    multipleMaxCount\n                });\n            }\n        }\n\n        return errors;\n    };\n\n    processSelectedFiles = async (eventFiles: Array<File>) => {\n        if (eventFiles.length === 0) {\n            return;\n        }\n\n        const { convertToBase64, onSuccess, onError } = this.props;\n        const { browseFilesPassedParams } = this;\n        const callbacks = {\n            onSuccess,\n            onError\n        };\n\n        if (browseFilesPassedParams && browseFilesPassedParams.onSuccess) {\n            callbacks.onSuccess = browseFilesPassedParams.onSuccess;\n        }\n\n        if (browseFilesPassedParams && browseFilesPassedParams.onError) {\n            callbacks.onError = browseFilesPassedParams.onError;\n        }\n\n        const files: Array<SelectedFile> = [...eventFiles].map(file => {\n            return {\n                id: generateId(),\n                name: file.name,\n                type: file.type,\n                size: file.size,\n                src: {\n                    file,\n                    base64: null\n                }\n            };\n        });\n\n        const errors = this.validateFiles(files);\n\n        if (errors.length) {\n            callbacks.onError && callbacks.onError(errors, files);\n        } else {\n            if (convertToBase64) {\n                for (let i = 0; i < files.length; i++) {\n                    const file: File = (files[i].src.file: any);\n                    files[i].src.base64 = await readFileContent(file);\n                }\n            }\n\n            callbacks.onSuccess && callbacks.onSuccess(files);\n        }\n\n        // Reset the browseFiles arguments.\n        this.input.value = \"\";\n        this.browseFilesPassedParams = null;\n    };\n\n    /**\n     * Extracted into a separate method just for testing purposes.\n     */\n    onDropFilesHandler = async ({ e, onSuccess, onError }: Object) => {\n        this.browseFilesPassedParams = { onSuccess, onError };\n        e.dataTransfer &&\n            e.dataTransfer.files &&\n            (await this.processSelectedFiles(e.dataTransfer.files));\n    };\n\n    /**\n     * Extracted into a separate method just for testing purposes.\n     */\n    browseFilesHandler = ({ onSuccess, onError }: Object) => {\n        this.browseFilesPassedParams = { onSuccess, onError };\n        this.input && this.input.click();\n    };\n\n    render() {\n        const { multiple, accept, id } = this.props;\n        return (\n            <React.Fragment>\n                {this.props.children({\n                    getLabelProps: (props: ?Object) => {\n                        return {\n                            ...props,\n                            htmlFor: id || this.id\n                        };\n                    },\n                    validateFiles: this.validateFiles,\n                    browseFiles: ({ onSuccess, onError }: BrowseFilesParams = {}) => {\n                        this.browseFilesHandler({ onSuccess, onError });\n                    },\n                    getDropZoneProps: ({\n                        onSuccess,\n                        onError,\n                        onDragOver,\n                        onDrop,\n                        ...rest\n                    }: Object = {}) => {\n                        return {\n                            ...rest,\n                            onDragOver: e => {\n                                e.preventDefault();\n                                typeof onDragOver === \"function\" && onDragOver();\n                            },\n                            onDrop: async e => {\n                                e.preventDefault();\n                                typeof onDrop === \"function\" && onDrop();\n                                this.onDropFilesHandler({ e, onSuccess, onError });\n                            }\n                        };\n                    }\n                })}\n\n                <input\n                    id={id || this.id}\n                    ref={ref => {\n                        if (ref) {\n                            this.input = ref;\n                        }\n                    }}\n                    accept={accept}\n                    style={{ display: \"none\" }}\n                    type=\"file\"\n                    multiple={multiple}\n                    onChange={e => this.processSelectedFiles(e.target.files)}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Files;\n"],"file":"Files.js"}